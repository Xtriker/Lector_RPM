
DMA-Timer-Frecuency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003940  08003940  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003948  08003948  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  0800395c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800395c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3c2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b54  00000000  00000000  0002d3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  0002ef58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  0002fd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019af8  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f01  00000000  00000000  0004a598  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5351  00000000  00000000  00054499  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f97ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  000f9868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080038e0 	.word	0x080038e0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080038e0 	.word	0x080038e0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb56 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f809 	bl	80004ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f94a 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f92a 	bl	8000734 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8f8 	bl	80006d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e4:	f000 f85c 	bl	80005a0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x1c>

080004ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b0a4      	sub	sp, #144	; 0x90
 80004ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004f4:	2244      	movs	r2, #68	; 0x44
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 f9e9 	bl	80038d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2234      	movs	r2, #52	; 0x34
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f003 f9db 	bl	80038d0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f000 ffb9 	bl	8001494 <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000528:	f000 f9ae 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000536:	2310      	movs	r3, #16
 8000538:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053a:	2300      	movs	r3, #0
 800053c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fffc 	bl	8001540 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800054e:	f000 f99b 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000556:	2301      	movs	r3, #1
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fc4d 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000578:	f000 f986 	bl	8000888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800057c:	2302      	movs	r3, #2
 800057e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fe44 	bl	8002214 <HAL_RCCEx_PeriphCLKConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000592:	f000 f979 	bl	8000888 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3790      	adds	r7, #144	; 0x90
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	; 0x40
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <MX_TIM2_Init+0x130>)
 80005de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <MX_TIM2_Init+0x130>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <MX_TIM2_Init+0x130>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80005f0:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <MX_TIM2_Init+0x130>)
 80005f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <MX_TIM2_Init+0x130>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <MX_TIM2_Init+0x130>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000604:	4832      	ldr	r0, [pc, #200]	; (80006d0 <MX_TIM2_Init+0x130>)
 8000606:	f001 ff8b 	bl	8002520 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000610:	f000 f93a 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800061a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800061e:	4619      	mov	r1, r3
 8000620:	482b      	ldr	r0, [pc, #172]	; (80006d0 <MX_TIM2_Init+0x130>)
 8000622:	f002 f879 	bl	8002718 <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800062c:	f000 f92c 	bl	8000888 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000630:	4827      	ldr	r0, [pc, #156]	; (80006d0 <MX_TIM2_Init+0x130>)
 8000632:	f001 ffa0 	bl	8002576 <HAL_TIM_IC_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800063c:	f000 f924 	bl	8000888 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000640:	2304      	movs	r3, #4
 8000642:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <MX_TIM2_Init+0x130>)
 8000658:	f002 f917 	bl	800288a <HAL_TIM_SlaveConfigSynchro>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000662:	f000 f911 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <MX_TIM2_Init+0x130>)
 8000676:	f002 fbdd 	bl	8002e34 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8000680:	f000 f902 	bl	8000888 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000684:	2302      	movs	r3, #2
 8000686:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000688:	2302      	movs	r3, #2
 800068a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	4619      	mov	r1, r3
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_TIM2_Init+0x130>)
 800069c:	f001 ffa0 	bl	80025e0 <HAL_TIM_IC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80006a6:	f000 f8ef 	bl	8000888 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	2204      	movs	r2, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_TIM2_Init+0x130>)
 80006ba:	f001 ff91 	bl	80025e0 <HAL_TIM_IC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0x128>
  {
    Error_Handler();
 80006c4:	f000 f8e0 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3740      	adds	r7, #64	; 0x40
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000070 	.word	0x20000070

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000718:	f002 fbf2 	bl	8002f00 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f8b1 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000b0 	.word	0x200000b0
 8000730:	40004400 	.word	0x40004400

08000734 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_DMA_Init+0x38>)
 800073c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <MX_DMA_Init+0x38>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6493      	str	r3, [r2, #72]	; 0x48
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_DMA_Init+0x38>)
 8000748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2011      	movs	r0, #17
 8000758:	f000 fb65 	bl	8000e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800075c:	2011      	movs	r0, #17
 800075e:	f000 fb7e 	bl	8000e5e <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_GPIO_Init+0x108>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a3b      	ldr	r2, [pc, #236]	; (8000878 <MX_GPIO_Init+0x108>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <MX_GPIO_Init+0x108>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b36      	ldr	r3, [pc, #216]	; (8000878 <MX_GPIO_Init+0x108>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a35      	ldr	r2, [pc, #212]	; (8000878 <MX_GPIO_Init+0x108>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <MX_GPIO_Init+0x108>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x108>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <MX_GPIO_Init+0x108>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x108>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_GPIO_Init+0x108>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a29      	ldr	r2, [pc, #164]	; (8000878 <MX_GPIO_Init+0x108>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_GPIO_Init+0x108>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	21b0      	movs	r1, #176	; 0xb0
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fe2b 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	4820      	ldr	r0, [pc, #128]	; (800087c <MX_GPIO_Init+0x10c>)
 80007fa:	f000 fe25 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0x110>)
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	481c      	ldr	r0, [pc, #112]	; (8000884 <MX_GPIO_Init+0x114>)
 8000814:	f000 fca6 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000818:	23b0      	movs	r3, #176	; 0xb0
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f000 fc97 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f000 fc8a 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0x10c>)
 800086a:	f000 fc7b 	bl	8001164 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400
 8000880:	10210000 	.word	0x10210000
 8000884:	48000800 	.word	0x48000800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000900:	d15a      	bne.n	80009b8 <HAL_TIM_Base_MspInit+0xd8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <HAL_TIM_Base_MspInit+0xe0>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <HAL_TIM_Base_MspInit+0xe0>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <HAL_TIM_Base_MspInit+0xe0>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <HAL_TIM_Base_MspInit+0xe0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <HAL_TIM_Base_MspInit+0xe0>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <HAL_TIM_Base_MspInit+0xe0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000932:	2302      	movs	r3, #2
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000942:	2301      	movs	r3, #1
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fc08 	bl	8001164 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_TIM_Base_MspInit+0xe8>)
 8000958:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 800095c:	2204      	movs	r2, #4
 800095e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 800097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000980:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 800098a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 8000992:	f000 fa7f 	bl	8000e94 <HAL_DMA_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_TIM_Base_MspInit+0xc0>
    {
      Error_Handler();
 800099c:	f7ff ff74 	bl	8000888 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 80009b0:	631a      	str	r2, [r3, #48]	; 0x30
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_TIM_Base_MspInit+0xe4>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	20000028 	.word	0x20000028
 80009c8:	40020080 	.word	0x40020080

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0x7c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d128      	bne.n	8000a40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x80>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <HAL_UART_MspInit+0x80>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0x80>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0x80>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_UART_MspInit+0x80>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_UART_MspInit+0x80>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f000 fb92 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40021000 	.word	0x40021000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f8c6 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <DMA1_Channel7_IRQHandler+0x10>)
 8000ab2:	f000 faa7 	bl	8001004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000028 	.word	0x20000028

08000ac0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <SystemInit+0x64>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <SystemInit+0x64>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <SystemInit+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <SystemInit+0x68>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <SystemInit+0x68>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <SystemInit+0x68>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <SystemInit+0x68>)
 8000aec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <SystemInit+0x68>)
 8000af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <SystemInit+0x68>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <SystemInit+0x68>)
 8000b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <SystemInit+0x68>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SystemInit+0x64>)
 8000b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b16:	609a      	str	r2, [r3, #8]
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	40021000 	.word	0x40021000

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
	ldr	r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <LoopForever+0x16>)
	cmp	r2, r3
 8000b52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b56:	f7ff ffb3 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f002 fe95 	bl	8003888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fcb5 	bl	80004cc <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b64:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000b68:	08003950 	.word	0x08003950
	ldr	r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b70:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b74:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b78:	20000134 	.word	0x20000134

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_Init+0x3c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_Init+0x3c>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f93a 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 f80f 	bl	8000bc0 <HAL_InitTick>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	e001      	b.n	8000bb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bae:	f7ff fe73 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_InitTick+0x68>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d022      	beq.n	8000c1a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_InitTick+0x68>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f946 	bl	8000e7a <HAL_SYSTICK_Config>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10f      	bne.n	8000c14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	d809      	bhi.n	8000c0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c02:	f000 f910 	bl	8000e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_InitTick+0x70>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e007      	b.n	8000c1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e004      	b.n	8000c1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e001      	b.n	8000c1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c44:	6013      	str	r3, [r2, #0]
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20000130 	.word	0x20000130
 8000c54:	20000008 	.word	0x20000008

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000130 	.word	0x20000130

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff3e 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff31 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffa2 	bl	8000dcc <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e098      	b.n	8000fd8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <HAL_DMA_Init+0x150>)
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d80f      	bhi.n	8000ed2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <HAL_DMA_Init+0x154>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a4b      	ldr	r2, [pc, #300]	; (8000fec <HAL_DMA_Init+0x158>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	009a      	lsls	r2, r3, #2
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a48      	ldr	r2, [pc, #288]	; (8000ff0 <HAL_DMA_Init+0x15c>)
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed0:	e00e      	b.n	8000ef0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b46      	ldr	r3, [pc, #280]	; (8000ff4 <HAL_DMA_Init+0x160>)
 8000eda:	4413      	add	r3, r2
 8000edc:	4a43      	ldr	r2, [pc, #268]	; (8000fec <HAL_DMA_Init+0x158>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	009a      	lsls	r2, r3, #2
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a42      	ldr	r2, [pc, #264]	; (8000ff8 <HAL_DMA_Init+0x164>)
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f4a:	d039      	beq.n	8000fc0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a27      	ldr	r2, [pc, #156]	; (8000ff0 <HAL_DMA_Init+0x15c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d11a      	bne.n	8000f8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f56:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_DMA_Init+0x168>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f003 031c 	and.w	r3, r3, #28
 8000f62:	210f      	movs	r1, #15
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4924      	ldr	r1, [pc, #144]	; (8000ffc <HAL_DMA_Init+0x168>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <HAL_DMA_Init+0x168>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	f003 031c 	and.w	r3, r3, #28
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	491d      	ldr	r1, [pc, #116]	; (8000ffc <HAL_DMA_Init+0x168>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]
 8000f8a:	e019      	b.n	8000fc0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_DMA_Init+0x16c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f003 031c 	and.w	r3, r3, #28
 8000f98:	210f      	movs	r1, #15
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	4917      	ldr	r1, [pc, #92]	; (8001000 <HAL_DMA_Init+0x16c>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_DMA_Init+0x16c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6859      	ldr	r1, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f003 031c 	and.w	r3, r3, #28
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	4911      	ldr	r1, [pc, #68]	; (8001000 <HAL_DMA_Init+0x16c>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40020407 	.word	0x40020407
 8000fe8:	bffdfff8 	.word	0xbffdfff8
 8000fec:	cccccccd 	.word	0xcccccccd
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	bffdfbf8 	.word	0xbffdfbf8
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	400200a8 	.word	0x400200a8
 8001000:	400204a8 	.word	0x400204a8

08001004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	f003 031c 	and.w	r3, r3, #28
 8001024:	2204      	movs	r2, #4
 8001026:	409a      	lsls	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d026      	beq.n	800107e <HAL_DMA_IRQHandler+0x7a>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	2b00      	cmp	r3, #0
 8001038:	d021      	beq.n	800107e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0320 	and.w	r3, r3, #32
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0204 	bic.w	r2, r2, #4
 8001056:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f003 021c 	and.w	r2, r3, #28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	2104      	movs	r1, #4
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	2b00      	cmp	r3, #0
 8001072:	d071      	beq.n	8001158 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800107c:	e06c      	b.n	8001158 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f003 031c 	and.w	r3, r3, #28
 8001086:	2202      	movs	r2, #2
 8001088:	409a      	lsls	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d02e      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xec>
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d029      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10b      	bne.n	80010c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020a 	bic.w	r2, r2, #10
 80010b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f003 021c 	and.w	r2, r3, #28
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	2102      	movs	r1, #2
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d038      	beq.n	8001158 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010ee:	e033      	b.n	8001158 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f003 031c 	and.w	r3, r3, #28
 80010f8:	2208      	movs	r2, #8
 80010fa:	409a      	lsls	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d02a      	beq.n	800115a <HAL_DMA_IRQHandler+0x156>
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d025      	beq.n	800115a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 020e 	bic.w	r2, r2, #14
 800111c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f003 021c 	and.w	r2, r3, #28
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001158:	bf00      	nop
 800115a:	bf00      	nop
}
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e14e      	b.n	8001412 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8140 	beq.w	800140c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d00b      	beq.n	80011ac <HAL_GPIO_Init+0x48>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d007      	beq.n	80011ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a0:	2b11      	cmp	r3, #17
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b12      	cmp	r3, #18
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0xea>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b12      	cmp	r3, #18
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 809a 	beq.w	800140c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012dc:	4a54      	ldr	r2, [pc, #336]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	; 0x60
 80012e4:	4b52      	ldr	r3, [pc, #328]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1e0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_GPIO_Init+0x2d4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1dc>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_GPIO_Init+0x2d8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1d8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a44      	ldr	r2, [pc, #272]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1d4>
 8001334:	2303      	movs	r3, #3
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001338:	2307      	movs	r3, #7
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001344:	2300      	movs	r3, #0
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001356:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001364:	4b37      	ldr	r3, [pc, #220]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001388:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	f47f aea9 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	40010400 	.word	0x40010400

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001464:	e002      	b.n	800146c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <HAL_PWREx_GetVoltageRange+0x18>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40007000 	.word	0x40007000

08001494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a2:	d130      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b0:	d038      	beq.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ba:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2232      	movs	r2, #50	; 0x32
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d8:	e002      	b.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ec:	d102      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f2      	bne.n	80014da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001500:	d110      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e00f      	b.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d007      	beq.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40007000 	.word	0x40007000
 8001538:	20000000 	.word	0x20000000
 800153c:	431bde83 	.word	0x431bde83

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f000 bc56 	b.w	8001e00 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001554:	4ba1      	ldr	r3, [pc, #644]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155e:	4b9f      	ldr	r3, [pc, #636]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80e6 	beq.w	8001742 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_RCC_OscConfig+0x4c>
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	f040 808d 	bne.w	800169e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b01      	cmp	r3, #1
 8001588:	f040 8089 	bne.w	800169e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800158c:	4b93      	ldr	r3, [pc, #588]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_RCC_OscConfig+0x66>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f000 bc2d 	b.w	8001e00 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015aa:	4b8c      	ldr	r3, [pc, #560]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d004      	beq.n	80015c0 <HAL_RCC_OscConfig+0x80>
 80015b6:	4b89      	ldr	r3, [pc, #548]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015be:	e005      	b.n	80015cc <HAL_RCC_OscConfig+0x8c>
 80015c0:	4b86      	ldr	r3, [pc, #536]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d224      	bcs.n	800161a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fdbd 	bl	8002154 <RCC_SetFlashLatencyFromMSIRange>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f000 bc0d 	b.w	8001e00 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e6:	4b7d      	ldr	r3, [pc, #500]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7c      	ldr	r2, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b7a      	ldr	r3, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	4977      	ldr	r1, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001604:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	4972      	ldr	r1, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e025      	b.n	8001666 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161a:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6f      	ldr	r2, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	496a      	ldr	r1, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001638:	4b68      	ldr	r3, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	4965      	ldr	r1, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd7c 	bl	8002154 <RCC_SetFlashLatencyFromMSIRange>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e3cc      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001666:	f000 fcb3 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 800166a:	4601      	mov	r1, r0
 800166c:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <HAL_RCC_OscConfig+0x2a0>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	fa21 f303 	lsr.w	r3, r1, r3
 8001682:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x2a4>)
 8001684:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <HAL_RCC_OscConfig+0x2a8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa98 	bl	8000bc0 <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d052      	beq.n	8001740 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	e3b0      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d032      	beq.n	800170c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016a6:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fad1 	bl	8000c58 <HAL_GetTick>
 80016b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ba:	f7ff facd 	bl	8000c58 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e399      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d8:	4b40      	ldr	r3, [pc, #256]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	493a      	ldr	r1, [pc, #232]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
 800170a:	e01a      	b.n	8001742 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800170c:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001718:	f7ff fa9e 	bl	8000c58 <HAL_GetTick>
 800171c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001720:	f7ff fa9a 	bl	8000c58 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e366      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1e0>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d073      	beq.n	8001836 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	2b08      	cmp	r3, #8
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x220>
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d10e      	bne.n	8001778 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d10b      	bne.n	8001778 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d063      	beq.n	8001834 <HAL_RCC_OscConfig+0x2f4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d15f      	bne.n	8001834 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e343      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x250>
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a15      	ldr	r2, [pc, #84]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0x28c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x274>
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x28c>
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a05      	ldr	r2, [pc, #20]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01b      	beq.n	800180c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fa40 	bl	8000c58 <HAL_GetTick>
 80017d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	e010      	b.n	80017fe <HAL_RCC_OscConfig+0x2be>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	080038f8 	.word	0x080038f8
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fa34 	bl	8000c58 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e300      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	4ba0      	ldr	r3, [pc, #640]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x2ac>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fa24 	bl	8000c58 <HAL_GetTick>
 8001810:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fa20 	bl	8000c58 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e2ec      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	4b96      	ldr	r3, [pc, #600]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x2d4>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d060      	beq.n	8001904 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x314>
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d119      	bne.n	8001882 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d116      	bne.n	8001882 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001854:	4b8a      	ldr	r3, [pc, #552]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x32c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e2c9      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b84      	ldr	r3, [pc, #528]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	4981      	ldr	r1, [pc, #516]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001880:	e040      	b.n	8001904 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d023      	beq.n	80018d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7c      	ldr	r2, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff f9df 	bl	8000c58 <HAL_GetTick>
 800189a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff f9db 	bl	8000c58 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e2a7      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b0:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b70      	ldr	r3, [pc, #448]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	496d      	ldr	r1, [pc, #436]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
 80018d0:	e018      	b.n	8001904 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b6b      	ldr	r3, [pc, #428]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6a      	ldr	r2, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80018d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff f9bb 	bl	8000c58 <HAL_GetTick>
 80018e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff f9b7 	bl	8000c58 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e283      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d07f      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d05f      	beq.n	80019d8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699a      	ldr	r2, [r3, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	429a      	cmp	r2, r3
 800192c:	d037      	beq.n	800199e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e25c      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01b      	beq.n	8001988 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001960:	f7ff f97a 	bl	8000c58 <HAL_GetTick>
 8001964:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff f976 	bl	8000c58 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b11      	cmp	r3, #17
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e242      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ef      	bne.n	8001968 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001988:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198e:	f023 0210 	bic.w	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	493a      	ldr	r1, [pc, #232]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001998:	4313      	orrs	r3, r2
 800199a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a4:	4a36      	ldr	r2, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff f953 	bl	8000c58 <HAL_GetTick>
 80019b2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff f94f 	bl	8000c58 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b11      	cmp	r3, #17
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e21b      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80019ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ef      	beq.n	80019b6 <HAL_RCC_OscConfig+0x476>
 80019d6:	e01b      	b.n	8001a10 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f936 	bl	8000c58 <HAL_GetTick>
 80019ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff f932 	bl	8000c58 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1fe      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ef      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80c1 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10e      	bne.n	8001a4e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_RCC_OscConfig+0x540>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCC_OscConfig+0x544>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_RCC_OscConfig+0x544>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x544>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7ff f8f7 	bl	8000c58 <HAL_GetTick>
 8001a6a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6c:	e00c      	b.n	8001a88 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f8f3 	bl	8000c58 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d905      	bls.n	8001a88 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e1bf      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a88:	4bb1      	ldr	r3, [pc, #708]	; (8001d50 <HAL_RCC_OscConfig+0x810>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ec      	beq.n	8001a6e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02c      	beq.n	8001afa <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001aa0:	4bac      	ldr	r3, [pc, #688]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	49a8      	ldr	r1, [pc, #672]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d010      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ac6:	4ba3      	ldr	r3, [pc, #652]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001acc:	4aa1      	ldr	r2, [pc, #644]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad6:	4b9f      	ldr	r3, [pc, #636]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001adc:	4a9d      	ldr	r2, [pc, #628]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae6:	e018      	b.n	8001b1a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ae8:	4b9a      	ldr	r3, [pc, #616]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aee:	4a99      	ldr	r2, [pc, #612]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af8:	e00f      	b.n	8001b1a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001afa:	4b96      	ldr	r3, [pc, #600]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	4a94      	ldr	r2, [pc, #592]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b0a:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b10:	4a90      	ldr	r2, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b12:	f023 0304 	bic.w	r3, r3, #4
 8001b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d016      	beq.n	8001b50 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f899 	bl	8000c58 <HAL_GetTick>
 8001b26:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f895 	bl	8000c58 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e15f      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b40:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ed      	beq.n	8001b2a <HAL_RCC_OscConfig+0x5ea>
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f882 	bl	8000c58 <HAL_GetTick>
 8001b54:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff f87e 	bl	8000c58 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e148      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6e:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ed      	bne.n	8001b58 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001b7c:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a74      	ldr	r2, [pc, #464]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01c      	beq.n	8001bee <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb4:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bba:	4a66      	ldr	r2, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f848 	bl	8000c58 <HAL_GetTick>
 8001bc8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bcc:	f7ff f844 	bl	8000c58 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e110      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ef      	beq.n	8001bcc <HAL_RCC_OscConfig+0x68c>
 8001bec:	e01b      	b.n	8001c26 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf4:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f82b 	bl	8000c58 <HAL_GetTick>
 8001c02:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c06:	f7ff f827 	bl	8000c58 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0f3      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c18:	4b4e      	ldr	r3, [pc, #312]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ef      	bne.n	8001c06 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80e7 	beq.w	8001dfe <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 80b7 	bne.w	8001da8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d124      	bne.n	8001c98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d11b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d113      	bne.n	8001c98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	3b01      	subs	r3, #1
 8001c92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d061      	beq.n	8001d5c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d056      	beq.n	8001d4c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2c      	ldr	r2, [pc, #176]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001caa:	f7fe ffd5 	bl	8000c58 <HAL_GetTick>
 8001cae:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7fe ffd1 	bl	8000c58 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e09d      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_OscConfig+0x818>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ce0:	3a01      	subs	r2, #1
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	4311      	orrs	r1, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cea:	0212      	lsls	r2, r2, #8
 8001cec:	4311      	orrs	r1, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cf2:	0852      	lsrs	r2, r2, #1
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	0552      	lsls	r2, r2, #21
 8001cf8:	4311      	orrs	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cfe:	0852      	lsrs	r2, r2, #1
 8001d00:	3a01      	subs	r2, #1
 8001d02:	0652      	lsls	r2, r2, #25
 8001d04:	430a      	orrs	r2, r1
 8001d06:	4913      	ldr	r1, [pc, #76]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d24:	f7fe ff98 	bl	8000c58 <HAL_GetTick>
 8001d28:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7fe ff94 	bl	8000c58 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e060      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_OscConfig+0x814>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d4a:	e058      	b.n	8001dfe <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e057      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
 8001d50:	40007000 	.word	0x40007000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d14a      	bne.n	8001dfe <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d80:	f7fe ff6a 	bl	8000c58 <HAL_GetTick>
 8001d84:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe ff66 	bl	8000c58 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e032      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x848>
 8001da6:	e02a      	b.n	8001dfe <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d025      	beq.n	8001dfa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001dc0:	f023 0303 	bic.w	r3, r3, #3
 8001dc4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001dcc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7fe ff41 	bl	8000c58 <HAL_GetTick>
 8001dd6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe ff3d 	bl	8000c58 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e009      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_OscConfig+0x8c8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x89a>
 8001df8:	e001      	b.n	8001dfe <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4961      	ldr	r1, [pc, #388]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b0      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d04c      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e64:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d121      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e09e      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d115      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e092      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e94:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e086      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e07e      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 0203 	bic.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	493f      	ldr	r1, [pc, #252]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec6:	f7fe fec7 	bl	8000c58 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ece:	f7fe fec3 	bl	8000c58 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e066      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 020c 	and.w	r2, r3, #12
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d1eb      	bne.n	8001ece <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	492c      	ldr	r1, [pc, #176]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d210      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	4924      	ldr	r1, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e036      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4910      	ldr	r1, [pc, #64]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f82:	f000 f825 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f86:	4601      	mov	r1, r0
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fe0a 	bl	8000bc0 <HAL_InitTick>
 8001fac:	4603      	mov	r3, r0
 8001fae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	080038f8 	.word	0x080038f8
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d121      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d11e      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e005      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002020:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d102      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	e004      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d101      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d133      	bne.n	80020c6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0xa4>
 800206e:	2b03      	cmp	r3, #3
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0xaa>
 8002072:	e005      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002076:	617b      	str	r3, [r7, #20]
      break;
 8002078:	e005      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800207c:	617b      	str	r3, [r7, #20]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	617b      	str	r3, [r7, #20]
      break;
 8002084:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	3301      	adds	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	fb02 f203 	mul.w	r2, r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0e5b      	lsrs	r3, r3, #25
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020c6:	69bb      	ldr	r3, [r7, #24]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3724      	adds	r7, #36	; 0x24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08003910 	.word	0x08003910
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	007a1200 	.word	0x007a1200

080020e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000

080020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002100:	f7ff fff0 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002104:	4601      	mov	r1, r0
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	fa21 f303 	lsr.w	r3, r1, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	08003908 	.word	0x08003908

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800212c:	f7ff ffda 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002130:	4601      	mov	r1, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0adb      	lsrs	r3, r3, #11
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08003908 	.word	0x08003908

08002154 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002160:	4b2a      	ldr	r3, [pc, #168]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800216c:	f7ff f984 	bl	8001478 <HAL_PWREx_GetVoltageRange>
 8002170:	6178      	str	r0, [r7, #20]
 8002172:	e014      	b.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	4a24      	ldr	r2, [pc, #144]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217e:	6593      	str	r3, [r2, #88]	; 0x58
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800218c:	f7ff f974 	bl	8001478 <HAL_PWREx_GetVoltageRange>
 8002190:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a1d      	ldr	r2, [pc, #116]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a4:	d10b      	bne.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d919      	bls.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2ba0      	cmp	r3, #160	; 0xa0
 80021b0:	d902      	bls.n	80021b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b2:	2302      	movs	r3, #2
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	e013      	b.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021b8:	2301      	movs	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e010      	b.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d902      	bls.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021c4:	2303      	movs	r3, #3
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e00a      	b.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b80      	cmp	r3, #128	; 0x80
 80021ce:	d102      	bne.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021d0:	2302      	movs	r3, #2
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e004      	b.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b70      	cmp	r3, #112	; 0x70
 80021da:	d101      	bne.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021dc:	2301      	movs	r3, #1
 80021de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 0207 	bic.w	r2, r3, #7
 80021e8:	4909      	ldr	r1, [pc, #36]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	40022000 	.word	0x40022000

08002214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800221c:	2300      	movs	r3, #0
 800221e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002220:	2300      	movs	r3, #0
 8002222:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 809e 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002246:	2300      	movs	r3, #0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002274:	f7fe fcf0 	bl	8000c58 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800227a:	e009      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fcec 	bl	8000c58 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d902      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	74fb      	strb	r3, [r7, #19]
        break;
 800228e:	e005      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ef      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d15a      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a2:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01e      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d019      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d016      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fcac 	bl	8000c58 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	e00b      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fca8 	bl	8000c58 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d902      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	74fb      	strb	r3, [r7, #19]
            break;
 800231a:	e006      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0ec      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002346:	e009      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	74bb      	strb	r3, [r7, #18]
 800234c:	e006      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7c7b      	ldrb	r3, [r7, #17]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4a6d      	ldr	r2, [pc, #436]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237a:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 0203 	bic.w	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4964      	ldr	r1, [pc, #400]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239c:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 020c 	bic.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	495c      	ldr	r1, [pc, #368]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023be:	4b57      	ldr	r3, [pc, #348]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4953      	ldr	r1, [pc, #332]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e0:	4b4e      	ldr	r3, [pc, #312]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	494b      	ldr	r1, [pc, #300]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4942      	ldr	r1, [pc, #264]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002424:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	493a      	ldr	r1, [pc, #232]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002446:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	4931      	ldr	r1, [pc, #196]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002468:	4b2c      	ldr	r3, [pc, #176]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	4929      	ldr	r1, [pc, #164]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4920      	ldr	r1, [pc, #128]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	4918      	ldr	r1, [pc, #96]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ca:	d105      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	490a      	ldr	r1, [pc, #40]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002502:	d105      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002510:	7cbb      	ldrb	r3, [r7, #18]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e01d      	b.n	800256e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe f9ca 	bl	80008e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 f9d6 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e01d      	b.n	80025c4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f815 	bl	80025cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f000 f9ab 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_IC_ConfigChannel+0x1a>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e08a      	b.n	8002710 <HAL_TIM_IC_ConfigChannel+0x130>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2202      	movs	r2, #2
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d11b      	bne.n	8002648 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f000 fa62 	bl	8002ae8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 020c 	bic.w	r2, r2, #12
 8002632:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	619a      	str	r2, [r3, #24]
 8002646:	e05a      	b.n	80026fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b04      	cmp	r3, #4
 800264c:	d11c      	bne.n	8002688 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 fac8 	bl	8002bf2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002670:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6999      	ldr	r1, [r3, #24]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	021a      	lsls	r2, r3, #8
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	619a      	str	r2, [r3, #24]
 8002686:	e03a      	b.n	80026fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b08      	cmp	r3, #8
 800268c:	d11b      	bne.n	80026c6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f000 fb15 	bl	8002ccc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 020c 	bic.w	r2, r2, #12
 80026b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69d9      	ldr	r1, [r3, #28]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	61da      	str	r2, [r3, #28]
 80026c4:	e01b      	b.n	80026fe <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f000 fb35 	bl	8002d44 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	021a      	lsls	r2, r3, #8
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x18>
 800272c:	2302      	movs	r3, #2
 800272e:	e0a8      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800275a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d067      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x124>
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d80b      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x70>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d073      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
 8002774:	2b10      	cmp	r3, #16
 8002776:	d802      	bhi.n	800277e <HAL_TIM_ConfigClockSource+0x66>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06f      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800277c:	e078      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800277e:	2b20      	cmp	r3, #32
 8002780:	d06c      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
 8002782:	2b30      	cmp	r3, #48	; 0x30
 8002784:	d06a      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002786:	e073      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002788:	2b70      	cmp	r3, #112	; 0x70
 800278a:	d00d      	beq.n	80027a8 <HAL_TIM_ConfigClockSource+0x90>
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d804      	bhi.n	800279a <HAL_TIM_ConfigClockSource+0x82>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d033      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0xe4>
 8002794:	2b60      	cmp	r3, #96	; 0x60
 8002796:	d041      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002798:	e06a      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279e:	d066      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a4:	d017      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80027a6:	e063      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f000 fb1c 	bl	8002df4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e04c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f000 fb05 	bl	8002df4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f8:	609a      	str	r2, [r3, #8]
      break;
 80027fa:	e039      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	f000 f9c3 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2150      	movs	r1, #80	; 0x50
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fad2 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 800281a:	e029      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	f000 fa1f 	bl	8002c6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2160      	movs	r1, #96	; 0x60
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fac2 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 800283a:	e019      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f000 f9a3 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fab2 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 800285a:	e009      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 faa9 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 800286c:	e000      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800286e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800289e:	2302      	movs	r3, #2
 80028a0:	e031      	b.n	8002906 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f88f 	bl	80029d8 <TIM_SlaveTimer_SetConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e018      	b.n	8002906 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <TIM_Base_SetConfig+0xbc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <TIM_Base_SetConfig+0x20>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292e:	d108      	bne.n	8002942 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a21      	ldr	r2, [pc, #132]	; (80029cc <TIM_Base_SetConfig+0xbc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00b      	beq.n	8002962 <TIM_Base_SetConfig+0x52>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d007      	beq.n	8002962 <TIM_Base_SetConfig+0x52>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <TIM_Base_SetConfig+0xc0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <TIM_Base_SetConfig+0x52>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <TIM_Base_SetConfig+0xc4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d108      	bne.n	8002974 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <TIM_Base_SetConfig+0xbc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_Base_SetConfig+0xa0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <TIM_Base_SetConfig+0xc0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_Base_SetConfig+0xa0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <TIM_Base_SetConfig+0xc4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d103      	bne.n	80029b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	615a      	str	r2, [r3, #20]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40014000 	.word	0x40014000
 80029d4:	40014400 	.word	0x40014400

080029d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b30      	cmp	r3, #48	; 0x30
 8002a20:	d05c      	beq.n	8002adc <TIM_SlaveTimer_SetConfig+0x104>
 8002a22:	2b30      	cmp	r3, #48	; 0x30
 8002a24:	d806      	bhi.n	8002a34 <TIM_SlaveTimer_SetConfig+0x5c>
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d058      	beq.n	8002adc <TIM_SlaveTimer_SetConfig+0x104>
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d056      	beq.n	8002adc <TIM_SlaveTimer_SetConfig+0x104>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d054      	beq.n	8002adc <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8002a32:	e054      	b.n	8002ade <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8002a34:	2b50      	cmp	r3, #80	; 0x50
 8002a36:	d03d      	beq.n	8002ab4 <TIM_SlaveTimer_SetConfig+0xdc>
 8002a38:	2b50      	cmp	r3, #80	; 0x50
 8002a3a:	d802      	bhi.n	8002a42 <TIM_SlaveTimer_SetConfig+0x6a>
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d010      	beq.n	8002a62 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8002a40:	e04d      	b.n	8002ade <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8002a42:	2b60      	cmp	r3, #96	; 0x60
 8002a44:	d040      	beq.n	8002ac8 <TIM_SlaveTimer_SetConfig+0xf0>
 8002a46:	2b70      	cmp	r3, #112	; 0x70
 8002a48:	d000      	beq.n	8002a4c <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8002a4a:	e048      	b.n	8002ade <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68d9      	ldr	r1, [r3, #12]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f000 f9ca 	bl	8002df4 <TIM_ETR_SetConfig>
      break;
 8002a60:	e03d      	b.n	8002ade <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d101      	bne.n	8002a6e <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e038      	b.n	8002ae0 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a94:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	621a      	str	r2, [r3, #32]
      break;
 8002ab2:	e014      	b.n	8002ade <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6899      	ldr	r1, [r3, #8]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f000 f867 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      break;
 8002ac6:	e00a      	b.n	8002ade <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f000 f8c9 	bl	8002c6c <TIM_TI2_ConfigInputStage>
      break;
 8002ada:	e000      	b.n	8002ade <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8002adc:	bf00      	nop
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	f023 0201 	bic.w	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <TIM_TI1_SetConfig+0xa4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_TI1_SetConfig+0x3e>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d003      	beq.n	8002b26 <TIM_TI1_SetConfig+0x3e>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <TIM_TI1_SetConfig+0xa8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <TIM_TI1_SetConfig+0x42>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <TIM_TI1_SetConfig+0x44>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e003      	b.n	8002b4a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f023 030a 	bic.w	r3, r3, #10
 8002b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 030a 	and.w	r3, r3, #10
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40014000 	.word	0x40014000

08002b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0201 	bic.w	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f023 030a 	bic.w	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b087      	sub	sp, #28
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0210 	bic.w	r2, r3, #16
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	031b      	lsls	r3, r3, #12
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	621a      	str	r2, [r3, #32]
}
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f023 0210 	bic.w	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	031b      	lsls	r3, r3, #12
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ca8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	621a      	str	r2, [r3, #32]
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 0303 	bic.w	r3, r3, #3
 8002cf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	621a      	str	r2, [r3, #32]
}
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	031b      	lsls	r3, r3, #12
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	031b      	lsls	r3, r3, #12
 8002d9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f043 0307 	orr.w	r3, r3, #7
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e04f      	b.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40014000 	.word	0x40014000

08002f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e040      	b.n	8002f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fd52 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f82c 	bl	8002f9c <UART_SetConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e022      	b.n	8002f94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fb34 	bl	80035c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fbbb 	bl	8003708 <UART_CheckIdleState>
 8002f92:	4603      	mov	r3, r0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002fa0:	b08a      	sub	sp, #40	; 0x28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4bbc      	ldr	r3, [pc, #752]	; (80032c4 <UART_SetConfig+0x328>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4ab2      	ldr	r2, [pc, #712]	; (80032c8 <UART_SetConfig+0x32c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	4313      	orrs	r3, r2
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4aa9      	ldr	r2, [pc, #676]	; (80032cc <UART_SetConfig+0x330>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d126      	bne.n	800307a <UART_SetConfig+0xde>
 800302c:	4ba8      	ldr	r3, [pc, #672]	; (80032d0 <UART_SetConfig+0x334>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b03      	cmp	r3, #3
 8003038:	d81a      	bhi.n	8003070 <UART_SetConfig+0xd4>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <UART_SetConfig+0xa4>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003051 	.word	0x08003051
 8003044:	08003061 	.word	0x08003061
 8003048:	08003059 	.word	0x08003059
 800304c:	08003069 	.word	0x08003069
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003056:	e0ab      	b.n	80031b0 <UART_SetConfig+0x214>
 8003058:	2302      	movs	r3, #2
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305e:	e0a7      	b.n	80031b0 <UART_SetConfig+0x214>
 8003060:	2304      	movs	r3, #4
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e0a3      	b.n	80031b0 <UART_SetConfig+0x214>
 8003068:	2308      	movs	r3, #8
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e09f      	b.n	80031b0 <UART_SetConfig+0x214>
 8003070:	2310      	movs	r3, #16
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	bf00      	nop
 8003078:	e09a      	b.n	80031b0 <UART_SetConfig+0x214>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a95      	ldr	r2, [pc, #596]	; (80032d4 <UART_SetConfig+0x338>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d138      	bne.n	80030f6 <UART_SetConfig+0x15a>
 8003084:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <UART_SetConfig+0x334>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d82c      	bhi.n	80030ec <UART_SetConfig+0x150>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0xfc>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	080030ed 	.word	0x080030ed
 80030a4:	080030ed 	.word	0x080030ed
 80030a8:	080030dd 	.word	0x080030dd
 80030ac:	080030ed 	.word	0x080030ed
 80030b0:	080030ed 	.word	0x080030ed
 80030b4:	080030ed 	.word	0x080030ed
 80030b8:	080030d5 	.word	0x080030d5
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	080030ed 	.word	0x080030ed
 80030c4:	080030ed 	.word	0x080030ed
 80030c8:	080030e5 	.word	0x080030e5
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e06d      	b.n	80031b0 <UART_SetConfig+0x214>
 80030d4:	2302      	movs	r3, #2
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e069      	b.n	80031b0 <UART_SetConfig+0x214>
 80030dc:	2304      	movs	r3, #4
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e065      	b.n	80031b0 <UART_SetConfig+0x214>
 80030e4:	2308      	movs	r3, #8
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ea:	e061      	b.n	80031b0 <UART_SetConfig+0x214>
 80030ec:	2310      	movs	r3, #16
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	bf00      	nop
 80030f4:	e05c      	b.n	80031b0 <UART_SetConfig+0x214>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a77      	ldr	r2, [pc, #476]	; (80032d8 <UART_SetConfig+0x33c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d125      	bne.n	800314c <UART_SetConfig+0x1b0>
 8003100:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <UART_SetConfig+0x334>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800310a:	2b10      	cmp	r3, #16
 800310c:	d011      	beq.n	8003132 <UART_SetConfig+0x196>
 800310e:	2b10      	cmp	r3, #16
 8003110:	d802      	bhi.n	8003118 <UART_SetConfig+0x17c>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <UART_SetConfig+0x186>
 8003116:	e014      	b.n	8003142 <UART_SetConfig+0x1a6>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d006      	beq.n	800312a <UART_SetConfig+0x18e>
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d00c      	beq.n	800313a <UART_SetConfig+0x19e>
 8003120:	e00f      	b.n	8003142 <UART_SetConfig+0x1a6>
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003128:	e042      	b.n	80031b0 <UART_SetConfig+0x214>
 800312a:	2302      	movs	r3, #2
 800312c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003130:	e03e      	b.n	80031b0 <UART_SetConfig+0x214>
 8003132:	2304      	movs	r3, #4
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003138:	e03a      	b.n	80031b0 <UART_SetConfig+0x214>
 800313a:	2308      	movs	r3, #8
 800313c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003140:	e036      	b.n	80031b0 <UART_SetConfig+0x214>
 8003142:	2310      	movs	r3, #16
 8003144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003148:	bf00      	nop
 800314a:	e031      	b.n	80031b0 <UART_SetConfig+0x214>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5d      	ldr	r2, [pc, #372]	; (80032c8 <UART_SetConfig+0x32c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d129      	bne.n	80031aa <UART_SetConfig+0x20e>
 8003156:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <UART_SetConfig+0x334>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003164:	d014      	beq.n	8003190 <UART_SetConfig+0x1f4>
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316a:	d802      	bhi.n	8003172 <UART_SetConfig+0x1d6>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <UART_SetConfig+0x1e4>
 8003170:	e016      	b.n	80031a0 <UART_SetConfig+0x204>
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d007      	beq.n	8003188 <UART_SetConfig+0x1ec>
 8003178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800317c:	d00c      	beq.n	8003198 <UART_SetConfig+0x1fc>
 800317e:	e00f      	b.n	80031a0 <UART_SetConfig+0x204>
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e013      	b.n	80031b0 <UART_SetConfig+0x214>
 8003188:	2302      	movs	r3, #2
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e00f      	b.n	80031b0 <UART_SetConfig+0x214>
 8003190:	2304      	movs	r3, #4
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e00b      	b.n	80031b0 <UART_SetConfig+0x214>
 8003198:	2308      	movs	r3, #8
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e007      	b.n	80031b0 <UART_SetConfig+0x214>
 80031a0:	2310      	movs	r3, #16
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <UART_SetConfig+0x214>
 80031aa:	2310      	movs	r3, #16
 80031ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a44      	ldr	r2, [pc, #272]	; (80032c8 <UART_SetConfig+0x32c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	f040 80fb 	bne.w	80033b2 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d824      	bhi.n	800320e <UART_SetConfig+0x272>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <UART_SetConfig+0x230>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	0800320f 	.word	0x0800320f
 80031d4:	080031f9 	.word	0x080031f9
 80031d8:	0800320f 	.word	0x0800320f
 80031dc:	080031ff 	.word	0x080031ff
 80031e0:	0800320f 	.word	0x0800320f
 80031e4:	0800320f 	.word	0x0800320f
 80031e8:	0800320f 	.word	0x0800320f
 80031ec:	08003207 	.word	0x08003207
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80031f0:	f7fe ff84 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 80031f4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031f6:	e00d      	b.n	8003214 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80031f8:	4b38      	ldr	r3, [pc, #224]	; (80032dc <UART_SetConfig+0x340>)
 80031fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031fc:	e00a      	b.n	8003214 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80031fe:	f7fe fee7 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003202:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003204:	e006      	b.n	8003214 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800320c:	e002      	b.n	8003214 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	76fb      	strb	r3, [r7, #27]
        break;
 8003212:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 81c8 	beq.w	80035ac <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	d305      	bcc.n	8003238 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	d902      	bls.n	800323e <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	76fb      	strb	r3, [r7, #27]
 800323c:	e1b6      	b.n	80035ac <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800323e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003242:	2b08      	cmp	r3, #8
 8003244:	f200 80a2 	bhi.w	800338c <UART_SetConfig+0x3f0>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <UART_SetConfig+0x2b4>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003275 	.word	0x08003275
 8003254:	0800338d 	.word	0x0800338d
 8003258:	080032e1 	.word	0x080032e1
 800325c:	0800338d 	.word	0x0800338d
 8003260:	08003315 	.word	0x08003315
 8003264:	0800338d 	.word	0x0800338d
 8003268:	0800338d 	.word	0x0800338d
 800326c:	0800338d 	.word	0x0800338d
 8003270:	08003363 	.word	0x08003363
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003274:	f7fe ff42 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 8003278:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4619      	mov	r1, r3
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f04f 0400 	mov.w	r4, #0
 800328a:	0214      	lsls	r4, r2, #8
 800328c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003290:	020b      	lsls	r3, r1, #8
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6852      	ldr	r2, [r2, #4]
 8003296:	0852      	lsrs	r2, r2, #1
 8003298:	4611      	mov	r1, r2
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	eb13 0b01 	adds.w	fp, r3, r1
 80032a2:	eb44 0c02 	adc.w	ip, r4, r2
 80032a6:	4658      	mov	r0, fp
 80032a8:	4661      	mov	r1, ip
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f04f 0400 	mov.w	r4, #0
 80032b2:	461a      	mov	r2, r3
 80032b4:	4623      	mov	r3, r4
 80032b6:	f7fc ff89 	bl	80001cc <__aeabi_uldivmod>
 80032ba:	4603      	mov	r3, r0
 80032bc:	460c      	mov	r4, r1
 80032be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80032c0:	e067      	b.n	8003392 <UART_SetConfig+0x3f6>
 80032c2:	bf00      	nop
 80032c4:	efff69f3 	.word	0xefff69f3
 80032c8:	40008000 	.word	0x40008000
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40004400 	.word	0x40004400
 80032d8:	40004800 	.word	0x40004800
 80032dc:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	49ae      	ldr	r1, [pc, #696]	; (80035a4 <UART_SetConfig+0x608>)
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	eb13 0b01 	adds.w	fp, r3, r1
 80032f4:	eb44 0c02 	adc.w	ip, r4, r2
 80032f8:	4658      	mov	r0, fp
 80032fa:	4661      	mov	r1, ip
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f04f 0400 	mov.w	r4, #0
 8003304:	461a      	mov	r2, r3
 8003306:	4623      	mov	r3, r4
 8003308:	f7fc ff60 	bl	80001cc <__aeabi_uldivmod>
 800330c:	4603      	mov	r3, r0
 800330e:	460c      	mov	r4, r1
 8003310:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003312:	e03e      	b.n	8003392 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003314:	f7fe fe5c 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003318:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f04f 0400 	mov.w	r4, #0
 800332a:	0214      	lsls	r4, r2, #8
 800332c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003330:	020b      	lsls	r3, r1, #8
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6852      	ldr	r2, [r2, #4]
 8003336:	0852      	lsrs	r2, r2, #1
 8003338:	4611      	mov	r1, r2
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	eb13 0b01 	adds.w	fp, r3, r1
 8003342:	eb44 0c02 	adc.w	ip, r4, r2
 8003346:	4658      	mov	r0, fp
 8003348:	4661      	mov	r1, ip
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	461a      	mov	r2, r3
 8003354:	4623      	mov	r3, r4
 8003356:	f7fc ff39 	bl	80001cc <__aeabi_uldivmod>
 800335a:	4603      	mov	r3, r0
 800335c:	460c      	mov	r4, r1
 800335e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003360:	e017      	b.n	8003392 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	f04f 0400 	mov.w	r4, #0
 800336c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003370:	f144 0100 	adc.w	r1, r4, #0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	461a      	mov	r2, r3
 800337e:	4623      	mov	r3, r4
 8003380:	f7fc ff24 	bl	80001cc <__aeabi_uldivmod>
 8003384:	4603      	mov	r3, r0
 8003386:	460c      	mov	r4, r1
 8003388:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800338a:	e002      	b.n	8003392 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	76fb      	strb	r3, [r7, #27]
            break;
 8003390:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003398:	d308      	bcc.n	80033ac <UART_SetConfig+0x410>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a0:	d204      	bcs.n	80033ac <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	e0ff      	b.n	80035ac <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	76fb      	strb	r3, [r7, #27]
 80033b0:	e0fc      	b.n	80035ac <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ba:	f040 8083 	bne.w	80034c4 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80033be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d85e      	bhi.n	8003484 <UART_SetConfig+0x4e8>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0x430>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	08003411 	.word	0x08003411
 80033d4:	08003431 	.word	0x08003431
 80033d8:	08003485 	.word	0x08003485
 80033dc:	0800344d 	.word	0x0800344d
 80033e0:	08003485 	.word	0x08003485
 80033e4:	08003485 	.word	0x08003485
 80033e8:	08003485 	.word	0x08003485
 80033ec:	0800346d 	.word	0x0800346d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f0:	f7fe fe84 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 80033f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	005a      	lsls	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	b29b      	uxth	r3, r3
 800340c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800340e:	e03c      	b.n	800348a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fe8a 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8003414:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	005a      	lsls	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	441a      	add	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800342e:	e02c      	b.n	800348a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800343a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6852      	ldr	r2, [r2, #4]
 8003442:	fbb3 f3f2 	udiv	r3, r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800344a:	e01e      	b.n	800348a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344c:	f7fe fdc0 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003450:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	005a      	lsls	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	b29b      	uxth	r3, r3
 8003468:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800346a:	e00e      	b.n	800348a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003482:	e002      	b.n	800348a <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	76fb      	strb	r3, [r7, #27]
        break;
 8003488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b0f      	cmp	r3, #15
 800348e:	d916      	bls.n	80034be <UART_SetConfig+0x522>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003496:	d212      	bcs.n	80034be <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f023 030f 	bic.w	r3, r3, #15
 80034a0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	89fb      	ldrh	r3, [r7, #14]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	89fa      	ldrh	r2, [r7, #14]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	e076      	b.n	80035ac <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	76fb      	strb	r3, [r7, #27]
 80034c2:	e073      	b.n	80035ac <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80034c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d85c      	bhi.n	8003586 <UART_SetConfig+0x5ea>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <UART_SetConfig+0x538>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034f9 	.word	0x080034f9
 80034d8:	08003517 	.word	0x08003517
 80034dc:	08003535 	.word	0x08003535
 80034e0:	08003587 	.word	0x08003587
 80034e4:	08003551 	.word	0x08003551
 80034e8:	08003587 	.word	0x08003587
 80034ec:	08003587 	.word	0x08003587
 80034f0:	08003587 	.word	0x08003587
 80034f4:	0800356f 	.word	0x0800356f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f8:	f7fe fe00 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 80034fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	085a      	lsrs	r2, r3, #1
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003514:	e03a      	b.n	800358c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003516:	f7fe fe07 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 800351a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	085a      	lsrs	r2, r3, #1
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	b29b      	uxth	r3, r3
 8003530:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003532:	e02b      	b.n	800358c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800353e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6852      	ldr	r2, [r2, #4]
 8003546:	fbb3 f3f2 	udiv	r3, r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800354e:	e01d      	b.n	800358c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003550:	f7fe fd3e 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003554:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	085a      	lsrs	r2, r3, #1
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800356c:	e00e      	b.n	800358c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	b29b      	uxth	r3, r3
 8003582:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003584:	e002      	b.n	800358c <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	76fb      	strb	r3, [r7, #27]
        break;
 800358a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	d90a      	bls.n	80035a8 <UART_SetConfig+0x60c>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d206      	bcs.n	80035a8 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	e003      	b.n	80035ac <UART_SetConfig+0x610>
 80035a4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80035b8:	7efb      	ldrb	r3, [r7, #27]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3728      	adds	r7, #40	; 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080035c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01a      	beq.n	80036da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c2:	d10a      	bne.n	80036da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003716:	f7fd fa9f 	bl	8000c58 <HAL_GetTick>
 800371a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b08      	cmp	r3, #8
 8003728:	d10e      	bne.n	8003748 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f82a 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e020      	b.n	800378a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d10e      	bne.n	8003774 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003756:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f814 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e00a      	b.n	800378a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a2:	e05d      	b.n	8003860 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037aa:	d059      	beq.n	8003860 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7fd fa54 	bl	8000c58 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11b      	bne.n	80037fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e042      	b.n	8003880 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02b      	beq.n	8003860 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003816:	d123      	bne.n	8003860 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003820:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003830:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e00f      	b.n	8003880 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	429a      	cmp	r2, r3
 800387c:	d092      	beq.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <__libc_init_array>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	4e0d      	ldr	r6, [pc, #52]	; (80038c0 <__libc_init_array+0x38>)
 800388c:	4c0d      	ldr	r4, [pc, #52]	; (80038c4 <__libc_init_array+0x3c>)
 800388e:	1ba4      	subs	r4, r4, r6
 8003890:	10a4      	asrs	r4, r4, #2
 8003892:	2500      	movs	r5, #0
 8003894:	42a5      	cmp	r5, r4
 8003896:	d109      	bne.n	80038ac <__libc_init_array+0x24>
 8003898:	4e0b      	ldr	r6, [pc, #44]	; (80038c8 <__libc_init_array+0x40>)
 800389a:	4c0c      	ldr	r4, [pc, #48]	; (80038cc <__libc_init_array+0x44>)
 800389c:	f000 f820 	bl	80038e0 <_init>
 80038a0:	1ba4      	subs	r4, r4, r6
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	2500      	movs	r5, #0
 80038a6:	42a5      	cmp	r5, r4
 80038a8:	d105      	bne.n	80038b6 <__libc_init_array+0x2e>
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038b0:	4798      	blx	r3
 80038b2:	3501      	adds	r5, #1
 80038b4:	e7ee      	b.n	8003894 <__libc_init_array+0xc>
 80038b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ba:	4798      	blx	r3
 80038bc:	3501      	adds	r5, #1
 80038be:	e7f2      	b.n	80038a6 <__libc_init_array+0x1e>
 80038c0:	08003948 	.word	0x08003948
 80038c4:	08003948 	.word	0x08003948
 80038c8:	08003948 	.word	0x08003948
 80038cc:	0800394c 	.word	0x0800394c

080038d0 <memset>:
 80038d0:	4402      	add	r2, r0
 80038d2:	4603      	mov	r3, r0
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d100      	bne.n	80038da <memset+0xa>
 80038d8:	4770      	bx	lr
 80038da:	f803 1b01 	strb.w	r1, [r3], #1
 80038de:	e7f9      	b.n	80038d4 <memset+0x4>

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
