
Control_PID_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ebc  08002ebc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ebc  08002ebc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ebc  08002ebc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08002ed0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002ed0  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c196  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cfe  00000000  00000000  0002c1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  0002ded0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac8  00000000  00000000  0002ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001501b  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f62  00000000  00000000  00044573  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000715a7  00000000  00000000  0004d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bea7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fac  00000000  00000000  000beaf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e78 	.word	0x08002e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e78 	.word	0x08002e78

0800014c <app_Debounce>:
};

volatile uint8_t i= 0 ,a= 0;

void app_Debounce(uint16_t Boton[], uint8_t Numero_Botones)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	466b      	mov	r3, sp
 800015a:	461d      	mov	r5, r3
	uint8_t Presionado[Numero_Botones];
 800015c:	78f8      	ldrb	r0, [r7, #3]
 800015e:	4603      	mov	r3, r0
 8000160:	3b01      	subs	r3, #1
 8000162:	60fb      	str	r3, [r7, #12]
 8000164:	b2c1      	uxtb	r1, r0
 8000166:	f04f 0200 	mov.w	r2, #0
 800016a:	f04f 0300 	mov.w	r3, #0
 800016e:	f04f 0400 	mov.w	r4, #0
 8000172:	00d4      	lsls	r4, r2, #3
 8000174:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000178:	00cb      	lsls	r3, r1, #3
 800017a:	b2c1      	uxtb	r1, r0
 800017c:	f04f 0200 	mov.w	r2, #0
 8000180:	f04f 0300 	mov.w	r3, #0
 8000184:	f04f 0400 	mov.w	r4, #0
 8000188:	00d4      	lsls	r4, r2, #3
 800018a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800018e:	00cb      	lsls	r3, r1, #3
 8000190:	4603      	mov	r3, r0
 8000192:	3307      	adds	r3, #7
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	00db      	lsls	r3, r3, #3
 8000198:	ebad 0d03 	sub.w	sp, sp, r3
 800019c:	466b      	mov	r3, sp
 800019e:	3300      	adds	r3, #0
 80001a0:	60bb      	str	r3, [r7, #8]
	while(a < Numero_Botones + 1)
 80001a2:	e00d      	b.n	80001c0 <app_Debounce+0x74>
	{
	Presionado[a] = 0;
 80001a4:	4b7d      	ldr	r3, [pc, #500]	; (800039c <app_Debounce+0x250>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	461a      	mov	r2, r3
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	2100      	movs	r1, #0
 80001b0:	5499      	strb	r1, [r3, r2]
	a++;
 80001b2:	4b7a      	ldr	r3, [pc, #488]	; (800039c <app_Debounce+0x250>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	3301      	adds	r3, #1
 80001ba:	b2da      	uxtb	r2, r3
 80001bc:	4b77      	ldr	r3, [pc, #476]	; (800039c <app_Debounce+0x250>)
 80001be:	701a      	strb	r2, [r3, #0]
	while(a < Numero_Botones + 1)
 80001c0:	4b76      	ldr	r3, [pc, #472]	; (800039c <app_Debounce+0x250>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	461a      	mov	r2, r3
 80001c8:	78fb      	ldrb	r3, [r7, #3]
 80001ca:	3301      	adds	r3, #1
 80001cc:	429a      	cmp	r2, r3
 80001ce:	dbe9      	blt.n	80001a4 <app_Debounce+0x58>
	}

	while(HAL_GPIO_ReadPin(GPIOB, Boton[i]) == GPIO_PIN_RESET)
 80001d0:	e010      	b.n	80001f4 <app_Debounce+0xa8>
	{
		delay_us(50000);
 80001d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80001d6:	f000 f96d 	bl	80004b4 <delay_us>
		TiempoPresionado = TiempoPresionado + 100;
 80001da:	4b71      	ldr	r3, [pc, #452]	; (80003a0 <app_Debounce+0x254>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	3364      	adds	r3, #100	; 0x64
 80001e0:	b29a      	uxth	r2, r3
 80001e2:	4b6f      	ldr	r3, [pc, #444]	; (80003a0 <app_Debounce+0x254>)
 80001e4:	801a      	strh	r2, [r3, #0]
		Presionado[i] = 1;
 80001e6:	4b6f      	ldr	r3, [pc, #444]	; (80003a4 <app_Debounce+0x258>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	461a      	mov	r2, r3
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	2101      	movs	r1, #1
 80001f2:	5499      	strb	r1, [r3, r2]
	while(HAL_GPIO_ReadPin(GPIOB, Boton[i]) == GPIO_PIN_RESET)
 80001f4:	4b6b      	ldr	r3, [pc, #428]	; (80003a4 <app_Debounce+0x258>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	4619      	mov	r1, r3
 8000204:	4868      	ldr	r0, [pc, #416]	; (80003a8 <app_Debounce+0x25c>)
 8000206:	f001 f8d3 	bl	80013b0 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0e0      	beq.n	80001d2 <app_Debounce+0x86>
	}

	if((TiempoPresionado <= OpcionUno) && (Presionado[i] == 1))
 8000210:	4b63      	ldr	r3, [pc, #396]	; (80003a0 <app_Debounce+0x254>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	2b64      	cmp	r3, #100	; 0x64
 8000216:	d85a      	bhi.n	80002ce <app_Debounce+0x182>
 8000218:	4b62      	ldr	r3, [pc, #392]	; (80003a4 <app_Debounce+0x258>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	5c9b      	ldrb	r3, [r3, r2]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d152      	bne.n	80002ce <app_Debounce+0x182>
	{
		switch(i)
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <app_Debounce+0x258>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	b2db      	uxtb	r3, r3
 800022e:	2b01      	cmp	r3, #1
 8000230:	d011      	beq.n	8000256 <app_Debounce+0x10a>
 8000232:	2b02      	cmp	r3, #2
 8000234:	d02a      	beq.n	800028c <app_Debounce+0x140>
 8000236:	2b00      	cmp	r3, #0
 8000238:	d149      	bne.n	80002ce <app_Debounce+0x182>
		{
			case 0:
			{
				TiempoPresionado = 0;
 800023a:	4b59      	ldr	r3, [pc, #356]	; (80003a0 <app_Debounce+0x254>)
 800023c:	2200      	movs	r2, #0
 800023e:	801a      	strh	r2, [r3, #0]
				Presionado[i] = 0;
 8000240:	4b58      	ldr	r3, [pc, #352]	; (80003a4 <app_Debounce+0x258>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	b2db      	uxtb	r3, r3
 8000246:	461a      	mov	r2, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	2100      	movs	r1, #0
 800024c:	5499      	strb	r1, [r3, r2]
				Aumento = 4;
 800024e:	4b57      	ldr	r3, [pc, #348]	; (80003ac <app_Debounce+0x260>)
 8000250:	2204      	movs	r2, #4
 8000252:	701a      	strb	r2, [r3, #0]
			}break;
 8000254:	e03b      	b.n	80002ce <app_Debounce+0x182>
			case 1:
			{
				TiempoPresionado = 0;
 8000256:	4b52      	ldr	r3, [pc, #328]	; (80003a0 <app_Debounce+0x254>)
 8000258:	2200      	movs	r2, #0
 800025a:	801a      	strh	r2, [r3, #0]
				Presionado[i] = 0;
 800025c:	4b51      	ldr	r3, [pc, #324]	; (80003a4 <app_Debounce+0x258>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	461a      	mov	r2, r3
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	2100      	movs	r1, #0
 8000268:	5499      	strb	r1, [r3, r2]

				if(Seleccion == 9)
 800026a:	4b51      	ldr	r3, [pc, #324]	; (80003b0 <app_Debounce+0x264>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b09      	cmp	r3, #9
 8000272:	d103      	bne.n	800027c <app_Debounce+0x130>
				{
					Seleccion = 0;
 8000274:	4b4e      	ldr	r3, [pc, #312]	; (80003b0 <app_Debounce+0x264>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Seleccion++;
				}
			}break;
 800027a:	e028      	b.n	80002ce <app_Debounce+0x182>
					Seleccion++;
 800027c:	4b4c      	ldr	r3, [pc, #304]	; (80003b0 <app_Debounce+0x264>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	3301      	adds	r3, #1
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4b4a      	ldr	r3, [pc, #296]	; (80003b0 <app_Debounce+0x264>)
 8000288:	701a      	strb	r2, [r3, #0]
			}break;
 800028a:	e020      	b.n	80002ce <app_Debounce+0x182>
			case 2:
			{
				TiempoPresionado = 0;
 800028c:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <app_Debounce+0x254>)
 800028e:	2200      	movs	r2, #0
 8000290:	801a      	strh	r2, [r3, #0]
					Presionado[i] = 0;
 8000292:	4b44      	ldr	r3, [pc, #272]	; (80003a4 <app_Debounce+0x258>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2100      	movs	r1, #0
 800029e:	5499      	strb	r1, [r3, r2]
				if(Seleccion == 0)
 80002a0:	4b43      	ldr	r3, [pc, #268]	; (80003b0 <app_Debounce+0x264>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d103      	bne.n	80002b2 <app_Debounce+0x166>
				{

					Seleccion = 9;
 80002aa:	4b41      	ldr	r3, [pc, #260]	; (80003b0 <app_Debounce+0x264>)
 80002ac:	2209      	movs	r2, #9
 80002ae:	701a      	strb	r2, [r3, #0]
				else
				{
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
					Seleccion--;
				}
			}break;
 80002b0:	e00c      	b.n	80002cc <app_Debounce+0x180>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b8:	483e      	ldr	r0, [pc, #248]	; (80003b4 <app_Debounce+0x268>)
 80002ba:	f001 f890 	bl	80013de <HAL_GPIO_WritePin>
					Seleccion--;
 80002be:	4b3c      	ldr	r3, [pc, #240]	; (80003b0 <app_Debounce+0x264>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	3b01      	subs	r3, #1
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	4b39      	ldr	r3, [pc, #228]	; (80003b0 <app_Debounce+0x264>)
 80002ca:	701a      	strb	r2, [r3, #0]
			}break;
 80002cc:	bf00      	nop

		}
	}
	if((TiempoPresionado >= OpcionDos) && (Presionado[i] == 0))
 80002ce:	4b34      	ldr	r3, [pc, #208]	; (80003a0 <app_Debounce+0x254>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002d6:	d347      	bcc.n	8000368 <app_Debounce+0x21c>
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <app_Debounce+0x258>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	5c9b      	ldrb	r3, [r3, r2]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d13f      	bne.n	8000368 <app_Debounce+0x21c>
	{
		switch(i)
 80002e8:	4b2e      	ldr	r3, [pc, #184]	; (80003a4 <app_Debounce+0x258>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d018      	beq.n	8000324 <app_Debounce+0x1d8>
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d01d      	beq.n	8000332 <app_Debounce+0x1e6>
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d000      	beq.n	80002fc <app_Debounce+0x1b0>
					Aumento++;
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
				}
			}break;
		}
	}
 80002fa:	e049      	b.n	8000390 <app_Debounce+0x244>
				TiempoPresionado = 0;
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <app_Debounce+0x254>)
 80002fe:	2200      	movs	r2, #0
 8000300:	801a      	strh	r2, [r3, #0]
				if(Aumento == 0)
 8000302:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <app_Debounce+0x260>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d103      	bne.n	8000314 <app_Debounce+0x1c8>
					Aumento = 4;
 800030c:	4b27      	ldr	r3, [pc, #156]	; (80003ac <app_Debounce+0x260>)
 800030e:	2204      	movs	r2, #4
 8000310:	701a      	strb	r2, [r3, #0]
			}break;
 8000312:	e028      	b.n	8000366 <app_Debounce+0x21a>
					Aumento--;
 8000314:	4b25      	ldr	r3, [pc, #148]	; (80003ac <app_Debounce+0x260>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	b2db      	uxtb	r3, r3
 800031a:	3b01      	subs	r3, #1
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b23      	ldr	r3, [pc, #140]	; (80003ac <app_Debounce+0x260>)
 8000320:	701a      	strb	r2, [r3, #0]
			}break;
 8000322:	e020      	b.n	8000366 <app_Debounce+0x21a>
				TiempoPresionado = 0;
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <app_Debounce+0x254>)
 8000326:	2200      	movs	r2, #0
 8000328:	801a      	strh	r2, [r3, #0]
				Aumento = 0;
 800032a:	4b20      	ldr	r3, [pc, #128]	; (80003ac <app_Debounce+0x260>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
			}break;
 8000330:	e019      	b.n	8000366 <app_Debounce+0x21a>
				TiempoPresionado = 0;
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <app_Debounce+0x254>)
 8000334:	2200      	movs	r2, #0
 8000336:	801a      	strh	r2, [r3, #0]
				if(Aumento == 4)
 8000338:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <app_Debounce+0x260>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	2b04      	cmp	r3, #4
 8000340:	d103      	bne.n	800034a <app_Debounce+0x1fe>
					Aumento = 0;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <app_Debounce+0x260>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
			}break;
 8000348:	e00c      	b.n	8000364 <app_Debounce+0x218>
					Aumento++;
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <app_Debounce+0x260>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <app_Debounce+0x260>)
 8000356:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4815      	ldr	r0, [pc, #84]	; (80003b4 <app_Debounce+0x268>)
 8000360:	f001 f83d 	bl	80013de <HAL_GPIO_WritePin>
			}break;
 8000364:	bf00      	nop
	}
 8000366:	e013      	b.n	8000390 <app_Debounce+0x244>
	else
	{
		if(i >= Numero_Botones)
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <app_Debounce+0x258>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	78fa      	ldrb	r2, [r7, #3]
 8000370:	429a      	cmp	r2, r3
 8000372:	d803      	bhi.n	800037c <app_Debounce+0x230>
		{
			i = 0;
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <app_Debounce+0x258>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
 800037a:	e009      	b.n	8000390 <app_Debounce+0x244>
		}
		else
		{
			i++;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <app_Debounce+0x258>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	3301      	adds	r3, #1
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <app_Debounce+0x258>)
 8000388:	701a      	strb	r2, [r3, #0]
			a = 0;
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <app_Debounce+0x250>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	46ad      	mov	sp, r5
		}
	}


}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bdb0      	pop	{r4, r5, r7, pc}
 800039a:	bf00      	nop
 800039c:	20000037 	.word	0x20000037
 80003a0:	20000028 	.word	0x20000028
 80003a4:	20000036 	.word	0x20000036
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	20000034 	.word	0x20000034
 80003b0:	20000035 	.word	0x20000035
 80003b4:	40011000 	.word	0x40011000

080003b8 <app_SeleccionarAngulo>:

void app_SeleccionarAngulo(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

	  switch(Aumento)
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <app_SeleccionarAngulo+0xe0>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b03      	cmp	r3, #3
 80003c4:	d864      	bhi.n	8000490 <app_SeleccionarAngulo+0xd8>
 80003c6:	a201      	add	r2, pc, #4	; (adr r2, 80003cc <app_SeleccionarAngulo+0x14>)
 80003c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003cc:	080003dd 	.word	0x080003dd
 80003d0:	08000401 	.word	0x08000401
 80003d4:	08000433 	.word	0x08000433
 80003d8:	08000463 	.word	0x08000463
	  {
		  case 0:
		  {
			  Primero = Seleccion * 1000;
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <app_SeleccionarAngulo+0xe4>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	0152      	lsls	r2, r2, #5
 80003e8:	1ad2      	subs	r2, r2, r3
 80003ea:	0092      	lsls	r2, r2, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <app_SeleccionarAngulo+0xe8>)
 80003f4:	801a      	strh	r2, [r3, #0]
			  Total = Primero;
 80003f6:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <app_SeleccionarAngulo+0xe8>)
 80003f8:	881a      	ldrh	r2, [r3, #0]
 80003fa:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <app_SeleccionarAngulo+0xec>)
 80003fc:	801a      	strh	r2, [r3, #0]
		  }break;
 80003fe:	e047      	b.n	8000490 <app_SeleccionarAngulo+0xd8>
		  case 1:
		  {
			  Segundo = Seleccion * 100;
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <app_SeleccionarAngulo+0xe4>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	b29b      	uxth	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	4413      	add	r3, r2
 800040e:	461a      	mov	r2, r3
 8000410:	0091      	lsls	r1, r2, #2
 8000412:	461a      	mov	r2, r3
 8000414:	460b      	mov	r3, r1
 8000416:	4413      	add	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	b29a      	uxth	r2, r3
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <app_SeleccionarAngulo+0xf0>)
 800041e:	801a      	strh	r2, [r3, #0]
			  Total = Segundo + Primero;
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <app_SeleccionarAngulo+0xf0>)
 8000422:	881a      	ldrh	r2, [r3, #0]
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <app_SeleccionarAngulo+0xe8>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4413      	add	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <app_SeleccionarAngulo+0xec>)
 800042e:	801a      	strh	r2, [r3, #0]
		  }break;
 8000430:	e02e      	b.n	8000490 <app_SeleccionarAngulo+0xd8>
		  case 2:
		  {
			  Tercero = Seleccion * 10;
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <app_SeleccionarAngulo+0xe4>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	b29b      	uxth	r3, r3
 800043a:	461a      	mov	r2, r3
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	4413      	add	r3, r2
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <app_SeleccionarAngulo+0xf4>)
 8000446:	801a      	strh	r2, [r3, #0]
			  Total = Primero + Segundo + Tercero;
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <app_SeleccionarAngulo+0xe8>)
 800044a:	881a      	ldrh	r2, [r3, #0]
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <app_SeleccionarAngulo+0xf0>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <app_SeleccionarAngulo+0xf4>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4413      	add	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <app_SeleccionarAngulo+0xec>)
 800045e:	801a      	strh	r2, [r3, #0]
		  	}break;
 8000460:	e016      	b.n	8000490 <app_SeleccionarAngulo+0xd8>
		  case 3:
   		  {
			  Cuarto = Seleccion;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <app_SeleccionarAngulo+0xe4>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	b29a      	uxth	r2, r3
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <app_SeleccionarAngulo+0xf8>)
 800046c:	801a      	strh	r2, [r3, #0]
			  Total = Primero + Segundo + Tercero + Cuarto;
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <app_SeleccionarAngulo+0xe8>)
 8000470:	881a      	ldrh	r2, [r3, #0]
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <app_SeleccionarAngulo+0xf0>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	b29a      	uxth	r2, r3
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <app_SeleccionarAngulo+0xf4>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4413      	add	r3, r2
 8000480:	b29a      	uxth	r2, r3
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <app_SeleccionarAngulo+0xf8>)
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	4413      	add	r3, r2
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <app_SeleccionarAngulo+0xec>)
 800048c:	801a      	strh	r2, [r3, #0]
		   	}break;
 800048e:	bf00      	nop
		  default:
		  {

		  }
	  }
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000034 	.word	0x20000034
 800049c:	20000035 	.word	0x20000035
 80004a0:	2000002c 	.word	0x2000002c
 80004a4:	2000002a 	.word	0x2000002a
 80004a8:	2000002e 	.word	0x2000002e
 80004ac:	20000030 	.word	0x20000030
 80004b0:	20000032 	.word	0x20000032

080004b4 <delay_us>:
#include "app_Delay.h"

void delay_us (uint16_t us)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <delay_us+0x2c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80004c6:	bf00      	nop
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <delay_us+0x2c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d3f9      	bcc.n	80004c8 <delay_us+0x14>
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000044 	.word	0x20000044

080004e4 <SPI_CS_ENABLE>:
 * | PA4 | SOFT SLAVE |	CSS     |
 *  ----------------------------
 */

void SPI_CS_ENABLE(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2110      	movs	r1, #16
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <SPI_CS_ENABLE+0x14>)
 80004ee:	f000 ff76 	bl	80013de <HAL_GPIO_WritePin>
	}while(0);
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010800 	.word	0x40010800

080004fc <SPI_CS_DISABLE>:

void SPI_CS_DISABLE(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2110      	movs	r1, #16
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <SPI_CS_DISABLE+0x14>)
 8000506:	f000 ff6a 	bl	80013de <HAL_GPIO_WritePin>
	}while(0);
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010800 	.word	0x40010800

08000514 <SPI_Transmit>:
void SPI_Transmit(SPI_HandleTypeDef *hspi, uint16_t data) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	807b      	strh	r3, [r7, #2]
    // 2nd parameter - pData: pointer to data buffer
    HAL_SPI_Transmit(hspi, (uint8_t *) &data, 1, 1000);
 8000520:	1cb9      	adds	r1, r7, #2
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	2201      	movs	r2, #1
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f001 fbc6 	bl	8001cba <HAL_SPI_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <app_InitMAX7219>:

void app_InitMAX7219(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    SPI_CS_ENABLE();
 800053c:	f7ff ffd2 	bl	80004e4 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, DECODE_MODE);
 8000540:	2109      	movs	r1, #9
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <app_InitMAX7219+0x98>)
 8000544:	f7ff ffe6 	bl	8000514 <SPI_Transmit>
    SPI_Transmit(&hspi1, 0xff);
 8000548:	21ff      	movs	r1, #255	; 0xff
 800054a:	4821      	ldr	r0, [pc, #132]	; (80005d0 <app_InitMAX7219+0x98>)
 800054c:	f7ff ffe2 	bl	8000514 <SPI_Transmit>
    SPI_CS_DISABLE();
 8000550:	f7ff ffd4 	bl	80004fc <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 8000554:	f7ff ffc6 	bl	80004e4 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, INTENSITY);
 8000558:	210a      	movs	r1, #10
 800055a:	481d      	ldr	r0, [pc, #116]	; (80005d0 <app_InitMAX7219+0x98>)
 800055c:	f7ff ffda 	bl	8000514 <SPI_Transmit>
    SPI_Transmit(&hspi1, 0x00); /* Selecciona el nivel de brillo del display de 7 segmentos */
 8000560:	2100      	movs	r1, #0
 8000562:	481b      	ldr	r0, [pc, #108]	; (80005d0 <app_InitMAX7219+0x98>)
 8000564:	f7ff ffd6 	bl	8000514 <SPI_Transmit>
    SPI_CS_DISABLE();
 8000568:	f7ff ffc8 	bl	80004fc <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 800056c:	f7ff ffba 	bl	80004e4 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, SCAN_LIMIT);
 8000570:	210b      	movs	r1, #11
 8000572:	4817      	ldr	r0, [pc, #92]	; (80005d0 <app_InitMAX7219+0x98>)
 8000574:	f7ff ffce 	bl	8000514 <SPI_Transmit>
    SPI_Transmit(&hspi1, SCAN_ALL_DIGITS);
 8000578:	2107      	movs	r1, #7
 800057a:	4815      	ldr	r0, [pc, #84]	; (80005d0 <app_InitMAX7219+0x98>)
 800057c:	f7ff ffca 	bl	8000514 <SPI_Transmit>
    SPI_CS_DISABLE();
 8000580:	f7ff ffbc 	bl	80004fc <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 8000584:	f7ff ffae 	bl	80004e4 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, SHUTDOWN);
 8000588:	210c      	movs	r1, #12
 800058a:	4811      	ldr	r0, [pc, #68]	; (80005d0 <app_InitMAX7219+0x98>)
 800058c:	f7ff ffc2 	bl	8000514 <SPI_Transmit>
    SPI_Transmit(&hspi1, NORMAL_OPERATION);
 8000590:	2101      	movs	r1, #1
 8000592:	480f      	ldr	r0, [pc, #60]	; (80005d0 <app_InitMAX7219+0x98>)
 8000594:	f7ff ffbe 	bl	8000514 <SPI_Transmit>
    SPI_CS_DISABLE();
 8000598:	f7ff ffb0 	bl	80004fc <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 800059c:	f7ff ffa2 	bl	80004e4 <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1, DISPLAY_TEST);
 80005a0:	210f      	movs	r1, #15
 80005a2:	480b      	ldr	r0, [pc, #44]	; (80005d0 <app_InitMAX7219+0x98>)
 80005a4:	f7ff ffb6 	bl	8000514 <SPI_Transmit>
	SPI_Transmit(&hspi1, ENABLE_TEST_MODE);
 80005a8:	2101      	movs	r1, #1
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <app_InitMAX7219+0x98>)
 80005ac:	f7ff ffb2 	bl	8000514 <SPI_Transmit>
	SPI_CS_DISABLE();
 80005b0:	f7ff ffa4 	bl	80004fc <SPI_CS_DISABLE>

	SPI_CS_ENABLE();
 80005b4:	f7ff ff96 	bl	80004e4 <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1, DISPLAY_TEST);
 80005b8:	210f      	movs	r1, #15
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <app_InitMAX7219+0x98>)
 80005bc:	f7ff ffaa 	bl	8000514 <SPI_Transmit>
	SPI_Transmit(&hspi1, DISABLE_TEST_MODE);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <app_InitMAX7219+0x98>)
 80005c4:	f7ff ffa6 	bl	8000514 <SPI_Transmit>
	SPI_CS_DISABLE();
 80005c8:	f7ff ff98 	bl	80004fc <SPI_CS_DISABLE>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000c8 	.word	0x200000c8

080005d4 <app_NumeroAMAX7219>:

void app_NumeroAMAX7219(uint32_t Numero, uint8_t Numero_displays)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
	  volatile uint8_t i;
	  for(i=4;(Numero > 0) || (Numero_displays - i<=0) ; Numero/=10,i--)
 80005e0:	2304      	movs	r3, #4
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e024      	b.n	8000630 <app_NumeroAMAX7219+0x5c>
	  {
		SPI_CS_ENABLE();
 80005e6:	f7ff ff7d 	bl	80004e4 <SPI_CS_ENABLE>
		SPI_Transmit(&hspi1,i);
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	4816      	ldr	r0, [pc, #88]	; (800064c <app_NumeroAMAX7219+0x78>)
 80005f4:	f7ff ff8e 	bl	8000514 <SPI_Transmit>
	    SPI_Transmit(&hspi1,Numero%10);
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <app_NumeroAMAX7219+0x7c>)
 80005fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000600:	08da      	lsrs	r2, r3, #3
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	1aca      	subs	r2, r1, r3
 800060c:	b293      	uxth	r3, r2
 800060e:	4619      	mov	r1, r3
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <app_NumeroAMAX7219+0x78>)
 8000612:	f7ff ff7f 	bl	8000514 <SPI_Transmit>
	    SPI_CS_DISABLE();
 8000616:	f7ff ff71 	bl	80004fc <SPI_CS_DISABLE>
	  for(i=4;(Numero > 0) || (Numero_displays - i<=0) ; Numero/=10,i--)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <app_NumeroAMAX7219+0x7c>)
 800061e:	fba2 2303 	umull	r2, r3, r2, r3
 8000622:	08db      	lsrs	r3, r3, #3
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3b01      	subs	r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1d7      	bne.n	80005e6 <app_NumeroAMAX7219+0x12>
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	7bfa      	ldrb	r2, [r7, #15]
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	ddd1      	ble.n	80005e6 <app_NumeroAMAX7219+0x12>
	  }
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000c8 	.word	0x200000c8
 8000650:	cccccccd 	.word	0xcccccccd

08000654 <HAL_TIM_IC_CaptureCallback>:
		/* No realiza ninguna funcion */
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7f1b      	ldrb	r3, [r3, #28]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d128      	bne.n	80006b6 <HAL_TIM_IC_CaptureCallback+0x62>
  {
    /* Get the Input Capture value */
    uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000664:	2104      	movs	r1, #4
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f002 f86c 	bl	8002744 <HAL_TIM_ReadCapturedValue>
 800066c:	4602      	mov	r2, r0
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000670:	601a      	str	r2, [r3, #0]

    if (uwIC2Value != 0)
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d017      	beq.n	80006aa <HAL_TIM_IC_CaptureCallback+0x56>
    {
      /* Duty cycle computation */
      uwDutyCycle = ((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1)) * 100) / uwIC2Value;
 800067a:	2100      	movs	r1, #0
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f002 f861 	bl	8002744 <HAL_TIM_ReadCapturedValue>
 8000682:	4602      	mov	r2, r0
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	fb03 f202 	mul.w	r2, r3, r2
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000694:	6013      	str	r3, [r2, #0]

      /* uwFrequency computation
      TIM2 counter clock = (RCC_Clocks.HCLK_Frequency) */
      uwFrequency = (HAL_RCC_GetHCLKFreq())  / uwIC2Value;
 8000696:	f001 fa87 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 800069a:	4602      	mov	r2, r0
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_TIM_IC_CaptureCallback+0x74>)
 80006a6:	6013      	str	r3, [r2, #0]
    {
      uwDutyCycle = 0;
      uwFrequency = 0;
    }
  }
}
 80006a8:	e005      	b.n	80006b6 <HAL_TIM_IC_CaptureCallback+0x62>
      uwDutyCycle = 0;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x70>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
      uwFrequency = 0;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_TIM_IC_CaptureCallback+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000038 	.word	0x20000038
 80006c4:	2000003c 	.word	0x2000003c
 80006c8:	20000040 	.word	0x20000040

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fba3 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f83d 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f997 	bl	8000a0c <MX_GPIO_Init>
  MX_TIM1_Init();
 80006de:	f000 f8ab 	bl	8000838 <MX_TIM1_Init>
  MX_SPI1_Init();
 80006e2:	f000 f873 	bl	80007cc <MX_SPI1_Init>
  MX_TIM2_Init();
 80006e6:	f000 f8f7 	bl	80008d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <main+0x74>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <main+0x74>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006f8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim1);
 80006fa:	4812      	ldr	r0, [pc, #72]	; (8000744 <main+0x78>)
 80006fc:	f001 fcc4 	bl	8002088 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4810      	ldr	r0, [pc, #64]	; (8000744 <main+0x78>)
 8000704:	f001 fd18 	bl	8002138 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000708:	2104      	movs	r1, #4
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <main+0x7c>)
 800070c:	f001 fd14 	bl	8002138 <HAL_TIM_IC_Start_IT>
  app_InitMAX7219();
 8000710:	f7ff ff12 	bl	8000538 <app_InitMAX7219>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Se manda la direccion del Boton */
  uint16_t Boton[3] = {0x1000, 0x2000, 0x4000};
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <main+0x80>)
 8000716:	463b      	mov	r3, r7
 8000718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071c:	6018      	str	r0, [r3, #0]
 800071e:	3304      	adds	r3, #4
 8000720:	8019      	strh	r1, [r3, #0]

  while (1)
  {
	  app_Debounce(Boton, 2);
 8000722:	463b      	mov	r3, r7
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd10 	bl	800014c <app_Debounce>
	  app_SeleccionarAngulo();
 800072c:	f7ff fe44 	bl	80003b8 <app_SeleccionarAngulo>
	  app_NumeroAMAX7219(Total, 4);
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <main+0x84>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff4c 	bl	80005d4 <app_NumeroAMAX7219>
	  app_Debounce(Boton, 2);
 800073c:	e7f1      	b.n	8000722 <main+0x56>
 800073e:	bf00      	nop
 8000740:	200000c8 	.word	0x200000c8
 8000744:	20000044 	.word	0x20000044
 8000748:	20000088 	.word	0x20000088
 800074c:	08002e90 	.word	0x08002e90
 8000750:	2000002a 	.word	0x2000002a

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b090      	sub	sp, #64	; 0x40
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fb80 	bl	8002e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	2301      	movs	r3, #1
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2310      	movs	r3, #16
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fe40 	bl	8001410 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000796:	f000 f9d9 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f8ac 	bl	8001910 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007be:	f000 f9c5 	bl	8000b4c <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3740      	adds	r7, #64	; 0x40
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI1_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI1_Init+0x64>)
 800081e:	f001 f9eb 	bl	8001bf8 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 f990 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000c8 	.word	0x200000c8
 8000834:	40013000 	.word	0x40013000

08000838 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_TIM1_Init+0x9c>)
 8000858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM1_Init+0x98>)
 800085c:	224f      	movs	r2, #79	; 0x4f
 800085e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM1_Init+0x98>)
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000882:	f001 fbd6 	bl	8002032 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f95e 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM1_Init+0x98>)
 800089e:	f001 fe57 	bl	8002550 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008a8:	f000 f950 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM1_Init+0x98>)
 80008ba:	f002 fa5a 	bl	8002d72 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008c4:	f000 f942 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000044 	.word	0x20000044
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	; 0x40
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <MX_TIM2_Init+0x130>)
 8000914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000918:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <MX_TIM2_Init+0x130>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <MX_TIM2_Init+0x130>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_TIM2_Init+0x130>)
 8000928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <MX_TIM2_Init+0x130>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <MX_TIM2_Init+0x130>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093a:	4833      	ldr	r0, [pc, #204]	; (8000a08 <MX_TIM2_Init+0x130>)
 800093c:	f001 fb79 	bl	8002032 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000946:	f000 f901 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000954:	4619      	mov	r1, r3
 8000956:	482c      	ldr	r0, [pc, #176]	; (8000a08 <MX_TIM2_Init+0x130>)
 8000958:	f001 fdfa 	bl	8002550 <HAL_TIM_ConfigClockSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000962:	f000 f8f3 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000966:	4828      	ldr	r0, [pc, #160]	; (8000a08 <MX_TIM2_Init+0x130>)
 8000968:	f001 fbb1 	bl	80020ce <HAL_TIM_IC_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000972:	f000 f8eb 	bl	8000b4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000976:	2304      	movs	r3, #4
 8000978:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800097a:	2360      	movs	r3, #96	; 0x60
 800097c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	481e      	ldr	r0, [pc, #120]	; (8000a08 <MX_TIM2_Init+0x130>)
 800098e:	f001 fe96 	bl	80026be <HAL_TIM_SlaveConfigSynchro>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000998:	f000 f8d8 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4817      	ldr	r0, [pc, #92]	; (8000a08 <MX_TIM2_Init+0x130>)
 80009ac:	f002 f9e1 	bl	8002d72 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80009b6:	f000 f8c9 	bl	8000b4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009ba:	2302      	movs	r3, #2
 80009bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009be:	2302      	movs	r3, #2
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_TIM2_Init+0x130>)
 80009d2:	f001 fd21 	bl	8002418 <HAL_TIM_IC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80009dc:	f000 f8b6 	bl	8000b4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009e4:	2301      	movs	r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2204      	movs	r2, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_TIM2_Init+0x130>)
 80009f0:	f001 fd12 	bl	8002418 <HAL_TIM_IC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 80009fa:	f000 f8a7 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3740      	adds	r7, #64	; 0x40
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000088 	.word	0x20000088

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a20:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0310 	and.w	r3, r3, #16
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a38:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a3e:	f043 0320 	orr.w	r3, r3, #32
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <MX_GPIO_Init+0x12c>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	482d      	ldr	r0, [pc, #180]	; (8000b3c <MX_GPIO_Init+0x130>)
 8000a88:	f000 fca9 	bl	80013de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2110      	movs	r1, #16
 8000a90:	482b      	ldr	r0, [pc, #172]	; (8000b40 <MX_GPIO_Init+0x134>)
 8000a92:	f000 fca4 	bl	80013de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4829      	ldr	r0, [pc, #164]	; (8000b44 <MX_GPIO_Init+0x138>)
 8000a9e:	f000 fc9e 	bl	80013de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4820      	ldr	r0, [pc, #128]	; (8000b3c <MX_GPIO_Init+0x130>)
 8000abc:	f000 fb1e 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CSS_Pin */
  GPIO_InitStruct.Pin = CSS_Pin;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481a      	ldr	r0, [pc, #104]	; (8000b40 <MX_GPIO_Init+0x134>)
 8000ad8:	f000 fb10 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton0_Pin Boton1_Pin Boton2_Pin */
  GPIO_InitStruct.Pin = Boton0_Pin|Boton1_Pin|Boton2_Pin;
 8000adc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4619      	mov	r1, r3
 8000af0:	4814      	ldr	r0, [pc, #80]	; (8000b44 <MX_GPIO_Init+0x138>)
 8000af2:	f000 fb03 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DetectorCero_Pin */
  GPIO_InitStruct.Pin = DetectorCero_Pin;
 8000af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_GPIO_Init+0x13c>)
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DetectorCero_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480e      	ldr	r0, [pc, #56]	; (8000b44 <MX_GPIO_Init+0x138>)
 8000b0c:	f000 faf6 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SSR_Pin */
  GPIO_InitStruct.Pin = SSR_Pin;
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SSR_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4619      	mov	r1, r3
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_GPIO_Init+0x138>)
 8000b2a:	f000 fae7 	bl	80010fc <HAL_GPIO_Init>

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	10210000 	.word	0x10210000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d12f      	bne.n	8000c3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c0c:	23a0      	movs	r3, #160	; 0xa0
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_SPI_MspInit+0x90>)
 8000c20:	f000 fa6c 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_SPI_MspInit+0x90>)
 8000c38:	f000 fa60 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d10c      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000c76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c88:	e030      	b.n	8000cec <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c92:	d12b      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	61d3      	str	r3, [r2, #28]
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_TIM_Base_MspInit+0xac>)
 8000cd8:	f000 fa10 	bl	80010fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	201c      	movs	r0, #28
 8000ce2:	f000 f9d4 	bl	800108e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f000 f9ed 	bl	80010c6 <HAL_NVIC_EnableIRQ>
}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <HardFault_Handler+0x4>

08000d12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <MemManage_Handler+0x4>

08000d18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <BusFault_Handler+0x4>

08000d1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <UsageFault_Handler+0x4>

08000d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f8ac 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM2_IRQHandler+0x10>)
 8000d5a:	f001 fa55 	bl	8002208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000088 	.word	0x20000088

08000d68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <SystemInit+0x5c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <SystemInit+0x5c>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <SystemInit+0x5c>)
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4911      	ldr	r1, [pc, #68]	; (8000dc4 <SystemInit+0x5c>)
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <SystemInit+0x60>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <SystemInit+0x5c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <SystemInit+0x5c>)
 8000d8a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <SystemInit+0x5c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SystemInit+0x5c>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <SystemInit+0x5c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <SystemInit+0x5c>)
 8000da6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000daa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SystemInit+0x5c>)
 8000dae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000db2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SystemInit+0x64>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	f8ff0000 	.word	0xf8ff0000
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dd0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dd2:	e003      	b.n	8000ddc <LoopCopyDataInit>

08000dd4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dd6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dd8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dda:	3104      	adds	r1, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000de0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000de2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000de4:	d3f6      	bcc.n	8000dd4 <CopyDataInit>
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000de8:	e002      	b.n	8000df0 <LoopFillZerobss>

08000dea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000dec:	f842 3b04 	str.w	r3, [r2], #4

08000df0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000df2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000df4:	d3f9      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000df6:	f7ff ffb7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f002 f811 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfe:	f7ff fc65 	bl	80006cc <main>
  bx lr
 8000e02:	4770      	bx	lr
  ldr r3, =_sidata
 8000e04:	08002ec4 	.word	0x08002ec4
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e10:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000e14:	20000124 	.word	0x20000124

08000e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC1_2_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x28>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x28>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f923 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f808 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fe8e 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f93b 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e84:	f000 f903 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x1c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000120 	.word	0x20000120

08000ecc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <HAL_GetTick+0x10>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	20000120 	.word	0x20000120

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4906      	ldr	r1, [pc, #24]	; (8000f78 <__NVIC_EnableIRQ+0x34>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f7ff ff90 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff2d 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff42 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff90 	bl	8000fd0 <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5f 	bl	8000f7c <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff35 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa2 	bl	8001034 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e127      	b.n	8001360 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001110:	2201      	movs	r2, #1
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8116 	bne.w	800135a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b12      	cmp	r3, #18
 8001134:	d034      	beq.n	80011a0 <HAL_GPIO_Init+0xa4>
 8001136:	2b12      	cmp	r3, #18
 8001138:	d80d      	bhi.n	8001156 <HAL_GPIO_Init+0x5a>
 800113a:	2b02      	cmp	r3, #2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x9a>
 800113e:	2b02      	cmp	r3, #2
 8001140:	d804      	bhi.n	800114c <HAL_GPIO_Init+0x50>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d031      	beq.n	80011aa <HAL_GPIO_Init+0xae>
 8001146:	2b01      	cmp	r3, #1
 8001148:	d01c      	beq.n	8001184 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114a:	e048      	b.n	80011de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800114c:	2b03      	cmp	r3, #3
 800114e:	d043      	beq.n	80011d8 <HAL_GPIO_Init+0xdc>
 8001150:	2b11      	cmp	r3, #17
 8001152:	d01b      	beq.n	800118c <HAL_GPIO_Init+0x90>
          break;
 8001154:	e043      	b.n	80011de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001156:	4a89      	ldr	r2, [pc, #548]	; (800137c <HAL_GPIO_Init+0x280>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d026      	beq.n	80011aa <HAL_GPIO_Init+0xae>
 800115c:	4a87      	ldr	r2, [pc, #540]	; (800137c <HAL_GPIO_Init+0x280>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d806      	bhi.n	8001170 <HAL_GPIO_Init+0x74>
 8001162:	4a87      	ldr	r2, [pc, #540]	; (8001380 <HAL_GPIO_Init+0x284>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d020      	beq.n	80011aa <HAL_GPIO_Init+0xae>
 8001168:	4a86      	ldr	r2, [pc, #536]	; (8001384 <HAL_GPIO_Init+0x288>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01d      	beq.n	80011aa <HAL_GPIO_Init+0xae>
          break;
 800116e:	e036      	b.n	80011de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001170:	4a85      	ldr	r2, [pc, #532]	; (8001388 <HAL_GPIO_Init+0x28c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0xae>
 8001176:	4a85      	ldr	r2, [pc, #532]	; (800138c <HAL_GPIO_Init+0x290>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d016      	beq.n	80011aa <HAL_GPIO_Init+0xae>
 800117c:	4a84      	ldr	r2, [pc, #528]	; (8001390 <HAL_GPIO_Init+0x294>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0xae>
          break;
 8001182:	e02c      	b.n	80011de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e028      	b.n	80011de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	3304      	adds	r3, #4
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e023      	b.n	80011de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	3308      	adds	r3, #8
 800119c:	623b      	str	r3, [r7, #32]
          break;
 800119e:	e01e      	b.n	80011de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	330c      	adds	r3, #12
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e019      	b.n	80011de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011b2:	2304      	movs	r3, #4
 80011b4:	623b      	str	r3, [r7, #32]
          break;
 80011b6:	e012      	b.n	80011de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c0:	2308      	movs	r3, #8
 80011c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	611a      	str	r2, [r3, #16]
          break;
 80011ca:	e008      	b.n	80011de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011cc:	2308      	movs	r3, #8
 80011ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	615a      	str	r2, [r3, #20]
          break;
 80011d6:	e002      	b.n	80011de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	d801      	bhi.n	80011e8 <HAL_GPIO_Init+0xec>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	e001      	b.n	80011ec <HAL_GPIO_Init+0xf0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3304      	adds	r3, #4
 80011ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d802      	bhi.n	80011fa <HAL_GPIO_Init+0xfe>
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x104>
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	3b08      	subs	r3, #8
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	210f      	movs	r1, #15
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	401a      	ands	r2, r3
 8001212:	6a39      	ldr	r1, [r7, #32]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	431a      	orrs	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 8096 	beq.w	800135a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800122e:	4b59      	ldr	r3, [pc, #356]	; (8001394 <HAL_GPIO_Init+0x298>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4a58      	ldr	r2, [pc, #352]	; (8001394 <HAL_GPIO_Init+0x298>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6193      	str	r3, [r2, #24]
 800123a:	4b56      	ldr	r3, [pc, #344]	; (8001394 <HAL_GPIO_Init+0x298>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001246:	4a54      	ldr	r2, [pc, #336]	; (8001398 <HAL_GPIO_Init+0x29c>)
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_GPIO_Init+0x2a0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x19e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4a      	ldr	r2, [pc, #296]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x19a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_GPIO_Init+0x2a8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x196>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x192>
 800128a:	2303      	movs	r3, #3
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x1a0>
 800128e:	2304      	movs	r3, #4
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x1a0>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x1a0>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x1a0>
 800129a:	2300      	movs	r3, #0
 800129c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ac:	493a      	ldr	r1, [pc, #232]	; (8001398 <HAL_GPIO_Init+0x29c>)
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4938      	ldr	r1, [pc, #224]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
 80012d2:	e006      	b.n	80012e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	43db      	mvns	r3, r3
 80012dc:	4933      	ldr	r1, [pc, #204]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012de:	4013      	ands	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	492e      	ldr	r1, [pc, #184]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	43db      	mvns	r3, r3
 8001304:	4929      	ldr	r1, [pc, #164]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001306:	4013      	ands	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	4924      	ldr	r1, [pc, #144]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	43db      	mvns	r3, r3
 800132c:	491f      	ldr	r1, [pc, #124]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 800132e:	4013      	ands	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	491a      	ldr	r1, [pc, #104]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	60cb      	str	r3, [r1, #12]
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4915      	ldr	r1, [pc, #84]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001356:	4013      	ands	r3, r2
 8001358:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f aed0 	bne.w	8001110 <HAL_GPIO_Init+0x14>
  }
}
 8001370:	bf00      	nop
 8001372:	372c      	adds	r7, #44	; 0x2c
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	10210000 	.word	0x10210000
 8001380:	10110000 	.word	0x10110000
 8001384:	10120000 	.word	0x10120000
 8001388:	10310000 	.word	0x10310000
 800138c:	10320000 	.word	0x10320000
 8001390:	10220000 	.word	0x10220000
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	40010800 	.word	0x40010800
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	40011000 	.word	0x40011000
 80013a8:	40011400 	.word	0x40011400
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ee:	787b      	ldrb	r3, [r7, #1]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	041a      	lsls	r2, r3, #16
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	611a      	str	r2, [r3, #16]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e26c      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8087 	beq.w	800153e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001430:	4b92      	ldr	r3, [pc, #584]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b04      	cmp	r3, #4
 800143a:	d00c      	beq.n	8001456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800143c:	4b8f      	ldr	r3, [pc, #572]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d112      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
 8001448:	4b8c      	ldr	r3, [pc, #560]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d10b      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001456:	4b89      	ldr	r3, [pc, #548]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d06c      	beq.n	800153c <HAL_RCC_OscConfig+0x12c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d168      	bne.n	800153c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e246      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x76>
 8001478:	4b80      	ldr	r3, [pc, #512]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a7f      	ldr	r2, [pc, #508]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e02e      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x98>
 800148e:	4b7b      	ldr	r3, [pc, #492]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7a      	ldr	r2, [pc, #488]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b78      	ldr	r3, [pc, #480]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a77      	ldr	r2, [pc, #476]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0xbc>
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a71      	ldr	r2, [pc, #452]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6f      	ldr	r3, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6e      	ldr	r2, [pc, #440]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014cc:	4b6b      	ldr	r3, [pc, #428]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a6a      	ldr	r2, [pc, #424]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a67      	ldr	r2, [pc, #412]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fcee 	bl	8000ecc <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fcea 	bl	8000ecc <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1fa      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe4>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fcda 	bl	8000ecc <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fcd6 	bl	8000ecc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1e6      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x10c>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1ba      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4939      	ldr	r1, [pc, #228]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc8f 	bl	8000ecc <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc8b 	bl	8000ecc <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e19b      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4927      	ldr	r1, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc6e 	bl	8000ecc <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc6a 	bl	8000ecc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e17a      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03a      	beq.n	8001694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_RCC_OscConfig+0x274>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fc4e 	bl	8000ecc <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fc4a 	bl	8000ecc <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e15a      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fab2 	bl	8001bbc <RCC_Delay>
 8001658:	e01c      	b.n	8001694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RCC_OscConfig+0x274>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fc34 	bl	8000ecc <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001666:	e00f      	b.n	8001688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fc30 	bl	8000ecc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d908      	bls.n	8001688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e140      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	42420000 	.word	0x42420000
 8001684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	4b9e      	ldr	r3, [pc, #632]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e9      	bne.n	8001668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a6 	beq.w	80017ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a6:	4b97      	ldr	r3, [pc, #604]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10d      	bne.n	80016ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b94      	ldr	r3, [pc, #592]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a93      	ldr	r2, [pc, #588]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b91      	ldr	r3, [pc, #580]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b8e      	ldr	r3, [pc, #568]	; (8001908 <HAL_RCC_OscConfig+0x4f8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b8b      	ldr	r3, [pc, #556]	; (8001908 <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a8a      	ldr	r2, [pc, #552]	; (8001908 <HAL_RCC_OscConfig+0x4f8>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbf1 	bl	8000ecc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff fbed 	bl	8000ecc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	; 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0fd      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	4b81      	ldr	r3, [pc, #516]	; (8001908 <HAL_RCC_OscConfig+0x4f8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x312>
 8001714:	4b7b      	ldr	r3, [pc, #492]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a7a      	ldr	r2, [pc, #488]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e02d      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x334>
 800172a:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a75      	ldr	r2, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	4b73      	ldr	r3, [pc, #460]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a72      	ldr	r2, [pc, #456]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	e01c      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d10c      	bne.n	8001766 <HAL_RCC_OscConfig+0x356>
 800174c:	4b6d      	ldr	r3, [pc, #436]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a6c      	ldr	r2, [pc, #432]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a69      	ldr	r2, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a66      	ldr	r2, [pc, #408]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b64      	ldr	r3, [pc, #400]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a63      	ldr	r2, [pc, #396]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fba1 	bl	8000ecc <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb9d 	bl	8000ecc <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0ab      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	4b57      	ldr	r3, [pc, #348]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ee      	beq.n	800178e <HAL_RCC_OscConfig+0x37e>
 80017b0:	e014      	b.n	80017dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb8b 	bl	8000ecc <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fb87 	bl	8000ecc <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e095      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ee      	bne.n	80017ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a47      	ldr	r2, [pc, #284]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8081 	beq.w	80018fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d061      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d146      	bne.n	800189a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_OscConfig+0x4fc>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fb5b 	bl	8000ecc <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fb57 	bl	8000ecc <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e067      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d108      	bne.n	8001854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001842:	4b30      	ldr	r3, [pc, #192]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	492d      	ldr	r1, [pc, #180]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a19      	ldr	r1, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	430b      	orrs	r3, r1
 8001866:	4927      	ldr	r1, [pc, #156]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x4fc>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb2b 	bl	8000ecc <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb27 	bl	8000ecc <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e037      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x46a>
 8001898:	e02f      	b.n	80018fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_RCC_OscConfig+0x4fc>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb14 	bl	8000ecc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff fb10 	bl	8000ecc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e020      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x498>
 80018c6:	e018      	b.n	80018fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e013      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
 800190c:	42420060 	.word	0x42420060

08001910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0d0      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b6a      	ldr	r3, [pc, #424]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0207 	bic.w	r2, r3, #7
 800193a:	4965      	ldr	r1, [pc, #404]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800198e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d040      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d115      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e073      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06b      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4936      	ldr	r1, [pc, #216]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fa64 	bl	8000ecc <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa60 	bl	8000ecc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e053      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d210      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 0207 	bic.w	r2, r3, #7
 8001a46:	4922      	ldr	r1, [pc, #136]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1cc>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f9c2 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	08002eac 	.word	0x08002eac
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	b490      	push	{r4, r7}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aec:	1d3c      	adds	r4, r7, #4
 8001aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x40>
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x46>
 8001b22:	e02d      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b26:	623b      	str	r3, [r7, #32]
      break;
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b36:	4413      	add	r3, r2
 8001b38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0c5b      	lsrs	r3, r3, #17
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b56:	4413      	add	r3, r2
 8001b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b62:	fb02 f203 	mul.w	r2, r2, r3
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	e004      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	623b      	str	r3, [r7, #32]
      break;
 8001b7e:	e002      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b82:	623b      	str	r3, [r7, #32]
      break;
 8001b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b86:	6a3b      	ldr	r3, [r7, #32]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc90      	pop	{r4, r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	08002e98 	.word	0x08002e98
 8001b98:	08002ea8 	.word	0x08002ea8
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	007a1200 	.word	0x007a1200
 8001ba4:	003d0900 	.word	0x003d0900

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000000 	.word	0x20000000

08001bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <RCC_Delay+0x34>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <RCC_Delay+0x38>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0a5b      	lsrs	r3, r3, #9
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bd8:	bf00      	nop
  }
  while (Delay --);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	60fa      	str	r2, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <RCC_Delay+0x1c>
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	10624dd3 	.word	0x10624dd3

08001bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e053      	b.n	8001cb2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d106      	bne.n	8001c2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7fe ffc9 	bl	8000bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	ea42 0103 	orr.w	r1, r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	0c1a      	lsrs	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f002 0204 	and.w	r2, r2, #4
 8001c90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b088      	sub	sp, #32
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_SPI_Transmit+0x22>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e11e      	b.n	8001f1a <HAL_SPI_Transmit+0x260>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce4:	f7ff f8f2 	bl	8000ecc <HAL_GetTick>
 8001ce8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cfe:	e103      	b.n	8001f08 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_SPI_Transmit+0x52>
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d10:	e0fa      	b.n	8001f08 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d58:	d107      	bne.n	8001d6a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d007      	beq.n	8001d88 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d90:	d14b      	bne.n	8001e2a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_SPI_Transmit+0xe6>
 8001d9a:	8afb      	ldrh	r3, [r7, #22]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d13e      	bne.n	8001e1e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	1c9a      	adds	r2, r3, #2
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dc4:	e02b      	b.n	8001e1e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d112      	bne.n	8001dfa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	1c9a      	adds	r2, r3, #2
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001df8:	e011      	b.n	8001e1e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dfa:	f7ff f867 	bl	8000ecc <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d803      	bhi.n	8001e12 <HAL_SPI_Transmit+0x158>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e10:	d102      	bne.n	8001e18 <HAL_SPI_Transmit+0x15e>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e1c:	e074      	b.n	8001f08 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ce      	bne.n	8001dc6 <HAL_SPI_Transmit+0x10c>
 8001e28:	e04c      	b.n	8001ec4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_SPI_Transmit+0x17e>
 8001e32:	8afb      	ldrh	r3, [r7, #22]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d140      	bne.n	8001eba <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	330c      	adds	r3, #12
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e5e:	e02c      	b.n	8001eba <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d113      	bne.n	8001e96 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	330c      	adds	r3, #12
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e94:	e011      	b.n	8001eba <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e96:	f7ff f819 	bl	8000ecc <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d803      	bhi.n	8001eae <HAL_SPI_Transmit+0x1f4>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eac:	d102      	bne.n	8001eb4 <HAL_SPI_Transmit+0x1fa>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001eb8:	e026      	b.n	8001f08 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1cd      	bne.n	8001e60 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f894 	bl	8001ff6 <SPI_EndRxTxTransaction>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10a      	bne.n	8001ef8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	77fb      	strb	r3, [r7, #31]
 8001f04:	e000      	b.n	8001f08 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3720      	adds	r7, #32
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f32:	e04c      	b.n	8001fce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f3a:	d048      	beq.n	8001fce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001f3c:	f7fe ffc6 	bl	8000ecc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d902      	bls.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d13d      	bne.n	8001fce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f6a:	d111      	bne.n	8001f90 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f74:	d004      	beq.n	8001f80 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d107      	bne.n	8001f90 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f98:	d10f      	bne.n	8001fba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e00f      	b.n	8001fee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1a3      	bne.n	8001f34 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af02      	add	r7, sp, #8
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7ff ff88 	bl	8001f22 <SPI_WaitFlagStateUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e000      	b.n	800202a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e01d      	b.n	8002080 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7fe fdf9 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4610      	mov	r0, r2
 8002072:	f000 fbcf 	bl	8002814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d007      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e01d      	b.n	800211c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d106      	bne.n	80020fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f815 	bl	8002124 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f000 fb81 	bl	8002814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
	...

08002138 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b0c      	cmp	r3, #12
 8002146:	d841      	bhi.n	80021cc <HAL_TIM_IC_Start_IT+0x94>
 8002148:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <HAL_TIM_IC_Start_IT+0x18>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002185 	.word	0x08002185
 8002154:	080021cd 	.word	0x080021cd
 8002158:	080021cd 	.word	0x080021cd
 800215c:	080021cd 	.word	0x080021cd
 8002160:	08002197 	.word	0x08002197
 8002164:	080021cd 	.word	0x080021cd
 8002168:	080021cd 	.word	0x080021cd
 800216c:	080021cd 	.word	0x080021cd
 8002170:	080021a9 	.word	0x080021a9
 8002174:	080021cd 	.word	0x080021cd
 8002178:	080021cd 	.word	0x080021cd
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080021bb 	.word	0x080021bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0202 	orr.w	r2, r2, #2
 8002192:	60da      	str	r2, [r3, #12]
      break;
 8002194:	e01b      	b.n	80021ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0204 	orr.w	r2, r2, #4
 80021a4:	60da      	str	r2, [r3, #12]
      break;
 80021a6:	e012      	b.n	80021ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	60da      	str	r2, [r3, #12]
      break;
 80021b8:	e009      	b.n	80021ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0210 	orr.w	r2, r2, #16
 80021c8:	60da      	str	r2, [r3, #12]
      break;
 80021ca:	e000      	b.n	80021ce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80021cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fda7 	bl	8002d2a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d007      	beq.n	80021fe <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0202 	mvn.w	r2, #2
 8002234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fa02 	bl	8000654 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fac3 	bl	80027de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fac9 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b04      	cmp	r3, #4
 8002270:	d122      	bne.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0204 	mvn.w	r2, #4
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe f9d8 	bl	8000654 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa99 	bl	80027de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa9f 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d122      	bne.n	800230c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0208 	mvn.w	r2, #8
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2204      	movs	r2, #4
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe f9ae 	bl	8000654 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa6f 	bl	80027de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa75 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b10      	cmp	r3, #16
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b10      	cmp	r3, #16
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0210 	mvn.w	r2, #16
 8002330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2208      	movs	r2, #8
 8002336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe f984 	bl	8000654 <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fa45 	bl	80027de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fa4b 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0201 	mvn.w	r2, #1
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fa20 	bl	80027cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b80      	cmp	r3, #128	; 0x80
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d107      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fd2a 	bl	8002e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa0f 	bl	8002802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0220 	mvn.w	r2, #32
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fcf5 	bl	8002dfa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_TIM_IC_ConfigChannel+0x1a>
 800242e:	2302      	movs	r3, #2
 8002430:	e08a      	b.n	8002548 <HAL_TIM_IC_ConfigChannel+0x130>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f000 fac4 	bl	80029e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 020c 	bic.w	r2, r2, #12
 800246a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6999      	ldr	r1, [r3, #24]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	619a      	str	r2, [r3, #24]
 800247e:	e05a      	b.n	8002536 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d11c      	bne.n	80024c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f000 fb2d 	bl	8002af4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6999      	ldr	r1, [r3, #24]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	021a      	lsls	r2, r3, #8
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	619a      	str	r2, [r3, #24]
 80024be:	e03a      	b.n	8002536 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11b      	bne.n	80024fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f000 fb78 	bl	8002bca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 020c 	bic.w	r2, r2, #12
 80024e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69d9      	ldr	r1, [r3, #28]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	61da      	str	r2, [r3, #28]
 80024fc:	e01b      	b.n	8002536 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f000 fb97 	bl	8002c40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002520:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69d9      	ldr	r1, [r3, #28]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	021a      	lsls	r2, r3, #8
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_TIM_ConfigClockSource+0x18>
 8002564:	2302      	movs	r3, #2
 8002566:	e0a6      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x166>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d067      	beq.n	8002670 <HAL_TIM_ConfigClockSource+0x120>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d80b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x6c>
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d073      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d802      	bhi.n	80025b2 <HAL_TIM_ConfigClockSource+0x62>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d06f      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025b0:	e078      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d06c      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
 80025b6:	2b30      	cmp	r3, #48	; 0x30
 80025b8:	d06a      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025ba:	e073      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025bc:	2b70      	cmp	r3, #112	; 0x70
 80025be:	d00d      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x8c>
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d804      	bhi.n	80025ce <HAL_TIM_ConfigClockSource+0x7e>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d033      	beq.n	8002630 <HAL_TIM_ConfigClockSource+0xe0>
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d041      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025cc:	e06a      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d2:	d066      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x152>
 80025d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d8:	d017      	beq.n	800260a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80025da:	e063      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6899      	ldr	r1, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f000 fb7e 	bl	8002cec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]
      break;
 8002608:	e04c      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f000 fb67 	bl	8002cec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800262c:	609a      	str	r2, [r3, #8]
      break;
 800262e:	e039      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	f000 fa2b 	bl	8002a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2150      	movs	r1, #80	; 0x50
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fb35 	bl	8002cb8 <TIM_ITRx_SetConfig>
      break;
 800264e:	e029      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	461a      	mov	r2, r3
 800265e:	f000 fa85 	bl	8002b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2160      	movs	r1, #96	; 0x60
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fb25 	bl	8002cb8 <TIM_ITRx_SetConfig>
      break;
 800266e:	e019      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	461a      	mov	r2, r3
 800267e:	f000 fa0b 	bl	8002a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fb15 	bl	8002cb8 <TIM_ITRx_SetConfig>
      break;
 800268e:	e009      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 fb0c 	bl	8002cb8 <TIM_ITRx_SetConfig>
      break;
 80026a0:	e000      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e031      	b.n	800273a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80026e6:	6839      	ldr	r1, [r7, #0]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f8f5 	bl	80028d8 <TIM_SlaveTimer_SetConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e018      	b.n	800273a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002716:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002726:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d831      	bhi.n	80027bc <HAL_TIM_ReadCapturedValue+0x78>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <HAL_TIM_ReadCapturedValue+0x1c>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002795 	.word	0x08002795
 8002764:	080027bd 	.word	0x080027bd
 8002768:	080027bd 	.word	0x080027bd
 800276c:	080027bd 	.word	0x080027bd
 8002770:	0800279f 	.word	0x0800279f
 8002774:	080027bd 	.word	0x080027bd
 8002778:	080027bd 	.word	0x080027bd
 800277c:	080027bd 	.word	0x080027bd
 8002780:	080027a9 	.word	0x080027a9
 8002784:	080027bd 	.word	0x080027bd
 8002788:	080027bd 	.word	0x080027bd
 800278c:	080027bd 	.word	0x080027bd
 8002790:	080027b3 	.word	0x080027b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	60fb      	str	r3, [r7, #12]

      break;
 800279c:	e00f      	b.n	80027be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	60fb      	str	r3, [r7, #12]

      break;
 80027a6:	e00a      	b.n	80027be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	60fb      	str	r3, [r7, #12]

      break;
 80027b0:	e005      	b.n	80027be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	60fb      	str	r3, [r7, #12]

      break;
 80027ba:	e000      	b.n	80027be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80027bc:	bf00      	nop
  }

  return tmpreg;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a29      	ldr	r2, [pc, #164]	; (80028cc <TIM_Base_SetConfig+0xb8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00b      	beq.n	8002844 <TIM_Base_SetConfig+0x30>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002832:	d007      	beq.n	8002844 <TIM_Base_SetConfig+0x30>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <TIM_Base_SetConfig+0xbc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0x30>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <TIM_Base_SetConfig+0xc0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <TIM_Base_SetConfig+0xb8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00b      	beq.n	8002876 <TIM_Base_SetConfig+0x62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d007      	beq.n	8002876 <TIM_Base_SetConfig+0x62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <TIM_Base_SetConfig+0xbc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <TIM_Base_SetConfig+0x62>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <TIM_Base_SetConfig+0xc0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d108      	bne.n	8002888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <TIM_Base_SetConfig+0xb8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d103      	bne.n	80028bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	615a      	str	r2, [r3, #20]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800

080028d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0307 	bic.w	r3, r3, #7
 8002902:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b30      	cmp	r3, #48	; 0x30
 800291c:	d05c      	beq.n	80029d8 <TIM_SlaveTimer_SetConfig+0x100>
 800291e:	2b30      	cmp	r3, #48	; 0x30
 8002920:	d806      	bhi.n	8002930 <TIM_SlaveTimer_SetConfig+0x58>
 8002922:	2b10      	cmp	r3, #16
 8002924:	d058      	beq.n	80029d8 <TIM_SlaveTimer_SetConfig+0x100>
 8002926:	2b20      	cmp	r3, #32
 8002928:	d056      	beq.n	80029d8 <TIM_SlaveTimer_SetConfig+0x100>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d054      	beq.n	80029d8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800292e:	e054      	b.n	80029da <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002930:	2b50      	cmp	r3, #80	; 0x50
 8002932:	d03d      	beq.n	80029b0 <TIM_SlaveTimer_SetConfig+0xd8>
 8002934:	2b50      	cmp	r3, #80	; 0x50
 8002936:	d802      	bhi.n	800293e <TIM_SlaveTimer_SetConfig+0x66>
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d010      	beq.n	800295e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800293c:	e04d      	b.n	80029da <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800293e:	2b60      	cmp	r3, #96	; 0x60
 8002940:	d040      	beq.n	80029c4 <TIM_SlaveTimer_SetConfig+0xec>
 8002942:	2b70      	cmp	r3, #112	; 0x70
 8002944:	d000      	beq.n	8002948 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8002946:	e048      	b.n	80029da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68d9      	ldr	r1, [r3, #12]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f000 f9c8 	bl	8002cec <TIM_ETR_SetConfig>
      break;
 800295c:	e03d      	b.n	80029da <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d101      	bne.n	800296a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e038      	b.n	80029dc <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002990:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	621a      	str	r2, [r3, #32]
      break;
 80029ae:	e014      	b.n	80029da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	461a      	mov	r2, r3
 80029be:	f000 f86b 	bl	8002a98 <TIM_TI1_ConfigInputStage>
      break;
 80029c2:	e00a      	b.n	80029da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f000 f8cb 	bl	8002b6c <TIM_TI2_ConfigInputStage>
      break;
 80029d6:	e000      	b.n	80029da <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80029d8:	bf00      	nop
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <TIM_TI1_SetConfig+0xa8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_TI1_SetConfig+0x46>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d007      	beq.n	8002a2a <TIM_TI1_SetConfig+0x46>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <TIM_TI1_SetConfig+0xac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_TI1_SetConfig+0x46>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <TIM_TI1_SetConfig+0xb0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <TIM_TI1_SetConfig+0x4a>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <TIM_TI1_SetConfig+0x4c>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e003      	b.n	8002a4e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f023 030a 	bic.w	r3, r3, #10
 8002a68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f003 030a 	and.w	r3, r3, #10
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800

08002a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f023 0201 	bic.w	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 030a 	bic.w	r3, r3, #10
 8002ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	621a      	str	r2, [r3, #32]
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0210 	bic.w	r2, r3, #16
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	031b      	lsls	r3, r3, #12
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f023 0210 	bic.w	r2, r3, #16
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	031b      	lsls	r3, r3, #12
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	621a      	str	r2, [r3, #32]
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	031b      	lsls	r3, r3, #12
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	621a      	str	r2, [r3, #32]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f043 0307 	orr.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	609a      	str	r2, [r3, #8]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	621a      	str	r2, [r3, #32]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e032      	b.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
	...

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2500      	movs	r5, #0
 8002e24:	4e0c      	ldr	r6, [pc, #48]	; (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	; (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1ba4      	subs	r4, r4, r6
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a5      	cmp	r5, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 f822 	bl	8002e78 <_init>
 8002e34:	2500      	movs	r5, #0
 8002e36:	4e0a      	ldr	r6, [pc, #40]	; (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	; (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1ba4      	subs	r4, r4, r6
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a5      	cmp	r5, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e48:	4798      	blx	r3
 8002e4a:	3501      	adds	r5, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e52:	4798      	blx	r3
 8002e54:	3501      	adds	r5, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	08002ebc 	.word	0x08002ebc
 8002e5c:	08002ebc 	.word	0x08002ebc
 8002e60:	08002ebc 	.word	0x08002ebc
 8002e64:	08002ec0 	.word	0x08002ec0

08002e68 <memset>:
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4402      	add	r2, r0
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <memset+0xa>
 8002e70:	4770      	bx	lr
 8002e72:	f803 1b01 	strb.w	r1, [r3], #1
 8002e76:	e7f9      	b.n	8002e6c <memset+0x4>

08002e78 <_init>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr

08002e84 <_fini>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr
