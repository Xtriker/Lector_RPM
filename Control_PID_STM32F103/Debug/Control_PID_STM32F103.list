
Control_PID_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080028fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000010  0800290c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800290c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca3b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bee  00000000  00000000  0002ca74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002e668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002f220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014cb5  00000000  00000000  0002fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ef6  00000000  00000000  000449a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071563  00000000  00000000  0004d89b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bedfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd0  00000000  00000000  000bee7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080028b0 	.word	0x080028b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080028b0 	.word	0x080028b0

0800014c <SPI_CS_ENABLE>:
 * | PA4 | SOFT SLAVE |	CSS     |
 *  ----------------------------
 */

void SPI_CS_ENABLE(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <SPI_CS_ENABLE+0x14>)
 8000156:	f000 ff43 	bl	8000fe0 <HAL_GPIO_WritePin>
	}while(0);
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <SPI_CS_DISABLE>:

void SPI_CS_DISABLE(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <SPI_CS_DISABLE+0x14>)
 800016e:	f000 ff37 	bl	8000fe0 <HAL_GPIO_WritePin>
	}while(0);
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <SPI_Transmit>:
void SPI_Transmit(SPI_HandleTypeDef *hspi, uint16_t data) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
    // 2nd parameter - pData: pointer to data buffer
    HAL_SPI_Transmit(hspi, (uint8_t *) &data, 1, 1000);
 8000188:	1cb9      	adds	r1, r7, #2
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	2201      	movs	r2, #1
 8000190:	6878      	ldr	r0, [r7, #4]
 8000192:	f001 fbbe 	bl	8001912 <HAL_SPI_Transmit>
}
 8000196:	bf00      	nop
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
	...

080001a0 <app_InitMAX7219>:

void app_InitMAX7219(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
    SPI_CS_ENABLE();
 80001a4:	f7ff ffd2 	bl	800014c <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, DECODE_MODE);
 80001a8:	2109      	movs	r1, #9
 80001aa:	4823      	ldr	r0, [pc, #140]	; (8000238 <app_InitMAX7219+0x98>)
 80001ac:	f7ff ffe6 	bl	800017c <SPI_Transmit>
    SPI_Transmit(&hspi1, 0xff);
 80001b0:	21ff      	movs	r1, #255	; 0xff
 80001b2:	4821      	ldr	r0, [pc, #132]	; (8000238 <app_InitMAX7219+0x98>)
 80001b4:	f7ff ffe2 	bl	800017c <SPI_Transmit>
    SPI_CS_DISABLE();
 80001b8:	f7ff ffd4 	bl	8000164 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 80001bc:	f7ff ffc6 	bl	800014c <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, INTENSITY);
 80001c0:	210a      	movs	r1, #10
 80001c2:	481d      	ldr	r0, [pc, #116]	; (8000238 <app_InitMAX7219+0x98>)
 80001c4:	f7ff ffda 	bl	800017c <SPI_Transmit>
    SPI_Transmit(&hspi1, 0x00); /* Selecciona el nivel de brillo del display de 7 segmentos */
 80001c8:	2100      	movs	r1, #0
 80001ca:	481b      	ldr	r0, [pc, #108]	; (8000238 <app_InitMAX7219+0x98>)
 80001cc:	f7ff ffd6 	bl	800017c <SPI_Transmit>
    SPI_CS_DISABLE();
 80001d0:	f7ff ffc8 	bl	8000164 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 80001d4:	f7ff ffba 	bl	800014c <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, SCAN_LIMIT);
 80001d8:	210b      	movs	r1, #11
 80001da:	4817      	ldr	r0, [pc, #92]	; (8000238 <app_InitMAX7219+0x98>)
 80001dc:	f7ff ffce 	bl	800017c <SPI_Transmit>
    SPI_Transmit(&hspi1, 0x03);
 80001e0:	2103      	movs	r1, #3
 80001e2:	4815      	ldr	r0, [pc, #84]	; (8000238 <app_InitMAX7219+0x98>)
 80001e4:	f7ff ffca 	bl	800017c <SPI_Transmit>
    SPI_CS_DISABLE();
 80001e8:	f7ff ffbc 	bl	8000164 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 80001ec:	f7ff ffae 	bl	800014c <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, SHUTDOWN);
 80001f0:	210c      	movs	r1, #12
 80001f2:	4811      	ldr	r0, [pc, #68]	; (8000238 <app_InitMAX7219+0x98>)
 80001f4:	f7ff ffc2 	bl	800017c <SPI_Transmit>
    SPI_Transmit(&hspi1, NORMAL_OPERATION);
 80001f8:	2101      	movs	r1, #1
 80001fa:	480f      	ldr	r0, [pc, #60]	; (8000238 <app_InitMAX7219+0x98>)
 80001fc:	f7ff ffbe 	bl	800017c <SPI_Transmit>
    SPI_CS_DISABLE();
 8000200:	f7ff ffb0 	bl	8000164 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 8000204:	f7ff ffa2 	bl	800014c <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1, DISPLAY_TEST);
 8000208:	210f      	movs	r1, #15
 800020a:	480b      	ldr	r0, [pc, #44]	; (8000238 <app_InitMAX7219+0x98>)
 800020c:	f7ff ffb6 	bl	800017c <SPI_Transmit>
	SPI_Transmit(&hspi1, ENABLE_TEST_MODE);
 8000210:	2101      	movs	r1, #1
 8000212:	4809      	ldr	r0, [pc, #36]	; (8000238 <app_InitMAX7219+0x98>)
 8000214:	f7ff ffb2 	bl	800017c <SPI_Transmit>
	SPI_CS_DISABLE();
 8000218:	f7ff ffa4 	bl	8000164 <SPI_CS_DISABLE>

	SPI_CS_ENABLE();
 800021c:	f7ff ff96 	bl	800014c <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1, DISPLAY_TEST);
 8000220:	210f      	movs	r1, #15
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <app_InitMAX7219+0x98>)
 8000224:	f7ff ffaa 	bl	800017c <SPI_Transmit>
	SPI_Transmit(&hspi1, DISABLE_TEST_MODE);
 8000228:	2100      	movs	r1, #0
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <app_InitMAX7219+0x98>)
 800022c:	f7ff ffa6 	bl	800017c <SPI_Transmit>
	SPI_CS_DISABLE();
 8000230:	f7ff ff98 	bl	8000164 <SPI_CS_DISABLE>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000080 	.word	0x20000080

0800023c <app_LimpiarDisplays>:
	    SPI_Transmit(&hspi1, Brillo);
	    SPI_CS_DISABLE();
	  }
}
void app_LimpiarDisplays(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4;i++)
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]
 8000246:	e010      	b.n	800026a <app_LimpiarDisplays+0x2e>
	{
	SPI_CS_ENABLE();
 8000248:	f7ff ff80 	bl	800014c <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1,i);
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	b29b      	uxth	r3, r3
 8000250:	4619      	mov	r1, r3
 8000252:	4809      	ldr	r0, [pc, #36]	; (8000278 <app_LimpiarDisplays+0x3c>)
 8000254:	f7ff ff92 	bl	800017c <SPI_Transmit>
	SPI_Transmit(&hspi1,0xF);
 8000258:	210f      	movs	r1, #15
 800025a:	4807      	ldr	r0, [pc, #28]	; (8000278 <app_LimpiarDisplays+0x3c>)
 800025c:	f7ff ff8e 	bl	800017c <SPI_Transmit>
	SPI_CS_DISABLE();
 8000260:	f7ff ff80 	bl	8000164 <SPI_CS_DISABLE>
	for(uint8_t i = 0; i < 4;i++)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	3301      	adds	r3, #1
 8000268:	71fb      	strb	r3, [r7, #7]
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d9eb      	bls.n	8000248 <app_LimpiarDisplays+0xc>
	}
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000080 	.word	0x20000080

0800027c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PV */
uint8_t Bandera_DetectorCero = 1;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == DetectorCero_Pin)
 8000286:	88fb      	ldrh	r3, [r7, #6]
 8000288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800028c:	d102      	bne.n	8000294 <HAL_GPIO_EXTI_Callback+0x18>
	{
		Bandera_DetectorCero = 0;
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint32_t Frequency = 0;
uint8_t Is_First_Captured = 0;  // 0- not captured, 1- captured

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	7f1b      	ldrb	r3, [r3, #28]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d146      	bne.n	8000342 <HAL_TIM_IC_CaptureCallback+0x9e>
	{
		if (Is_First_Captured==0)  // is the first value captured ?
 80002b4:	4b25      	ldr	r3, [pc, #148]	; (800034c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10a      	bne.n	80002d2 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 80002bc:	2100      	movs	r1, #0
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f001 ffe2 	bl	8002288 <HAL_TIM_ReadCapturedValue>
 80002c4:	4602      	mov	r2, r0
 80002c6:	4b22      	ldr	r3, [pc, #136]	; (8000350 <HAL_TIM_IC_CaptureCallback+0xac>)
 80002c8:	601a      	str	r2, [r3, #0]
			Is_First_Captured =1;  // set the first value captured as true
 80002ca:	4b20      	ldr	r3, [pc, #128]	; (800034c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	701a      	strb	r2, [r3, #0]

			Frequency = (2*HAL_RCC_GetPCLK2Freq())/Difference;
			Is_First_Captured = 0;  // reset the first captured
		}
	}
}
 80002d0:	e037      	b.n	8000342 <HAL_TIM_IC_CaptureCallback+0x9e>
		else if (Is_First_Captured)  // if the first is captured
 80002d2:	4b1e      	ldr	r3, [pc, #120]	; (800034c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d033      	beq.n	8000342 <HAL_TIM_IC_CaptureCallback+0x9e>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 80002da:	2100      	movs	r1, #0
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f001 ffd3 	bl	8002288 <HAL_TIM_ReadCapturedValue>
 80002e2:	4602      	mov	r2, r0
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80002e6:	601a      	str	r2, [r3, #0]
			if (IC_Value2 > IC_Value1)
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <HAL_TIM_IC_CaptureCallback+0xac>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d907      	bls.n	8000304 <HAL_TIM_IC_CaptureCallback+0x60>
				Difference = IC_Value2-IC_Value1;   // calculate the difference
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <HAL_TIM_IC_CaptureCallback+0xac>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	1ad3      	subs	r3, r2, r3
 80002fe:	4a16      	ldr	r2, [pc, #88]	; (8000358 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	e011      	b.n	8000328 <HAL_TIM_IC_CaptureCallback+0x84>
			else if (IC_Value2 < IC_Value1)
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <HAL_TIM_IC_CaptureCallback+0xac>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	429a      	cmp	r2, r3
 800030e:	d209      	bcs.n	8000324 <HAL_TIM_IC_CaptureCallback+0x80>
				Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800031e:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000320:	6013      	str	r3, [r2, #0]
 8000322:	e001      	b.n	8000328 <HAL_TIM_IC_CaptureCallback+0x84>
				Error_Handler();
 8000324:	f000 fa22 	bl	800076c <Error_Handler>
			Frequency = (2*HAL_RCC_GetPCLK2Freq())/Difference;
 8000328:	f001 fa60 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 800032c:	4603      	mov	r3, r0
 800032e:	005a      	lsls	r2, r3, #1
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	fbb2 f3f3 	udiv	r3, r2, r3
 8000338:	4a08      	ldr	r2, [pc, #32]	; (800035c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800033a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;  // reset the first captured
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000003c 	.word	0x2000003c
 8000350:	2000002c 	.word	0x2000002c
 8000354:	20000030 	.word	0x20000030
 8000358:	20000034 	.word	0x20000034
 800035c:	20000038 	.word	0x20000038

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 fb72 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f826 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 f956 	bl	800061c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000370:	f000 f894 	bl	800049c <MX_TIM1_Init>
  MX_SPI1_Init();
 8000374:	f000 f85c 	bl	8000430 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000378:	f000 f8e0 	bl	800053c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0x4c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <main+0x4c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800038a:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim1);
 800038c:	4808      	ldr	r0, [pc, #32]	; (80003b0 <main+0x50>)
 800038e:	f001 fca7 	bl	8001ce0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000392:	2100      	movs	r1, #0
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <main+0x54>)
 8000396:	f001 fcfa 	bl	8001d8e <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <main+0x54>)
 800039c:	f001 fca0 	bl	8001ce0 <HAL_TIM_Base_Start_IT>
  app_InitMAX7219();
 80003a0:	f7ff fefe 	bl	80001a0 <app_InitMAX7219>
  app_LimpiarDisplays();
 80003a4:	f7ff ff4a 	bl	800023c <app_LimpiarDisplays>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Se manda la direccion del Boton */


  while (1)
 80003a8:	e7fe      	b.n	80003a8 <main+0x48>
 80003aa:	bf00      	nop
 80003ac:	20000080 	.word	0x20000080
 80003b0:	20000040 	.word	0x20000040
 80003b4:	200000dc 	.word	0x200000dc

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fa6a 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003da:	2302      	movs	r3, #2
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	2310      	movs	r3, #16
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fe26 	bl	8001040 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003fa:	f000 f9b7 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000402:	2300      	movs	r3, #0
 8000404:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f001 f892 	bl	8001540 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000422:	f000 f9a3 	bl	800076c <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3740      	adds	r7, #64	; 0x40
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_SPI1_Init+0x64>)
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <MX_SPI1_Init+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_SPI1_Init+0x64>)
 800043c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_SPI1_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_SPI1_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_SPI1_Init+0x64>)
 800045c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_SPI1_Init+0x64>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_SPI1_Init+0x64>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_SPI1_Init+0x64>)
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_SPI1_Init+0x64>)
 8000476:	2200      	movs	r2, #0
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_SPI1_Init+0x64>)
 800047c:	220a      	movs	r2, #10
 800047e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_SPI1_Init+0x64>)
 8000482:	f001 f9e5 	bl	8001850 <HAL_SPI_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800048c:	f000 f96e 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000080 	.word	0x20000080
 8000498:	40013000 	.word	0x40013000

0800049c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	463b      	mov	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_TIM1_Init+0x98>)
 80004ba:	4a1f      	ldr	r2, [pc, #124]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80004be:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <MX_TIM1_Init+0x98>)
 80004c0:	224f      	movs	r2, #79	; 0x4f
 80004c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_TIM1_Init+0x98>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_TIM1_Init+0x98>)
 80004cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_TIM1_Init+0x98>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_TIM1_Init+0x98>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_TIM1_Init+0x98>)
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004e4:	4813      	ldr	r0, [pc, #76]	; (8000534 <MX_TIM1_Init+0x98>)
 80004e6:	f001 fbd0 	bl	8001c8a <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80004f0:	f000 f93c 	bl	800076c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	4619      	mov	r1, r3
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <MX_TIM1_Init+0x98>)
 8000502:	f001 fe0a 	bl	800211a <HAL_TIM_ConfigClockSource>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800050c:	f000 f92e 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_TIM1_Init+0x98>)
 800051e:	f002 f944 	bl	80027aa <HAL_TIMEx_MasterConfigSynchronization>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000528:	f000 f920 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000040 	.word	0x20000040
 8000538:	40012c00 	.word	0x40012c00

0800053c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800055a:	463b      	mov	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <MX_TIM2_Init+0xdc>)
 8000568:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800056e:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <MX_TIM2_Init+0xdc>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_TIM2_Init+0xdc>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <MX_TIM2_Init+0xdc>)
 800057c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_TIM2_Init+0xdc>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b23      	ldr	r3, [pc, #140]	; (8000618 <MX_TIM2_Init+0xdc>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800058e:	4822      	ldr	r0, [pc, #136]	; (8000618 <MX_TIM2_Init+0xdc>)
 8000590:	f001 fb7b 	bl	8001c8a <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 f8e7 	bl	800076c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	4619      	mov	r1, r3
 80005aa:	481b      	ldr	r0, [pc, #108]	; (8000618 <MX_TIM2_Init+0xdc>)
 80005ac:	f001 fdb5 	bl	800211a <HAL_TIM_ConfigClockSource>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005b6:	f000 f8d9 	bl	800076c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005ba:	4817      	ldr	r0, [pc, #92]	; (8000618 <MX_TIM2_Init+0xdc>)
 80005bc:	f001 fbb3 	bl	8001d26 <HAL_TIM_IC_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005c6:	f000 f8d1 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <MX_TIM2_Init+0xdc>)
 80005da:	f002 f8e6 	bl	80027aa <HAL_TIMEx_MasterConfigSynchronization>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80005e4:	f000 f8c2 	bl	800076c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005ec:	2301      	movs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_TIM2_Init+0xdc>)
 8000600:	f001 fcef 	bl	8001fe2 <HAL_TIM_IC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800060a:	f000 f8af 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	; 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000dc 	.word	0x200000dc

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000630:	4b49      	ldr	r3, [pc, #292]	; (8000758 <MX_GPIO_Init+0x13c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a48      	ldr	r2, [pc, #288]	; (8000758 <MX_GPIO_Init+0x13c>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b46      	ldr	r3, [pc, #280]	; (8000758 <MX_GPIO_Init+0x13c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0310 	and.w	r3, r3, #16
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <MX_GPIO_Init+0x13c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a42      	ldr	r2, [pc, #264]	; (8000758 <MX_GPIO_Init+0x13c>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b40      	ldr	r3, [pc, #256]	; (8000758 <MX_GPIO_Init+0x13c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0320 	and.w	r3, r3, #32
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <MX_GPIO_Init+0x13c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a3c      	ldr	r2, [pc, #240]	; (8000758 <MX_GPIO_Init+0x13c>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <MX_GPIO_Init+0x13c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b37      	ldr	r3, [pc, #220]	; (8000758 <MX_GPIO_Init+0x13c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a36      	ldr	r2, [pc, #216]	; (8000758 <MX_GPIO_Init+0x13c>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b34      	ldr	r3, [pc, #208]	; (8000758 <MX_GPIO_Init+0x13c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	4831      	ldr	r0, [pc, #196]	; (800075c <MX_GPIO_Init+0x140>)
 8000698:	f000 fca2 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	482f      	ldr	r0, [pc, #188]	; (8000760 <MX_GPIO_Init+0x144>)
 80006a2:	f000 fc9d 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	482d      	ldr	r0, [pc, #180]	; (8000764 <MX_GPIO_Init+0x148>)
 80006ae:	f000 fc97 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4824      	ldr	r0, [pc, #144]	; (800075c <MX_GPIO_Init+0x140>)
 80006cc:	f000 fb2e 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CSS_Pin */
  GPIO_InitStruct.Pin = CSS_Pin;
 80006d0:	2310      	movs	r3, #16
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	481e      	ldr	r0, [pc, #120]	; (8000760 <MX_GPIO_Init+0x144>)
 80006e8:	f000 fb20 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton0_Pin Boton1_Pin Boton2_Pin */
  GPIO_InitStruct.Pin = Boton0_Pin|Boton1_Pin|Boton2_Pin;
 80006ec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4818      	ldr	r0, [pc, #96]	; (8000764 <MX_GPIO_Init+0x148>)
 8000702:	f000 fb13 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : DetectorCero_Pin */
  GPIO_InitStruct.Pin = DetectorCero_Pin;
 8000706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_GPIO_Init+0x14c>)
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DetectorCero_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <MX_GPIO_Init+0x148>)
 800071c:	f000 fb06 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SSR_Pin */
  GPIO_InitStruct.Pin = SSR_Pin;
 8000720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SSR_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480a      	ldr	r0, [pc, #40]	; (8000764 <MX_GPIO_Init+0x148>)
 800073a:	f000 faf7 	bl	8000d2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2028      	movs	r0, #40	; 0x28
 8000744:	f000 fabb 	bl	8000cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000748:	2028      	movs	r0, #40	; 0x28
 800074a:	f000 fad4 	bl	8000cf6 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000
 800075c:	40011000 	.word	0x40011000
 8000760:	40010800 	.word	0x40010800
 8000764:	40010c00 	.word	0x40010c00
 8000768:	10110000 	.word	0x10110000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <HAL_MspInit+0x5c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x5c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_MspInit+0x60>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_MspInit+0x60>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000

080007dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <HAL_SPI_MspInit+0x88>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d12f      	bne.n	800085c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <HAL_SPI_MspInit+0x8c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a19      	ldr	r2, [pc, #100]	; (8000868 <HAL_SPI_MspInit+0x8c>)
 8000802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_SPI_MspInit+0x8c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_SPI_MspInit+0x8c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a13      	ldr	r2, [pc, #76]	; (8000868 <HAL_SPI_MspInit+0x8c>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_SPI_MspInit+0x8c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <HAL_SPI_MspInit+0x90>)
 8000840:	f000 fa74 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000844:	2340      	movs	r3, #64	; 0x40
 8000846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_SPI_MspInit+0x90>)
 8000858:	f000 fa68 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40013000 	.word	0x40013000
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <HAL_TIM_Base_MspInit+0xa4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d10c      	bne.n	80008aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 8000896:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a8:	e030      	b.n	800090c <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b2:	d12b      	bne.n	800090c <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a11      	ldr	r2, [pc, #68]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_TIM_Base_MspInit+0xa8>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <HAL_TIM_Base_MspInit+0xac>)
 80008f8:	f000 fa18 	bl	8000d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	201c      	movs	r0, #28
 8000902:	f000 f9dc 	bl	8000cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000906:	201c      	movs	r0, #28
 8000908:	f000 f9f5 	bl	8000cf6 <HAL_NVIC_EnableIRQ>
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40012c00 	.word	0x40012c00
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <HardFault_Handler+0x4>

08000932 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <MemManage_Handler+0x4>

08000938 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <BusFault_Handler+0x4>

0800093e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <UsageFault_Handler+0x4>

08000944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f8b4 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM2_IRQHandler+0x10>)
 800097a:	f001 fa2a 	bl	8001dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000dc 	.word	0x200000dc

08000988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800098c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000990:	f000 fb3e 	bl	8001010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <SystemInit+0x5c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <SystemInit+0x5c>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <SystemInit+0x5c>)
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	4911      	ldr	r1, [pc, #68]	; (80009f4 <SystemInit+0x5c>)
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <SystemInit+0x60>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <SystemInit+0x5c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <SystemInit+0x5c>)
 80009ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <SystemInit+0x5c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SystemInit+0x5c>)
 80009ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <SystemInit+0x5c>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <SystemInit+0x5c>)
 80009d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SystemInit+0x5c>)
 80009de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SystemInit+0x64>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000
 80009f8:	f8ff0000 	.word	0xf8ff0000
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a02:	e003      	b.n	8000a0c <LoopCopyDataInit>

08000a04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a0a:	3104      	adds	r1, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a0c:	480a      	ldr	r0, [pc, #40]	; (8000a38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a14:	d3f6      	bcc.n	8000a04 <CopyDataInit>
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a18:	e002      	b.n	8000a20 <LoopFillZerobss>

08000a1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a1c:	f842 3b04 	str.w	r3, [r2], #4

08000a20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a24:	d3f9      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a26:	f7ff ffb7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f001 ff15 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fc97 	bl	8000360 <main>
  bx lr
 8000a32:	4770      	bx	lr
  ldr r3, =_sidata
 8000a34:	080028fc 	.word	0x080028fc
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a3c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000a40:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000a44:	20000120 	.word	0x20000120

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f923 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fe86 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f93b 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 f903 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	2000000c 	.word	0x2000000c
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <HAL_IncTick+0x20>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	2000000c 	.word	0x2000000c
 8000af8:	2000011c 	.word	0x2000011c

08000afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	2000011c 	.word	0x2000011c

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db0b      	blt.n	8000b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 021f 	and.w	r2, r3, #31
 8000b8c:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <__NVIC_EnableIRQ+0x34>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	f7ff ff90 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff2d 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff42 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff90 	bl	8000c00 <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5f 	bl	8000bac <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff35 	bl	8000b74 <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffa2 	bl	8000c64 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b08b      	sub	sp, #44	; 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e127      	b.n	8000f90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d40:	2201      	movs	r2, #1
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 8116 	bne.w	8000f8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d034      	beq.n	8000dd0 <HAL_GPIO_Init+0xa4>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d80d      	bhi.n	8000d86 <HAL_GPIO_Init+0x5a>
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d02b      	beq.n	8000dc6 <HAL_GPIO_Init+0x9a>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d804      	bhi.n	8000d7c <HAL_GPIO_Init+0x50>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d031      	beq.n	8000dda <HAL_GPIO_Init+0xae>
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d01c      	beq.n	8000db4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d7a:	e048      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d043      	beq.n	8000e08 <HAL_GPIO_Init+0xdc>
 8000d80:	2b11      	cmp	r3, #17
 8000d82:	d01b      	beq.n	8000dbc <HAL_GPIO_Init+0x90>
          break;
 8000d84:	e043      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d86:	4a89      	ldr	r2, [pc, #548]	; (8000fac <HAL_GPIO_Init+0x280>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d026      	beq.n	8000dda <HAL_GPIO_Init+0xae>
 8000d8c:	4a87      	ldr	r2, [pc, #540]	; (8000fac <HAL_GPIO_Init+0x280>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d806      	bhi.n	8000da0 <HAL_GPIO_Init+0x74>
 8000d92:	4a87      	ldr	r2, [pc, #540]	; (8000fb0 <HAL_GPIO_Init+0x284>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d020      	beq.n	8000dda <HAL_GPIO_Init+0xae>
 8000d98:	4a86      	ldr	r2, [pc, #536]	; (8000fb4 <HAL_GPIO_Init+0x288>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01d      	beq.n	8000dda <HAL_GPIO_Init+0xae>
          break;
 8000d9e:	e036      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000da0:	4a85      	ldr	r2, [pc, #532]	; (8000fb8 <HAL_GPIO_Init+0x28c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0xae>
 8000da6:	4a85      	ldr	r2, [pc, #532]	; (8000fbc <HAL_GPIO_Init+0x290>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d016      	beq.n	8000dda <HAL_GPIO_Init+0xae>
 8000dac:	4a84      	ldr	r2, [pc, #528]	; (8000fc0 <HAL_GPIO_Init+0x294>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0xae>
          break;
 8000db2:	e02c      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	623b      	str	r3, [r7, #32]
          break;
 8000dba:	e028      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e023      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	3308      	adds	r3, #8
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e01e      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	330c      	adds	r3, #12
 8000dd6:	623b      	str	r3, [r7, #32]
          break;
 8000dd8:	e019      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000de2:	2304      	movs	r3, #4
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e012      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2308      	movs	r3, #8
 8000df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	611a      	str	r2, [r3, #16]
          break;
 8000dfa:	e008      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	615a      	str	r2, [r3, #20]
          break;
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	2bff      	cmp	r3, #255	; 0xff
 8000e12:	d801      	bhi.n	8000e18 <HAL_GPIO_Init+0xec>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	e001      	b.n	8000e1c <HAL_GPIO_Init+0xf0>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2bff      	cmp	r3, #255	; 0xff
 8000e22:	d802      	bhi.n	8000e2a <HAL_GPIO_Init+0xfe>
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x104>
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	3b08      	subs	r3, #8
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	210f      	movs	r1, #15
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	401a      	ands	r2, r3
 8000e42:	6a39      	ldr	r1, [r7, #32]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8096 	beq.w	8000f8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5e:	4b59      	ldr	r3, [pc, #356]	; (8000fc4 <HAL_GPIO_Init+0x298>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <HAL_GPIO_Init+0x298>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <HAL_GPIO_Init+0x298>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e76:	4a54      	ldr	r2, [pc, #336]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4b      	ldr	r2, [pc, #300]	; (8000fcc <HAL_GPIO_Init+0x2a0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x19e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4a      	ldr	r2, [pc, #296]	; (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x19a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a49      	ldr	r2, [pc, #292]	; (8000fd4 <HAL_GPIO_Init+0x2a8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x196>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <HAL_GPIO_Init+0x2ac>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x192>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x1a0>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x1a0>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x1a0>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x1a0>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000edc:	493a      	ldr	r1, [pc, #232]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4938      	ldr	r1, [pc, #224]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4933      	ldr	r1, [pc, #204]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	492e      	ldr	r1, [pc, #184]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	4929      	ldr	r1, [pc, #164]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4924      	ldr	r1, [pc, #144]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	608b      	str	r3, [r1, #8]
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	491f      	ldr	r1, [pc, #124]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	491a      	ldr	r1, [pc, #104]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60cb      	str	r3, [r1, #12]
 8000f7a:	e006      	b.n	8000f8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	4915      	ldr	r1, [pc, #84]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f47f aed0 	bne.w	8000d40 <HAL_GPIO_Init+0x14>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	372c      	adds	r7, #44	; 0x2c
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	10210000 	.word	0x10210000
 8000fb0:	10110000 	.word	0x10110000
 8000fb4:	10120000 	.word	0x10120000
 8000fb8:	10310000 	.word	0x10310000
 8000fbc:	10320000 	.word	0x10320000
 8000fc0:	10220000 	.word	0x10220000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40011400 	.word	0x40011400
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ffc:	e003      	b.n	8001006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	041a      	lsls	r2, r3, #16
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	611a      	str	r2, [r3, #16]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f924 	bl	800027c <HAL_GPIO_EXTI_Callback>
  }
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e26c      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8087 	beq.w	800116e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001060:	4b92      	ldr	r3, [pc, #584]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	2b04      	cmp	r3, #4
 800106a:	d00c      	beq.n	8001086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800106c:	4b8f      	ldr	r3, [pc, #572]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b08      	cmp	r3, #8
 8001076:	d112      	bne.n	800109e <HAL_RCC_OscConfig+0x5e>
 8001078:	4b8c      	ldr	r3, [pc, #560]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001084:	d10b      	bne.n	800109e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001086:	4b89      	ldr	r3, [pc, #548]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d06c      	beq.n	800116c <HAL_RCC_OscConfig+0x12c>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d168      	bne.n	800116c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e246      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x76>
 80010a8:	4b80      	ldr	r3, [pc, #512]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a7f      	ldr	r2, [pc, #508]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	e02e      	b.n	8001114 <HAL_RCC_OscConfig+0xd4>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x98>
 80010be:	4b7b      	ldr	r3, [pc, #492]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a7a      	ldr	r2, [pc, #488]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b78      	ldr	r3, [pc, #480]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a77      	ldr	r2, [pc, #476]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e01d      	b.n	8001114 <HAL_RCC_OscConfig+0xd4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0xbc>
 80010e2:	4b72      	ldr	r3, [pc, #456]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a71      	ldr	r2, [pc, #452]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6e      	ldr	r2, [pc, #440]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e00b      	b.n	8001114 <HAL_RCC_OscConfig+0xd4>
 80010fc:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a6a      	ldr	r2, [pc, #424]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a67      	ldr	r2, [pc, #412]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d013      	beq.n	8001144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fcee 	bl	8000afc <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fcea 	bl	8000afc <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1fa      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0xe4>
 8001142:	e014      	b.n	800116e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fcda 	bl	8000afc <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fcd6 	bl	8000afc <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e1e6      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x10c>
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d063      	beq.n	8001242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001186:	4b49      	ldr	r3, [pc, #292]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b08      	cmp	r3, #8
 8001190:	d11c      	bne.n	80011cc <HAL_RCC_OscConfig+0x18c>
 8001192:	4b46      	ldr	r3, [pc, #280]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d116      	bne.n	80011cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	4b43      	ldr	r3, [pc, #268]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_RCC_OscConfig+0x176>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e1ba      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4939      	ldr	r1, [pc, #228]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e03a      	b.n	8001242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d020      	beq.n	8001216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fc8f 	bl	8000afc <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc8b 	bl	8000afc <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e19b      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4927      	ldr	r1, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e015      	b.n	8001242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fc6e 	bl	8000afc <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fc6a 	bl	8000afc <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e17a      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d03a      	beq.n	80012c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d019      	beq.n	800128a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_RCC_OscConfig+0x274>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125c:	f7ff fc4e 	bl	8000afc <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fc4a 	bl	8000afc <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e15a      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f000 fac6 	bl	8001814 <RCC_Delay>
 8001288:	e01c      	b.n	80012c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_RCC_OscConfig+0x274>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff fc34 	bl	8000afc <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001296:	e00f      	b.n	80012b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fc30 	bl	8000afc <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d908      	bls.n	80012b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e140      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	42420000 	.word	0x42420000
 80012b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1e9      	bne.n	8001298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80a6 	beq.w	800141e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b97      	ldr	r3, [pc, #604]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10d      	bne.n	80012fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b94      	ldr	r3, [pc, #592]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a93      	ldr	r2, [pc, #588]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b91      	ldr	r3, [pc, #580]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b8e      	ldr	r3, [pc, #568]	; (8001538 <HAL_RCC_OscConfig+0x4f8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d118      	bne.n	800133c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130a:	4b8b      	ldr	r3, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x4f8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a8a      	ldr	r2, [pc, #552]	; (8001538 <HAL_RCC_OscConfig+0x4f8>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbf1 	bl	8000afc <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fbed 	bl	8000afc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0fd      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x4f8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x312>
 8001344:	4b7b      	ldr	r3, [pc, #492]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a7a      	ldr	r2, [pc, #488]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6213      	str	r3, [r2, #32]
 8001350:	e02d      	b.n	80013ae <HAL_RCC_OscConfig+0x36e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x334>
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a75      	ldr	r2, [pc, #468]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6213      	str	r3, [r2, #32]
 8001366:	4b73      	ldr	r3, [pc, #460]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a72      	ldr	r2, [pc, #456]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	e01c      	b.n	80013ae <HAL_RCC_OscConfig+0x36e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d10c      	bne.n	8001396 <HAL_RCC_OscConfig+0x356>
 800137c:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a6c      	ldr	r2, [pc, #432]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6213      	str	r3, [r2, #32]
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a69      	ldr	r2, [pc, #420]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	e00b      	b.n	80013ae <HAL_RCC_OscConfig+0x36e>
 8001396:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4a66      	ldr	r2, [pc, #408]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6213      	str	r3, [r2, #32]
 80013a2:	4b64      	ldr	r3, [pc, #400]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a63      	ldr	r2, [pc, #396]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d015      	beq.n	80013e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fba1 	bl	8000afc <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb9d 	bl	8000afc <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0ab      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0ee      	beq.n	80013be <HAL_RCC_OscConfig+0x37e>
 80013e0:	e014      	b.n	800140c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb8b 	bl	8000afc <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb87 	bl	8000afc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e095      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a47      	ldr	r2, [pc, #284]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8081 	beq.w	800152a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001428:	4b42      	ldr	r3, [pc, #264]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d061      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d146      	bne.n	80014ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143c:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_RCC_OscConfig+0x4fc>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fb5b 	bl	8000afc <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fb57 	bl	8000afc <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e067      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d108      	bne.n	8001484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	492d      	ldr	r1, [pc, #180]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a19      	ldr	r1, [r3, #32]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	430b      	orrs	r3, r1
 8001496:	4927      	ldr	r1, [pc, #156]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x4fc>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fb2b 	bl	8000afc <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fb27 	bl	8000afc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e037      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x46a>
 80014c8:	e02f      	b.n	800152a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_RCC_OscConfig+0x4fc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb14 	bl	8000afc <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb10 	bl	8000afc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e020      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x498>
 80014f6:	e018      	b.n	800152a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e013      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	429a      	cmp	r2, r3
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	40007000 	.word	0x40007000
 800153c:	42420060 	.word	0x42420060

08001540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0d0      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d910      	bls.n	8001584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4965      	ldr	r1, [pc, #404]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b63      	ldr	r3, [pc, #396]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0b8      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a58      	ldr	r2, [pc, #352]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	494d      	ldr	r1, [pc, #308]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d040      	beq.n	8001660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d115      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e07f      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e073      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06b      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f023 0203 	bic.w	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4936      	ldr	r1, [pc, #216]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001630:	f7ff fa64 	bl	8000afc <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	e00a      	b.n	800164e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f7ff fa60 	bl	8000afc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e053      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 020c 	and.w	r2, r3, #12
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d1eb      	bne.n	8001638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d210      	bcs.n	8001690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0207 	bic.w	r2, r3, #7
 8001676:	4922      	ldr	r1, [pc, #136]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e032      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4916      	ldr	r1, [pc, #88]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	490e      	ldr	r1, [pc, #56]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ce:	f000 f821 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016d2:	4601      	mov	r1, r0
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	fa21 f303 	lsr.w	r3, r1, r3
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x1cc>)
 80016e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1d0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f9c2 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000
 8001704:	40021000 	.word	0x40021000
 8001708:	080028dc 	.word	0x080028dc
 800170c:	20000004 	.word	0x20000004
 8001710:	20000008 	.word	0x20000008

08001714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	b490      	push	{r4, r7}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800171c:	1d3c      	adds	r4, r7, #4
 800171e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	d002      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x40>
 800174e:	2b08      	cmp	r3, #8
 8001750:	d003      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x46>
 8001752:	e02d      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001756:	623b      	str	r3, [r7, #32]
      break;
 8001758:	e02d      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	0c9b      	lsrs	r3, r3, #18
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001766:	4413      	add	r3, r2
 8001768:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800176c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0c5b      	lsrs	r3, r3, #17
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001786:	4413      	add	r3, r2
 8001788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800178c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	e004      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	623b      	str	r3, [r7, #32]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b2:	623b      	str	r3, [r7, #32]
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	6a3b      	ldr	r3, [r7, #32]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc90      	pop	{r4, r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	080028c8 	.word	0x080028c8
 80017c8:	080028d8 	.word	0x080028d8
 80017cc:	40021000 	.word	0x40021000
 80017d0:	007a1200 	.word	0x007a1200
 80017d4:	003d0900 	.word	0x003d0900

080017d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017f0:	f7ff fff2 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 80017f4:	4601      	mov	r1, r0
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0adb      	lsrs	r3, r3, #11
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	080028ec 	.word	0x080028ec

08001814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <RCC_Delay+0x34>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <RCC_Delay+0x38>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0a5b      	lsrs	r3, r3, #9
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001830:	bf00      	nop
  }
  while (Delay --);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	60fa      	str	r2, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f9      	bne.n	8001830 <RCC_Delay+0x1c>
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000004 	.word	0x20000004
 800184c:	10624dd3 	.word	0x10624dd3

08001850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e053      	b.n	800190a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d106      	bne.n	8001882 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7fe ffad 	bl	80007dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001898:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	ea42 0103 	orr.w	r1, r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	0c1a      	lsrs	r2, r3, #16
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f002 0204 	and.w	r2, r2, #4
 80018e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b088      	sub	sp, #32
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_SPI_Transmit+0x22>
 8001930:	2302      	movs	r3, #2
 8001932:	e11e      	b.n	8001b72 <HAL_SPI_Transmit+0x260>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800193c:	f7ff f8de 	bl	8000afc <HAL_GetTick>
 8001940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d002      	beq.n	8001958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001956:	e103      	b.n	8001b60 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_SPI_Transmit+0x52>
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001968:	e0fa      	b.n	8001b60 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b0:	d107      	bne.n	80019c2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	d007      	beq.n	80019e0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e8:	d14b      	bne.n	8001a82 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_SPI_Transmit+0xe6>
 80019f2:	8afb      	ldrh	r3, [r7, #22]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d13e      	bne.n	8001a76 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	881a      	ldrh	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	1c9a      	adds	r2, r3, #2
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a1c:	e02b      	b.n	8001a76 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d112      	bne.n	8001a52 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	1c9a      	adds	r2, r3, #2
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a50:	e011      	b.n	8001a76 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a52:	f7ff f853 	bl	8000afc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d803      	bhi.n	8001a6a <HAL_SPI_Transmit+0x158>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a68:	d102      	bne.n	8001a70 <HAL_SPI_Transmit+0x15e>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a74:	e074      	b.n	8001b60 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ce      	bne.n	8001a1e <HAL_SPI_Transmit+0x10c>
 8001a80:	e04c      	b.n	8001b1c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_SPI_Transmit+0x17e>
 8001a8a:	8afb      	ldrh	r3, [r7, #22]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d140      	bne.n	8001b12 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	330c      	adds	r3, #12
 8001a9a:	7812      	ldrb	r2, [r2, #0]
 8001a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ab6:	e02c      	b.n	8001b12 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d113      	bne.n	8001aee <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	330c      	adds	r3, #12
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	86da      	strh	r2, [r3, #54]	; 0x36
 8001aec:	e011      	b.n	8001b12 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aee:	f7ff f805 	bl	8000afc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d803      	bhi.n	8001b06 <HAL_SPI_Transmit+0x1f4>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b04:	d102      	bne.n	8001b0c <HAL_SPI_Transmit+0x1fa>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b10:	e026      	b.n	8001b60 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1cd      	bne.n	8001ab8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	6839      	ldr	r1, [r7, #0]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f894 	bl	8001c4e <SPI_EndRxTxTransaction>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	77fb      	strb	r3, [r7, #31]
 8001b5c:	e000      	b.n	8001b60 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001b5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b8a:	e04c      	b.n	8001c26 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b92:	d048      	beq.n	8001c26 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001b94:	f7fe ffb2 	bl	8000afc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d902      	bls.n	8001baa <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d13d      	bne.n	8001c26 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bc2:	d111      	bne.n	8001be8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bcc:	d004      	beq.n	8001bd8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd6:	d107      	bne.n	8001be8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001be6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf0:	d10f      	bne.n	8001c12 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e00f      	b.n	8001c46 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1a3      	bne.n	8001b8c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af02      	add	r7, sp, #8
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff ff88 	bl	8001b7a <SPI_WaitFlagStateUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e01d      	b.n	8001cd8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7fe fddd 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f000 fb45 	bl	8002358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d007      	beq.n	8001d1a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e01d      	b.n	8001d74 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f815 	bl	8001d7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3304      	adds	r3, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f000 faf7 	bl	8002358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	6839      	ldr	r1, [r7, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fcde 	bl	8002762 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d122      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d11b      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0202 	mvn.w	r2, #2
 8001dfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7fe fa45 	bl	80002a4 <HAL_TIM_IC_CaptureCallback>
 8001e1a:	e005      	b.n	8001e28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fa80 	bl	8002322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fa86 	bl	8002334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d122      	bne.n	8001e82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d11b      	bne.n	8001e82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0204 	mvn.w	r2, #4
 8001e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe fa1b 	bl	80002a4 <HAL_TIM_IC_CaptureCallback>
 8001e6e:	e005      	b.n	8001e7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fa56 	bl	8002322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fa5c 	bl	8002334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d122      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d11b      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f06f 0208 	mvn.w	r2, #8
 8001ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe f9f1 	bl	80002a4 <HAL_TIM_IC_CaptureCallback>
 8001ec2:	e005      	b.n	8001ed0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fa2c 	bl	8002322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa32 	bl	8002334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d122      	bne.n	8001f2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d11b      	bne.n	8001f2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f06f 0210 	mvn.w	r2, #16
 8001efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2208      	movs	r2, #8
 8001f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7fe f9c7 	bl	80002a4 <HAL_TIM_IC_CaptureCallback>
 8001f16:	e005      	b.n	8001f24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fa02 	bl	8002322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fa08 	bl	8002334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10e      	bne.n	8001f56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f06f 0201 	mvn.w	r2, #1
 8001f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f9dd 	bl	8002310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d10e      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fc61 	bl	8002844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b40      	cmp	r3, #64	; 0x40
 8001f8e:	d10e      	bne.n	8001fae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f9cc 	bl	8002346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d10e      	bne.n	8001fda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d107      	bne.n	8001fda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f06f 0220 	mvn.w	r2, #32
 8001fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fc2c 	bl	8002832 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_IC_ConfigChannel+0x1a>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e08a      	b.n	8002112 <HAL_TIM_IC_ConfigChannel+0x130>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11b      	bne.n	800204a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f000 f9fb 	bl	800241c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 020c 	bic.w	r2, r2, #12
 8002034:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6999      	ldr	r1, [r3, #24]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	619a      	str	r2, [r3, #24]
 8002048:	e05a      	b.n	8002100 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d11c      	bne.n	800208a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6819      	ldr	r1, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f000 fa64 	bl	800252c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002072:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6999      	ldr	r1, [r3, #24]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	021a      	lsls	r2, r3, #8
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	619a      	str	r2, [r3, #24]
 8002088:	e03a      	b.n	8002100 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d11b      	bne.n	80020c8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f000 faaf 	bl	8002602 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020c 	bic.w	r2, r2, #12
 80020b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69d9      	ldr	r1, [r3, #28]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	61da      	str	r2, [r3, #28]
 80020c6:	e01b      	b.n	8002100 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f000 face 	bl	8002678 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69d9      	ldr	r1, [r3, #28]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	021a      	lsls	r2, r3, #8
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_TIM_ConfigClockSource+0x18>
 800212e:	2302      	movs	r3, #2
 8002130:	e0a6      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x166>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002150:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002158:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d067      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x120>
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d80b      	bhi.n	8002186 <HAL_TIM_ConfigClockSource+0x6c>
 800216e:	2b10      	cmp	r3, #16
 8002170:	d073      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x140>
 8002172:	2b10      	cmp	r3, #16
 8002174:	d802      	bhi.n	800217c <HAL_TIM_ConfigClockSource+0x62>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d06f      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800217a:	e078      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800217c:	2b20      	cmp	r3, #32
 800217e:	d06c      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x140>
 8002180:	2b30      	cmp	r3, #48	; 0x30
 8002182:	d06a      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002184:	e073      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002186:	2b70      	cmp	r3, #112	; 0x70
 8002188:	d00d      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x8c>
 800218a:	2b70      	cmp	r3, #112	; 0x70
 800218c:	d804      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x7e>
 800218e:	2b50      	cmp	r3, #80	; 0x50
 8002190:	d033      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0xe0>
 8002192:	2b60      	cmp	r3, #96	; 0x60
 8002194:	d041      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002196:	e06a      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	d066      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x152>
 800219e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a2:	d017      	beq.n	80021d4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021a4:	e063      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f000 fab5 	bl	8002724 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	609a      	str	r2, [r3, #8]
      break;
 80021d2:	e04c      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f000 fa9e 	bl	8002724 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021f6:	609a      	str	r2, [r3, #8]
      break;
 80021f8:	e039      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	461a      	mov	r2, r3
 8002208:	f000 f962 	bl	80024d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2150      	movs	r1, #80	; 0x50
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fa6c 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 8002218:	e029      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 f9bc 	bl	80025a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2160      	movs	r1, #96	; 0x60
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fa5c 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 8002238:	e019      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f000 f942 	bl	80024d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2140      	movs	r1, #64	; 0x40
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fa4c 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 8002258:	e009      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f000 fa43 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 800226a:	e000      	b.n	800226e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800226c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d831      	bhi.n	8002300 <HAL_TIM_ReadCapturedValue+0x78>
 800229c:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	08002301 	.word	0x08002301
 80022ac:	08002301 	.word	0x08002301
 80022b0:	08002301 	.word	0x08002301
 80022b4:	080022e3 	.word	0x080022e3
 80022b8:	08002301 	.word	0x08002301
 80022bc:	08002301 	.word	0x08002301
 80022c0:	08002301 	.word	0x08002301
 80022c4:	080022ed 	.word	0x080022ed
 80022c8:	08002301 	.word	0x08002301
 80022cc:	08002301 	.word	0x08002301
 80022d0:	08002301 	.word	0x08002301
 80022d4:	080022f7 	.word	0x080022f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	60fb      	str	r3, [r7, #12]

      break;
 80022e0:	e00f      	b.n	8002302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	60fb      	str	r3, [r7, #12]

      break;
 80022ea:	e00a      	b.n	8002302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	60fb      	str	r3, [r7, #12]

      break;
 80022f4:	e005      	b.n	8002302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	60fb      	str	r3, [r7, #12]

      break;
 80022fe:	e000      	b.n	8002302 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002300:	bf00      	nop
  }

  return tmpreg;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a29      	ldr	r2, [pc, #164]	; (8002410 <TIM_Base_SetConfig+0xb8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00b      	beq.n	8002388 <TIM_Base_SetConfig+0x30>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d007      	beq.n	8002388 <TIM_Base_SetConfig+0x30>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a26      	ldr	r2, [pc, #152]	; (8002414 <TIM_Base_SetConfig+0xbc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <TIM_Base_SetConfig+0x30>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a25      	ldr	r2, [pc, #148]	; (8002418 <TIM_Base_SetConfig+0xc0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d108      	bne.n	800239a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <TIM_Base_SetConfig+0xb8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00b      	beq.n	80023ba <TIM_Base_SetConfig+0x62>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x62>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a19      	ldr	r2, [pc, #100]	; (8002414 <TIM_Base_SetConfig+0xbc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x62>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <TIM_Base_SetConfig+0xc0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <TIM_Base_SetConfig+0xb8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800

0800241c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <TIM_TI1_SetConfig+0xa8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00b      	beq.n	8002462 <TIM_TI1_SetConfig+0x46>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d007      	beq.n	8002462 <TIM_TI1_SetConfig+0x46>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <TIM_TI1_SetConfig+0xac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_TI1_SetConfig+0x46>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <TIM_TI1_SetConfig+0xb0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <TIM_TI1_SetConfig+0x4a>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <TIM_TI1_SetConfig+0x4c>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e003      	b.n	8002486 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800248c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	b2db      	uxtb	r3, r3
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f023 030a 	bic.w	r3, r3, #10
 80024a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f003 030a 	and.w	r3, r3, #10
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800

080024d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f023 0201 	bic.w	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 030a 	bic.w	r3, r3, #10
 800250c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	621a      	str	r2, [r3, #32]
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	f023 0210 	bic.w	r2, r3, #16
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800256a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	031b      	lsls	r3, r3, #12
 8002570:	b29b      	uxth	r3, r3
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800257e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	621a      	str	r2, [r3, #32]
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f023 0210 	bic.w	r2, r3, #16
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	031b      	lsls	r3, r3, #12
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002602:	b480      	push	{r7}
 8002604:	b087      	sub	sp, #28
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800263e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	b2db      	uxtb	r3, r3
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002652:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	621a      	str	r2, [r3, #32]
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	031b      	lsls	r3, r3, #12
 80026bc:	b29b      	uxth	r3, r3
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	031b      	lsls	r3, r3, #12
 80026d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	f043 0307 	orr.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800273e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	431a      	orrs	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002762:	b480      	push	{r7}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2201      	movs	r2, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	43db      	mvns	r3, r3
 8002784:	401a      	ands	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	431a      	orrs	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	621a      	str	r2, [r3, #32]
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027be:	2302      	movs	r3, #2
 80027c0:	e032      	b.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
	...

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2500      	movs	r5, #0
 800285c:	4e0c      	ldr	r6, [pc, #48]	; (8002890 <__libc_init_array+0x38>)
 800285e:	4c0d      	ldr	r4, [pc, #52]	; (8002894 <__libc_init_array+0x3c>)
 8002860:	1ba4      	subs	r4, r4, r6
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a5      	cmp	r5, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	f000 f822 	bl	80028b0 <_init>
 800286c:	2500      	movs	r5, #0
 800286e:	4e0a      	ldr	r6, [pc, #40]	; (8002898 <__libc_init_array+0x40>)
 8002870:	4c0a      	ldr	r4, [pc, #40]	; (800289c <__libc_init_array+0x44>)
 8002872:	1ba4      	subs	r4, r4, r6
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a5      	cmp	r5, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002880:	4798      	blx	r3
 8002882:	3501      	adds	r5, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800288a:	4798      	blx	r3
 800288c:	3501      	adds	r5, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	080028f4 	.word	0x080028f4
 8002894:	080028f4 	.word	0x080028f4
 8002898:	080028f4 	.word	0x080028f4
 800289c:	080028f8 	.word	0x080028f8

080028a0 <memset>:
 80028a0:	4603      	mov	r3, r0
 80028a2:	4402      	add	r2, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
