
Control_PID_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ce4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001df0  08001df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e14  08001e14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e14  08001e14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e14  08001e14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e14  08001e14  00011e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e18  08001e18  00011e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08001e28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08001e28  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c127  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c61  00000000  00000000  0002c15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0002ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  0002e958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000150e0  00000000  00000000  0002f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009340  00000000  00000000  000444d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071309  00000000  00000000  0004d818  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000beb21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef4  00000000  00000000  000beb9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001dd8 	.word	0x08001dd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001dd8 	.word	0x08001dd8

0800014c <app_Debounce>:
	OpcionUno = 100,
	OpcionDos = 200
};

void app_Debounce(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint8_t Presionado = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	while(HAL_GPIO_ReadPin(Boton_GPIO_Port, Boton_Pin) == GPIO_PIN_RESET)
 8000156:	e00b      	b.n	8000170 <app_Debounce+0x24>
	{
		delay_ms(100);
 8000158:	2064      	movs	r0, #100	; 0x64
 800015a:	f000 f84f 	bl	80001fc <delay_ms>
		TiempoPresionado = TiempoPresionado + 100;
 800015e:	4b23      	ldr	r3, [pc, #140]	; (80001ec <app_Debounce+0xa0>)
 8000160:	881b      	ldrh	r3, [r3, #0]
 8000162:	b29b      	uxth	r3, r3
 8000164:	3364      	adds	r3, #100	; 0x64
 8000166:	b29a      	uxth	r2, r3
 8000168:	4b20      	ldr	r3, [pc, #128]	; (80001ec <app_Debounce+0xa0>)
 800016a:	801a      	strh	r2, [r3, #0]
		Presionado = 1;
 800016c:	2301      	movs	r3, #1
 800016e:	71fb      	strb	r3, [r7, #7]
	while(HAL_GPIO_ReadPin(Boton_GPIO_Port, Boton_Pin) == GPIO_PIN_RESET)
 8000170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000174:	481e      	ldr	r0, [pc, #120]	; (80001f0 <app_Debounce+0xa4>)
 8000176:	f000 fe25 	bl	8000dc4 <HAL_GPIO_ReadPin>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d0eb      	beq.n	8000158 <app_Debounce+0xc>
	}
	if(Aumento == 6)
 8000180:	4b1c      	ldr	r3, [pc, #112]	; (80001f4 <app_Debounce+0xa8>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	b2db      	uxtb	r3, r3
 8000186:	2b06      	cmp	r3, #6
 8000188:	d102      	bne.n	8000190 <app_Debounce+0x44>
	{
		Aumento = 0;
 800018a:	4b1a      	ldr	r3, [pc, #104]	; (80001f4 <app_Debounce+0xa8>)
 800018c:	2200      	movs	r2, #0
 800018e:	701a      	strb	r2, [r3, #0]
	}
	if(TiempoPresionado >= OpcionDos)
 8000190:	4b16      	ldr	r3, [pc, #88]	; (80001ec <app_Debounce+0xa0>)
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b29b      	uxth	r3, r3
 8000196:	2bc7      	cmp	r3, #199	; 0xc7
 8000198:	d90f      	bls.n	80001ba <app_Debounce+0x6e>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800019a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019e:	4816      	ldr	r0, [pc, #88]	; (80001f8 <app_Debounce+0xac>)
 80001a0:	f000 fe3f 	bl	8000e22 <HAL_GPIO_TogglePin>
		TiempoPresionado = 0;
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <app_Debounce+0xa0>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	801a      	strh	r2, [r3, #0]
		Aumento++;
 80001aa:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <app_Debounce+0xa8>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	3301      	adds	r3, #1
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <app_Debounce+0xa8>)
 80001b6:	701a      	strb	r2, [r3, #0]
				Aumento = 0;
			}

	}

}
 80001b8:	e014      	b.n	80001e4 <app_Debounce+0x98>
		if((TiempoPresionado <= OpcionUno) && (Presionado == 1))
 80001ba:	4b0c      	ldr	r3, [pc, #48]	; (80001ec <app_Debounce+0xa0>)
 80001bc:	881b      	ldrh	r3, [r3, #0]
 80001be:	b29b      	uxth	r3, r3
 80001c0:	2b64      	cmp	r3, #100	; 0x64
 80001c2:	d80f      	bhi.n	80001e4 <app_Debounce+0x98>
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d10c      	bne.n	80001e4 <app_Debounce+0x98>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	480a      	ldr	r0, [pc, #40]	; (80001f8 <app_Debounce+0xac>)
 80001d0:	f000 fe27 	bl	8000e22 <HAL_GPIO_TogglePin>
				TiempoPresionado = 0;
 80001d4:	4b05      	ldr	r3, [pc, #20]	; (80001ec <app_Debounce+0xa0>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	801a      	strh	r2, [r3, #0]
				Presionado = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
				Aumento = 0;
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <app_Debounce+0xa8>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000028 	.word	0x20000028
 80001f0:	40010c00 	.word	0x40010c00
 80001f4:	2000002a 	.word	0x2000002a
 80001f8:	40011000 	.word	0x40011000

080001fc <delay_ms>:
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}


void delay_ms (uint16_t ms)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	uint32_t conversion = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <delay_ms+0x3c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2200      	movs	r2, #0
 8000210:	625a      	str	r2, [r3, #36]	; 0x24
	conversion = ms * 1000;
 8000212:	88fb      	ldrh	r3, [r7, #6]
 8000214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000218:	fb02 f303 	mul.w	r3, r2, r3
 800021c:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim1) < conversion);
 800021e:	bf00      	nop
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <delay_ms+0x3c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	429a      	cmp	r2, r3
 800022a:	d8f9      	bhi.n	8000220 <delay_ms+0x24>
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	2000002c 	.word	0x2000002c

0800023c <SPI_CS_DISABLE>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}while(0);
}

void SPI_CS_DISABLE(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	2110      	movs	r1, #16
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <SPI_CS_DISABLE+0x14>)
 8000246:	f000 fdd4 	bl	8000df2 <HAL_GPIO_WritePin>
	}while(0);
}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010800 	.word	0x40010800

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fb14 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f822 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f934 	bl	80004cc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000264:	f000 f890 	bl	8000388 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000268:	f000 f858 	bl	800031c <MX_SPI1_Init>
  MX_TIM2_Init();
 800026c:	f000 f8dc 	bl	8000428 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <main+0x44>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <main+0x44>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800027e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim1);
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <main+0x48>)
 8000282:	f001 fa5d 	bl	8001740 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000286:	213c      	movs	r1, #60	; 0x3c
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <main+0x4c>)
 800028a:	f001 fb0a 	bl	80018a2 <HAL_TIM_Encoder_Start_IT>
  SPI_CS_DISABLE();
 800028e:	f7ff ffd5 	bl	800023c <SPI_CS_DISABLE>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_Debounce();
 8000292:	f7ff ff5b 	bl	800014c <app_Debounce>
 8000296:	e7fc      	b.n	8000292 <main+0x3e>
 8000298:	200000ac 	.word	0x200000ac
 800029c:	2000002c 	.word	0x2000002c
 80002a0:	2000006c 	.word	0x2000006c

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fd88 	bl	8001dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fdba 	bl	8000e54 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e6:	f000 f96d 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f826 	bl	8001354 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030e:	f000 f959 	bl	80005c4 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	; 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <MX_SPI1_Init+0x64>)
 8000322:	4a18      	ldr	r2, [pc, #96]	; (8000384 <MX_SPI1_Init+0x68>)
 8000324:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_SPI1_Init+0x64>)
 8000328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800032c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_SPI1_Init+0x64>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <MX_SPI1_Init+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_SPI1_Init+0x64>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_SPI1_Init+0x64>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_SPI1_Init+0x64>)
 8000348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800034c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_SPI1_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_SPI1_Init+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_SPI1_Init+0x64>)
 800035c:	2200      	movs	r2, #0
 800035e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_SPI1_Init+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_SPI1_Init+0x64>)
 8000368:	220a      	movs	r2, #10
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_SPI1_Init+0x64>)
 800036e:	f001 f95b 	bl	8001628 <HAL_SPI_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000378:	f000 f924 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200000ac 	.word	0x200000ac
 8000384:	40013000 	.word	0x40013000

08000388 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039c:	463b      	mov	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <MX_TIM1_Init+0x98>)
 80003a6:	4a1f      	ldr	r2, [pc, #124]	; (8000424 <MX_TIM1_Init+0x9c>)
 80003a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80003aa:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_TIM1_Init+0x98>)
 80003ac:	224f      	movs	r2, #79	; 0x4f
 80003ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_TIM1_Init+0x98>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_TIM1_Init+0x98>)
 80003b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_TIM1_Init+0x98>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_TIM1_Init+0x98>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_TIM1_Init+0x98>)
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003d0:	4813      	ldr	r0, [pc, #76]	; (8000420 <MX_TIM1_Init+0x98>)
 80003d2:	f001 f98a 	bl	80016ea <HAL_TIM_Base_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003dc:	f000 f8f2 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4619      	mov	r1, r3
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <MX_TIM1_Init+0x98>)
 80003ee:	f001 faaf 	bl	8001950 <HAL_TIM_ConfigClockSource>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80003f8:	f000 f8e4 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000404:	463b      	mov	r3, r7
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_TIM1_Init+0x98>)
 800040a:	f001 fc75 	bl	8001cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000414:	f000 f8d6 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000002c 	.word	0x2000002c
 8000424:	40012c00 	.word	0x40012c00

08000428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08c      	sub	sp, #48	; 0x30
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	2224      	movs	r2, #36	; 0x24
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fcc6 	bl	8001dc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000444:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <MX_TIM2_Init+0xa0>)
 8000446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_TIM2_Init+0xa0>)
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_TIM2_Init+0xa0>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_TIM2_Init+0xa0>)
 800045a:	22c8      	movs	r2, #200	; 0xc8
 800045c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_TIM2_Init+0xa0>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_TIM2_Init+0xa0>)
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800046a:	2303      	movs	r3, #3
 800046c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800046e:	2302      	movs	r3, #2
 8000470:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000472:	2301      	movs	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 800047a:	2304      	movs	r3, #4
 800047c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800047e:	2302      	movs	r3, #2
 8000480:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000482:	2301      	movs	r3, #1
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800048e:	f107 030c 	add.w	r3, r7, #12
 8000492:	4619      	mov	r1, r3
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <MX_TIM2_Init+0xa0>)
 8000496:	f001 f976 	bl	8001786 <HAL_TIM_Encoder_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80004a0:	f000 f890 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_TIM2_Init+0xa0>)
 80004b2:	f001 fc21 	bl	8001cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004bc:	f000 f882 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	3730      	adds	r7, #48	; 0x30
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000006c 	.word	0x2000006c

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004e6:	f043 0310 	orr.w	r3, r3, #16
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0310 	and.w	r3, r3, #16
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a2d      	ldr	r2, [pc, #180]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0320 	and.w	r3, r3, #32
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0308 	and.w	r3, r3, #8
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	481c      	ldr	r0, [pc, #112]	; (80005b8 <MX_GPIO_Init+0xec>)
 8000548:	f000 fc53 	bl	8000df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	481a      	ldr	r0, [pc, #104]	; (80005bc <MX_GPIO_Init+0xf0>)
 8000552:	f000 fc4e 	bl	8000df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4812      	ldr	r0, [pc, #72]	; (80005b8 <MX_GPIO_Init+0xec>)
 8000570:	f000 face 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSS_Pin */
  GPIO_InitStruct.Pin = CSS_Pin;
 8000574:	2310      	movs	r3, #16
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2302      	movs	r3, #2
 8000582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4619      	mov	r1, r3
 800058a:	480c      	ldr	r0, [pc, #48]	; (80005bc <MX_GPIO_Init+0xf0>)
 800058c:	f000 fac0 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_Pin */
  GPIO_InitStruct.Pin = Boton_Pin;
 8000590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Boton_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <MX_GPIO_Init+0xf4>)
 80005a6:	f000 fab3 	bl	8000b10 <HAL_GPIO_Init>

}
 80005aa:	bf00      	nop
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40011000 	.word	0x40011000
 80005bc:	40010800 	.word	0x40010800
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <HAL_MspInit+0x5c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x5c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_MspInit+0x60>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_MspInit+0x60>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <HAL_SPI_MspInit+0x88>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d12f      	bne.n	80006b4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 800065a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000684:	23a0      	movs	r3, #160	; 0xa0
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000698:	f000 fa3a 	bl	8000b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 80006b0:	f000 fa2e 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40013000 	.word	0x40013000
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010800 	.word	0x40010800

080006c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <HAL_TIM_Base_MspInit+0x34>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d10b      	bne.n	80006f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_TIM_Base_MspInit+0x38>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_TIM_Base_MspInit+0x38>)
 80006e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_TIM_Base_MspInit+0x38>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40012c00 	.word	0x40012c00
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000722:	d123      	bne.n	800076c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_TIM_Encoder_MspInit+0x70>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <HAL_TIM_Encoder_MspInit+0x70>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	61d3      	str	r3, [r2, #28]
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_TIM_Encoder_MspInit+0x70>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_TIM_Encoder_MspInit+0x70>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <HAL_TIM_Encoder_MspInit+0x70>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_TIM_Encoder_MspInit+0x70>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000754:	2303      	movs	r3, #3
 8000756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4619      	mov	r1, r3
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <HAL_TIM_Encoder_MspInit+0x74>)
 8000768:	f000 f9d2 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <HardFault_Handler+0x4>

0800078e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <MemManage_Handler+0x4>

08000794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <BusFault_Handler+0x4>

0800079a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <UsageFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f8a2 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <SystemInit+0x5c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <SystemInit+0x5c>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <SystemInit+0x5c>)
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	4911      	ldr	r1, [pc, #68]	; (800082c <SystemInit+0x5c>)
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <SystemInit+0x60>)
 80007e8:	4013      	ands	r3, r2
 80007ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <SystemInit+0x5c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <SystemInit+0x5c>)
 80007f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SystemInit+0x5c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <SystemInit+0x5c>)
 8000802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000806:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <SystemInit+0x5c>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <SystemInit+0x5c>)
 800080e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000812:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <SystemInit+0x5c>)
 8000816:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800081a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SystemInit+0x64>)
 800081e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000822:	609a      	str	r2, [r3, #8]
#endif 
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000
 8000830:	f8ff0000 	.word	0xf8ff0000
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000838:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800083a:	e003      	b.n	8000844 <LoopCopyDataInit>

0800083c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800083e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000840:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000842:	3104      	adds	r1, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000848:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800084a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800084c:	d3f6      	bcc.n	800083c <CopyDataInit>
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000850:	e002      	b.n	8000858 <LoopFillZerobss>

08000852 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000854:	f842 3b04 	str.w	r3, [r2], #4

08000858 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800085a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800085c:	d3f9      	bcc.n	8000852 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800085e:	f7ff ffb7 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000862:	f001 fa8d 	bl	8001d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff fcf5 	bl	8000254 <main>
  bx lr
 800086a:	4770      	bx	lr
  ldr r3, =_sidata
 800086c:	08001e1c 	.word	0x08001e1c
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000878:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800087c:	20000108 	.word	0x20000108

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f907 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff fe96 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f911 	bl	8000af6 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ec:	f000 f8e7 	bl	8000abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <HAL_IncTick+0x20>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000008 	.word	0x20000008
 8000930:	20000104 	.word	0x20000104

08000934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000104 	.word	0x20000104

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	; (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a74:	d301      	bcc.n	8000a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SysTick_Config+0x40>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a82:	210f      	movs	r1, #15
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a88:	f7ff ff90 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x40>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff49 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff5e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ff90 	bl	8000a00 <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5f 	bl	80009ac <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffb0 	bl	8000a64 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b08b      	sub	sp, #44	; 0x2c
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b22:	e127      	b.n	8000d74 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b24:	2201      	movs	r2, #1
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8116 	bne.w	8000d6e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b12      	cmp	r3, #18
 8000b48:	d034      	beq.n	8000bb4 <HAL_GPIO_Init+0xa4>
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d80d      	bhi.n	8000b6a <HAL_GPIO_Init+0x5a>
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d02b      	beq.n	8000baa <HAL_GPIO_Init+0x9a>
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d804      	bhi.n	8000b60 <HAL_GPIO_Init+0x50>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d031      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d01c      	beq.n	8000b98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5e:	e048      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d043      	beq.n	8000bec <HAL_GPIO_Init+0xdc>
 8000b64:	2b11      	cmp	r3, #17
 8000b66:	d01b      	beq.n	8000ba0 <HAL_GPIO_Init+0x90>
          break;
 8000b68:	e043      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b6a:	4a89      	ldr	r2, [pc, #548]	; (8000d90 <HAL_GPIO_Init+0x280>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d026      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b70:	4a87      	ldr	r2, [pc, #540]	; (8000d90 <HAL_GPIO_Init+0x280>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d806      	bhi.n	8000b84 <HAL_GPIO_Init+0x74>
 8000b76:	4a87      	ldr	r2, [pc, #540]	; (8000d94 <HAL_GPIO_Init+0x284>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d020      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b7c:	4a86      	ldr	r2, [pc, #536]	; (8000d98 <HAL_GPIO_Init+0x288>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d01d      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
          break;
 8000b82:	e036      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b84:	4a85      	ldr	r2, [pc, #532]	; (8000d9c <HAL_GPIO_Init+0x28c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d019      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b8a:	4a85      	ldr	r2, [pc, #532]	; (8000da0 <HAL_GPIO_Init+0x290>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d016      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b90:	4a84      	ldr	r2, [pc, #528]	; (8000da4 <HAL_GPIO_Init+0x294>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d013      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
          break;
 8000b96:	e02c      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	623b      	str	r3, [r7, #32]
          break;
 8000b9e:	e028      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	623b      	str	r3, [r7, #32]
          break;
 8000ba8:	e023      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	3308      	adds	r3, #8
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e01e      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	330c      	adds	r3, #12
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e019      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	623b      	str	r3, [r7, #32]
          break;
 8000bca:	e012      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d105      	bne.n	8000be0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	611a      	str	r2, [r3, #16]
          break;
 8000bde:	e008      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be0:	2308      	movs	r3, #8
 8000be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	615a      	str	r2, [r3, #20]
          break;
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	2bff      	cmp	r3, #255	; 0xff
 8000bf6:	d801      	bhi.n	8000bfc <HAL_GPIO_Init+0xec>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	e001      	b.n	8000c00 <HAL_GPIO_Init+0xf0>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	2bff      	cmp	r3, #255	; 0xff
 8000c06:	d802      	bhi.n	8000c0e <HAL_GPIO_Init+0xfe>
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_Init+0x104>
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	3b08      	subs	r3, #8
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	401a      	ands	r2, r3
 8000c26:	6a39      	ldr	r1, [r7, #32]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 8096 	beq.w	8000d6e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c42:	4b59      	ldr	r3, [pc, #356]	; (8000da8 <HAL_GPIO_Init+0x298>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a58      	ldr	r2, [pc, #352]	; (8000da8 <HAL_GPIO_Init+0x298>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <HAL_GPIO_Init+0x298>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c5a:	4a54      	ldr	r2, [pc, #336]	; (8000dac <HAL_GPIO_Init+0x29c>)
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a4b      	ldr	r2, [pc, #300]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <HAL_GPIO_Init+0x19e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4a      	ldr	r2, [pc, #296]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00d      	beq.n	8000caa <HAL_GPIO_Init+0x19a>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a49      	ldr	r2, [pc, #292]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d007      	beq.n	8000ca6 <HAL_GPIO_Init+0x196>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a48      	ldr	r2, [pc, #288]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_GPIO_Init+0x192>
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x1a0>
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	e004      	b.n	8000cb0 <HAL_GPIO_Init+0x1a0>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e002      	b.n	8000cb0 <HAL_GPIO_Init+0x1a0>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_Init+0x1a0>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb2:	f002 0203 	and.w	r2, r2, #3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4093      	lsls	r3, r2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cc0:	493a      	ldr	r1, [pc, #232]	; (8000dac <HAL_GPIO_Init+0x29c>)
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4938      	ldr	r1, [pc, #224]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4933      	ldr	r1, [pc, #204]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	492e      	ldr	r1, [pc, #184]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
 8000d0e:	e006      	b.n	8000d1e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	4929      	ldr	r1, [pc, #164]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d006      	beq.n	8000d38 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	4924      	ldr	r1, [pc, #144]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	608b      	str	r3, [r1, #8]
 8000d36:	e006      	b.n	8000d46 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	491f      	ldr	r1, [pc, #124]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	491a      	ldr	r1, [pc, #104]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60cb      	str	r3, [r1, #12]
 8000d5e:	e006      	b.n	8000d6e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	4915      	ldr	r1, [pc, #84]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	3301      	adds	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f47f aed0 	bne.w	8000b24 <HAL_GPIO_Init+0x14>
  }
}
 8000d84:	bf00      	nop
 8000d86:	372c      	adds	r7, #44	; 0x2c
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	10210000 	.word	0x10210000
 8000d94:	10110000 	.word	0x10110000
 8000d98:	10120000 	.word	0x10120000
 8000d9c:	10310000 	.word	0x10310000
 8000da0:	10320000 	.word	0x10320000
 8000da4:	10220000 	.word	0x10220000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40011400 	.word	0x40011400
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e001      	b.n	8000de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	807b      	strh	r3, [r7, #2]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e02:	787b      	ldrb	r3, [r7, #1]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e08:	887a      	ldrh	r2, [r7, #2]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e0e:	e003      	b.n	8000e18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	041a      	lsls	r2, r3, #16
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e3a:	887a      	ldrh	r2, [r7, #2]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	611a      	str	r2, [r3, #16]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
	...

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e26c      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8087 	beq.w	8000f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e74:	4b92      	ldr	r3, [pc, #584]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d00c      	beq.n	8000e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e80:	4b8f      	ldr	r3, [pc, #572]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d112      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x5e>
 8000e8c:	4b8c      	ldr	r3, [pc, #560]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e98:	d10b      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9a:	4b89      	ldr	r3, [pc, #548]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d06c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x12c>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d168      	bne.n	8000f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e246      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x76>
 8000ebc:	4b80      	ldr	r3, [pc, #512]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a7f      	ldr	r2, [pc, #508]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e02e      	b.n	8000f28 <HAL_RCC_OscConfig+0xd4>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x98>
 8000ed2:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a7a      	ldr	r2, [pc, #488]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a77      	ldr	r2, [pc, #476]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e01d      	b.n	8000f28 <HAL_RCC_OscConfig+0xd4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0xbc>
 8000ef6:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a71      	ldr	r2, [pc, #452]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a6e      	ldr	r2, [pc, #440]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0xd4>
 8000f10:	4b6b      	ldr	r3, [pc, #428]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a6a      	ldr	r2, [pc, #424]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a67      	ldr	r2, [pc, #412]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd00 	bl	8000934 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fcfc 	bl	8000934 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1fa      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0xe4>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fcec 	bl	8000934 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fce8 	bl	8000934 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e1e6      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f72:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x10c>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d063      	beq.n	8001056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8e:	4b4c      	ldr	r3, [pc, #304]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f9a:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d11c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x18c>
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d116      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <HAL_RCC_OscConfig+0x176>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d001      	beq.n	8000fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e1ba      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4939      	ldr	r1, [pc, #228]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	e03a      	b.n	8001056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d020      	beq.n	800102a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fca1 	bl	8000934 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fc9d 	bl	8000934 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e19b      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4927      	ldr	r1, [pc, #156]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
 8001028:	e015      	b.n	8001056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_RCC_OscConfig+0x270>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fc80 	bl	8000934 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff fc7c 	bl	8000934 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e17a      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d03a      	beq.n	80010d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d019      	beq.n	800109e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001070:	f7ff fc60 	bl	8000934 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fc5c 	bl	8000934 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e15a      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f000 faa8 	bl	80015ec <RCC_Delay>
 800109c:	e01c      	b.n	80010d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc46 	bl	8000934 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010aa:	e00f      	b.n	80010cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc42 	bl	8000934 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d908      	bls.n	80010cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e140      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	42420000 	.word	0x42420000
 80010c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010cc:	4b9e      	ldr	r3, [pc, #632]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e9      	bne.n	80010ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80a6 	beq.w	8001232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ea:	4b97      	ldr	r3, [pc, #604]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10d      	bne.n	8001112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b94      	ldr	r3, [pc, #592]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a93      	ldr	r2, [pc, #588]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b91      	ldr	r3, [pc, #580]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110e:	2301      	movs	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001112:	4b8e      	ldr	r3, [pc, #568]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	2b00      	cmp	r3, #0
 800111c:	d118      	bne.n	8001150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800111e:	4b8b      	ldr	r3, [pc, #556]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a8a      	ldr	r2, [pc, #552]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800112a:	f7ff fc03 	bl	8000934 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001132:	f7ff fbff 	bl	8000934 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b64      	cmp	r3, #100	; 0x64
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e0fd      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001144:	4b81      	ldr	r3, [pc, #516]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d106      	bne.n	8001166 <HAL_RCC_OscConfig+0x312>
 8001158:	4b7b      	ldr	r3, [pc, #492]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a7a      	ldr	r2, [pc, #488]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	e02d      	b.n	80011c2 <HAL_RCC_OscConfig+0x36e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x334>
 800116e:	4b76      	ldr	r3, [pc, #472]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a75      	ldr	r2, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	4b73      	ldr	r3, [pc, #460]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a72      	ldr	r2, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	f023 0304 	bic.w	r3, r3, #4
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	e01c      	b.n	80011c2 <HAL_RCC_OscConfig+0x36e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d10c      	bne.n	80011aa <HAL_RCC_OscConfig+0x356>
 8001190:	4b6d      	ldr	r3, [pc, #436]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a6c      	ldr	r2, [pc, #432]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a69      	ldr	r2, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	e00b      	b.n	80011c2 <HAL_RCC_OscConfig+0x36e>
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	4a66      	ldr	r2, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	6213      	str	r3, [r2, #32]
 80011b6:	4b64      	ldr	r3, [pc, #400]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4a63      	ldr	r2, [pc, #396]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d015      	beq.n	80011f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fbb3 	bl	8000934 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fbaf 	bl	8000934 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0ab      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0ee      	beq.n	80011d2 <HAL_RCC_OscConfig+0x37e>
 80011f4:	e014      	b.n	8001220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb9d 	bl	8000934 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fb99 	bl	8000934 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e095      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001214:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1ee      	bne.n	80011fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d105      	bne.n	8001232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a47      	ldr	r2, [pc, #284]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8081 	beq.w	800133e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b08      	cmp	r3, #8
 8001246:	d061      	beq.n	800130c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d146      	bne.n	80012de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001250:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <HAL_RCC_OscConfig+0x4fc>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fb6d 	bl	8000934 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125e:	f7ff fb69 	bl	8000934 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e067      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001270:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d108      	bne.n	8001298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	492d      	ldr	r1, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a19      	ldr	r1, [r3, #32]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	430b      	orrs	r3, r1
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_RCC_OscConfig+0x4fc>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fb3d 	bl	8000934 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff fb39 	bl	8000934 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e037      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x46a>
 80012dc:	e02f      	b.n	800133e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_RCC_OscConfig+0x4fc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb26 	bl	8000934 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff fb22 	bl	8000934 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e020      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x498>
 800130a:	e018      	b.n	800133e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e013      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	429a      	cmp	r2, r3
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	40007000 	.word	0x40007000
 8001350:	42420060 	.word	0x42420060

08001354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0d0      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d910      	bls.n	8001398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0207 	bic.w	r2, r3, #7
 800137e:	4965      	ldr	r1, [pc, #404]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0b8      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a52      	ldr	r2, [pc, #328]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	494d      	ldr	r1, [pc, #308]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d040      	beq.n	8001474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d115      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e07f      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d109      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e073      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06b      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f023 0203 	bic.w	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4936      	ldr	r1, [pc, #216]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001444:	f7ff fa76 	bl	8000934 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144a:	e00a      	b.n	8001462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144c:	f7ff fa72 	bl	8000934 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e053      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 020c 	and.w	r2, r3, #12
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	429a      	cmp	r2, r3
 8001472:	d1eb      	bne.n	800144c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d210      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 0207 	bic.w	r2, r3, #7
 800148a:	4922      	ldr	r1, [pc, #136]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e032      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4916      	ldr	r1, [pc, #88]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	490e      	ldr	r1, [pc, #56]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014e2:	f000 f821 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 80014e6:	4601      	mov	r1, r0
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_RCC_ClockConfig+0x1c8>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	fa21 f303 	lsr.w	r3, r1, r3
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x1cc>)
 80014fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_ClockConfig+0x1d0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f9d4 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000
 8001518:	40021000 	.word	0x40021000
 800151c:	08001e04 	.word	0x08001e04
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001528:	b490      	push	{r4, r7}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001530:	1d3c      	adds	r4, r7, #4
 8001532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d002      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x40>
 8001562:	2b08      	cmp	r3, #8
 8001564:	d003      	beq.n	800156e <HAL_RCC_GetSysClockFreq+0x46>
 8001566:	e02d      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800156a:	623b      	str	r3, [r7, #32]
      break;
 800156c:	e02d      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800157a:	4413      	add	r3, r2
 800157c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001580:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0c5b      	lsrs	r3, r3, #17
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800159a:	4413      	add	r3, r2
 800159c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a6:	fb02 f203 	mul.w	r2, r2, r3
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
 80015b2:	e004      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	623b      	str	r3, [r7, #32]
      break;
 80015c2:	e002      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015c6:	623b      	str	r3, [r7, #32]
      break;
 80015c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ca:	6a3b      	ldr	r3, [r7, #32]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc90      	pop	{r4, r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	08001df0 	.word	0x08001df0
 80015dc:	08001e00 	.word	0x08001e00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	007a1200 	.word	0x007a1200
 80015e8:	003d0900 	.word	0x003d0900

080015ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <RCC_Delay+0x34>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <RCC_Delay+0x38>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0a5b      	lsrs	r3, r3, #9
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001608:	bf00      	nop
  }
  while (Delay --);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	60fa      	str	r2, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f9      	bne.n	8001608 <RCC_Delay+0x1c>
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000
 8001624:	10624dd3 	.word	0x10624dd3

08001628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e053      	b.n	80016e2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d106      	bne.n	800165a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7fe ffed 	bl	8000634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2202      	movs	r2, #2
 800165e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001670:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	ea42 0103 	orr.w	r1, r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	0c1a      	lsrs	r2, r3, #16
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f002 0204 	and.w	r2, r2, #4
 80016c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e01d      	b.n	8001738 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7fe ffd9 	bl	80006c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2202      	movs	r2, #2
 800171a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3304      	adds	r3, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f000 f9c9 	bl	8001ac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b06      	cmp	r3, #6
 8001768:	d007      	beq.n	800177a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07f      	b.n	800189a <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe ffa8 	bl	8000704 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ca:	f023 0307 	bic.w	r3, r3, #7
 80017ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3304      	adds	r3, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f000 f970 	bl	8001ac0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001808:	f023 0303 	bic.w	r3, r3, #3
 800180c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	4313      	orrs	r3, r2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001826:	f023 030c 	bic.w	r3, r3, #12
 800182a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	4313      	orrs	r3, r2
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	011a      	lsls	r2, r3, #4
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	031b      	lsls	r3, r3, #12
 8001856:	4313      	orrs	r3, r2
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001864:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4313      	orrs	r3, r2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_TIM_Encoder_Start_IT+0x16>
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d010      	beq.n	80018d8 <HAL_TIM_Encoder_Start_IT+0x36>
 80018b6:	e01f      	b.n	80018f8 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f9f5 	bl	8001cb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
      break;
 80018d6:	e02e      	b.n	8001936 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	2104      	movs	r1, #4
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 f9e5 	bl	8001cb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0204 	orr.w	r2, r2, #4
 80018f4:	60da      	str	r2, [r3, #12]
      break;
 80018f6:	e01e      	b.n	8001936 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f9d5 	bl	8001cb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2201      	movs	r2, #1
 800190c:	2104      	movs	r1, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f9ce 	bl	8001cb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0202 	orr.w	r2, r2, #2
 8001922:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0204 	orr.w	r2, r2, #4
 8001932:	60da      	str	r2, [r3, #12]
      break;
 8001934:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_TIM_ConfigClockSource+0x18>
 8001964:	2302      	movs	r3, #2
 8001966:	e0a6      	b.n	8001ab6 <HAL_TIM_ConfigClockSource+0x166>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800198e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b40      	cmp	r3, #64	; 0x40
 800199e:	d067      	beq.n	8001a70 <HAL_TIM_ConfigClockSource+0x120>
 80019a0:	2b40      	cmp	r3, #64	; 0x40
 80019a2:	d80b      	bhi.n	80019bc <HAL_TIM_ConfigClockSource+0x6c>
 80019a4:	2b10      	cmp	r3, #16
 80019a6:	d073      	beq.n	8001a90 <HAL_TIM_ConfigClockSource+0x140>
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d802      	bhi.n	80019b2 <HAL_TIM_ConfigClockSource+0x62>
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d06f      	beq.n	8001a90 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80019b0:	e078      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d06c      	beq.n	8001a90 <HAL_TIM_ConfigClockSource+0x140>
 80019b6:	2b30      	cmp	r3, #48	; 0x30
 80019b8:	d06a      	beq.n	8001a90 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80019ba:	e073      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80019bc:	2b70      	cmp	r3, #112	; 0x70
 80019be:	d00d      	beq.n	80019dc <HAL_TIM_ConfigClockSource+0x8c>
 80019c0:	2b70      	cmp	r3, #112	; 0x70
 80019c2:	d804      	bhi.n	80019ce <HAL_TIM_ConfigClockSource+0x7e>
 80019c4:	2b50      	cmp	r3, #80	; 0x50
 80019c6:	d033      	beq.n	8001a30 <HAL_TIM_ConfigClockSource+0xe0>
 80019c8:	2b60      	cmp	r3, #96	; 0x60
 80019ca:	d041      	beq.n	8001a50 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80019cc:	e06a      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80019ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d2:	d066      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0x152>
 80019d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d8:	d017      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80019da:	e063      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f000 f941 	bl	8001c72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	609a      	str	r2, [r3, #8]
      break;
 8001a08:	e04c      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6899      	ldr	r1, [r3, #8]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f000 f92a 	bl	8001c72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a2c:	609a      	str	r2, [r3, #8]
      break;
 8001a2e:	e039      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f000 f8a1 	bl	8001b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2150      	movs	r1, #80	; 0x50
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f8f8 	bl	8001c3e <TIM_ITRx_SetConfig>
      break;
 8001a4e:	e029      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f000 f8bf 	bl	8001be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2160      	movs	r1, #96	; 0x60
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f8e8 	bl	8001c3e <TIM_ITRx_SetConfig>
      break;
 8001a6e:	e019      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f000 f881 	bl	8001b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f8d8 	bl	8001c3e <TIM_ITRx_SetConfig>
      break;
 8001a8e:	e009      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 f8cf 	bl	8001c3e <TIM_ITRx_SetConfig>
      break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <TIM_Base_SetConfig+0xb8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00b      	beq.n	8001af0 <TIM_Base_SetConfig+0x30>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ade:	d007      	beq.n	8001af0 <TIM_Base_SetConfig+0x30>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <TIM_Base_SetConfig+0xbc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d003      	beq.n	8001af0 <TIM_Base_SetConfig+0x30>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <TIM_Base_SetConfig+0xc0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d108      	bne.n	8001b02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <TIM_Base_SetConfig+0xb8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00b      	beq.n	8001b22 <TIM_Base_SetConfig+0x62>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b10:	d007      	beq.n	8001b22 <TIM_Base_SetConfig+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <TIM_Base_SetConfig+0xbc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d003      	beq.n	8001b22 <TIM_Base_SetConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <TIM_Base_SetConfig+0xc0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d108      	bne.n	8001b34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <TIM_Base_SetConfig+0xb8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d103      	bne.n	8001b68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	615a      	str	r2, [r3, #20]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	40000800 	.word	0x40000800

08001b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	f023 0201 	bic.w	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f023 030a 	bic.w	r3, r3, #10
 8001bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	621a      	str	r2, [r3, #32]
}
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f023 0210 	bic.w	r2, r3, #16
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	031b      	lsls	r3, r3, #12
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	621a      	str	r2, [r3, #32]
}
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f043 0307 	orr.w	r3, r3, #7
 8001c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	609a      	str	r2, [r3, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b087      	sub	sp, #28
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	021a      	lsls	r2, r3, #8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	609a      	str	r2, [r3, #8]
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a1a      	ldr	r2, [r3, #32]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a1a      	ldr	r2, [r3, #32]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	621a      	str	r2, [r3, #32]
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e032      	b.n	8001d76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <__libc_init_array>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	2500      	movs	r5, #0
 8001d84:	4e0c      	ldr	r6, [pc, #48]	; (8001db8 <__libc_init_array+0x38>)
 8001d86:	4c0d      	ldr	r4, [pc, #52]	; (8001dbc <__libc_init_array+0x3c>)
 8001d88:	1ba4      	subs	r4, r4, r6
 8001d8a:	10a4      	asrs	r4, r4, #2
 8001d8c:	42a5      	cmp	r5, r4
 8001d8e:	d109      	bne.n	8001da4 <__libc_init_array+0x24>
 8001d90:	f000 f822 	bl	8001dd8 <_init>
 8001d94:	2500      	movs	r5, #0
 8001d96:	4e0a      	ldr	r6, [pc, #40]	; (8001dc0 <__libc_init_array+0x40>)
 8001d98:	4c0a      	ldr	r4, [pc, #40]	; (8001dc4 <__libc_init_array+0x44>)
 8001d9a:	1ba4      	subs	r4, r4, r6
 8001d9c:	10a4      	asrs	r4, r4, #2
 8001d9e:	42a5      	cmp	r5, r4
 8001da0:	d105      	bne.n	8001dae <__libc_init_array+0x2e>
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
 8001da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001da8:	4798      	blx	r3
 8001daa:	3501      	adds	r5, #1
 8001dac:	e7ee      	b.n	8001d8c <__libc_init_array+0xc>
 8001dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001db2:	4798      	blx	r3
 8001db4:	3501      	adds	r5, #1
 8001db6:	e7f2      	b.n	8001d9e <__libc_init_array+0x1e>
 8001db8:	08001e14 	.word	0x08001e14
 8001dbc:	08001e14 	.word	0x08001e14
 8001dc0:	08001e14 	.word	0x08001e14
 8001dc4:	08001e18 	.word	0x08001e18

08001dc8 <memset>:
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4402      	add	r2, r0
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <memset+0xa>
 8001dd0:	4770      	bx	lr
 8001dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001dd6:	e7f9      	b.n	8001dcc <memset+0x4>

08001dd8 <_init>:
 8001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dda:	bf00      	nop
 8001ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dde:	bc08      	pop	{r3}
 8001de0:	469e      	mov	lr, r3
 8001de2:	4770      	bx	lr

08001de4 <_fini>:
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de6:	bf00      	nop
 8001de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dea:	bc08      	pop	{r3}
 8001dec:	469e      	mov	lr, r3
 8001dee:	4770      	bx	lr
