
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a24  08003a24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08003a38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003a38  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea98  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dc5  00000000  00000000  0002ead4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e60  00000000  00000000  000308a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00031700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b3d4  00000000  00000000  00032468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aca7  00000000  00000000  0004d83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9f21  00000000  00000000  000584e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102404  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  00102480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080039bc 	.word	0x080039bc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080039bc 	.word	0x080039bc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <app_NumeroA7Segmentos>:
/* Numeros:		       0	1	2	 3	  4	   5	6	7	8	9	A	B	C	D	E	F  */
/* Vector:			   0	1	2	 3	  4	   5	6	7	8	9	10	11	12	13	14	15 */


void app_NumeroA7Segmentos(uint8_t Numero)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	/* BRR Indica un cero y BSRR indica un 1 */
	switch(Numero)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b09      	cmp	r3, #9
 80004da:	f200 81dc 	bhi.w	8000896 <app_NumeroA7Segmentos+0x3ca>
 80004de:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <app_NumeroA7Segmentos+0x18>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	0800050d 	.word	0x0800050d
 80004e8:	08000567 	.word	0x08000567
 80004ec:	080005c1 	.word	0x080005c1
 80004f0:	0800061b 	.word	0x0800061b
 80004f4:	08000675 	.word	0x08000675
 80004f8:	080006cf 	.word	0x080006cf
 80004fc:	08000729 	.word	0x08000729
 8000500:	08000783 	.word	0x08000783
 8000504:	080007dd 	.word	0x080007dd
 8000508:	0800083d 	.word	0x0800083d
	{
		case 0:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 f8fd 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	2102      	movs	r1, #2
 800051e:	48c6      	ldr	r0, [pc, #792]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000520:	f001 f8f8 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	2104      	movs	r1, #4
 8000528:	48c3      	ldr	r0, [pc, #780]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800052a:	f001 f8f3 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	2101      	movs	r1, #1
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f001 f8ed 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	2110      	movs	r1, #16
 800053e:	48be      	ldr	r0, [pc, #760]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000540:	f001 f8e8 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	48bb      	ldr	r0, [pc, #748]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800054a:	f001 f8e3 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	48b9      	ldr	r0, [pc, #740]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000554:	f001 f8de 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	48b6      	ldr	r0, [pc, #728]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000560:	f001 f8d8 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 8000564:	e197      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 1:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 f8d0 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	48af      	ldr	r0, [pc, #700]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800057a:	f001 f8cb 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	2104      	movs	r1, #4
 8000582:	48ad      	ldr	r0, [pc, #692]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000584:	f001 f8c6 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f001 f8c0 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	48a7      	ldr	r0, [pc, #668]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800059a:	f001 f8bb 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	48a5      	ldr	r0, [pc, #660]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80005a4:	f001 f8b6 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	48a2      	ldr	r0, [pc, #648]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80005ae:	f001 f8b1 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	489f      	ldr	r0, [pc, #636]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80005ba:	f001 f8ab 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 80005be:	e16a      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 2:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f001 f8a3 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2102      	movs	r1, #2
 80005d2:	4899      	ldr	r0, [pc, #612]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80005d4:	f001 f89e 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2104      	movs	r1, #4
 80005dc:	4896      	ldr	r0, [pc, #600]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80005de:	f001 f899 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2101      	movs	r1, #1
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 f893 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	4891      	ldr	r0, [pc, #580]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80005f4:	f001 f88e 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	488e      	ldr	r0, [pc, #568]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80005fe:	f001 f889 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	488c      	ldr	r0, [pc, #560]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000608:	f001 f884 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000612:	4889      	ldr	r0, [pc, #548]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000614:	f001 f87e 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 8000618:	e13d      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 3:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 f876 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4882      	ldr	r0, [pc, #520]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800062e:	f001 f871 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	2104      	movs	r1, #4
 8000636:	4880      	ldr	r0, [pc, #512]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000638:	f001 f86c 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	2101      	movs	r1, #1
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f001 f866 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2110      	movs	r1, #16
 800064c:	487a      	ldr	r0, [pc, #488]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800064e:	f001 f861 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	4878      	ldr	r0, [pc, #480]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000658:	f001 f85c 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	4875      	ldr	r0, [pc, #468]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000662:	f001 f857 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4872      	ldr	r0, [pc, #456]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800066e:	f001 f851 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 8000672:	e110      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 4:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 f849 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	2102      	movs	r1, #2
 8000686:	486c      	ldr	r0, [pc, #432]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000688:	f001 f844 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	2104      	movs	r1, #4
 8000690:	4869      	ldr	r0, [pc, #420]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000692:	f001 f83f 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2101      	movs	r1, #1
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f001 f839 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2110      	movs	r1, #16
 80006a6:	4864      	ldr	r0, [pc, #400]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80006a8:	f001 f834 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2140      	movs	r1, #64	; 0x40
 80006b0:	4861      	ldr	r0, [pc, #388]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80006b2:	f001 f82f 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	485f      	ldr	r0, [pc, #380]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80006bc:	f001 f82a 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c6:	485c      	ldr	r0, [pc, #368]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80006c8:	f001 f824 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 80006cc:	e0e3      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 5:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f001 f81c 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2102      	movs	r1, #2
 80006e0:	4855      	ldr	r0, [pc, #340]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80006e2:	f001 f817 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2104      	movs	r1, #4
 80006ea:	4853      	ldr	r0, [pc, #332]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80006ec:	f001 f812 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2101      	movs	r1, #1
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f001 f80c 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	484d      	ldr	r0, [pc, #308]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000702:	f001 f807 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	484b      	ldr	r0, [pc, #300]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800070c:	f001 f802 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4848      	ldr	r0, [pc, #288]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000716:	f000 fffd 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	4845      	ldr	r0, [pc, #276]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000722:	f000 fff7 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 8000726:	e0b6      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 6:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f000 ffef 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2102      	movs	r1, #2
 800073a:	483f      	ldr	r0, [pc, #252]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800073c:	f000 ffea 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	2104      	movs	r1, #4
 8000744:	483c      	ldr	r0, [pc, #240]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000746:	f000 ffe5 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	2101      	movs	r1, #1
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 ffdf 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000756:	2201      	movs	r2, #1
 8000758:	2110      	movs	r1, #16
 800075a:	4837      	ldr	r0, [pc, #220]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800075c:	f000 ffda 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	4834      	ldr	r0, [pc, #208]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000766:	f000 ffd5 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	4832      	ldr	r0, [pc, #200]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000770:	f000 ffd0 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	482f      	ldr	r0, [pc, #188]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800077c:	f000 ffca 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 8000780:	e089      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 7:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 ffc2 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2102      	movs	r1, #2
 8000794:	4828      	ldr	r0, [pc, #160]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000796:	f000 ffbd 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800079a:	2201      	movs	r2, #1
 800079c:	2104      	movs	r1, #4
 800079e:	4826      	ldr	r0, [pc, #152]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80007a0:	f000 ffb8 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2101      	movs	r1, #1
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 ffb2 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4820      	ldr	r0, [pc, #128]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80007b6:	f000 ffad 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2140      	movs	r1, #64	; 0x40
 80007be:	481e      	ldr	r0, [pc, #120]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80007c0:	f000 ffa8 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80007ca:	f000 ffa3 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80007d6:	f000 ff9d 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 80007da:	e05c      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
		case 8:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 ff95 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2102      	movs	r1, #2
 80007ee:	4812      	ldr	r0, [pc, #72]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80007f0:	f000 ff90 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2104      	movs	r1, #4
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 80007fa:	f000 ff8b 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	2101      	movs	r1, #1
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f000 ff85 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800080a:	2201      	movs	r2, #1
 800080c:	2110      	movs	r1, #16
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000810:	f000 ff80 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	2140      	movs	r1, #64	; 0x40
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 800081a:	f000 ff7b 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000824:	f000 ff76 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082e:	4802      	ldr	r0, [pc, #8]	; (8000838 <app_NumeroA7Segmentos+0x36c>)
 8000830:	f000 ff70 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 8000834:	e02f      	b.n	8000896 <app_NumeroA7Segmentos+0x3ca>
 8000836:	bf00      	nop
 8000838:	48000800 	.word	0x48000800
		case 9:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f000 ff65 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800084a:	2201      	movs	r2, #1
 800084c:	2102      	movs	r1, #2
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <app_NumeroA7Segmentos+0x3d4>)
 8000850:	f000 ff60 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	2104      	movs	r1, #4
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <app_NumeroA7Segmentos+0x3d4>)
 800085a:	f000 ff5b 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2101      	movs	r1, #1
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 ff55 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2110      	movs	r1, #16
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <app_NumeroA7Segmentos+0x3d4>)
 8000870:	f000 ff50 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <app_NumeroA7Segmentos+0x3d4>)
 800087a:	f000 ff4b 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <app_NumeroA7Segmentos+0x3d4>)
 8000884:	f000 ff46 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <app_NumeroA7Segmentos+0x3d4>)
 8000890:	f000 ff40 	bl	8001714 <HAL_GPIO_WritePin>
		}break;
 8000894:	bf00      	nop
		default:
		{
			/*No hace nada */
		}
	}
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	48000800 	.word	0x48000800

080008a4 <app_SeleccionDisplay>:

void app_SeleccionDisplay(uint8_t Display)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d86f      	bhi.n	8000994 <app_SeleccionDisplay+0xf0>
 80008b4:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <app_SeleccionDisplay+0x18>)
 80008b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ba:	bf00      	nop
 80008bc:	080008cd 	.word	0x080008cd
 80008c0:	080008ff 	.word	0x080008ff
 80008c4:	08000931 	.word	0x08000931
 80008c8:	08000963 	.word	0x08000963
	{
		case 0:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f000 ff1d 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 ff16 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2120      	movs	r1, #32
 80008ec:	4837      	ldr	r0, [pc, #220]	; (80009cc <app_SeleccionDisplay+0x128>)
 80008ee:	f000 ff11 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2110      	movs	r1, #16
 80008f6:	4835      	ldr	r0, [pc, #212]	; (80009cc <app_SeleccionDisplay+0x128>)
 80008f8:	f000 ff0c 	bl	8001714 <HAL_GPIO_WritePin>
			}break;
 80008fc:	e062      	b.n	80009c4 <app_SeleccionDisplay+0x120>
		case 1:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 ff04 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f000 fefd 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	482b      	ldr	r0, [pc, #172]	; (80009cc <app_SeleccionDisplay+0x128>)
 8000920:	f000 fef8 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <app_SeleccionDisplay+0x128>)
 800092a:	f000 fef3 	bl	8001714 <HAL_GPIO_WritePin>
			}break;
 800092e:	e049      	b.n	80009c4 <app_SeleccionDisplay+0x120>
		case 2:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f000 feeb 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fee4 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 800094c:	2201      	movs	r2, #1
 800094e:	2120      	movs	r1, #32
 8000950:	481e      	ldr	r0, [pc, #120]	; (80009cc <app_SeleccionDisplay+0x128>)
 8000952:	f000 fedf 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2110      	movs	r1, #16
 800095a:	481c      	ldr	r0, [pc, #112]	; (80009cc <app_SeleccionDisplay+0x128>)
 800095c:	f000 feda 	bl	8001714 <HAL_GPIO_WritePin>
			}break;
 8000960:	e030      	b.n	80009c4 <app_SeleccionDisplay+0x120>
		case 3:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fed2 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fecb 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <app_SeleccionDisplay+0x128>)
 8000984:	f000 fec6 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	2110      	movs	r1, #16
 800098c:	480f      	ldr	r0, [pc, #60]	; (80009cc <app_SeleccionDisplay+0x128>)
 800098e:	f000 fec1 	bl	8001714 <HAL_GPIO_WritePin>
			}break;
 8000992:	e017      	b.n	80009c4 <app_SeleccionDisplay+0x120>
		default:
		{
			/* Envia todos los displays a cero */
			HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 feb9 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 feb2 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2120      	movs	r1, #32
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <app_SeleccionDisplay+0x128>)
 80009b6:	f000 fead 	bl	8001714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2110      	movs	r1, #16
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <app_SeleccionDisplay+0x128>)
 80009c0:	f000 fea8 	bl	8001714 <HAL_GPIO_WritePin>
		}
	}
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	48000400 	.word	0x48000400

080009d0 <app_Despliegue>:

void app_Despliegue(uint16_t Numero)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
	uint8_t Primero  =  Numero % 10;
 80009da:	88fa      	ldrh	r2, [r7, #6]
 80009dc:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <app_Despliegue+0x104>)
 80009de:	fba3 1302 	umull	r1, r3, r3, r2
 80009e2:	08d9      	lsrs	r1, r3, #3
 80009e4:	460b      	mov	r3, r1
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	440b      	add	r3, r1
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	73fb      	strb	r3, [r7, #15]
	uint8_t Segundo =  ( Numero - Primero ) % 100 / 10;
 80009f2:	88fa      	ldrh	r2, [r7, #6]
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	1ad2      	subs	r2, r2, r3
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <app_Despliegue+0x108>)
 80009fa:	fb83 1302 	smull	r1, r3, r3, r2
 80009fe:	1159      	asrs	r1, r3, #5
 8000a00:	17d3      	asrs	r3, r2, #31
 8000a02:	1acb      	subs	r3, r1, r3
 8000a04:	2164      	movs	r1, #100	; 0x64
 8000a06:	fb01 f303 	mul.w	r3, r1, r3
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	4a33      	ldr	r2, [pc, #204]	; (8000adc <app_Despliegue+0x10c>)
 8000a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a12:	1092      	asrs	r2, r2, #2
 8000a14:	17db      	asrs	r3, r3, #31
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	73bb      	strb	r3, [r7, #14]
	uint8_t Tercero  =  ( Numero - Primero - Segundo ) % 1000 / 100;
 8000a1a:	88fa      	ldrh	r2, [r7, #6]
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	1ad2      	subs	r2, r2, r3
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <app_Despliegue+0x110>)
 8000a26:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2a:	1199      	asrs	r1, r3, #6
 8000a2c:	17d3      	asrs	r3, r2, #31
 8000a2e:	1acb      	subs	r3, r1, r3
 8000a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a34:	fb01 f303 	mul.w	r3, r1, r3
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <app_Despliegue+0x108>)
 8000a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a40:	1152      	asrs	r2, r2, #5
 8000a42:	17db      	asrs	r3, r3, #31
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	737b      	strb	r3, [r7, #13]
	uint8_t Cuarto =  ( Numero - Primero - Segundo - Tercero ) % 10000 / 1000;
 8000a48:	88fa      	ldrh	r2, [r7, #6]
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	1ad2      	subs	r2, r2, r3
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	1ad2      	subs	r2, r2, r3
 8000a52:	7b7b      	ldrb	r3, [r7, #13]
 8000a54:	1ad2      	subs	r2, r2, r3
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <app_Despliegue+0x114>)
 8000a58:	fb83 1302 	smull	r1, r3, r3, r2
 8000a5c:	1319      	asrs	r1, r3, #12
 8000a5e:	17d3      	asrs	r3, r2, #31
 8000a60:	1acb      	subs	r3, r1, r3
 8000a62:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a66:	fb01 f303 	mul.w	r3, r1, r3
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <app_Despliegue+0x110>)
 8000a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a72:	1192      	asrs	r2, r2, #6
 8000a74:	17db      	asrs	r3, r3, #31
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	733b      	strb	r3, [r7, #12]

	app_SeleccionDisplay(0);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ff12 	bl	80008a4 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Cuarto);
 8000a80:	7b3b      	ldrb	r3, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fd22 	bl	80004cc <app_NumeroA7Segmentos>
	HAL_Delay(3);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 fb9d 	bl	80011c8 <HAL_Delay>
	app_SeleccionDisplay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff ff08 	bl	80008a4 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Tercero);
 8000a94:	7b7b      	ldrb	r3, [r7, #13]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd18 	bl	80004cc <app_NumeroA7Segmentos>
	HAL_Delay(3);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 fb93 	bl	80011c8 <HAL_Delay>
	app_SeleccionDisplay(2);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff fefe 	bl	80008a4 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Segundo);
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fd0e 	bl	80004cc <app_NumeroA7Segmentos>
	HAL_Delay(3);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 fb89 	bl	80011c8 <HAL_Delay>
	app_SeleccionDisplay(3);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff fef4 	bl	80008a4 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Primero);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd04 	bl	80004cc <app_NumeroA7Segmentos>
	HAL_Delay(3);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 fb7f 	bl	80011c8 <HAL_Delay>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	cccccccd 	.word	0xcccccccd
 8000ad8:	51eb851f 	.word	0x51eb851f
 8000adc:	66666667 	.word	0x66666667
 8000ae0:	10624dd3 	.word	0x10624dd3
 8000ae4:	68db8bad 	.word	0x68db8bad

08000ae8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Contador = 0000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

	if(htim -> Instance == TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af8:	d105      	bne.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		/* Frecuencia del contador de 1ms */
		Contador = Contador + 1;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b04:	801a      	strh	r2, [r3, #0]
	}
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000028 	.word	0x20000028

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1e:	f000 fae2 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b22:	f000 f81d 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f000 f913 	bl	8000d50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b2a:	f000 f8e1 	bl	8000cf0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b2e:	f000 f891 	bl	8000c54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  volatile uint32_t Valor = 0,RPM =0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
  //uint32_t Period = 9999;

  //HAL_LPTIM_Counter_Start(&hlptim1, Period);
  HAL_TIM_Base_Start_IT(&htim2);
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <main+0x44>)
 8000b3c:	f001 fea2 	bl	8002884 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Valor = HAL_LPTIM_ReadCounter(&hlptim1);
	Valor = __HAL_TIM_GetCounter(&htim2);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <main+0x44>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b46:	607b      	str	r3, [r7, #4]
	//RPM = (Valor*12.5e-9/15)*60;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //uint16_t Numero = 2589;
	HAL_Delay(5);
 8000b48:	2005      	movs	r0, #5
 8000b4a:	f000 fb3d 	bl	80011c8 <HAL_Delay>
	app_Despliegue(Valor);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff3c 	bl	80009d0 <app_Despliegue>
	Valor = __HAL_TIM_GetCounter(&htim2);
 8000b58:	e7f2      	b.n	8000b40 <main+0x28>
 8000b5a:	bf00      	nop
 8000b5c:	2000002c 	.word	0x2000002c

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0a4      	sub	sp, #144	; 0x90
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b6a:	2244      	movs	r2, #68	; 0x44
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 ff1c 	bl	80039ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2234      	movs	r2, #52	; 0x34
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 ff0e 	bl	80039ac <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000b90:	f000 fdd8 	bl	8001744 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <SystemClock_Config+0xf0>)
 8000b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b9a:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <SystemClock_Config+0xf0>)
 8000b9c:	f023 0318 	bic.w	r3, r3, #24
 8000ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ba4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ba8:	f000 fdea 	bl	8001780 <HAL_PWREx_ControlVoltageScaling>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000bb2:	f000 f96f 	bl	8000e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bb6:	2314      	movs	r3, #20
 8000bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bd8:	2328      	movs	r3, #40	; 0x28
 8000bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fe1c 	bl	800182c <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bfa:	f000 f94b 	bl	8000e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2303      	movs	r3, #3
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c16:	2104      	movs	r1, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fa6d 	bl	80020f8 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c24:	f000 f936 	bl	8000e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fc64 	bl	8002500 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000c3e:	f000 f929 	bl	8000e94 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c42:	f001 fde3 	bl	800280c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c46:	bf00      	nop
 8000c48:	3790      	adds	r7, #144	; 0x90
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c7c:	2250      	movs	r2, #80	; 0x50
 8000c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c9c:	f001 fdc6 	bl	800282c <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ca6:	f000 f8f5 	bl	8000e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cb8:	f001 ff2d 	bl	8002b16 <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cc2:	f000 f8e7 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cd4:	f002 f8fe 	bl	8002ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cde:	f000 f8d9 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000002c 	.word	0x2000002c

08000cf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <MX_USART2_UART_Init+0x5c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d34:	f002 f952 	bl	8002fdc <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 f8a9 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000006c 	.word	0x2000006c
 8000d4c:	40004400 	.word	0x40004400

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a3a      	ldr	r2, [pc, #232]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8000dcc:	482e      	ldr	r0, [pc, #184]	; (8000e88 <MX_GPIO_Init+0x138>)
 8000dce:	f000 fca1 	bl	8001714 <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f241 5131 	movw	r1, #5425	; 0x1531
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f000 fc9a 	bl	8001714 <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Display_3_Pin|Display_2_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f242 0130 	movw	r1, #8240	; 0x2030
 8000de6:	4829      	ldr	r0, [pc, #164]	; (8000e8c <MX_GPIO_Init+0x13c>)
 8000de8:	f000 fc94 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_GPIO_Init+0x140>)
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4821      	ldr	r0, [pc, #132]	; (8000e88 <MX_GPIO_Init+0x138>)
 8000e02:	f000 fb15 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8000e06:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8000e0a:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481a      	ldr	r0, [pc, #104]	; (8000e88 <MX_GPIO_Init+0x138>)
 8000e20:	f000 fb06 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8000e24:	f241 5331 	movw	r3, #5425	; 0x1531
 8000e28:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f000 faf6 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Display_3_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Display_3_Pin|Display_2_Pin;
 8000e44:	f242 0330 	movw	r3, #8240	; 0x2030
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MX_GPIO_Init+0x13c>)
 8000e5e:	f000 fae7 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_Pin */
  GPIO_InitStruct.Pin = Boton_Pin;
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_GPIO_Init+0x13c>)
 8000e76:	f000 fadb 	bl	8001430 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000800 	.word	0x48000800
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	10210000 	.word	0x10210000

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d113      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_TIM_Base_MspInit+0x44>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_TIM_Base_MspInit+0x44>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_TIM_Base_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	201c      	movs	r0, #28
 8000f1c:	f000 fa51 	bl	80013c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f20:	201c      	movs	r0, #28
 8000f22:	f000 fa6a 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0x7c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d128      	bne.n	8000fa8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	6593      	str	r3, [r2, #88]	; 0x58
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f86:	230c      	movs	r3, #12
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f96:	2307      	movs	r3, #7
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f000 fa44 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f8be 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <TIM2_IRQHandler+0x10>)
 800101a:	f001 fc5d 	bl	80028d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000002c 	.word	0x2000002c

08001028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <SystemInit+0x64>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <SystemInit+0x64>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SystemInit+0x68>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <SystemInit+0x68>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <SystemInit+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <SystemInit+0x68>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <SystemInit+0x68>)
 8001054:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001058:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800105c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <SystemInit+0x68>)
 8001060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001064:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SystemInit+0x68>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <SystemInit+0x68>)
 800106c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <SystemInit+0x68>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <SystemInit+0x64>)
 800107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107e:	609a      	str	r2, [r3, #8]
#endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	40021000 	.word	0x40021000

08001094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001098:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800109a:	e003      	b.n	80010a4 <LoopCopyDataInit>

0800109c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800109e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010a2:	3104      	adds	r1, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010ac:	d3f6      	bcc.n	800109c <CopyDataInit>
	ldr	r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80010b0:	e002      	b.n	80010b8 <LoopFillZerobss>

080010b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010b4:	f842 3b04 	str.w	r3, [r2], #4

080010b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <LoopForever+0x16>)
	cmp	r2, r3
 80010ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010bc:	d3f9      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010be:	f7ff ffb3 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f002 fc4f 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c6:	f7ff fd27 	bl	8000b18 <main>

080010ca <LoopForever>:

LoopForever:
    b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010cc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80010d0:	08003a2c 	.word	0x08003a2c
	ldr	r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010d8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010dc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010e0:	200000f0 	.word	0x200000f0

080010e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_2_IRQHandler>

080010e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f95b 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f80e 	bl	8001118 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e001      	b.n	800110c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001108:	f7ff fecc 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110c:	79fb      	ldrb	r3, [r7, #7]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_InitTick+0x68>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d022      	beq.n	8001172 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_InitTick+0x6c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_InitTick+0x68>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001138:	fbb1 f3f3 	udiv	r3, r1, r3
 800113c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f968 	bl	8001416 <HAL_SYSTICK_Config>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10f      	bne.n	800116c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d809      	bhi.n	8001166 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001152:	2200      	movs	r2, #0
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800115a:	f000 f932 	bl	80013c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_InitTick+0x70>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e007      	b.n	8001176 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e004      	b.n	8001176 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e001      	b.n	8001176 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_IncTick+0x1c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x20>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4413      	add	r3, r2
 800119a:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <HAL_IncTick+0x1c>)
 800119c:	6013      	str	r3, [r2, #0]
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200000ec 	.word	0x200000ec
 80011ac:	20000008 	.word	0x20000008

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200000ec 	.word	0x200000ec

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e0:	d004      	beq.n	80011ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_Delay+0x40>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ec:	bf00      	nop
 80011ee:	f7ff ffdf 	bl	80011b0 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d8f7      	bhi.n	80011ee <HAL_Delay+0x26>
  {
  }
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800138c:	f7ff ff8e 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff29 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff3e 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff8e 	bl	8001300 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff31 	bl	8001270 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa2 	bl	8001368 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e14e      	b.n	80016de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8140 	beq.w	80016d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d00b      	beq.n	8001478 <HAL_GPIO_Init+0x48>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146c:	2b11      	cmp	r3, #17
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b12      	cmp	r3, #18
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0xea>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b12      	cmp	r3, #18
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 809a 	beq.w	80016d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a4:	4b55      	ldr	r3, [pc, #340]	; (80016fc <HAL_GPIO_Init+0x2cc>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	4a54      	ldr	r2, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x2cc>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6613      	str	r3, [r2, #96]	; 0x60
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <HAL_GPIO_Init+0x2cc>)
 80015b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015e6:	d013      	beq.n	8001610 <HAL_GPIO_Init+0x1e0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a46      	ldr	r2, [pc, #280]	; (8001704 <HAL_GPIO_Init+0x2d4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d00d      	beq.n	800160c <HAL_GPIO_Init+0x1dc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a45      	ldr	r2, [pc, #276]	; (8001708 <HAL_GPIO_Init+0x2d8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d007      	beq.n	8001608 <HAL_GPIO_Init+0x1d8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a44      	ldr	r2, [pc, #272]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_GPIO_Init+0x1d4>
 8001600:	2303      	movs	r3, #3
 8001602:	e006      	b.n	8001612 <HAL_GPIO_Init+0x1e2>
 8001604:	2307      	movs	r3, #7
 8001606:	e004      	b.n	8001612 <HAL_GPIO_Init+0x1e2>
 8001608:	2302      	movs	r3, #2
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x1e2>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_GPIO_Init+0x1e2>
 8001610:	2300      	movs	r3, #0
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	f002 0203 	and.w	r2, r2, #3
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	4093      	lsls	r3, r2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001622:	4937      	ldr	r1, [pc, #220]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001630:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f47f aea9 	bne.w	8001440 <HAL_GPIO_Init+0x10>
  }
}
 80016ee:	bf00      	nop
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	48000400 	.word	0x48000400
 8001708:	48000800 	.word	0x48000800
 800170c:	48000c00 	.word	0x48000c00
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001730:	e002      	b.n	8001738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000

08001764 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <HAL_PWREx_GetVoltageRange+0x18>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40007000 	.word	0x40007000

08001780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800178e:	d130      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179c:	d038      	beq.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2232      	movs	r2, #50	; 0x32
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c4:	e002      	b.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d8:	d102      	bne.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f2      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ec:	d110      	bne.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e00f      	b.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d007      	beq.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001808:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000
 8001824:	20000000 	.word	0x20000000
 8001828:	431bde83 	.word	0x431bde83

0800182c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f000 bc56 	b.w	80020ec <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001840:	4ba1      	ldr	r3, [pc, #644]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184a:	4b9f      	ldr	r3, [pc, #636]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80e6 	beq.w	8001a2e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_RCC_OscConfig+0x4c>
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	f040 808d 	bne.w	800198a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2b01      	cmp	r3, #1
 8001874:	f040 8089 	bne.w	800198a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001878:	4b93      	ldr	r3, [pc, #588]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_RCC_OscConfig+0x66>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	f000 bc2d 	b.w	80020ec <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001896:	4b8c      	ldr	r3, [pc, #560]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_RCC_OscConfig+0x80>
 80018a2:	4b89      	ldr	r3, [pc, #548]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018aa:	e005      	b.n	80018b8 <HAL_RCC_OscConfig+0x8c>
 80018ac:	4b86      	ldr	r3, [pc, #536]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80018ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d224      	bcs.n	8001906 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fdbd 	bl	8002440 <RCC_SetFlashLatencyFromMSIRange>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f000 bc0d 	b.w	80020ec <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d2:	4b7d      	ldr	r3, [pc, #500]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7c      	ldr	r2, [pc, #496]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	4977      	ldr	r1, [pc, #476]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f0:	4b75      	ldr	r3, [pc, #468]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	4972      	ldr	r1, [pc, #456]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
 8001904:	e025      	b.n	8001952 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001906:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6f      	ldr	r2, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	496a      	ldr	r1, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4965      	ldr	r1, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fd7c 	bl	8002440 <RCC_SetFlashLatencyFromMSIRange>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e3cc      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001952:	f000 fcb3 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8001956:	4601      	mov	r1, r0
 8001958:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_RCC_OscConfig+0x2a0>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	fa21 f303 	lsr.w	r3, r1, r3
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_RCC_OscConfig+0x2a4>)
 8001970:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001972:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <HAL_RCC_OscConfig+0x2a8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fbce 	bl	8001118 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d052      	beq.n	8001a2c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	e3b0      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d032      	beq.n	80019f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001992:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a4c      	ldr	r2, [pc, #304]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800199e:	f7ff fc07 	bl	80011b0 <HAL_GetTick>
 80019a2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a6:	f7ff fc03 	bl	80011b0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e399      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b8:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	493a      	ldr	r1, [pc, #232]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4935      	ldr	r1, [pc, #212]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
 80019f6:	e01a      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019f8:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fbd4 	bl	80011b0 <HAL_GetTick>
 8001a08:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fbd0 	bl	80011b0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e366      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1e0>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d073      	beq.n	8001b22 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_OscConfig+0x220>
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d10e      	bne.n	8001a64 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d063      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2f4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d15f      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e343      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x250>
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x274>
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_RCC_OscConfig+0x29c>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb76 	bl	80011b0 <HAL_GetTick>
 8001ac4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac6:	e010      	b.n	8001aea <HAL_RCC_OscConfig+0x2be>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	080039d4 	.word	0x080039d4
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fb6a 	bl	80011b0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e300      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aea:	4ba0      	ldr	r3, [pc, #640]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2ac>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb5a 	bl	80011b0 <HAL_GetTick>
 8001afc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fb56 	bl	80011b0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e2ec      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b12:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2d4>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d060      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_OscConfig+0x314>
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d119      	bne.n	8001b6e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d116      	bne.n	8001b6e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b40:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x32c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e2c9      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b84      	ldr	r3, [pc, #528]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	4981      	ldr	r1, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b6c:	e040      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d023      	beq.n	8001bbe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a7c      	ldr	r2, [pc, #496]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fb15 	bl	80011b0 <HAL_GetTick>
 8001b86:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fb11 	bl	80011b0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e2a7      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	4b73      	ldr	r3, [pc, #460]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	496d      	ldr	r1, [pc, #436]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e018      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6a      	ldr	r2, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff faf1 	bl	80011b0 <HAL_GetTick>
 8001bce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff faed 	bl	80011b0 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e283      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d07f      	beq.n	8001cfc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d05f      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d037      	beq.n	8001c8a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e25c      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001c3c:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c42:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c4c:	f7ff fab0 	bl	80011b0 <HAL_GetTick>
 8001c50:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff faac 	bl	80011b0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b11      	cmp	r3, #17
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e242      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ef      	bne.n	8001c54 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001c74:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7a:	f023 0210 	bic.w	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	493a      	ldr	r1, [pc, #232]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fa89 	bl	80011b0 <HAL_GetTick>
 8001c9e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fa85 	bl	80011b0 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e21b      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ef      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x476>
 8001cc2:	e01b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	4a28      	ldr	r2, [pc, #160]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fa6c 	bl	80011b0 <HAL_GetTick>
 8001cd8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fa68 	bl	80011b0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b11      	cmp	r3, #17
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1fe      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ef      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80c1 	beq.w	8001e8c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10e      	bne.n	8001d3a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_RCC_OscConfig+0x540>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x544>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_OscConfig+0x544>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x544>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fa2d 	bl	80011b0 <HAL_GetTick>
 8001d56:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d58:	e00c      	b.n	8001d74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7ff fa29 	bl	80011b0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d905      	bls.n	8001d74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1bf      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	4bb1      	ldr	r3, [pc, #708]	; (800203c <HAL_RCC_OscConfig+0x810>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ec      	beq.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d02c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001d8c:	4bac      	ldr	r3, [pc, #688]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	49a8      	ldr	r1, [pc, #672]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d010      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001db2:	4ba3      	ldr	r3, [pc, #652]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	4aa1      	ldr	r2, [pc, #644]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dc2:	4b9f      	ldr	r3, [pc, #636]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc8:	4a9d      	ldr	r2, [pc, #628]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd2:	e018      	b.n	8001e06 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dd4:	4b9a      	ldr	r3, [pc, #616]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	4a99      	ldr	r2, [pc, #612]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de4:	e00f      	b.n	8001e06 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001de6:	4b96      	ldr	r3, [pc, #600]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	4a94      	ldr	r2, [pc, #592]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001df6:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	4a90      	ldr	r2, [pc, #576]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d016      	beq.n	8001e3c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f9cf 	bl	80011b0 <HAL_GetTick>
 8001e12:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff f9cb 	bl	80011b0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e15f      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2c:	4b84      	ldr	r3, [pc, #528]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ed      	beq.n	8001e16 <HAL_RCC_OscConfig+0x5ea>
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff f9b8 	bl	80011b0 <HAL_GetTick>
 8001e40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff f9b4 	bl	80011b0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e148      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e5a:	4b79      	ldr	r3, [pc, #484]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ed      	bne.n	8001e44 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001e68:	4b75      	ldr	r3, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a74      	ldr	r2, [pc, #464]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ea0:	4b67      	ldr	r3, [pc, #412]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ea6:	4a66      	ldr	r2, [pc, #408]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f97e 	bl	80011b0 <HAL_GetTick>
 8001eb4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eb8:	f7ff f97a 	bl	80011b0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e110      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x68c>
 8001ed8:	e01b      	b.n	8001f12 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eda:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7ff f961 	bl	80011b0 <HAL_GetTick>
 8001eee:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef2:	f7ff f95d 	bl	80011b0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0f3      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80e7 	beq.w	80020ea <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	f040 80b7 	bne.w	8002094 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0203 	and.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d124      	bne.n	8001f84 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f44:	3b01      	subs	r3, #1
 8001f46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d11b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d113      	bne.n	8001f84 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d109      	bne.n	8001f84 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d061      	beq.n	8002048 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d056      	beq.n	8002038 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f96:	f7ff f90b 	bl	80011b0 <HAL_GetTick>
 8001f9a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7ff f907 	bl	80011b0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e09d      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_OscConfig+0x818>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fd6:	0212      	lsls	r2, r2, #8
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fde:	0852      	lsrs	r2, r2, #1
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0552      	lsls	r2, r2, #21
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fea:	0852      	lsrs	r2, r2, #1
 8001fec:	3a01      	subs	r2, #1
 8001fee:	0652      	lsls	r2, r2, #25
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	4913      	ldr	r1, [pc, #76]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a10      	ldr	r2, [pc, #64]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002010:	f7ff f8ce 	bl	80011b0 <HAL_GetTick>
 8002014:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f8ca 	bl	80011b0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e060      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_OscConfig+0x814>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002036:	e058      	b.n	80020ea <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e057      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
 800203c:	40007000 	.word	0x40007000
 8002040:	40021000 	.word	0x40021000
 8002044:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d14a      	bne.n	80020ea <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800206c:	f7ff f8a0 	bl	80011b0 <HAL_GetTick>
 8002070:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f89c 	bl	80011b0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e032      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x848>
 8002092:	e02a      	b.n	80020ea <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d025      	beq.n	80020e6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 80020a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 80020ac:	f023 0303 	bic.w	r3, r3, #3
 80020b0:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 80020b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff f877 	bl	80011b0 <HAL_GetTick>
 80020c2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff f873 	bl	80011b0 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e009      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_OscConfig+0x8c8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x89a>
 80020e4:	e001      	b.n	80020ea <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0c8      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d910      	bls.n	800213c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4961      	ldr	r1, [pc, #388]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b0      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d04c      	beq.n	80021e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002150:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d121      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e09e      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d115      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e092      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002180:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e086      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e07e      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021a0:	4b42      	ldr	r3, [pc, #264]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 0203 	bic.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	493f      	ldr	r1, [pc, #252]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b2:	f7fe fffd 	bl	80011b0 <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ba:	f7fe fff9 	bl	80011b0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e066      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 020c 	and.w	r2, r3, #12
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	429a      	cmp	r2, r3
 80021e0:	d1eb      	bne.n	80021ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ee:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	492c      	ldr	r1, [pc, #176]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d210      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4924      	ldr	r1, [pc, #144]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e036      	b.n	800229e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4910      	ldr	r1, [pc, #64]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800226e:	f000 f825 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8002272:	4601      	mov	r1, r0
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	fa21 f303 	lsr.w	r3, r1, r3
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe ff40 	bl	8001118 <HAL_InitTick>
 8002298:	4603      	mov	r3, r0
 800229a:	72fb      	strb	r3, [r7, #11]

  return status;
 800229c:	7afb      	ldrb	r3, [r7, #11]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	080039d4 	.word	0x080039d4
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x34>
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d121      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d11e      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022f0:	4b33      	ldr	r3, [pc, #204]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022fc:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e005      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d102      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e004      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d101      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002342:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d133      	bne.n	80023b2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0xa4>
 800235a:	2b03      	cmp	r3, #3
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0xaa>
 800235e:	e005      	b.n	800236c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002362:	617b      	str	r3, [r7, #20]
      break;
 8002364:	e005      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002368:	617b      	str	r3, [r7, #20]
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	617b      	str	r3, [r7, #20]
      break;
 8002370:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	3301      	adds	r3, #1
 800237e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	fb02 f203 	mul.w	r2, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0e5b      	lsrs	r3, r3, #25
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023b2:	69bb      	ldr	r3, [r7, #24]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3724      	adds	r7, #36	; 0x24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080039ec 	.word	0x080039ec
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f0:	4601      	mov	r1, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	080039e4 	.word	0x080039e4

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002418:	f7ff ffda 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 800241c:	4601      	mov	r1, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0adb      	lsrs	r3, r3, #11
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <HAL_RCC_GetPCLK2Freq+0x28>)
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080039e4 	.word	0x080039e4

08002440 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002458:	f7ff f984 	bl	8001764 <HAL_PWREx_GetVoltageRange>
 800245c:	6178      	str	r0, [r7, #20]
 800245e:	e014      	b.n	800248a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	; 0x58
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002478:	f7ff f974 	bl	8001764 <HAL_PWREx_GetVoltageRange>
 800247c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002490:	d10b      	bne.n	80024aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b80      	cmp	r3, #128	; 0x80
 8002496:	d919      	bls.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2ba0      	cmp	r3, #160	; 0xa0
 800249c:	d902      	bls.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800249e:	2302      	movs	r3, #2
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e013      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a4:	2301      	movs	r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	e010      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d902      	bls.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024b0:	2303      	movs	r3, #3
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e00a      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	d102      	bne.n	80024c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024bc:	2302      	movs	r3, #2
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e004      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b70      	cmp	r3, #112	; 0x70
 80024c6:	d101      	bne.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c8:	2301      	movs	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 0207 	bic.w	r2, r3, #7
 80024d4:	4909      	ldr	r1, [pc, #36]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40022000 	.word	0x40022000

08002500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002508:	2300      	movs	r3, #0
 800250a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800250c:	2300      	movs	r3, #0
 800250e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 809e 	beq.w	800265a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002522:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4a3f      	ldr	r2, [pc, #252]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
 8002544:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a39      	ldr	r2, [pc, #228]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002560:	f7fe fe26 	bl	80011b0 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002566:	e009      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fe22 	bl	80011b0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d902      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	74fb      	strb	r3, [r7, #19]
        break;
 800257a:	e005      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d15a      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002598:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01e      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d019      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d6:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d016      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fde2 	bl	80011b0 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ee:	e00b      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fdde 	bl	80011b0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d902      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	74fb      	strb	r3, [r7, #19]
            break;
 8002606:	e006      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ec      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4904      	ldr	r1, [pc, #16]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002632:	e009      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	74bb      	strb	r3, [r7, #18]
 8002638:	e006      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002648:	7c7b      	ldrb	r3, [r7, #17]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b6e      	ldr	r3, [pc, #440]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	4a6d      	ldr	r2, [pc, #436]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002666:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f023 0203 	bic.w	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4964      	ldr	r1, [pc, #400]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002688:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 020c 	bic.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	495c      	ldr	r1, [pc, #368]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026aa:	4b57      	ldr	r3, [pc, #348]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4953      	ldr	r1, [pc, #332]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026cc:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	494b      	ldr	r1, [pc, #300]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4942      	ldr	r1, [pc, #264]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002710:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	493a      	ldr	r1, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002732:	4b35      	ldr	r3, [pc, #212]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	4931      	ldr	r1, [pc, #196]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4929      	ldr	r1, [pc, #164]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4920      	ldr	r1, [pc, #128]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	4918      	ldr	r1, [pc, #96]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b6:	d105      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	490a      	ldr	r1, [pc, #40]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ee:	d105      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01d      	b.n	800287a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fb4a 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fa34 	bl	8002cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_TIM_Base_Start_IT+0x50>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d00b      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x42>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d007      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	00010007 	.word	0x00010007

080028d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9be 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9b0 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f9c1 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0204 	mvn.w	r2, #4
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f994 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f986 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f997 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0208 	mvn.w	r2, #8
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f96a 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f95c 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f96d 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0210 	mvn.w	r2, #16
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2208      	movs	r2, #8
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f940 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f932 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f943 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0201 	mvn.w	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f846 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa96 	bl	8002fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a96:	d10e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fa89 	bl	8002fc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8f1 	bl	8002cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d10e      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0220 	mvn.w	r2, #32
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa49 	bl	8002fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_ConfigClockSource+0x18>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0a8      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x16a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b58:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d067      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x124>
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d80b      	bhi.n	8002b86 <HAL_TIM_ConfigClockSource+0x70>
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d073      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x144>
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d802      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x66>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d06f      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b7a:	e078      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d06c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x144>
 8002b80:	2b30      	cmp	r3, #48	; 0x30
 8002b82:	d06a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002b84:	e073      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b86:	2b70      	cmp	r3, #112	; 0x70
 8002b88:	d00d      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x90>
 8002b8a:	2b70      	cmp	r3, #112	; 0x70
 8002b8c:	d804      	bhi.n	8002b98 <HAL_TIM_ConfigClockSource+0x82>
 8002b8e:	2b50      	cmp	r3, #80	; 0x50
 8002b90:	d033      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xe4>
 8002b92:	2b60      	cmp	r3, #96	; 0x60
 8002b94:	d041      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002b96:	e06a      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d066      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0x156>
 8002b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba2:	d017      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ba4:	e063      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f000 f96d 	bl	8002e94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e04c      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f000 f956 	bl	8002e94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e039      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 f8ca 	bl	8002da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2150      	movs	r1, #80	; 0x50
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f923 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c18:	e029      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 f8e9 	bl	8002dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2160      	movs	r1, #96	; 0x60
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f913 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c38:	e019      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 f8aa 	bl	8002da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2140      	movs	r1, #64	; 0x40
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f903 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c58:	e009      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f000 f8fa 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c6a:	e000      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002c6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <TIM_Base_SetConfig+0xbc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_Base_SetConfig+0x20>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d108      	bne.n	8002d0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <TIM_Base_SetConfig+0xbc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_Base_SetConfig+0x52>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d18:	d007      	beq.n	8002d2a <TIM_Base_SetConfig+0x52>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <TIM_Base_SetConfig+0xc0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_Base_SetConfig+0x52>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <TIM_Base_SetConfig+0xc4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <TIM_Base_SetConfig+0xbc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0xa0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0b      	ldr	r2, [pc, #44]	; (8002d98 <TIM_Base_SetConfig+0xc0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0xa0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <TIM_Base_SetConfig+0xc4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d103      	bne.n	8002d80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400

08002da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0201 	bic.w	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 030a 	bic.w	r3, r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b087      	sub	sp, #28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0210 	bic.w	r2, r3, #16
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	031b      	lsls	r3, r3, #12
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f043 0307 	orr.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	021a      	lsls	r2, r3, #8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e04f      	b.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a21      	ldr	r2, [pc, #132]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d004      	beq.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10c      	bne.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40014000 	.word	0x40014000

08002fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e040      	b.n	8003070 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd ff98 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2224      	movs	r2, #36	; 0x24
 8003008:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f82c 	bl	8003078 <UART_SetConfig>
 8003020:	4603      	mov	r3, r0
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e022      	b.n	8003070 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fb34 	bl	80036a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fbbb 	bl	80037e4 <UART_CheckIdleState>
 800306e:	4603      	mov	r3, r0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003078:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800307c:	b08a      	sub	sp, #40	; 0x28
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4bbc      	ldr	r3, [pc, #752]	; (80033a0 <UART_SetConfig+0x328>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4ab2      	ldr	r2, [pc, #712]	; (80033a4 <UART_SetConfig+0x32c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	4313      	orrs	r3, r2
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4aa9      	ldr	r2, [pc, #676]	; (80033a8 <UART_SetConfig+0x330>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d126      	bne.n	8003156 <UART_SetConfig+0xde>
 8003108:	4ba8      	ldr	r3, [pc, #672]	; (80033ac <UART_SetConfig+0x334>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b03      	cmp	r3, #3
 8003114:	d81a      	bhi.n	800314c <UART_SetConfig+0xd4>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0xa4>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	0800312d 	.word	0x0800312d
 8003120:	0800313d 	.word	0x0800313d
 8003124:	08003135 	.word	0x08003135
 8003128:	08003145 	.word	0x08003145
 800312c:	2301      	movs	r3, #1
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e0ab      	b.n	800328c <UART_SetConfig+0x214>
 8003134:	2302      	movs	r3, #2
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e0a7      	b.n	800328c <UART_SetConfig+0x214>
 800313c:	2304      	movs	r3, #4
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e0a3      	b.n	800328c <UART_SetConfig+0x214>
 8003144:	2308      	movs	r3, #8
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314a:	e09f      	b.n	800328c <UART_SetConfig+0x214>
 800314c:	2310      	movs	r3, #16
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003152:	bf00      	nop
 8003154:	e09a      	b.n	800328c <UART_SetConfig+0x214>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a95      	ldr	r2, [pc, #596]	; (80033b0 <UART_SetConfig+0x338>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d138      	bne.n	80031d2 <UART_SetConfig+0x15a>
 8003160:	4b92      	ldr	r3, [pc, #584]	; (80033ac <UART_SetConfig+0x334>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d82c      	bhi.n	80031c8 <UART_SetConfig+0x150>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <UART_SetConfig+0xfc>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031c9 	.word	0x080031c9
 800317c:	080031c9 	.word	0x080031c9
 8003180:	080031c9 	.word	0x080031c9
 8003184:	080031b9 	.word	0x080031b9
 8003188:	080031c9 	.word	0x080031c9
 800318c:	080031c9 	.word	0x080031c9
 8003190:	080031c9 	.word	0x080031c9
 8003194:	080031b1 	.word	0x080031b1
 8003198:	080031c9 	.word	0x080031c9
 800319c:	080031c9 	.word	0x080031c9
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031c1 	.word	0x080031c1
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	e06d      	b.n	800328c <UART_SetConfig+0x214>
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b6:	e069      	b.n	800328c <UART_SetConfig+0x214>
 80031b8:	2304      	movs	r3, #4
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031be:	e065      	b.n	800328c <UART_SetConfig+0x214>
 80031c0:	2308      	movs	r3, #8
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c6:	e061      	b.n	800328c <UART_SetConfig+0x214>
 80031c8:	2310      	movs	r3, #16
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ce:	bf00      	nop
 80031d0:	e05c      	b.n	800328c <UART_SetConfig+0x214>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a77      	ldr	r2, [pc, #476]	; (80033b4 <UART_SetConfig+0x33c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d125      	bne.n	8003228 <UART_SetConfig+0x1b0>
 80031dc:	4b73      	ldr	r3, [pc, #460]	; (80033ac <UART_SetConfig+0x334>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d011      	beq.n	800320e <UART_SetConfig+0x196>
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d802      	bhi.n	80031f4 <UART_SetConfig+0x17c>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <UART_SetConfig+0x186>
 80031f2:	e014      	b.n	800321e <UART_SetConfig+0x1a6>
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d006      	beq.n	8003206 <UART_SetConfig+0x18e>
 80031f8:	2b30      	cmp	r3, #48	; 0x30
 80031fa:	d00c      	beq.n	8003216 <UART_SetConfig+0x19e>
 80031fc:	e00f      	b.n	800321e <UART_SetConfig+0x1a6>
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003204:	e042      	b.n	800328c <UART_SetConfig+0x214>
 8003206:	2302      	movs	r3, #2
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320c:	e03e      	b.n	800328c <UART_SetConfig+0x214>
 800320e:	2304      	movs	r3, #4
 8003210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003214:	e03a      	b.n	800328c <UART_SetConfig+0x214>
 8003216:	2308      	movs	r3, #8
 8003218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321c:	e036      	b.n	800328c <UART_SetConfig+0x214>
 800321e:	2310      	movs	r3, #16
 8003220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003224:	bf00      	nop
 8003226:	e031      	b.n	800328c <UART_SetConfig+0x214>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5d      	ldr	r2, [pc, #372]	; (80033a4 <UART_SetConfig+0x32c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d129      	bne.n	8003286 <UART_SetConfig+0x20e>
 8003232:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <UART_SetConfig+0x334>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d014      	beq.n	800326c <UART_SetConfig+0x1f4>
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d802      	bhi.n	800324e <UART_SetConfig+0x1d6>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <UART_SetConfig+0x1e4>
 800324c:	e016      	b.n	800327c <UART_SetConfig+0x204>
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003252:	d007      	beq.n	8003264 <UART_SetConfig+0x1ec>
 8003254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003258:	d00c      	beq.n	8003274 <UART_SetConfig+0x1fc>
 800325a:	e00f      	b.n	800327c <UART_SetConfig+0x204>
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003262:	e013      	b.n	800328c <UART_SetConfig+0x214>
 8003264:	2302      	movs	r3, #2
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e00f      	b.n	800328c <UART_SetConfig+0x214>
 800326c:	2304      	movs	r3, #4
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003272:	e00b      	b.n	800328c <UART_SetConfig+0x214>
 8003274:	2308      	movs	r3, #8
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327a:	e007      	b.n	800328c <UART_SetConfig+0x214>
 800327c:	2310      	movs	r3, #16
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	bf00      	nop
 8003284:	e002      	b.n	800328c <UART_SetConfig+0x214>
 8003286:	2310      	movs	r3, #16
 8003288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a44      	ldr	r2, [pc, #272]	; (80033a4 <UART_SetConfig+0x32c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	f040 80fb 	bne.w	800348e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800329c:	2b08      	cmp	r3, #8
 800329e:	d824      	bhi.n	80032ea <UART_SetConfig+0x272>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x230>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032db 	.word	0x080032db
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032eb 	.word	0x080032eb
 80032c8:	080032e3 	.word	0x080032e3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7ff f88c 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 80032d0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032d2:	e00d      	b.n	80032f0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80032d4:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <UART_SetConfig+0x340>)
 80032d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032d8:	e00a      	b.n	80032f0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80032da:	f7fe ffef 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 80032de:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032e0:	e006      	b.n	80032f0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80032e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032e8:	e002      	b.n	80032f0 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	76fb      	strb	r3, [r7, #27]
        break;
 80032ee:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 81c8 	beq.w	8003688 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	d305      	bcc.n	8003314 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	76fb      	strb	r3, [r7, #27]
 8003318:	e1b6      	b.n	8003688 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800331a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800331e:	2b08      	cmp	r3, #8
 8003320:	f200 80a2 	bhi.w	8003468 <UART_SetConfig+0x3f0>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x2b4>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003351 	.word	0x08003351
 8003330:	08003469 	.word	0x08003469
 8003334:	080033bd 	.word	0x080033bd
 8003338:	08003469 	.word	0x08003469
 800333c:	080033f1 	.word	0x080033f1
 8003340:	08003469 	.word	0x08003469
 8003344:	08003469 	.word	0x08003469
 8003348:	08003469 	.word	0x08003469
 800334c:	0800343f 	.word	0x0800343f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7ff f84a 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003354:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4619      	mov	r1, r3
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	f04f 0400 	mov.w	r4, #0
 8003366:	0214      	lsls	r4, r2, #8
 8003368:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800336c:	020b      	lsls	r3, r1, #8
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	0852      	lsrs	r2, r2, #1
 8003374:	4611      	mov	r1, r2
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	eb13 0b01 	adds.w	fp, r3, r1
 800337e:	eb44 0c02 	adc.w	ip, r4, r2
 8003382:	4658      	mov	r0, fp
 8003384:	4661      	mov	r1, ip
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	461a      	mov	r2, r3
 8003390:	4623      	mov	r3, r4
 8003392:	f7fc ff1b 	bl	80001cc <__aeabi_uldivmod>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800339c:	e067      	b.n	800346e <UART_SetConfig+0x3f6>
 800339e:	bf00      	nop
 80033a0:	efff69f3 	.word	0xefff69f3
 80033a4:	40008000 	.word	0x40008000
 80033a8:	40013800 	.word	0x40013800
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40004400 	.word	0x40004400
 80033b4:	40004800 	.word	0x40004800
 80033b8:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	f04f 0400 	mov.w	r4, #0
 80033c6:	49ae      	ldr	r1, [pc, #696]	; (8003680 <UART_SetConfig+0x608>)
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	eb13 0b01 	adds.w	fp, r3, r1
 80033d0:	eb44 0c02 	adc.w	ip, r4, r2
 80033d4:	4658      	mov	r0, fp
 80033d6:	4661      	mov	r1, ip
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f04f 0400 	mov.w	r4, #0
 80033e0:	461a      	mov	r2, r3
 80033e2:	4623      	mov	r3, r4
 80033e4:	f7fc fef2 	bl	80001cc <__aeabi_uldivmod>
 80033e8:	4603      	mov	r3, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033ee:	e03e      	b.n	800346e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80033f0:	f7fe ff64 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 80033f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4619      	mov	r1, r3
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	f04f 0400 	mov.w	r4, #0
 8003406:	0214      	lsls	r4, r2, #8
 8003408:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800340c:	020b      	lsls	r3, r1, #8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6852      	ldr	r2, [r2, #4]
 8003412:	0852      	lsrs	r2, r2, #1
 8003414:	4611      	mov	r1, r2
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	eb13 0b01 	adds.w	fp, r3, r1
 800341e:	eb44 0c02 	adc.w	ip, r4, r2
 8003422:	4658      	mov	r0, fp
 8003424:	4661      	mov	r1, ip
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f04f 0400 	mov.w	r4, #0
 800342e:	461a      	mov	r2, r3
 8003430:	4623      	mov	r3, r4
 8003432:	f7fc fecb 	bl	80001cc <__aeabi_uldivmod>
 8003436:	4603      	mov	r3, r0
 8003438:	460c      	mov	r4, r1
 800343a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800343c:	e017      	b.n	800346e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	f04f 0400 	mov.w	r4, #0
 8003448:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800344c:	f144 0100 	adc.w	r1, r4, #0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	461a      	mov	r2, r3
 800345a:	4623      	mov	r3, r4
 800345c:	f7fc feb6 	bl	80001cc <__aeabi_uldivmod>
 8003460:	4603      	mov	r3, r0
 8003462:	460c      	mov	r4, r1
 8003464:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003466:	e002      	b.n	800346e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	76fb      	strb	r3, [r7, #27]
            break;
 800346c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003474:	d308      	bcc.n	8003488 <UART_SetConfig+0x410>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347c:	d204      	bcs.n	8003488 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	e0ff      	b.n	8003688 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	76fb      	strb	r3, [r7, #27]
 800348c:	e0fc      	b.n	8003688 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	f040 8083 	bne.w	80035a0 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 800349a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d85e      	bhi.n	8003560 <UART_SetConfig+0x4e8>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0x430>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080034ed 	.word	0x080034ed
 80034b0:	0800350d 	.word	0x0800350d
 80034b4:	08003561 	.word	0x08003561
 80034b8:	08003529 	.word	0x08003529
 80034bc:	08003561 	.word	0x08003561
 80034c0:	08003561 	.word	0x08003561
 80034c4:	08003561 	.word	0x08003561
 80034c8:	08003549 	.word	0x08003549
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7fe ff8c 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 80034d0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	005a      	lsls	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	441a      	add	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034ea:	e03c      	b.n	8003566 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7fe ff92 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 80034f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	005a      	lsls	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800350a:	e02c      	b.n	8003566 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003516:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6852      	ldr	r2, [r2, #4]
 800351e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003526:	e01e      	b.n	8003566 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003528:	f7fe fec8 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800352c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	005a      	lsls	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003546:	e00e      	b.n	8003566 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	b29b      	uxth	r3, r3
 800355c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800355e:	e002      	b.n	8003566 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	76fb      	strb	r3, [r7, #27]
        break;
 8003564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b0f      	cmp	r3, #15
 800356a:	d916      	bls.n	800359a <UART_SetConfig+0x522>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d212      	bcs.n	800359a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f023 030f 	bic.w	r3, r3, #15
 800357c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	b29b      	uxth	r3, r3
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	b29a      	uxth	r2, r3
 800358a:	89fb      	ldrh	r3, [r7, #14]
 800358c:	4313      	orrs	r3, r2
 800358e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	89fa      	ldrh	r2, [r7, #14]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	e076      	b.n	8003688 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	76fb      	strb	r3, [r7, #27]
 800359e:	e073      	b.n	8003688 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80035a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d85c      	bhi.n	8003662 <UART_SetConfig+0x5ea>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <UART_SetConfig+0x538>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035d5 	.word	0x080035d5
 80035b4:	080035f3 	.word	0x080035f3
 80035b8:	08003611 	.word	0x08003611
 80035bc:	08003663 	.word	0x08003663
 80035c0:	0800362d 	.word	0x0800362d
 80035c4:	08003663 	.word	0x08003663
 80035c8:	08003663 	.word	0x08003663
 80035cc:	08003663 	.word	0x08003663
 80035d0:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d4:	f7fe ff08 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 80035d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085a      	lsrs	r2, r3, #1
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	441a      	add	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035f0:	e03a      	b.n	8003668 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f2:	f7fe ff0f 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 80035f6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	085a      	lsrs	r2, r3, #1
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	441a      	add	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	b29b      	uxth	r3, r3
 800360c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800360e:	e02b      	b.n	8003668 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800361a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6852      	ldr	r2, [r2, #4]
 8003622:	fbb3 f3f2 	udiv	r3, r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800362a:	e01d      	b.n	8003668 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362c:	f7fe fe46 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8003630:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	085a      	lsrs	r2, r3, #1
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003648:	e00e      	b.n	8003668 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	b29b      	uxth	r3, r3
 800365e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003660:	e002      	b.n	8003668 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	76fb      	strb	r3, [r7, #27]
        break;
 8003666:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b0f      	cmp	r3, #15
 800366c:	d90a      	bls.n	8003684 <UART_SetConfig+0x60c>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d206      	bcs.n	8003684 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e003      	b.n	8003688 <UART_SetConfig+0x610>
 8003680:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003694:	7efb      	ldrb	r3, [r7, #27]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3728      	adds	r7, #40	; 0x28
 800369a:	46bd      	mov	sp, r7
 800369c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080036a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01a      	beq.n	80037b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379e:	d10a      	bne.n	80037b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80037f2:	f7fd fcdd 	bl	80011b0 <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b08      	cmp	r3, #8
 8003804:	d10e      	bne.n	8003824 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003806:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f82a 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e020      	b.n	8003866 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d10e      	bne.n	8003850 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003832:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f814 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e00a      	b.n	8003866 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e05d      	b.n	800393c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003886:	d059      	beq.n	800393c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc92 	bl	80011b0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11b      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e042      	b.n	800395c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02b      	beq.n	800393c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f2:	d123      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038fc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800390c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e00f      	b.n	800395c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	429a      	cmp	r2, r3
 8003958:	d092      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4e0d      	ldr	r6, [pc, #52]	; (800399c <__libc_init_array+0x38>)
 8003968:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396a:	1ba4      	subs	r4, r4, r6
 800396c:	10a4      	asrs	r4, r4, #2
 800396e:	2500      	movs	r5, #0
 8003970:	42a5      	cmp	r5, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	4e0b      	ldr	r6, [pc, #44]	; (80039a4 <__libc_init_array+0x40>)
 8003976:	4c0c      	ldr	r4, [pc, #48]	; (80039a8 <__libc_init_array+0x44>)
 8003978:	f000 f820 	bl	80039bc <_init>
 800397c:	1ba4      	subs	r4, r4, r6
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	2500      	movs	r5, #0
 8003982:	42a5      	cmp	r5, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800398c:	4798      	blx	r3
 800398e:	3501      	adds	r5, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003996:	4798      	blx	r3
 8003998:	3501      	adds	r5, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08003a24 	.word	0x08003a24
 80039a0:	08003a24 	.word	0x08003a24
 80039a4:	08003a24 	.word	0x08003a24
 80039a8:	08003a28 	.word	0x08003a28

080039ac <memset>:
 80039ac:	4402      	add	r2, r0
 80039ae:	4603      	mov	r3, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
