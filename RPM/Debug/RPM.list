
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053cc  080053cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d4  080053d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  0800544c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800544c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001358b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002730  00000000  00000000  0003362b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00035d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00036e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003eb8  00000000  00000000  00037e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cfa5  00000000  00000000  0003bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad98d  00000000  00000000  00048c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  000f66a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052ac 	.word	0x080052ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052ac 	.word	0x080052ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <app_SeleccionDisplay>:
}

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b03      	cmp	r3, #3
 800057e:	d86f      	bhi.n	8000660 <app_SeleccionDisplay+0xf0>
 8000580:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <app_SeleccionDisplay+0x18>)
 8000582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000586:	bf00      	nop
 8000588:	08000599 	.word	0x08000599
 800058c:	080005cb 	.word	0x080005cb
 8000590:	080005fd 	.word	0x080005fd
 8000594:	0800062f 	.word	0x0800062f
	{
		case 0:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 fb33 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f001 fb2c 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4837      	ldr	r0, [pc, #220]	; (8000698 <app_SeleccionDisplay+0x128>)
 80005ba:	f001 fb27 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	4835      	ldr	r0, [pc, #212]	; (8000698 <app_SeleccionDisplay+0x128>)
 80005c4:	f001 fb22 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 80005c8:	e062      	b.n	8000690 <app_SeleccionDisplay+0x120>
		case 1:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f001 fb1a 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f001 fb13 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	482b      	ldr	r0, [pc, #172]	; (8000698 <app_SeleccionDisplay+0x128>)
 80005ec:	f001 fb0e 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	4828      	ldr	r0, [pc, #160]	; (8000698 <app_SeleccionDisplay+0x128>)
 80005f6:	f001 fb09 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 80005fa:	e049      	b.n	8000690 <app_SeleccionDisplay+0x120>
		case 2:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f001 fb01 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 fafa 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	2120      	movs	r1, #32
 800061c:	481e      	ldr	r0, [pc, #120]	; (8000698 <app_SeleccionDisplay+0x128>)
 800061e:	f001 faf5 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2110      	movs	r1, #16
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <app_SeleccionDisplay+0x128>)
 8000628:	f001 faf0 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 800062c:	e030      	b.n	8000690 <app_SeleccionDisplay+0x120>
		case 3:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f001 fae8 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f001 fae1 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <app_SeleccionDisplay+0x128>)
 8000650:	f001 fadc 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2110      	movs	r1, #16
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <app_SeleccionDisplay+0x128>)
 800065a:	f001 fad7 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 800065e:	e017      	b.n	8000690 <app_SeleccionDisplay+0x120>
		default:
		{
			/* Envia todos los displays a 1 logicos */
			HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f001 facf 	bl	8001c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f001 fac8 	bl	8001c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <app_SeleccionDisplay+0x128>)
 8000682:	f001 fac3 	bl	8001c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2110      	movs	r1, #16
 800068a:	4803      	ldr	r0, [pc, #12]	; (8000698 <app_SeleccionDisplay+0x128>)
 800068c:	f001 fabe 	bl	8001c0c <HAL_GPIO_WritePin>
		}
	}
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	48000400 	.word	0x48000400

0800069c <app_LetrasADisplay>:

}

/* Impresion de letras en display de 7 segmentos */
void app_LetrasADisplay(char Letras)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	//volatile uint8_t i=0;
	switch(Letras)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	3b61      	subs	r3, #97	; 0x61
 80006aa:	2b18      	cmp	r3, #24
 80006ac:	f200 82f7 	bhi.w	8000c9e <app_LetrasADisplay+0x602>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <app_LetrasADisplay+0x1c>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	0800071d 	.word	0x0800071d
 80006bc:	0800076b 	.word	0x0800076b
 80006c0:	080007b9 	.word	0x080007b9
 80006c4:	08000807 	.word	0x08000807
 80006c8:	08000855 	.word	0x08000855
 80006cc:	080008a3 	.word	0x080008a3
 80006d0:	080008f1 	.word	0x080008f1
 80006d4:	0800093f 	.word	0x0800093f
 80006d8:	0800098d 	.word	0x0800098d
 80006dc:	080009db 	.word	0x080009db
 80006e0:	08000c9f 	.word	0x08000c9f
 80006e4:	08000a29 	.word	0x08000a29
 80006e8:	08000c9f 	.word	0x08000c9f
 80006ec:	08000a7d 	.word	0x08000a7d
 80006f0:	08000acb 	.word	0x08000acb
 80006f4:	08000c9f 	.word	0x08000c9f
 80006f8:	08000c9f 	.word	0x08000c9f
 80006fc:	08000b19 	.word	0x08000b19
 8000700:	08000b67 	.word	0x08000b67
 8000704:	08000c9f 	.word	0x08000c9f
 8000708:	08000c03 	.word	0x08000c03
 800070c:	08000bb5 	.word	0x08000bb5
 8000710:	08000c9f 	.word	0x08000c9f
 8000714:	08000c9f 	.word	0x08000c9f
 8000718:	08000c51 	.word	0x08000c51
		{
			case 'A' | 'a':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f001 fa71 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2102      	movs	r1, #2
 800072e:	48d2      	ldr	r0, [pc, #840]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000730:	f001 fa6c 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000734:	2201      	movs	r2, #1
 8000736:	2104      	movs	r1, #4
 8000738:	48cf      	ldr	r0, [pc, #828]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800073a:	f001 fa67 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2101      	movs	r1, #1
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f001 fa61 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	2110      	movs	r1, #16
 800074e:	48ca      	ldr	r0, [pc, #808]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000750:	f001 fa5c 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	48c7      	ldr	r0, [pc, #796]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800075a:	f001 fa57 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800075e:	2201      	movs	r2, #1
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	48c5      	ldr	r0, [pc, #788]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000764:	f001 fa52 	bl	8001c0c <HAL_GPIO_WritePin>

			}break;
 8000768:	e299      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'B' | 'b':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f001 fa4a 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2102      	movs	r1, #2
 800077c:	48be      	ldr	r0, [pc, #760]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800077e:	f001 fa45 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	2104      	movs	r1, #4
 8000786:	48bc      	ldr	r0, [pc, #752]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000788:	f001 fa40 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f001 fa3a 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	2110      	movs	r1, #16
 800079c:	48b6      	ldr	r0, [pc, #728]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800079e:	f001 fa35 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	48b4      	ldr	r0, [pc, #720]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80007a8:	f001 fa30 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	48b1      	ldr	r0, [pc, #708]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80007b2:	f001 fa2b 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 80007b6:	e272      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'C' | 'c':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f001 fa23 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2102      	movs	r1, #2
 80007ca:	48ab      	ldr	r0, [pc, #684]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80007cc:	f001 fa1e 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	48a8      	ldr	r0, [pc, #672]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80007d6:	f001 fa19 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	2101      	movs	r1, #1
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 fa13 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2110      	movs	r1, #16
 80007ea:	48a3      	ldr	r0, [pc, #652]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80007ec:	f001 fa0e 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	48a0      	ldr	r0, [pc, #640]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80007f6:	f001 fa09 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	489e      	ldr	r0, [pc, #632]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000800:	f001 fa04 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000804:	e24b      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'D' | 'd':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f001 f9fc 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	2102      	movs	r1, #2
 8000818:	4897      	ldr	r0, [pc, #604]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800081a:	f001 f9f7 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	2104      	movs	r1, #4
 8000822:	4895      	ldr	r0, [pc, #596]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000824:	f001 f9f2 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000828:	2201      	movs	r2, #1
 800082a:	2101      	movs	r1, #1
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f001 f9ec 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	2110      	movs	r1, #16
 8000838:	488f      	ldr	r0, [pc, #572]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800083a:	f001 f9e7 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	488d      	ldr	r0, [pc, #564]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000844:	f001 f9e2 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	488a      	ldr	r0, [pc, #552]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800084e:	f001 f9dd 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000852:	e224      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'E' | 'e':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f001 f9d5 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	4884      	ldr	r0, [pc, #528]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000868:	f001 f9d0 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	4881      	ldr	r0, [pc, #516]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000872:	f001 f9cb 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000876:	2201      	movs	r2, #1
 8000878:	2101      	movs	r1, #1
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f001 f9c5 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000882:	2201      	movs	r2, #1
 8000884:	2110      	movs	r1, #16
 8000886:	487c      	ldr	r0, [pc, #496]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000888:	f001 f9c0 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4879      	ldr	r0, [pc, #484]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000892:	f001 f9bb 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	4877      	ldr	r0, [pc, #476]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800089c:	f001 f9b6 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 80008a0:	e1fd      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'F' | 'f':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f001 f9ae 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2102      	movs	r1, #2
 80008b4:	4870      	ldr	r0, [pc, #448]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80008b6:	f001 f9a9 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2104      	movs	r1, #4
 80008be:	486e      	ldr	r0, [pc, #440]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80008c0:	f001 f9a4 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2101      	movs	r1, #1
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f001 f99e 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4868      	ldr	r0, [pc, #416]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80008d6:	f001 f999 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80008da:	2201      	movs	r2, #1
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4866      	ldr	r0, [pc, #408]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80008e0:	f001 f994 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	4863      	ldr	r0, [pc, #396]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80008ea:	f001 f98f 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 80008ee:	e1d6      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'G' | 'g':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f001 f987 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	2102      	movs	r1, #2
 8000902:	485d      	ldr	r0, [pc, #372]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000904:	f001 f982 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	2104      	movs	r1, #4
 800090c:	485a      	ldr	r0, [pc, #360]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800090e:	f001 f97d 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	2101      	movs	r1, #1
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 f977 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	4855      	ldr	r0, [pc, #340]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000924:	f001 f972 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	4852      	ldr	r0, [pc, #328]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800092e:	f001 f96d 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	4850      	ldr	r0, [pc, #320]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000938:	f001 f968 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 800093c:	e1af      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'H' | 'h':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 f960 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800094c:	2201      	movs	r2, #1
 800094e:	2102      	movs	r1, #2
 8000950:	4849      	ldr	r0, [pc, #292]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000952:	f001 f95b 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000956:	2201      	movs	r2, #1
 8000958:	2104      	movs	r1, #4
 800095a:	4847      	ldr	r0, [pc, #284]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800095c:	f001 f956 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2101      	movs	r1, #1
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 f950 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	2110      	movs	r1, #16
 8000970:	4841      	ldr	r0, [pc, #260]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000972:	f001 f94b 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000976:	2201      	movs	r2, #1
 8000978:	2140      	movs	r1, #64	; 0x40
 800097a:	483f      	ldr	r0, [pc, #252]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 800097c:	f001 f946 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	483c      	ldr	r0, [pc, #240]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000986:	f001 f941 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 800098a:	e188      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'I' | 'i':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000996:	f001 f939 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2102      	movs	r1, #2
 800099e:	4836      	ldr	r0, [pc, #216]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80009a0:	f001 f934 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2104      	movs	r1, #4
 80009a8:	4833      	ldr	r0, [pc, #204]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80009aa:	f001 f92f 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2101      	movs	r1, #1
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f001 f929 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2110      	movs	r1, #16
 80009be:	482e      	ldr	r0, [pc, #184]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80009c0:	f001 f924 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	482b      	ldr	r0, [pc, #172]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80009ca:	f001 f91f 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	4829      	ldr	r0, [pc, #164]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80009d4:	f001 f91a 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 80009d8:	e161      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'J' | 'j':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f001 f912 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2102      	movs	r1, #2
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80009ee:	f001 f90d 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2104      	movs	r1, #4
 80009f6:	4820      	ldr	r0, [pc, #128]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 80009f8:	f001 f908 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2101      	movs	r1, #1
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f001 f902 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	481a      	ldr	r0, [pc, #104]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a0e:	f001 f8fd 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a18:	f001 f8f8 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	4815      	ldr	r0, [pc, #84]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a22:	f001 f8f3 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000a26:	e13a      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'L' | 'l':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f001 f8eb 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	480f      	ldr	r0, [pc, #60]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a3c:	f001 f8e6 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2104      	movs	r1, #4
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a46:	f001 f8e1 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f001 f8db 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a5c:	f001 f8d6 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a66:	f001 f8d1 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <app_LetrasADisplay+0x3dc>)
 8000a70:	f001 f8cc 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000a74:	e113      	b.n	8000c9e <app_LetrasADisplay+0x602>
 8000a76:	bf00      	nop
 8000a78:	48000800 	.word	0x48000800
			case 'N' | 'n':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f001 f8c1 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4886      	ldr	r0, [pc, #536]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000a90:	f001 f8bc 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2104      	movs	r1, #4
 8000a98:	4883      	ldr	r0, [pc, #524]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000a9a:	f001 f8b7 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f001 f8b1 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2110      	movs	r1, #16
 8000aae:	487e      	ldr	r0, [pc, #504]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000ab0:	f001 f8ac 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	487b      	ldr	r0, [pc, #492]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000aba:	f001 f8a7 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	4879      	ldr	r0, [pc, #484]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000ac4:	f001 f8a2 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000ac8:	e0e9      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'O' | 'o':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f001 f89a 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	4872      	ldr	r0, [pc, #456]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000ade:	f001 f895 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4870      	ldr	r0, [pc, #448]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000ae8:	f001 f890 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f001 f88a 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2110      	movs	r1, #16
 8000afc:	486a      	ldr	r0, [pc, #424]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000afe:	f001 f885 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	4868      	ldr	r0, [pc, #416]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b08:	f001 f880 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4865      	ldr	r0, [pc, #404]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b12:	f001 f87b 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000b16:	e0c2      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'R' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f001 f873 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2102      	movs	r1, #2
 8000b2a:	485f      	ldr	r0, [pc, #380]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b2c:	f001 f86e 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2104      	movs	r1, #4
 8000b34:	485c      	ldr	r0, [pc, #368]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b36:	f001 f869 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f001 f863 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2110      	movs	r1, #16
 8000b4a:	4857      	ldr	r0, [pc, #348]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b4c:	f001 f85e 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	4854      	ldr	r0, [pc, #336]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b56:	f001 f859 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	4852      	ldr	r0, [pc, #328]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b60:	f001 f854 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000b64:	e09b      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'S' | 's':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f001 f84c 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2102      	movs	r1, #2
 8000b78:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b7a:	f001 f847 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2104      	movs	r1, #4
 8000b82:	4849      	ldr	r0, [pc, #292]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b84:	f001 f842 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f001 f83c 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2110      	movs	r1, #16
 8000b98:	4843      	ldr	r0, [pc, #268]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000b9a:	f001 f837 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2140      	movs	r1, #64	; 0x40
 8000ba2:	4841      	ldr	r0, [pc, #260]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000ba4:	f001 f832 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	483e      	ldr	r0, [pc, #248]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000bae:	f001 f82d 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000bb2:	e074      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'T' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f001 f825 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4838      	ldr	r0, [pc, #224]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000bc8:	f001 f820 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2104      	movs	r1, #4
 8000bd0:	4835      	ldr	r0, [pc, #212]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000bd2:	f001 f81b 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2101      	movs	r1, #1
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f001 f815 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2110      	movs	r1, #16
 8000be6:	4830      	ldr	r0, [pc, #192]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000be8:	f001 f810 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000bf2:	f001 f80b 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	482b      	ldr	r0, [pc, #172]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000bfc:	f001 f806 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000c00:	e04d      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'U' | 'u':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f000 fffe 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2102      	movs	r1, #2
 8000c14:	4824      	ldr	r0, [pc, #144]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c16:	f000 fff9 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4822      	ldr	r0, [pc, #136]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c20:	f000 fff4 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2101      	movs	r1, #1
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f000 ffee 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c36:	f000 ffe9 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c40:	f000 ffe4 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c4a:	f000 ffdf 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000c4e:	e026      	b.n	8000c9e <app_LetrasADisplay+0x602>
			case 'Y' | 'y':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f000 ffd7 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2102      	movs	r1, #2
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c64:	f000 ffd2 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c6e:	f000 ffcd 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2101      	movs	r1, #1
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f000 ffc7 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2110      	movs	r1, #16
 8000c82:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c84:	f000 ffc2 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c8e:	f000 ffbd 	bl	8001c0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <app_LetrasADisplay+0x60c>)
 8000c98:	f000 ffb8 	bl	8001c0c <HAL_GPIO_WritePin>
			}break;
 8000c9c:	bf00      	nop
			default:
			{
				/*No hace nada */
			}
		}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	48000800 	.word	0x48000800

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f000 fc94 	bl	80015de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f82b 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 f95b 	bl	8000f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cbe:	f000 f929 	bl	8000f14 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cc2:	f000 f8d9 	bl	8000e78 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8000cc6:	f000 f8a1 	bl	8000e0c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_LPTIM_Init(&hlptim1);
  HAL_LPTIM_Encoder_Start(&hlptim1, 36);
 8000cca:	2124      	movs	r1, #36	; 0x24
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <main+0x58>)
 8000cce:	f001 f8a1 	bl	8001e14 <HAL_LPTIM_Encoder_Start>

  uint8_t ValorEncoder = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//  app_Tacometro();
	  ValorEncoder = HAL_LPTIM_ReadCounter(&hlptim1)/4;
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <main+0x58>)
 8000cd8:	f001 f8e8 	bl	8001eac <HAL_LPTIM_ReadCounter>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	71fb      	strb	r3, [r7, #7]


	  if(ValorEncoder > 9)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b09      	cmp	r3, #9
 8000ce6:	d905      	bls.n	8000cf4 <main+0x48>
	  {
		  printf("Estado maximo \n \r");
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <main+0x5c>)
 8000cea:	f003 fbfb 	bl	80044e4 <iprintf>
		  ValorEncoder = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	e7f0      	b.n	8000cd6 <main+0x2a>
	  }
	  else
	  {
		  printf("Valor: %d %d\n \r",ValorEncoder,ValorEncoder);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <main+0x60>)
 8000cfc:	f003 fbf2 	bl	80044e4 <iprintf>
	  ValorEncoder = HAL_LPTIM_ReadCounter(&hlptim1)/4;
 8000d00:	e7e9      	b.n	8000cd6 <main+0x2a>
 8000d02:	bf00      	nop
 8000d04:	200000ec 	.word	0x200000ec
 8000d08:	080052c4 	.word	0x080052c4
 8000d0c:	080052d8 	.word	0x080052d8

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0a4      	sub	sp, #144	; 0x90
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d1a:	2244      	movs	r2, #68	; 0x44
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 fbd8 	bl	80044d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2234      	movs	r2, #52	; 0x34
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fbca 	bl	80044d4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000d40:	f001 fa1a 	bl	8002178 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <SystemClock_Config+0xf8>)
 8000d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <SystemClock_Config+0xf8>)
 8000d4c:	f023 0318 	bic.w	r3, r3, #24
 8000d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d58:	f001 fa2c 	bl	80021b4 <HAL_PWREx_ControlVoltageScaling>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000d62:	f000 f9e3 	bl	800112c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d66:	2314      	movs	r3, #20
 8000d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d76:	2360      	movs	r3, #96	; 0x60
 8000d78:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 45;
 8000d88:	232d      	movs	r3, #45	; 0x2d
 8000d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 fa5e 	bl	8002260 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000daa:	f000 f9bf 	bl	800112c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2303      	movs	r3, #3
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 feae 	bl	8002b2c <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dd6:	f000 f9a9 	bl	800112c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 8000dda:	f240 2302 	movw	r3, #514	; 0x202
 8000dde:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 f8a2 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000df6:	f000 f999 	bl	800112c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dfa:	f002 fa21 	bl	8003240 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dfe:	bf00      	nop
 8000e00:	3790      	adds	r7, #144	; 0x90
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e12:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <MX_LPTIM1_Init+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 200;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e58:	22c8      	movs	r2, #200	; 0xc8
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_LPTIM1_Init+0x64>)
 8000e5e:	f000 ff1f 	bl	8001ca0 <HAL_LPTIM_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LPTIM1_Init+0x60>
  {
    Error_Handler();
 8000e68:	f000 f960 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000ec 	.word	0x200000ec
 8000e74:	40007c00 	.word	0x40007c00

08000e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000ea0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000ec2:	f002 f9cd 	bl	8003260 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f000 f92e 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000ede:	f002 fb09 	bl	80034f4 <HAL_TIM_ConfigClockSource>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ee8:	f000 f920 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_TIM2_Init+0x98>)
 8000efa:	f002 fce5 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000f04:	f000 f912 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000098 	.word	0x20000098

08000f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f58:	f002 fd3a 	bl	80039d0 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f62:	f000 f8e3 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000128 	.word	0x20000128
 8000f70:	40004400 	.word	0x40004400

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b48      	ldr	r3, [pc, #288]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a44      	ldr	r2, [pc, #272]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a3e      	ldr	r2, [pc, #248]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <MX_GPIO_Init+0x15c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8000ff0:	4838      	ldr	r0, [pc, #224]	; (80010d4 <MX_GPIO_Init+0x160>)
 8000ff2:	f000 fe0b 	bl	8001c0c <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f241 5131 	movw	r1, #5425	; 0x1531
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f000 fe04 	bl	8001c0c <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Display_3_Pin|Display_2_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f242 0130 	movw	r1, #8240	; 0x2030
 800100a:	4833      	ldr	r0, [pc, #204]	; (80010d8 <MX_GPIO_Init+0x164>)
 800100c:	f000 fdfe 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boton_azul_Pin */
  GPIO_InitStruct.Pin = Boton_azul_Pin;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <MX_GPIO_Init+0x168>)
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_azul_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	482b      	ldr	r0, [pc, #172]	; (80010d4 <MX_GPIO_Init+0x160>)
 8001026:	f000 fc7f 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 800102a:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800102e:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4824      	ldr	r0, [pc, #144]	; (80010d4 <MX_GPIO_Init+0x160>)
 8001044:	f000 fc70 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8001048:	f241 5331 	movw	r3, #5425	; 0x1531
 800104c:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f000 fc60 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Display_3_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Display_3_Pin|Display_2_Pin;
 8001068:	f242 0330 	movw	r3, #8240	; 0x2030
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4815      	ldr	r0, [pc, #84]	; (80010d8 <MX_GPIO_Init+0x164>)
 8001082:	f000 fc51 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 8001086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_GPIO_Init+0x160>)
 800109c:	f000 fc44 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_GPIO_Init+0x164>)
 80010b4:	f000 fc38 	bl	8001928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	f000 fbfc 	bl	80018ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c2:	2028      	movs	r0, #40	; 0x28
 80010c4:	f000 fc15 	bl	80018f2 <HAL_NVIC_EnableIRQ>

}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000400 	.word	0x48000400
 80010dc:	10210000 	.word	0x10210000

080010e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == Boton_azul_Pin)
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f0:	d104      	bne.n	80010fc <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80010f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <HAL_GPIO_EXTI_Callback+0x24>)
 80010f8:	f000 fda0 	bl	8001c3c <HAL_GPIO_TogglePin>
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000400 	.word	0x48000400

08001108 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001116:	2201      	movs	r2, #1
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <__io_putchar+0x20>)
 800111a:	f002 fca7 	bl	8003a6c <HAL_UART_Transmit>

return ch;
 800111e:	687b      	ldr	r3, [r7, #4]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000128 	.word	0x20000128

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x44>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x44>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6613      	str	r3, [r2, #96]	; 0x60
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x44>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x44>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6593      	str	r3, [r2, #88]	; 0x58
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x44>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <HAL_LPTIM_MspInit+0xb4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d143      	bne.n	800122e <HAL_LPTIM_MspInit+0xaa>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a24      	ldr	r2, [pc, #144]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_LPTIM_MspInit+0xb8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration    
    PC0     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ee:	2301      	movs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80011fe:	2301      	movs	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_LPTIM_MspInit+0xbc>)
 800120a:	f000 fb8d 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800121e:	2301      	movs	r3, #1
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <HAL_LPTIM_MspInit+0xc0>)
 800122a:	f000 fb7d 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40007c00 	.word	0x40007c00
 800123c:	40021000 	.word	0x40021000
 8001240:	48000800 	.word	0x48000800
 8001244:	48000400 	.word	0x48000400

08001248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d113      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6593      	str	r3, [r2, #88]	; 0x58
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	201c      	movs	r0, #28
 8001278:	f000 fb1f 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800127c:	201c      	movs	r0, #28
 800127e:	f000 fb38 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_UART_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_UART_MspInit+0x80>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <HAL_UART_MspInit+0x80>)
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_UART_MspInit+0x80>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_UART_MspInit+0x80>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_UART_MspInit+0x80>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_UART_MspInit+0x80>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e2:	230c      	movs	r3, #12
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f2:	2307      	movs	r3, #7
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f000 fb12 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40004400 	.word	0x40004400
 8001310:	40021000 	.word	0x40021000

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  char mensaje[]= {'e','r','r','o'};
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HardFault_Handler+0x58>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	607b      	str	r3, [r7, #4]
	  app_SeleccionDisplay(0);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff f91d 	bl	8000570 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[0]);
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f9af 	bl	800069c <app_LetrasADisplay>
	  HAL_Delay(3);
 800133e:	2003      	movs	r0, #3
 8001340:	f000 f9be 	bl	80016c0 <HAL_Delay>
	  app_SeleccionDisplay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff f913 	bl	8000570 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[1]);
 800134a:	797b      	ldrb	r3, [r7, #5]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f9a5 	bl	800069c <app_LetrasADisplay>
	  HAL_Delay(3);
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f9b4 	bl	80016c0 <HAL_Delay>
	  app_SeleccionDisplay(2);
 8001358:	2002      	movs	r0, #2
 800135a:	f7ff f909 	bl	8000570 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[2]);
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f99b 	bl	800069c <app_LetrasADisplay>
	  HAL_Delay(3);
 8001366:	2003      	movs	r0, #3
 8001368:	f000 f9aa 	bl	80016c0 <HAL_Delay>
	  app_SeleccionDisplay(3);
 800136c:	2003      	movs	r0, #3
 800136e:	f7ff f8ff 	bl	8000570 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[3]);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f991 	bl	800069c <app_LetrasADisplay>
  {
 800137a:	e7d6      	b.n	800132a <HardFault_Handler+0x6>
 800137c:	080052e8 	.word	0x080052e8

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f960 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM2_IRQHandler+0x10>)
 80013ce:	f001 ff72 	bl	80032b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000098 	.word	0x20000098

080013dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e4:	f000 fc44 	bl	8001c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00a      	b.n	8001414 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013fe:	f3af 8000 	nop.w
 8001402:	4601      	mov	r1, r0
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	b2ca      	uxtb	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf0      	blt.n	80013fe <_read+0x12>
	}

return len;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e009      	b.n	800144c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	60ba      	str	r2, [r7, #8]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe61 	bl	8001108 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf1      	blt.n	8001438 <_write+0x12>
	}
	return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_close>:

int _close(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	605a      	str	r2, [r3, #4]
	return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_isatty>:

int _isatty(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
	return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x50>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x16>
		heap_end = &end;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <_sbrk+0x50>)
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <_sbrk+0x54>)
 80014dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <_sbrk+0x50>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <_sbrk+0x50>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	466a      	mov	r2, sp
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d907      	bls.n	8001502 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014f2:	f002 ffc5 	bl	8004480 <__errno>
 80014f6:	4602      	mov	r2, r0
 80014f8:	230c      	movs	r3, #12
 80014fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001500:	e006      	b.n	8001510 <_sbrk+0x48>
	}

	heap_end += incr;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <_sbrk+0x50>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a03      	ldr	r2, [pc, #12]	; (8001518 <_sbrk+0x50>)
 800150c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000008c 	.word	0x2000008c
 800151c:	200001b0 	.word	0x200001b0

08001520 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <SystemInit+0x64>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <SystemInit+0x64>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <SystemInit+0x68>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <SystemInit+0x68>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <SystemInit+0x68>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <SystemInit+0x68>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <SystemInit+0x68>)
 800154c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001550:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001554:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <SystemInit+0x68>)
 8001558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800155c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <SystemInit+0x68>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <SystemInit+0x68>)
 8001564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <SystemInit+0x68>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SystemInit+0x64>)
 8001572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001576:	609a      	str	r2, [r3, #8]
#endif
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	40021000 	.word	0x40021000

0800158c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001590:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001592:	e003      	b.n	800159c <LoopCopyDataInit>

08001594 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001596:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001598:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800159a:	3104      	adds	r1, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800159c:	480b      	ldr	r0, [pc, #44]	; (80015cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015a4:	d3f6      	bcc.n	8001594 <CopyDataInit>
	ldr	r2, =_sbss
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015a8:	e002      	b.n	80015b0 <LoopFillZerobss>

080015aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015ac:	f842 3b04 	str.w	r3, [r2], #4

080015b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <LoopForever+0x16>)
	cmp	r2, r3
 80015b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015b4:	d3f9      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b6:	f7ff ffb3 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f002 ff67 	bl	800448c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015be:	f7ff fb75 	bl	8000cac <main>

080015c2 <LoopForever>:

LoopForever:
    b LoopForever
 80015c2:	e7fe      	b.n	80015c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80015c8:	080053dc 	.word	0x080053dc
	ldr	r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015d0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80015d4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80015d8:	200001b0 	.word	0x200001b0

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>

080015de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f95b 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f80e 	bl	8001610 <HAL_InitTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	e001      	b.n	8001604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001600:	f7ff fd9c 	bl	800113c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001604:	79fb      	ldrb	r3, [r7, #7]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_InitTick+0x68>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d022      	beq.n	800166a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_InitTick+0x6c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_InitTick+0x68>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001630:	fbb1 f3f3 	udiv	r3, r1, r3
 8001634:	fbb2 f3f3 	udiv	r3, r2, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f968 	bl	800190e <HAL_SYSTICK_Config>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10f      	bne.n	8001664 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b0f      	cmp	r3, #15
 8001648:	d809      	bhi.n	800165e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164a:	2200      	movs	r2, #0
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001652:	f000 f932 	bl	80018ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_InitTick+0x70>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e007      	b.n	800166e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	e004      	b.n	800166e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e001      	b.n	800166e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000008 	.word	0x20000008
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4413      	add	r3, r2
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_IncTick+0x1c>)
 8001694:	6013      	str	r3, [r2, #0]
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	200001a8 	.word	0x200001a8
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200001a8 	.word	0x200001a8

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d8:	d004      	beq.n	80016e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_Delay+0x40>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e4:	bf00      	nop
 80016e6:	f7ff ffdf 	bl	80016a8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8f7      	bhi.n	80016e6 <HAL_Delay+0x26>
  {
  }
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff29 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff3e 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff31 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001936:	e14e      	b.n	8001bd6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8140 	beq.w	8001bd0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d00b      	beq.n	8001970 <HAL_GPIO_Init+0x48>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001964:	2b11      	cmp	r3, #17
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d130      	bne.n	80019d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a6:	2201      	movs	r2, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	f003 0201 	and.w	r2, r3, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0xea>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b12      	cmp	r3, #18
 8001a10:	d123      	bne.n	8001a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	6939      	ldr	r1, [r7, #16]
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 809a 	beq.w	8001bd0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b55      	ldr	r3, [pc, #340]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa0:	4a54      	ldr	r2, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa8:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab4:	4a50      	ldr	r2, [pc, #320]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ade:	d013      	beq.n	8001b08 <HAL_GPIO_Init+0x1e0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a46      	ldr	r2, [pc, #280]	; (8001bfc <HAL_GPIO_Init+0x2d4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d00d      	beq.n	8001b04 <HAL_GPIO_Init+0x1dc>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a45      	ldr	r2, [pc, #276]	; (8001c00 <HAL_GPIO_Init+0x2d8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d007      	beq.n	8001b00 <HAL_GPIO_Init+0x1d8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a44      	ldr	r2, [pc, #272]	; (8001c04 <HAL_GPIO_Init+0x2dc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_GPIO_Init+0x1d4>
 8001af8:	2303      	movs	r3, #3
 8001afa:	e006      	b.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001afc:	2307      	movs	r3, #7
 8001afe:	e004      	b.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	f002 0203 	and.w	r2, r2, #3
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	4093      	lsls	r3, r2
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b1a:	4937      	ldr	r1, [pc, #220]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b28:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b76:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f aea9 	bne.w	8001938 <HAL_GPIO_Init+0x10>
  }
}
 8001be6:	bf00      	nop
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	48000400 	.word	0x48000400
 8001c00:	48000800 	.word	0x48000800
 8001c04:	48000c00 	.word	0x48000c00
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c1c:	787b      	ldrb	r3, [r7, #1]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c28:	e002      	b.n	8001c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c5c:	887a      	ldrh	r2, [r7, #2]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fa26 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40010400 	.word	0x40010400

08001ca0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0a7      	b.n	8001e02 <HAL_LPTIM_Init+0x162>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fa5c 	bl	8001184 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cec:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8001cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8f1 	bl	8001ee4 <LPTIM_WaitForFlag>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d101      	bne.n	8001d0c <HAL_LPTIM_Init+0x6c>
  {
    return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e07a      	b.n	8001e02 <HAL_LPTIM_Init+0x162>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f919 	bl	8001f44 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8d7 	bl	8001ec6 <HAL_LPTIM_GetState>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d101      	bne.n	8001d22 <HAL_LPTIM_Init+0x82>
  {
    return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e06f      	b.n	8001e02 <HAL_LPTIM_Init+0x162>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d004      	beq.n	8001d3c <HAL_LPTIM_Init+0x9c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d3a:	d103      	bne.n	8001d44 <HAL_LPTIM_Init+0xa4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 031e 	bic.w	r3, r3, #30
 8001d42:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d005      	beq.n	8001d5c <HAL_LPTIM_Init+0xbc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_LPTIM_Init+0x16c>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d6c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001d72:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001d78:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001d7e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d004      	beq.n	8001d98 <HAL_LPTIM_Init+0xf8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d96:	d107      	bne.n	8001da8 <HAL_LPTIM_Init+0x108>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001da0:	4313      	orrs	r3, r2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00a      	beq.n	8001dca <HAL_LPTIM_Init+0x12a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001dbc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001dc2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_LPTIM_Init+0x170>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d108      	bne.n	8001dee <HAL_LPTIM_Init+0x14e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	621a      	str	r2, [r3, #32]
 8001dec:	e004      	b.n	8001df8 <HAL_LPTIM_Init+0x158>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001df6:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	ff19f1f8 	.word	0xff19f1f8
 8001e10:	40007c00 	.word	0x40007c00

08001e14 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f023 0306 	bic.w	r3, r3, #6
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001e78:	2110      	movs	r1, #16
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f832 	bl	8001ee4 <LPTIM_WaitForFlag>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d101      	bne.n	8001e8a <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e00c      	b.n	8001ea4 <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ed4:	b2db      	uxtb	r3, r3
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <LPTIM_WaitForFlag+0x58>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <LPTIM_WaitForFlag+0x5c>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	0b9b      	lsrs	r3, r3, #14
 8001efe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	60bb      	str	r3, [r7, #8]
    do
    {
      count--;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <LPTIM_WaitForFlag+0x34>
      {
        result = HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	73fb      	strb	r3, [r7, #15]
      }
    }
    while((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4013      	ands	r3, r2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d002      	beq.n	8001f2e <LPTIM_WaitForFlag+0x4a>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ec      	bne.n	8001f08 <LPTIM_WaitForFlag+0x24>

    return result;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	d1b71759 	.word	0xd1b71759

08001f44 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a85      	ldr	r2, [pc, #532]	; (800216c <LPTIM_Disable+0x228>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <LPTIM_Disable+0x20>
 8001f5c:	4a84      	ldr	r2, [pc, #528]	; (8002170 <LPTIM_Disable+0x22c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <LPTIM_Disable+0x2e>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8001f62:	e00d      	b.n	8001f80 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001f64:	4b83      	ldr	r3, [pc, #524]	; (8002174 <LPTIM_Disable+0x230>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8001f70:	e006      	b.n	8001f80 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001f72:	4b80      	ldr	r3, [pc, #512]	; (8002174 <LPTIM_Disable+0x230>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8001f7e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6d      	ldr	r2, [pc, #436]	; (800216c <LPTIM_Disable+0x228>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <LPTIM_Disable+0x7e>
 8001fba:	4a6d      	ldr	r2, [pc, #436]	; (8002170 <LPTIM_Disable+0x22c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00d      	beq.n	8001fdc <LPTIM_Disable+0x98>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8001fc0:	e019      	b.n	8001ff6 <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8001fc2:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <LPTIM_Disable+0x230>)
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	4a6b      	ldr	r2, [pc, #428]	; (8002174 <LPTIM_Disable+0x230>)
 8001fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fcc:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001fce:	4b69      	ldr	r3, [pc, #420]	; (8002174 <LPTIM_Disable+0x230>)
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	4a68      	ldr	r2, [pc, #416]	; (8002174 <LPTIM_Disable+0x230>)
 8001fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd8:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 8001fda:	e00c      	b.n	8001ff6 <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM2_FORCE_RESET();
 8001fdc:	4b65      	ldr	r3, [pc, #404]	; (8002174 <LPTIM_Disable+0x230>)
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	4a64      	ldr	r2, [pc, #400]	; (8002174 <LPTIM_Disable+0x230>)
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	63d3      	str	r3, [r2, #60]	; 0x3c
       __HAL_RCC_LPTIM2_RELEASE_RESET();
 8001fe8:	4b62      	ldr	r3, [pc, #392]	; (8002174 <LPTIM_Disable+0x230>)
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	4a61      	ldr	r2, [pc, #388]	; (8002174 <LPTIM_Disable+0x230>)
 8001fee:	f023 0320 	bic.w	r3, r3, #32
 8001ff2:	63d3      	str	r3, [r2, #60]	; 0x3c
       break;
 8001ff4:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <LPTIM_Disable+0xc6>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <LPTIM_Disable+0xc6>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8096 	beq.w	8002136 <LPTIM_Disable+0x1f2>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a57      	ldr	r2, [pc, #348]	; (800216c <LPTIM_Disable+0x228>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <LPTIM_Disable+0xd8>
 8002014:	4a56      	ldr	r2, [pc, #344]	; (8002170 <LPTIM_Disable+0x22c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <LPTIM_Disable+0xea>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
         break;
#endif /* LPTIM2 */
       default:
         break;
 800201a:	e011      	b.n	8002040 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800201c:	4b55      	ldr	r3, [pc, #340]	; (8002174 <LPTIM_Disable+0x230>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	4a54      	ldr	r2, [pc, #336]	; (8002174 <LPTIM_Disable+0x230>)
 8002024:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 800202c:	e008      	b.n	8002040 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800202e:	4b51      	ldr	r3, [pc, #324]	; (8002174 <LPTIM_Disable+0x230>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	4a4f      	ldr	r2, [pc, #316]	; (8002174 <LPTIM_Disable+0x230>)
 8002036:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800203a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 800203e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01a      	beq.n	800207c <LPTIM_Disable+0x138>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800205e:	2108      	movs	r1, #8
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff3f 	bl	8001ee4 <LPTIM_WaitForFlag>
 8002066:	4603      	mov	r3, r0
 8002068:	2b03      	cmp	r3, #3
 800206a:	d103      	bne.n	8002074 <LPTIM_Disable+0x130>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2208      	movs	r2, #8
 800207a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01a      	beq.n	80020b8 <LPTIM_Disable+0x174>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800209a:	2110      	movs	r1, #16
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff21 	bl	8001ee4 <LPTIM_WaitForFlag>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d103      	bne.n	80020b0 <LPTIM_Disable+0x16c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2210      	movs	r2, #16
 80020b6:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01c      	beq.n	80020f8 <LPTIM_Disable+0x1b4>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff02 	bl	8001ee4 <LPTIM_WaitForFlag>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d103      	bne.n	80020ee <LPTIM_Disable+0x1aa>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2203      	movs	r2, #3
 80020ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f6:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <LPTIM_Disable+0x228>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <LPTIM_Disable+0x1c6>
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <LPTIM_Disable+0x22c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00b      	beq.n	8002120 <LPTIM_Disable+0x1dc>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8002108:	e016      	b.n	8002138 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <LPTIM_Disable+0x230>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002114:	4917      	ldr	r1, [pc, #92]	; (8002174 <LPTIM_Disable+0x230>)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 800211e:	e00b      	b.n	8002138 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <LPTIM_Disable+0x230>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212a:	4912      	ldr	r1, [pc, #72]	; (8002174 <LPTIM_Disable+0x230>)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 8002134:	e000      	b.n	8002138 <LPTIM_Disable+0x1f4>
    }
  }
 8002136:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a3a      	ldr	r2, [r7, #32]
 800214e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8002160:	b662      	cpsie	i

  __enable_irq();
}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40007c00 	.word	0x40007c00
 8002170:	40009400 	.word	0x40009400
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40007000 	.word	0x40007000

08002198 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40007000 	.word	0x40007000

080021b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c2:	d130      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d0:	d038      	beq.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021da:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2232      	movs	r2, #50	; 0x32
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9b      	lsrs	r3, r3, #18
 80021f4:	3301      	adds	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f8:	e002      	b.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220c:	d102      	bne.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x60>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f2      	bne.n	80021fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002220:	d110      	bne.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e00f      	b.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002232:	d007      	beq.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800223c:	4a05      	ldr	r2, [pc, #20]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002242:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40007000 	.word	0x40007000
 8002258:	20000000 	.word	0x20000000
 800225c:	431bde83 	.word	0x431bde83

08002260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f000 bc56 	b.w	8002b20 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002274:	4ba1      	ldr	r3, [pc, #644]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227e:	4b9f      	ldr	r3, [pc, #636]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80e6 	beq.w	8002462 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_RCC_OscConfig+0x4c>
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	f040 808d 	bne.w	80023be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	f040 8089 	bne.w	80023be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ac:	4b93      	ldr	r3, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_RCC_OscConfig+0x66>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f000 bc2d 	b.w	8002b20 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ca:	4b8c      	ldr	r3, [pc, #560]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_RCC_OscConfig+0x80>
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022de:	e005      	b.n	80022ec <HAL_RCC_OscConfig+0x8c>
 80022e0:	4b86      	ldr	r3, [pc, #536]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d224      	bcs.n	800233a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fdbd 	bl	8002e74 <RCC_SetFlashLatencyFromMSIRange>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	f000 bc0d 	b.w	8002b20 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002306:	4b7d      	ldr	r3, [pc, #500]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7c      	ldr	r2, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	4977      	ldr	r1, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	4972      	ldr	r1, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
 8002338:	e025      	b.n	8002386 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233a:	4b70      	ldr	r3, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6f      	ldr	r2, [pc, #444]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	496a      	ldr	r1, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	4965      	ldr	r1, [pc, #404]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fd7c 	bl	8002e74 <RCC_SetFlashLatencyFromMSIRange>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e3cc      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002386:	f000 fcb3 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 800238a:	4601      	mov	r1, r0
 800238c:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a5a      	ldr	r2, [pc, #360]	; (8002500 <HAL_RCC_OscConfig+0x2a0>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	fa21 f303 	lsr.w	r3, r1, r3
 80023a2:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_RCC_OscConfig+0x2a4>)
 80023a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a6:	4b58      	ldr	r3, [pc, #352]	; (8002508 <HAL_RCC_OscConfig+0x2a8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f930 	bl	8001610 <HAL_InitTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d052      	beq.n	8002460 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	e3b0      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d032      	beq.n	800242c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c6:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d2:	f7ff f969 	bl	80016a8 <HAL_GetTick>
 80023d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023da:	f7ff f965 	bl	80016a8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e399      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ec:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f8:	4b40      	ldr	r3, [pc, #256]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3f      	ldr	r2, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	493a      	ldr	r1, [pc, #232]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
 800242a:	e01a      	b.n	8002462 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242c:	4b33      	ldr	r3, [pc, #204]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a32      	ldr	r2, [pc, #200]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002438:	f7ff f936 	bl	80016a8 <HAL_GetTick>
 800243c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002440:	f7ff f932 	bl	80016a8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e366      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002452:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x1e0>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d073      	beq.n	8002556 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d005      	beq.n	8002480 <HAL_RCC_OscConfig+0x220>
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d10e      	bne.n	8002498 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d10b      	bne.n	8002498 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d063      	beq.n	8002554 <HAL_RCC_OscConfig+0x2f4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d15f      	bne.n	8002554 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e343      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x250>
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e01d      	b.n	80024ec <HAL_RCC_OscConfig+0x28c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x274>
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0x28c>
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_RCC_OscConfig+0x29c>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01b      	beq.n	800252c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7ff f8d8 	bl	80016a8 <HAL_GetTick>
 80024f8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	e010      	b.n	800251e <HAL_RCC_OscConfig+0x2be>
 80024fc:	40021000 	.word	0x40021000
 8002500:	080052ec 	.word	0x080052ec
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff f8cc 	bl	80016a8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e300      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251e:	4ba0      	ldr	r3, [pc, #640]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x2ac>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff f8bc 	bl	80016a8 <HAL_GetTick>
 8002530:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff f8b8 	bl	80016a8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e2ec      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002546:	4b96      	ldr	r3, [pc, #600]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x2d4>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d060      	beq.n	8002624 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x314>
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d116      	bne.n	80025a2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	4b8a      	ldr	r3, [pc, #552]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x32c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e2c9      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b84      	ldr	r3, [pc, #528]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	4981      	ldr	r1, [pc, #516]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	e040      	b.n	8002624 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d023      	beq.n	80025f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025aa:	4b7d      	ldr	r3, [pc, #500]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7c      	ldr	r2, [pc, #496]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff f877 	bl	80016a8 <HAL_GetTick>
 80025ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff f873 	bl	80016a8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e2a7      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d0:	4b73      	ldr	r3, [pc, #460]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	496d      	ldr	r1, [pc, #436]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e018      	b.n	8002624 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b6b      	ldr	r3, [pc, #428]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6a      	ldr	r2, [pc, #424]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80025f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7ff f853 	bl	80016a8 <HAL_GetTick>
 8002602:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7ff f84f 	bl	80016a8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e283      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002618:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d07f      	beq.n	8002730 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05f      	beq.n	80026f8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002638:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	429a      	cmp	r2, r3
 800264c:	d037      	beq.n	80026be <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e25c      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002670:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	4a4a      	ldr	r2, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002680:	f7ff f812 	bl	80016a8 <HAL_GetTick>
 8002684:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7ff f80e 	bl	80016a8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b11      	cmp	r3, #17
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e242      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ef      	bne.n	8002688 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80026a8:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80026aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	493a      	ldr	r1, [pc, #232]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c4:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ce:	f7fe ffeb 	bl	80016a8 <HAL_GetTick>
 80026d2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe ffe7 	bl	80016a8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e21b      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e8:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80026ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ef      	beq.n	80026d6 <HAL_RCC_OscConfig+0x476>
 80026f6:	e01b      	b.n	8002730 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fe:	4a28      	ldr	r2, [pc, #160]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe ffce 	bl	80016a8 <HAL_GetTick>
 800270c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe ffca 	bl	80016a8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b11      	cmp	r3, #17
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1fe      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002722:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ef      	bne.n	8002710 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80c1 	beq.w	80028c0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10e      	bne.n	800276e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	; 0x58
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_RCC_OscConfig+0x540>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_RCC_OscConfig+0x544>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_OscConfig+0x544>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <HAL_RCC_OscConfig+0x544>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe ff8f 	bl	80016a8 <HAL_GetTick>
 800278a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278c:	e00c      	b.n	80027a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe ff8b 	bl	80016a8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d905      	bls.n	80027a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1bf      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a8:	4bb1      	ldr	r3, [pc, #708]	; (8002a70 <HAL_RCC_OscConfig+0x810>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ec      	beq.n	800278e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02c      	beq.n	800281a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80027c0:	4bac      	ldr	r3, [pc, #688]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	49a8      	ldr	r1, [pc, #672]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027e6:	4ba3      	ldr	r3, [pc, #652]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	4aa1      	ldr	r2, [pc, #644]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027f6:	4b9f      	ldr	r3, [pc, #636]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	4a9d      	ldr	r2, [pc, #628]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002806:	e018      	b.n	800283a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002808:	4b9a      	ldr	r3, [pc, #616]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	4a99      	ldr	r2, [pc, #612]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002818:	e00f      	b.n	800283a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800281a:	4b96      	ldr	r3, [pc, #600]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	4a94      	ldr	r2, [pc, #592]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800282a:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	4a90      	ldr	r2, [pc, #576]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002832:	f023 0304 	bic.w	r3, r3, #4
 8002836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7fe ff31 	bl	80016a8 <HAL_GetTick>
 8002846:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe ff2d 	bl	80016a8 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e15f      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002860:	4b84      	ldr	r3, [pc, #528]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0ed      	beq.n	800284a <HAL_RCC_OscConfig+0x5ea>
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe ff1a 	bl	80016a8 <HAL_GetTick>
 8002874:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe ff16 	bl	80016a8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e148      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800288e:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ed      	bne.n	8002878 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a74      	ldr	r2, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80028a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	4a6e      	ldr	r2, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03c      	beq.n	8002946 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d4:	4b67      	ldr	r3, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80028d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028da:	4a66      	ldr	r2, [pc, #408]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe fee0 	bl	80016a8 <HAL_GetTick>
 80028e8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ec:	f7fe fedc 	bl	80016a8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e110      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x68c>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800290e:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002914:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fec3 	bl	80016a8 <HAL_GetTick>
 8002922:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002926:	f7fe febf 	bl	80016a8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0f3      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002938:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 800293a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80e7 	beq.w	8002b1e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	2b02      	cmp	r3, #2
 8002956:	f040 80b7 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800295a:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	429a      	cmp	r2, r3
 800296c:	d124      	bne.n	80029b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	3b01      	subs	r3, #1
 800297a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d11b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d113      	bne.n	80029b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d109      	bne.n	80029b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	3b01      	subs	r3, #1
 80029b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d061      	beq.n	8002a7c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d056      	beq.n	8002a6c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80029c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ca:	f7fe fe6d 	bl	80016a8 <HAL_GetTick>
 80029ce:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7fe fe69 	bl	80016a8 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e09d      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_OscConfig+0x818>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a0a:	0212      	lsls	r2, r2, #8
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a12:	0852      	lsrs	r2, r2, #1
 8002a14:	3a01      	subs	r2, #1
 8002a16:	0552      	lsls	r2, r2, #21
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a1e:	0852      	lsrs	r2, r2, #1
 8002a20:	3a01      	subs	r2, #1
 8002a22:	0652      	lsls	r2, r2, #25
 8002a24:	430a      	orrs	r2, r1
 8002a26:	4913      	ldr	r1, [pc, #76]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a44:	f7fe fe30 	bl	80016a8 <HAL_GetTick>
 8002a48:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fe2c 	bl	80016a8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e060      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_OscConfig+0x814>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6a:	e058      	b.n	8002b1e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e057      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
 8002a70:	40007000 	.word	0x40007000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d14a      	bne.n	8002b1e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aa0:	f7fe fe02 	bl	80016a8 <HAL_GetTick>
 8002aa4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fdfe 	bl	80016a8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e032      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x848>
 8002ac6:	e02a      	b.n	8002b1e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d025      	beq.n	8002b1a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002ae0:	f023 0303 	bic.w	r3, r3, #3
 8002ae4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002aec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002af0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fdd9 	bl	80016a8 <HAL_GetTick>
 8002af6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe fdd5 	bl	80016a8 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e009      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x8c8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x89a>
 8002b18:	e001      	b.n	8002b1e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0c8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d910      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0207 	bic.w	r2, r3, #7
 8002b56:	4961      	ldr	r1, [pc, #388]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b5f      	ldr	r3, [pc, #380]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0b0      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d04c      	beq.n	8002c16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b84:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d121      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e09e      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d115      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e092      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e086      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e07e      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bd4:	4b42      	ldr	r3, [pc, #264]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 0203 	bic.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	493f      	ldr	r1, [pc, #252]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be6:	f7fe fd5f 	bl	80016a8 <HAL_GetTick>
 8002bea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bee:	f7fe fd5b 	bl	80016a8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e066      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 020c 	and.w	r2, r3, #12
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d1eb      	bne.n	8002bee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c22:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	492c      	ldr	r1, [pc, #176]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d210      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4924      	ldr	r1, [pc, #144]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e036      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4918      	ldr	r1, [pc, #96]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4910      	ldr	r1, [pc, #64]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ca2:	f000 f825 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	fa21 f303 	lsr.w	r3, r1, r3
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fca2 	bl	8001610 <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080052ec 	.word	0x080052ec
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d08:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x34>
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d121      	bne.n	8002d62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d11e      	bne.n	8002d62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d24:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d30:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e005      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d4c:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	e004      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d133      	bne.n	8002de6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0xaa>
 8002d92:	e005      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d96:	617b      	str	r3, [r7, #20]
      break;
 8002d98:	e005      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9c:	617b      	str	r3, [r7, #20]
      break;
 8002d9e:	e002      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	617b      	str	r3, [r7, #20]
      break;
 8002da4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	3301      	adds	r3, #1
 8002db2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	fb02 f203 	mul.w	r2, r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0e5b      	lsrs	r3, r3, #25
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002de6:	69bb      	ldr	r3, [r7, #24]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3724      	adds	r7, #36	; 0x24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08005304 	.word	0x08005304
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	080052fc 	.word	0x080052fc

08002e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e4c:	f7ff ffda 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e50:	4601      	mov	r1, r0
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0adb      	lsrs	r3, r3, #11
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	080052fc 	.word	0x080052fc

08002e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e8c:	f7ff f984 	bl	8002198 <HAL_PWREx_GetVoltageRange>
 8002e90:	6178      	str	r0, [r7, #20]
 8002e92:	e014      	b.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002eac:	f7ff f974 	bl	8002198 <HAL_PWREx_GetVoltageRange>
 8002eb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d10b      	bne.n	8002ede <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d919      	bls.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2ba0      	cmp	r3, #160	; 0xa0
 8002ed0:	d902      	bls.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e013      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed8:	2301      	movs	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e010      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d902      	bls.n	8002eea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e00a      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d102      	bne.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e004      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b70      	cmp	r3, #112	; 0x70
 8002efa:	d101      	bne.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 0207 	bic.w	r2, r3, #7
 8002f08:	4909      	ldr	r1, [pc, #36]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40022000 	.word	0x40022000

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 809e 	beq.w	800308e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f56:	4b46      	ldr	r3, [pc, #280]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4a3f      	ldr	r2, [pc, #252]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	; 0x58
 8002f78:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f84:	2301      	movs	r3, #1
 8002f86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f88:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a39      	ldr	r2, [pc, #228]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f94:	f7fe fb88 	bl	80016a8 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe fb84 	bl	80016a8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	74fb      	strb	r3, [r7, #19]
        break;
 8002fae:	e005      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d15a      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01e      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d019      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800300a:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fb44 	bl	80016a8 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003022:	e00b      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe fb40 	bl	80016a8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d902      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	74fb      	strb	r3, [r7, #19]
            break;
 800303a:	e006      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ec      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4904      	ldr	r1, [pc, #16]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003066:	e009      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	74bb      	strb	r3, [r7, #18]
 800306c:	e006      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307c:	7c7b      	ldrb	r3, [r7, #17]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b6e      	ldr	r3, [pc, #440]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	4a6d      	ldr	r2, [pc, #436]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800309a:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f023 0203 	bic.w	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4964      	ldr	r1, [pc, #400]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030bc:	4b5f      	ldr	r3, [pc, #380]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f023 020c 	bic.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	495c      	ldr	r1, [pc, #368]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030de:	4b57      	ldr	r3, [pc, #348]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4953      	ldr	r1, [pc, #332]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	494b      	ldr	r1, [pc, #300]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003122:	4b46      	ldr	r3, [pc, #280]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4942      	ldr	r1, [pc, #264]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	493a      	ldr	r1, [pc, #232]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003166:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	4931      	ldr	r1, [pc, #196]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003188:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	4929      	ldr	r1, [pc, #164]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4920      	ldr	r1, [pc, #128]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	4918      	ldr	r1, [pc, #96]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ea:	d105      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a12      	ldr	r2, [pc, #72]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	490a      	ldr	r1, [pc, #40]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003222:	d105      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800322a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800322e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003230:	7cbb      	ldrb	r3, [r7, #18]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e01d      	b.n	80032ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd ffde 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 fa14 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d122      	bne.n	8003312 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d11b      	bne.n	8003312 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0202 	mvn.w	r2, #2
 80032e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f9c8 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 80032fe:	e005      	b.n	800330c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f9ba 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f9cb 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b04      	cmp	r3, #4
 800331e:	d122      	bne.n	8003366 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d11b      	bne.n	8003366 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f06f 0204 	mvn.w	r2, #4
 8003336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f99e 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 8003352:	e005      	b.n	8003360 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f990 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f9a1 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b08      	cmp	r3, #8
 8003372:	d122      	bne.n	80033ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	d11b      	bne.n	80033ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0208 	mvn.w	r2, #8
 800338a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f974 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 80033a6:	e005      	b.n	80033b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f966 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f977 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d122      	bne.n	800340e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d11b      	bne.n	800340e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f06f 0210 	mvn.w	r2, #16
 80033de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2208      	movs	r2, #8
 80033e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f94a 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 80033fa:	e005      	b.n	8003408 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f93c 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f94d 	bl	80036a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10e      	bne.n	800343a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0201 	mvn.w	r2, #1
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f916 	bl	8003666 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003444:	2b80      	cmp	r3, #128	; 0x80
 8003446:	d10e      	bne.n	8003466 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d107      	bne.n	8003466 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800345e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 faa1 	bl	80039a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003474:	d10e      	bne.n	8003494 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	d107      	bne.n	8003494 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa94 	bl	80039bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8fb 	bl	80036b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d107      	bne.n	80034ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0220 	mvn.w	r2, #32
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa54 	bl	8003994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIM_ConfigClockSource+0x18>
 8003508:	2302      	movs	r3, #2
 800350a:	e0a8      	b.n	800365e <HAL_TIM_ConfigClockSource+0x16a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800352e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003536:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d067      	beq.n	8003618 <HAL_TIM_ConfigClockSource+0x124>
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d80b      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x70>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d073      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0x144>
 8003550:	2b10      	cmp	r3, #16
 8003552:	d802      	bhi.n	800355a <HAL_TIM_ConfigClockSource+0x66>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d06f      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003558:	e078      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800355a:	2b20      	cmp	r3, #32
 800355c:	d06c      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0x144>
 800355e:	2b30      	cmp	r3, #48	; 0x30
 8003560:	d06a      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003562:	e073      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003564:	2b70      	cmp	r3, #112	; 0x70
 8003566:	d00d      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x90>
 8003568:	2b70      	cmp	r3, #112	; 0x70
 800356a:	d804      	bhi.n	8003576 <HAL_TIM_ConfigClockSource+0x82>
 800356c:	2b50      	cmp	r3, #80	; 0x50
 800356e:	d033      	beq.n	80035d8 <HAL_TIM_ConfigClockSource+0xe4>
 8003570:	2b60      	cmp	r3, #96	; 0x60
 8003572:	d041      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003574:	e06a      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d066      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x156>
 800357c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003580:	d017      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003582:	e063      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6899      	ldr	r1, [r3, #8]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f000 f978 	bl	8003888 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	609a      	str	r2, [r3, #8]
      break;
 80035b0:	e04c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6899      	ldr	r1, [r3, #8]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f000 f961 	bl	8003888 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d4:	609a      	str	r2, [r3, #8]
      break;
 80035d6:	e039      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	461a      	mov	r2, r3
 80035e6:	f000 f8d5 	bl	8003794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2150      	movs	r1, #80	; 0x50
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f92e 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80035f6:	e029      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	461a      	mov	r2, r3
 8003606:	f000 f8f4 	bl	80037f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2160      	movs	r1, #96	; 0x60
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f91e 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003616:	e019      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	461a      	mov	r2, r3
 8003626:	f000 f8b5 	bl	8003794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f90e 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003636:	e009      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f000 f905 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003648:	e000      	b.n	800364c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800364a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <TIM_Base_SetConfig+0xbc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_Base_SetConfig+0x20>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d108      	bne.n	80036fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a21      	ldr	r2, [pc, #132]	; (8003788 <TIM_Base_SetConfig+0xbc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0x52>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0x52>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1e      	ldr	r2, [pc, #120]	; (800378c <TIM_Base_SetConfig+0xc0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0x52>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <TIM_Base_SetConfig+0xc4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <TIM_Base_SetConfig+0xbc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0xa0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0b      	ldr	r2, [pc, #44]	; (800378c <TIM_Base_SetConfig+0xc0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0xa0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <TIM_Base_SetConfig+0xc4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	615a      	str	r2, [r3, #20]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400

08003794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0201 	bic.w	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f023 030a 	bic.w	r3, r3, #10
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0210 	bic.w	r2, r3, #16
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800381c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800382e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	f043 0307 	orr.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	021a      	lsls	r2, r3, #8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038dc:	2302      	movs	r3, #2
 80038de:	e04f      	b.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003910:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d004      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10c      	bne.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40014000 	.word	0x40014000

08003994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e040      	b.n	8003a64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fc4c 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	; 0x24
 80039fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8c0 	bl	8003b94 <UART_SetConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e022      	b.n	8003a64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fbc8 	bl	80041bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fc4f 	bl	8004300 <UART_CheckIdleState>
 8003a62:	4603      	mov	r3, r0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f040 8081 	bne.w	8003b88 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_UART_Transmit+0x26>
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e079      	b.n	8003b8a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Transmit+0x38>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e072      	b.n	8003b8a <HAL_UART_Transmit+0x11e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2221      	movs	r2, #33	; 0x21
 8003ab6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fd fdf6 	bl	80016a8 <HAL_GetTick>
 8003abc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	d108      	bne.n	8003aea <HAL_UART_Transmit+0x7e>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e003      	b.n	8003af2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003afa:	e02d      	b.n	8003b58 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2200      	movs	r2, #0
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fc3f 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e039      	b.n	8003b8a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	3302      	adds	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e008      	b.n	8003b46 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b292      	uxth	r2, r2
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1cb      	bne.n	8003afc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2140      	movs	r1, #64	; 0x40
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fc0b 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e005      	b.n	8003b8a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003b98:	b08a      	sub	sp, #40	; 0x28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4bbc      	ldr	r3, [pc, #752]	; (8003ebc <UART_SetConfig+0x328>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4ab2      	ldr	r2, [pc, #712]	; (8003ec0 <UART_SetConfig+0x32c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	4313      	orrs	r3, r2
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	430a      	orrs	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4aa9      	ldr	r2, [pc, #676]	; (8003ec4 <UART_SetConfig+0x330>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d126      	bne.n	8003c72 <UART_SetConfig+0xde>
 8003c24:	4ba8      	ldr	r3, [pc, #672]	; (8003ec8 <UART_SetConfig+0x334>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d81a      	bhi.n	8003c68 <UART_SetConfig+0xd4>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <UART_SetConfig+0xa4>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c61 	.word	0x08003c61
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4e:	e0ab      	b.n	8003da8 <UART_SetConfig+0x214>
 8003c50:	2302      	movs	r3, #2
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c56:	e0a7      	b.n	8003da8 <UART_SetConfig+0x214>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5e:	e0a3      	b.n	8003da8 <UART_SetConfig+0x214>
 8003c60:	2308      	movs	r3, #8
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e09f      	b.n	8003da8 <UART_SetConfig+0x214>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	bf00      	nop
 8003c70:	e09a      	b.n	8003da8 <UART_SetConfig+0x214>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a95      	ldr	r2, [pc, #596]	; (8003ecc <UART_SetConfig+0x338>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d138      	bne.n	8003cee <UART_SetConfig+0x15a>
 8003c7c:	4b92      	ldr	r3, [pc, #584]	; (8003ec8 <UART_SetConfig+0x334>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d82c      	bhi.n	8003ce4 <UART_SetConfig+0x150>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <UART_SetConfig+0xfc>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08003ce5 	.word	0x08003ce5
 8003c98:	08003ce5 	.word	0x08003ce5
 8003c9c:	08003ce5 	.word	0x08003ce5
 8003ca0:	08003cd5 	.word	0x08003cd5
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ccd 	.word	0x08003ccd
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003ce5 	.word	0x08003ce5
 8003cc0:	08003cdd 	.word	0x08003cdd
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cca:	e06d      	b.n	8003da8 <UART_SetConfig+0x214>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd2:	e069      	b.n	8003da8 <UART_SetConfig+0x214>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cda:	e065      	b.n	8003da8 <UART_SetConfig+0x214>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce2:	e061      	b.n	8003da8 <UART_SetConfig+0x214>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	bf00      	nop
 8003cec:	e05c      	b.n	8003da8 <UART_SetConfig+0x214>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <UART_SetConfig+0x33c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d125      	bne.n	8003d44 <UART_SetConfig+0x1b0>
 8003cf8:	4b73      	ldr	r3, [pc, #460]	; (8003ec8 <UART_SetConfig+0x334>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d011      	beq.n	8003d2a <UART_SetConfig+0x196>
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d802      	bhi.n	8003d10 <UART_SetConfig+0x17c>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <UART_SetConfig+0x186>
 8003d0e:	e014      	b.n	8003d3a <UART_SetConfig+0x1a6>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d006      	beq.n	8003d22 <UART_SetConfig+0x18e>
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d00c      	beq.n	8003d32 <UART_SetConfig+0x19e>
 8003d18:	e00f      	b.n	8003d3a <UART_SetConfig+0x1a6>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d20:	e042      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d22:	2302      	movs	r3, #2
 8003d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d28:	e03e      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d30:	e03a      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d32:	2308      	movs	r3, #8
 8003d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d38:	e036      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d40:	bf00      	nop
 8003d42:	e031      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <UART_SetConfig+0x32c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d129      	bne.n	8003da2 <UART_SetConfig+0x20e>
 8003d4e:	4b5e      	ldr	r3, [pc, #376]	; (8003ec8 <UART_SetConfig+0x334>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d014      	beq.n	8003d88 <UART_SetConfig+0x1f4>
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d802      	bhi.n	8003d6a <UART_SetConfig+0x1d6>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <UART_SetConfig+0x1e4>
 8003d68:	e016      	b.n	8003d98 <UART_SetConfig+0x204>
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6e:	d007      	beq.n	8003d80 <UART_SetConfig+0x1ec>
 8003d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d74:	d00c      	beq.n	8003d90 <UART_SetConfig+0x1fc>
 8003d76:	e00f      	b.n	8003d98 <UART_SetConfig+0x204>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e013      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d80:	2302      	movs	r3, #2
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e00f      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e00b      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d90:	2308      	movs	r3, #8
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e007      	b.n	8003da8 <UART_SetConfig+0x214>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	bf00      	nop
 8003da0:	e002      	b.n	8003da8 <UART_SetConfig+0x214>
 8003da2:	2310      	movs	r3, #16
 8003da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a44      	ldr	r2, [pc, #272]	; (8003ec0 <UART_SetConfig+0x32c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	f040 80fb 	bne.w	8003faa <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d824      	bhi.n	8003e06 <UART_SetConfig+0x272>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0x230>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003e07 	.word	0x08003e07
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003df7 	.word	0x08003df7
 8003dd8:	08003e07 	.word	0x08003e07
 8003ddc:	08003e07 	.word	0x08003e07
 8003de0:	08003e07 	.word	0x08003e07
 8003de4:	08003dff 	.word	0x08003dff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7ff f818 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8003dec:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003dee:	e00d      	b.n	8003e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003df0:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <UART_SetConfig+0x340>)
 8003df2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003df4:	e00a      	b.n	8003e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003df6:	f7fe ff7b 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8003dfa:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003dfc:	e006      	b.n	8003e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e04:	e002      	b.n	8003e0c <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	76fb      	strb	r3, [r7, #27]
        break;
 8003e0a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 81c8 	beq.w	80041a4 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d305      	bcc.n	8003e30 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d902      	bls.n	8003e36 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	76fb      	strb	r3, [r7, #27]
 8003e34:	e1b6      	b.n	80041a4 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8003e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	f200 80a2 	bhi.w	8003f84 <UART_SetConfig+0x3f0>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x2b4>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003f85 	.word	0x08003f85
 8003e50:	08003ed9 	.word	0x08003ed9
 8003e54:	08003f85 	.word	0x08003f85
 8003e58:	08003f0d 	.word	0x08003f0d
 8003e5c:	08003f85 	.word	0x08003f85
 8003e60:	08003f85 	.word	0x08003f85
 8003e64:	08003f85 	.word	0x08003f85
 8003e68:	08003f5b 	.word	0x08003f5b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe ffd6 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8003e70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4619      	mov	r1, r3
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	f04f 0400 	mov.w	r4, #0
 8003e82:	0214      	lsls	r4, r2, #8
 8003e84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003e88:	020b      	lsls	r3, r1, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6852      	ldr	r2, [r2, #4]
 8003e8e:	0852      	lsrs	r2, r2, #1
 8003e90:	4611      	mov	r1, r2
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	eb13 0b01 	adds.w	fp, r3, r1
 8003e9a:	eb44 0c02 	adc.w	ip, r4, r2
 8003e9e:	4658      	mov	r0, fp
 8003ea0:	4661      	mov	r1, ip
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4623      	mov	r3, r4
 8003eae:	f7fc f9df 	bl	8000270 <__aeabi_uldivmod>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003eb8:	e067      	b.n	8003f8a <UART_SetConfig+0x3f6>
 8003eba:	bf00      	nop
 8003ebc:	efff69f3 	.word	0xefff69f3
 8003ec0:	40008000 	.word	0x40008000
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40004400 	.word	0x40004400
 8003ed0:	40004800 	.word	0x40004800
 8003ed4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	f04f 0400 	mov.w	r4, #0
 8003ee2:	49ae      	ldr	r1, [pc, #696]	; (800419c <UART_SetConfig+0x608>)
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	eb13 0b01 	adds.w	fp, r3, r1
 8003eec:	eb44 0c02 	adc.w	ip, r4, r2
 8003ef0:	4658      	mov	r0, fp
 8003ef2:	4661      	mov	r1, ip
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f04f 0400 	mov.w	r4, #0
 8003efc:	461a      	mov	r2, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	f7fc f9b6 	bl	8000270 <__aeabi_uldivmod>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003f0a:	e03e      	b.n	8003f8a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003f0c:	f7fe fef0 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8003f10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4619      	mov	r1, r3
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	f04f 0400 	mov.w	r4, #0
 8003f22:	0214      	lsls	r4, r2, #8
 8003f24:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003f28:	020b      	lsls	r3, r1, #8
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6852      	ldr	r2, [r2, #4]
 8003f2e:	0852      	lsrs	r2, r2, #1
 8003f30:	4611      	mov	r1, r2
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	eb13 0b01 	adds.w	fp, r3, r1
 8003f3a:	eb44 0c02 	adc.w	ip, r4, r2
 8003f3e:	4658      	mov	r0, fp
 8003f40:	4661      	mov	r1, ip
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	f7fc f98f 	bl	8000270 <__aeabi_uldivmod>
 8003f52:	4603      	mov	r3, r0
 8003f54:	460c      	mov	r4, r1
 8003f56:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003f58:	e017      	b.n	8003f8a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003f68:	f144 0100 	adc.w	r1, r4, #0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	461a      	mov	r2, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	f7fc f97a 	bl	8000270 <__aeabi_uldivmod>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003f82:	e002      	b.n	8003f8a <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	76fb      	strb	r3, [r7, #27]
            break;
 8003f88:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f90:	d308      	bcc.n	8003fa4 <UART_SetConfig+0x410>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f98:	d204      	bcs.n	8003fa4 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	e0ff      	b.n	80041a4 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	76fb      	strb	r3, [r7, #27]
 8003fa8:	e0fc      	b.n	80041a4 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb2:	f040 8083 	bne.w	80040bc <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8003fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d85e      	bhi.n	800407c <UART_SetConfig+0x4e8>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x430>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004029 	.word	0x08004029
 8003fd0:	0800407d 	.word	0x0800407d
 8003fd4:	08004045 	.word	0x08004045
 8003fd8:	0800407d 	.word	0x0800407d
 8003fdc:	0800407d 	.word	0x0800407d
 8003fe0:	0800407d 	.word	0x0800407d
 8003fe4:	08004065 	.word	0x08004065
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe ff18 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8003fec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	005a      	lsls	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	b29b      	uxth	r3, r3
 8004004:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004006:	e03c      	b.n	8004082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004008:	f7fe ff1e 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 800400c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	b29b      	uxth	r3, r3
 8004024:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004026:	e02c      	b.n	8004082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004032:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6852      	ldr	r2, [r2, #4]
 800403a:	fbb3 f3f2 	udiv	r3, r3, r2
 800403e:	b29b      	uxth	r3, r3
 8004040:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004042:	e01e      	b.n	8004082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004044:	f7fe fe54 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8004048:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	005a      	lsls	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004062:	e00e      	b.n	8004082 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800407a:	e002      	b.n	8004082 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	76fb      	strb	r3, [r7, #27]
        break;
 8004080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	d916      	bls.n	80040b6 <UART_SetConfig+0x522>
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408e:	d212      	bcs.n	80040b6 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f023 030f 	bic.w	r3, r3, #15
 8004098:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	89fa      	ldrh	r2, [r7, #14]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e076      	b.n	80041a4 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	76fb      	strb	r3, [r7, #27]
 80040ba:	e073      	b.n	80041a4 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80040bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d85c      	bhi.n	800417e <UART_SetConfig+0x5ea>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <UART_SetConfig+0x538>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	0800410f 	.word	0x0800410f
 80040d4:	0800412d 	.word	0x0800412d
 80040d8:	0800417f 	.word	0x0800417f
 80040dc:	08004149 	.word	0x08004149
 80040e0:	0800417f 	.word	0x0800417f
 80040e4:	0800417f 	.word	0x0800417f
 80040e8:	0800417f 	.word	0x0800417f
 80040ec:	08004167 	.word	0x08004167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7fe fe94 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 80040f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	085a      	lsrs	r2, r3, #1
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	b29b      	uxth	r3, r3
 800410a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800410c:	e03a      	b.n	8004184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800410e:	f7fe fe9b 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 8004112:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	085a      	lsrs	r2, r3, #1
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	b29b      	uxth	r3, r3
 8004128:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800412a:	e02b      	b.n	8004184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004136:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6852      	ldr	r2, [r2, #4]
 800413e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004146:	e01d      	b.n	8004184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004148:	f7fe fdd2 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 800414c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	085a      	lsrs	r2, r3, #1
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	441a      	add	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	b29b      	uxth	r3, r3
 8004162:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004164:	e00e      	b.n	8004184 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	b29b      	uxth	r3, r3
 800417a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800417c:	e002      	b.n	8004184 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	76fb      	strb	r3, [r7, #27]
        break;
 8004182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	d90a      	bls.n	80041a0 <UART_SetConfig+0x60c>
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d206      	bcs.n	80041a0 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e003      	b.n	80041a4 <UART_SetConfig+0x610>
 800419c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80041b0:	7efb      	ldrb	r3, [r7, #27]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3728      	adds	r7, #40	; 0x28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080041bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01a      	beq.n	80042d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ba:	d10a      	bne.n	80042d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
  }
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af02      	add	r7, sp, #8
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800430e:	f7fd f9cb 	bl	80016a8 <HAL_GetTick>
 8004312:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b08      	cmp	r3, #8
 8004320:	d10e      	bne.n	8004340 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004322:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f82a 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e020      	b.n	8004382 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d10e      	bne.n	800436c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f814 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e00a      	b.n	8004382 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	603b      	str	r3, [r7, #0]
 8004396:	4613      	mov	r3, r2
 8004398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	e05d      	b.n	8004458 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a2:	d059      	beq.n	8004458 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a4:	f7fd f980 	bl	80016a8 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <UART_WaitOnFlagUntilTimeout+0x30>
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11b      	bne.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e042      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02b      	beq.n	8004458 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440e:	d123      	bne.n	8004458 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004418:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004428:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e00f      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	429a      	cmp	r2, r3
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d092      	beq.n	800439c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <__errno>:
 8004480:	4b01      	ldr	r3, [pc, #4]	; (8004488 <__errno+0x8>)
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	2000000c 	.word	0x2000000c

0800448c <__libc_init_array>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4e0d      	ldr	r6, [pc, #52]	; (80044c4 <__libc_init_array+0x38>)
 8004490:	4c0d      	ldr	r4, [pc, #52]	; (80044c8 <__libc_init_array+0x3c>)
 8004492:	1ba4      	subs	r4, r4, r6
 8004494:	10a4      	asrs	r4, r4, #2
 8004496:	2500      	movs	r5, #0
 8004498:	42a5      	cmp	r5, r4
 800449a:	d109      	bne.n	80044b0 <__libc_init_array+0x24>
 800449c:	4e0b      	ldr	r6, [pc, #44]	; (80044cc <__libc_init_array+0x40>)
 800449e:	4c0c      	ldr	r4, [pc, #48]	; (80044d0 <__libc_init_array+0x44>)
 80044a0:	f000 ff04 	bl	80052ac <_init>
 80044a4:	1ba4      	subs	r4, r4, r6
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	2500      	movs	r5, #0
 80044aa:	42a5      	cmp	r5, r4
 80044ac:	d105      	bne.n	80044ba <__libc_init_array+0x2e>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044b4:	4798      	blx	r3
 80044b6:	3501      	adds	r5, #1
 80044b8:	e7ee      	b.n	8004498 <__libc_init_array+0xc>
 80044ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044be:	4798      	blx	r3
 80044c0:	3501      	adds	r5, #1
 80044c2:	e7f2      	b.n	80044aa <__libc_init_array+0x1e>
 80044c4:	080053d4 	.word	0x080053d4
 80044c8:	080053d4 	.word	0x080053d4
 80044cc:	080053d4 	.word	0x080053d4
 80044d0:	080053d8 	.word	0x080053d8

080044d4 <memset>:
 80044d4:	4402      	add	r2, r0
 80044d6:	4603      	mov	r3, r0
 80044d8:	4293      	cmp	r3, r2
 80044da:	d100      	bne.n	80044de <memset+0xa>
 80044dc:	4770      	bx	lr
 80044de:	f803 1b01 	strb.w	r1, [r3], #1
 80044e2:	e7f9      	b.n	80044d8 <memset+0x4>

080044e4 <iprintf>:
 80044e4:	b40f      	push	{r0, r1, r2, r3}
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <iprintf+0x2c>)
 80044e8:	b513      	push	{r0, r1, r4, lr}
 80044ea:	681c      	ldr	r4, [r3, #0]
 80044ec:	b124      	cbz	r4, 80044f8 <iprintf+0x14>
 80044ee:	69a3      	ldr	r3, [r4, #24]
 80044f0:	b913      	cbnz	r3, 80044f8 <iprintf+0x14>
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 f84e 	bl	8004594 <__sinit>
 80044f8:	ab05      	add	r3, sp, #20
 80044fa:	9a04      	ldr	r2, [sp, #16]
 80044fc:	68a1      	ldr	r1, [r4, #8]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	4620      	mov	r0, r4
 8004502:	f000 f955 	bl	80047b0 <_vfiprintf_r>
 8004506:	b002      	add	sp, #8
 8004508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800450c:	b004      	add	sp, #16
 800450e:	4770      	bx	lr
 8004510:	2000000c 	.word	0x2000000c

08004514 <std>:
 8004514:	2300      	movs	r3, #0
 8004516:	b510      	push	{r4, lr}
 8004518:	4604      	mov	r4, r0
 800451a:	e9c0 3300 	strd	r3, r3, [r0]
 800451e:	6083      	str	r3, [r0, #8]
 8004520:	8181      	strh	r1, [r0, #12]
 8004522:	6643      	str	r3, [r0, #100]	; 0x64
 8004524:	81c2      	strh	r2, [r0, #14]
 8004526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800452a:	6183      	str	r3, [r0, #24]
 800452c:	4619      	mov	r1, r3
 800452e:	2208      	movs	r2, #8
 8004530:	305c      	adds	r0, #92	; 0x5c
 8004532:	f7ff ffcf 	bl	80044d4 <memset>
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <std+0x38>)
 8004538:	6263      	str	r3, [r4, #36]	; 0x24
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <std+0x3c>)
 800453c:	62a3      	str	r3, [r4, #40]	; 0x28
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <std+0x40>)
 8004540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <std+0x44>)
 8004544:	6224      	str	r4, [r4, #32]
 8004546:	6323      	str	r3, [r4, #48]	; 0x30
 8004548:	bd10      	pop	{r4, pc}
 800454a:	bf00      	nop
 800454c:	08004d0d 	.word	0x08004d0d
 8004550:	08004d2f 	.word	0x08004d2f
 8004554:	08004d67 	.word	0x08004d67
 8004558:	08004d8b 	.word	0x08004d8b

0800455c <_cleanup_r>:
 800455c:	4901      	ldr	r1, [pc, #4]	; (8004564 <_cleanup_r+0x8>)
 800455e:	f000 b885 	b.w	800466c <_fwalk_reent>
 8004562:	bf00      	nop
 8004564:	08005065 	.word	0x08005065

08004568 <__sfmoreglue>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	1e4a      	subs	r2, r1, #1
 800456c:	2568      	movs	r5, #104	; 0x68
 800456e:	4355      	muls	r5, r2
 8004570:	460e      	mov	r6, r1
 8004572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004576:	f000 f897 	bl	80046a8 <_malloc_r>
 800457a:	4604      	mov	r4, r0
 800457c:	b140      	cbz	r0, 8004590 <__sfmoreglue+0x28>
 800457e:	2100      	movs	r1, #0
 8004580:	e9c0 1600 	strd	r1, r6, [r0]
 8004584:	300c      	adds	r0, #12
 8004586:	60a0      	str	r0, [r4, #8]
 8004588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800458c:	f7ff ffa2 	bl	80044d4 <memset>
 8004590:	4620      	mov	r0, r4
 8004592:	bd70      	pop	{r4, r5, r6, pc}

08004594 <__sinit>:
 8004594:	6983      	ldr	r3, [r0, #24]
 8004596:	b510      	push	{r4, lr}
 8004598:	4604      	mov	r4, r0
 800459a:	bb33      	cbnz	r3, 80045ea <__sinit+0x56>
 800459c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80045a0:	6503      	str	r3, [r0, #80]	; 0x50
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <__sinit+0x58>)
 80045a4:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <__sinit+0x5c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6282      	str	r2, [r0, #40]	; 0x28
 80045aa:	4298      	cmp	r0, r3
 80045ac:	bf04      	itt	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	6183      	streq	r3, [r0, #24]
 80045b2:	f000 f81f 	bl	80045f4 <__sfp>
 80045b6:	6060      	str	r0, [r4, #4]
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 f81b 	bl	80045f4 <__sfp>
 80045be:	60a0      	str	r0, [r4, #8]
 80045c0:	4620      	mov	r0, r4
 80045c2:	f000 f817 	bl	80045f4 <__sfp>
 80045c6:	2200      	movs	r2, #0
 80045c8:	60e0      	str	r0, [r4, #12]
 80045ca:	2104      	movs	r1, #4
 80045cc:	6860      	ldr	r0, [r4, #4]
 80045ce:	f7ff ffa1 	bl	8004514 <std>
 80045d2:	2201      	movs	r2, #1
 80045d4:	2109      	movs	r1, #9
 80045d6:	68a0      	ldr	r0, [r4, #8]
 80045d8:	f7ff ff9c 	bl	8004514 <std>
 80045dc:	2202      	movs	r2, #2
 80045de:	2112      	movs	r1, #18
 80045e0:	68e0      	ldr	r0, [r4, #12]
 80045e2:	f7ff ff97 	bl	8004514 <std>
 80045e6:	2301      	movs	r3, #1
 80045e8:	61a3      	str	r3, [r4, #24]
 80045ea:	bd10      	pop	{r4, pc}
 80045ec:	08005334 	.word	0x08005334
 80045f0:	0800455d 	.word	0x0800455d

080045f4 <__sfp>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <__sfp+0x70>)
 80045f8:	681e      	ldr	r6, [r3, #0]
 80045fa:	69b3      	ldr	r3, [r6, #24]
 80045fc:	4607      	mov	r7, r0
 80045fe:	b913      	cbnz	r3, 8004606 <__sfp+0x12>
 8004600:	4630      	mov	r0, r6
 8004602:	f7ff ffc7 	bl	8004594 <__sinit>
 8004606:	3648      	adds	r6, #72	; 0x48
 8004608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800460c:	3b01      	subs	r3, #1
 800460e:	d503      	bpl.n	8004618 <__sfp+0x24>
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	b133      	cbz	r3, 8004622 <__sfp+0x2e>
 8004614:	6836      	ldr	r6, [r6, #0]
 8004616:	e7f7      	b.n	8004608 <__sfp+0x14>
 8004618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800461c:	b16d      	cbz	r5, 800463a <__sfp+0x46>
 800461e:	3468      	adds	r4, #104	; 0x68
 8004620:	e7f4      	b.n	800460c <__sfp+0x18>
 8004622:	2104      	movs	r1, #4
 8004624:	4638      	mov	r0, r7
 8004626:	f7ff ff9f 	bl	8004568 <__sfmoreglue>
 800462a:	6030      	str	r0, [r6, #0]
 800462c:	2800      	cmp	r0, #0
 800462e:	d1f1      	bne.n	8004614 <__sfp+0x20>
 8004630:	230c      	movs	r3, #12
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4604      	mov	r4, r0
 8004636:	4620      	mov	r0, r4
 8004638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <__sfp+0x74>)
 800463c:	6665      	str	r5, [r4, #100]	; 0x64
 800463e:	e9c4 5500 	strd	r5, r5, [r4]
 8004642:	60a5      	str	r5, [r4, #8]
 8004644:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004648:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800464c:	2208      	movs	r2, #8
 800464e:	4629      	mov	r1, r5
 8004650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004654:	f7ff ff3e 	bl	80044d4 <memset>
 8004658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800465c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004660:	e7e9      	b.n	8004636 <__sfp+0x42>
 8004662:	bf00      	nop
 8004664:	08005334 	.word	0x08005334
 8004668:	ffff0001 	.word	0xffff0001

0800466c <_fwalk_reent>:
 800466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004670:	4680      	mov	r8, r0
 8004672:	4689      	mov	r9, r1
 8004674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004678:	2600      	movs	r6, #0
 800467a:	b914      	cbnz	r4, 8004682 <_fwalk_reent+0x16>
 800467c:	4630      	mov	r0, r6
 800467e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004682:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004686:	3f01      	subs	r7, #1
 8004688:	d501      	bpl.n	800468e <_fwalk_reent+0x22>
 800468a:	6824      	ldr	r4, [r4, #0]
 800468c:	e7f5      	b.n	800467a <_fwalk_reent+0xe>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d907      	bls.n	80046a4 <_fwalk_reent+0x38>
 8004694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004698:	3301      	adds	r3, #1
 800469a:	d003      	beq.n	80046a4 <_fwalk_reent+0x38>
 800469c:	4629      	mov	r1, r5
 800469e:	4640      	mov	r0, r8
 80046a0:	47c8      	blx	r9
 80046a2:	4306      	orrs	r6, r0
 80046a4:	3568      	adds	r5, #104	; 0x68
 80046a6:	e7ee      	b.n	8004686 <_fwalk_reent+0x1a>

080046a8 <_malloc_r>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	1ccd      	adds	r5, r1, #3
 80046ac:	f025 0503 	bic.w	r5, r5, #3
 80046b0:	3508      	adds	r5, #8
 80046b2:	2d0c      	cmp	r5, #12
 80046b4:	bf38      	it	cc
 80046b6:	250c      	movcc	r5, #12
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	4606      	mov	r6, r0
 80046bc:	db01      	blt.n	80046c2 <_malloc_r+0x1a>
 80046be:	42a9      	cmp	r1, r5
 80046c0:	d903      	bls.n	80046ca <_malloc_r+0x22>
 80046c2:	230c      	movs	r3, #12
 80046c4:	6033      	str	r3, [r6, #0]
 80046c6:	2000      	movs	r0, #0
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	f000 fd6b 	bl	80051a4 <__malloc_lock>
 80046ce:	4a21      	ldr	r2, [pc, #132]	; (8004754 <_malloc_r+0xac>)
 80046d0:	6814      	ldr	r4, [r2, #0]
 80046d2:	4621      	mov	r1, r4
 80046d4:	b991      	cbnz	r1, 80046fc <_malloc_r+0x54>
 80046d6:	4c20      	ldr	r4, [pc, #128]	; (8004758 <_malloc_r+0xb0>)
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	b91b      	cbnz	r3, 80046e4 <_malloc_r+0x3c>
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 fb05 	bl	8004cec <_sbrk_r>
 80046e2:	6020      	str	r0, [r4, #0]
 80046e4:	4629      	mov	r1, r5
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 fb00 	bl	8004cec <_sbrk_r>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d124      	bne.n	800473a <_malloc_r+0x92>
 80046f0:	230c      	movs	r3, #12
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 fd56 	bl	80051a6 <__malloc_unlock>
 80046fa:	e7e4      	b.n	80046c6 <_malloc_r+0x1e>
 80046fc:	680b      	ldr	r3, [r1, #0]
 80046fe:	1b5b      	subs	r3, r3, r5
 8004700:	d418      	bmi.n	8004734 <_malloc_r+0x8c>
 8004702:	2b0b      	cmp	r3, #11
 8004704:	d90f      	bls.n	8004726 <_malloc_r+0x7e>
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	50cd      	str	r5, [r1, r3]
 800470a:	18cc      	adds	r4, r1, r3
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fd4a 	bl	80051a6 <__malloc_unlock>
 8004712:	f104 000b 	add.w	r0, r4, #11
 8004716:	1d23      	adds	r3, r4, #4
 8004718:	f020 0007 	bic.w	r0, r0, #7
 800471c:	1ac3      	subs	r3, r0, r3
 800471e:	d0d3      	beq.n	80046c8 <_malloc_r+0x20>
 8004720:	425a      	negs	r2, r3
 8004722:	50e2      	str	r2, [r4, r3]
 8004724:	e7d0      	b.n	80046c8 <_malloc_r+0x20>
 8004726:	428c      	cmp	r4, r1
 8004728:	684b      	ldr	r3, [r1, #4]
 800472a:	bf16      	itet	ne
 800472c:	6063      	strne	r3, [r4, #4]
 800472e:	6013      	streq	r3, [r2, #0]
 8004730:	460c      	movne	r4, r1
 8004732:	e7eb      	b.n	800470c <_malloc_r+0x64>
 8004734:	460c      	mov	r4, r1
 8004736:	6849      	ldr	r1, [r1, #4]
 8004738:	e7cc      	b.n	80046d4 <_malloc_r+0x2c>
 800473a:	1cc4      	adds	r4, r0, #3
 800473c:	f024 0403 	bic.w	r4, r4, #3
 8004740:	42a0      	cmp	r0, r4
 8004742:	d005      	beq.n	8004750 <_malloc_r+0xa8>
 8004744:	1a21      	subs	r1, r4, r0
 8004746:	4630      	mov	r0, r6
 8004748:	f000 fad0 	bl	8004cec <_sbrk_r>
 800474c:	3001      	adds	r0, #1
 800474e:	d0cf      	beq.n	80046f0 <_malloc_r+0x48>
 8004750:	6025      	str	r5, [r4, #0]
 8004752:	e7db      	b.n	800470c <_malloc_r+0x64>
 8004754:	20000090 	.word	0x20000090
 8004758:	20000094 	.word	0x20000094

0800475c <__sfputc_r>:
 800475c:	6893      	ldr	r3, [r2, #8]
 800475e:	3b01      	subs	r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	b410      	push	{r4}
 8004764:	6093      	str	r3, [r2, #8]
 8004766:	da08      	bge.n	800477a <__sfputc_r+0x1e>
 8004768:	6994      	ldr	r4, [r2, #24]
 800476a:	42a3      	cmp	r3, r4
 800476c:	db01      	blt.n	8004772 <__sfputc_r+0x16>
 800476e:	290a      	cmp	r1, #10
 8004770:	d103      	bne.n	800477a <__sfputc_r+0x1e>
 8004772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004776:	f000 bb0d 	b.w	8004d94 <__swbuf_r>
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	1c58      	adds	r0, r3, #1
 800477e:	6010      	str	r0, [r2, #0]
 8004780:	7019      	strb	r1, [r3, #0]
 8004782:	4608      	mov	r0, r1
 8004784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004788:	4770      	bx	lr

0800478a <__sfputs_r>:
 800478a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478c:	4606      	mov	r6, r0
 800478e:	460f      	mov	r7, r1
 8004790:	4614      	mov	r4, r2
 8004792:	18d5      	adds	r5, r2, r3
 8004794:	42ac      	cmp	r4, r5
 8004796:	d101      	bne.n	800479c <__sfputs_r+0x12>
 8004798:	2000      	movs	r0, #0
 800479a:	e007      	b.n	80047ac <__sfputs_r+0x22>
 800479c:	463a      	mov	r2, r7
 800479e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7ff ffda 	bl	800475c <__sfputc_r>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d1f3      	bne.n	8004794 <__sfputs_r+0xa>
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047b0 <_vfiprintf_r>:
 80047b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	460c      	mov	r4, r1
 80047b6:	b09d      	sub	sp, #116	; 0x74
 80047b8:	4617      	mov	r7, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	4606      	mov	r6, r0
 80047be:	b118      	cbz	r0, 80047c8 <_vfiprintf_r+0x18>
 80047c0:	6983      	ldr	r3, [r0, #24]
 80047c2:	b90b      	cbnz	r3, 80047c8 <_vfiprintf_r+0x18>
 80047c4:	f7ff fee6 	bl	8004594 <__sinit>
 80047c8:	4b7c      	ldr	r3, [pc, #496]	; (80049bc <_vfiprintf_r+0x20c>)
 80047ca:	429c      	cmp	r4, r3
 80047cc:	d158      	bne.n	8004880 <_vfiprintf_r+0xd0>
 80047ce:	6874      	ldr	r4, [r6, #4]
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	0718      	lsls	r0, r3, #28
 80047d4:	d55e      	bpl.n	8004894 <_vfiprintf_r+0xe4>
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d05b      	beq.n	8004894 <_vfiprintf_r+0xe4>
 80047dc:	2300      	movs	r3, #0
 80047de:	9309      	str	r3, [sp, #36]	; 0x24
 80047e0:	2320      	movs	r3, #32
 80047e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047e6:	2330      	movs	r3, #48	; 0x30
 80047e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047ec:	9503      	str	r5, [sp, #12]
 80047ee:	f04f 0b01 	mov.w	fp, #1
 80047f2:	46b8      	mov	r8, r7
 80047f4:	4645      	mov	r5, r8
 80047f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047fa:	b10b      	cbz	r3, 8004800 <_vfiprintf_r+0x50>
 80047fc:	2b25      	cmp	r3, #37	; 0x25
 80047fe:	d154      	bne.n	80048aa <_vfiprintf_r+0xfa>
 8004800:	ebb8 0a07 	subs.w	sl, r8, r7
 8004804:	d00b      	beq.n	800481e <_vfiprintf_r+0x6e>
 8004806:	4653      	mov	r3, sl
 8004808:	463a      	mov	r2, r7
 800480a:	4621      	mov	r1, r4
 800480c:	4630      	mov	r0, r6
 800480e:	f7ff ffbc 	bl	800478a <__sfputs_r>
 8004812:	3001      	adds	r0, #1
 8004814:	f000 80c2 	beq.w	800499c <_vfiprintf_r+0x1ec>
 8004818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481a:	4453      	add	r3, sl
 800481c:	9309      	str	r3, [sp, #36]	; 0x24
 800481e:	f898 3000 	ldrb.w	r3, [r8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80ba 	beq.w	800499c <_vfiprintf_r+0x1ec>
 8004828:	2300      	movs	r3, #0
 800482a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800482e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004832:	9304      	str	r3, [sp, #16]
 8004834:	9307      	str	r3, [sp, #28]
 8004836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800483a:	931a      	str	r3, [sp, #104]	; 0x68
 800483c:	46a8      	mov	r8, r5
 800483e:	2205      	movs	r2, #5
 8004840:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004844:	485e      	ldr	r0, [pc, #376]	; (80049c0 <_vfiprintf_r+0x210>)
 8004846:	f7fb fcc3 	bl	80001d0 <memchr>
 800484a:	9b04      	ldr	r3, [sp, #16]
 800484c:	bb78      	cbnz	r0, 80048ae <_vfiprintf_r+0xfe>
 800484e:	06d9      	lsls	r1, r3, #27
 8004850:	bf44      	itt	mi
 8004852:	2220      	movmi	r2, #32
 8004854:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004858:	071a      	lsls	r2, r3, #28
 800485a:	bf44      	itt	mi
 800485c:	222b      	movmi	r2, #43	; 0x2b
 800485e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004862:	782a      	ldrb	r2, [r5, #0]
 8004864:	2a2a      	cmp	r2, #42	; 0x2a
 8004866:	d02a      	beq.n	80048be <_vfiprintf_r+0x10e>
 8004868:	9a07      	ldr	r2, [sp, #28]
 800486a:	46a8      	mov	r8, r5
 800486c:	2000      	movs	r0, #0
 800486e:	250a      	movs	r5, #10
 8004870:	4641      	mov	r1, r8
 8004872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004876:	3b30      	subs	r3, #48	; 0x30
 8004878:	2b09      	cmp	r3, #9
 800487a:	d969      	bls.n	8004950 <_vfiprintf_r+0x1a0>
 800487c:	b360      	cbz	r0, 80048d8 <_vfiprintf_r+0x128>
 800487e:	e024      	b.n	80048ca <_vfiprintf_r+0x11a>
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <_vfiprintf_r+0x214>)
 8004882:	429c      	cmp	r4, r3
 8004884:	d101      	bne.n	800488a <_vfiprintf_r+0xda>
 8004886:	68b4      	ldr	r4, [r6, #8]
 8004888:	e7a2      	b.n	80047d0 <_vfiprintf_r+0x20>
 800488a:	4b4f      	ldr	r3, [pc, #316]	; (80049c8 <_vfiprintf_r+0x218>)
 800488c:	429c      	cmp	r4, r3
 800488e:	bf08      	it	eq
 8004890:	68f4      	ldreq	r4, [r6, #12]
 8004892:	e79d      	b.n	80047d0 <_vfiprintf_r+0x20>
 8004894:	4621      	mov	r1, r4
 8004896:	4630      	mov	r0, r6
 8004898:	f000 fae0 	bl	8004e5c <__swsetup_r>
 800489c:	2800      	cmp	r0, #0
 800489e:	d09d      	beq.n	80047dc <_vfiprintf_r+0x2c>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a4:	b01d      	add	sp, #116	; 0x74
 80048a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048aa:	46a8      	mov	r8, r5
 80048ac:	e7a2      	b.n	80047f4 <_vfiprintf_r+0x44>
 80048ae:	4a44      	ldr	r2, [pc, #272]	; (80049c0 <_vfiprintf_r+0x210>)
 80048b0:	1a80      	subs	r0, r0, r2
 80048b2:	fa0b f000 	lsl.w	r0, fp, r0
 80048b6:	4318      	orrs	r0, r3
 80048b8:	9004      	str	r0, [sp, #16]
 80048ba:	4645      	mov	r5, r8
 80048bc:	e7be      	b.n	800483c <_vfiprintf_r+0x8c>
 80048be:	9a03      	ldr	r2, [sp, #12]
 80048c0:	1d11      	adds	r1, r2, #4
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	9103      	str	r1, [sp, #12]
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	db01      	blt.n	80048ce <_vfiprintf_r+0x11e>
 80048ca:	9207      	str	r2, [sp, #28]
 80048cc:	e004      	b.n	80048d8 <_vfiprintf_r+0x128>
 80048ce:	4252      	negs	r2, r2
 80048d0:	f043 0302 	orr.w	r3, r3, #2
 80048d4:	9207      	str	r2, [sp, #28]
 80048d6:	9304      	str	r3, [sp, #16]
 80048d8:	f898 3000 	ldrb.w	r3, [r8]
 80048dc:	2b2e      	cmp	r3, #46	; 0x2e
 80048de:	d10e      	bne.n	80048fe <_vfiprintf_r+0x14e>
 80048e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80048e4:	2b2a      	cmp	r3, #42	; 0x2a
 80048e6:	d138      	bne.n	800495a <_vfiprintf_r+0x1aa>
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	9203      	str	r2, [sp, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bfb8      	it	lt
 80048f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048f8:	f108 0802 	add.w	r8, r8, #2
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	4d33      	ldr	r5, [pc, #204]	; (80049cc <_vfiprintf_r+0x21c>)
 8004900:	f898 1000 	ldrb.w	r1, [r8]
 8004904:	2203      	movs	r2, #3
 8004906:	4628      	mov	r0, r5
 8004908:	f7fb fc62 	bl	80001d0 <memchr>
 800490c:	b140      	cbz	r0, 8004920 <_vfiprintf_r+0x170>
 800490e:	2340      	movs	r3, #64	; 0x40
 8004910:	1b40      	subs	r0, r0, r5
 8004912:	fa03 f000 	lsl.w	r0, r3, r0
 8004916:	9b04      	ldr	r3, [sp, #16]
 8004918:	4303      	orrs	r3, r0
 800491a:	f108 0801 	add.w	r8, r8, #1
 800491e:	9304      	str	r3, [sp, #16]
 8004920:	f898 1000 	ldrb.w	r1, [r8]
 8004924:	482a      	ldr	r0, [pc, #168]	; (80049d0 <_vfiprintf_r+0x220>)
 8004926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800492a:	2206      	movs	r2, #6
 800492c:	f108 0701 	add.w	r7, r8, #1
 8004930:	f7fb fc4e 	bl	80001d0 <memchr>
 8004934:	2800      	cmp	r0, #0
 8004936:	d037      	beq.n	80049a8 <_vfiprintf_r+0x1f8>
 8004938:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <_vfiprintf_r+0x224>)
 800493a:	bb1b      	cbnz	r3, 8004984 <_vfiprintf_r+0x1d4>
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	3307      	adds	r3, #7
 8004940:	f023 0307 	bic.w	r3, r3, #7
 8004944:	3308      	adds	r3, #8
 8004946:	9303      	str	r3, [sp, #12]
 8004948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800494a:	444b      	add	r3, r9
 800494c:	9309      	str	r3, [sp, #36]	; 0x24
 800494e:	e750      	b.n	80047f2 <_vfiprintf_r+0x42>
 8004950:	fb05 3202 	mla	r2, r5, r2, r3
 8004954:	2001      	movs	r0, #1
 8004956:	4688      	mov	r8, r1
 8004958:	e78a      	b.n	8004870 <_vfiprintf_r+0xc0>
 800495a:	2300      	movs	r3, #0
 800495c:	f108 0801 	add.w	r8, r8, #1
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	4619      	mov	r1, r3
 8004964:	250a      	movs	r5, #10
 8004966:	4640      	mov	r0, r8
 8004968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800496c:	3a30      	subs	r2, #48	; 0x30
 800496e:	2a09      	cmp	r2, #9
 8004970:	d903      	bls.n	800497a <_vfiprintf_r+0x1ca>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0c3      	beq.n	80048fe <_vfiprintf_r+0x14e>
 8004976:	9105      	str	r1, [sp, #20]
 8004978:	e7c1      	b.n	80048fe <_vfiprintf_r+0x14e>
 800497a:	fb05 2101 	mla	r1, r5, r1, r2
 800497e:	2301      	movs	r3, #1
 8004980:	4680      	mov	r8, r0
 8004982:	e7f0      	b.n	8004966 <_vfiprintf_r+0x1b6>
 8004984:	ab03      	add	r3, sp, #12
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4622      	mov	r2, r4
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <_vfiprintf_r+0x228>)
 800498c:	a904      	add	r1, sp, #16
 800498e:	4630      	mov	r0, r6
 8004990:	f3af 8000 	nop.w
 8004994:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004998:	4681      	mov	r9, r0
 800499a:	d1d5      	bne.n	8004948 <_vfiprintf_r+0x198>
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	065b      	lsls	r3, r3, #25
 80049a0:	f53f af7e 	bmi.w	80048a0 <_vfiprintf_r+0xf0>
 80049a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049a6:	e77d      	b.n	80048a4 <_vfiprintf_r+0xf4>
 80049a8:	ab03      	add	r3, sp, #12
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4622      	mov	r2, r4
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <_vfiprintf_r+0x228>)
 80049b0:	a904      	add	r1, sp, #16
 80049b2:	4630      	mov	r0, r6
 80049b4:	f000 f888 	bl	8004ac8 <_printf_i>
 80049b8:	e7ec      	b.n	8004994 <_vfiprintf_r+0x1e4>
 80049ba:	bf00      	nop
 80049bc:	08005358 	.word	0x08005358
 80049c0:	08005398 	.word	0x08005398
 80049c4:	08005378 	.word	0x08005378
 80049c8:	08005338 	.word	0x08005338
 80049cc:	0800539e 	.word	0x0800539e
 80049d0:	080053a2 	.word	0x080053a2
 80049d4:	00000000 	.word	0x00000000
 80049d8:	0800478b 	.word	0x0800478b

080049dc <_printf_common>:
 80049dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e0:	4691      	mov	r9, r2
 80049e2:	461f      	mov	r7, r3
 80049e4:	688a      	ldr	r2, [r1, #8]
 80049e6:	690b      	ldr	r3, [r1, #16]
 80049e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049ec:	4293      	cmp	r3, r2
 80049ee:	bfb8      	it	lt
 80049f0:	4613      	movlt	r3, r2
 80049f2:	f8c9 3000 	str.w	r3, [r9]
 80049f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049fa:	4606      	mov	r6, r0
 80049fc:	460c      	mov	r4, r1
 80049fe:	b112      	cbz	r2, 8004a06 <_printf_common+0x2a>
 8004a00:	3301      	adds	r3, #1
 8004a02:	f8c9 3000 	str.w	r3, [r9]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	0699      	lsls	r1, r3, #26
 8004a0a:	bf42      	ittt	mi
 8004a0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a10:	3302      	addmi	r3, #2
 8004a12:	f8c9 3000 	strmi.w	r3, [r9]
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	f015 0506 	ands.w	r5, r5, #6
 8004a1c:	d107      	bne.n	8004a2e <_printf_common+0x52>
 8004a1e:	f104 0a19 	add.w	sl, r4, #25
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	f8d9 2000 	ldr.w	r2, [r9]
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	42ab      	cmp	r3, r5
 8004a2c:	dc28      	bgt.n	8004a80 <_printf_common+0xa4>
 8004a2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	3300      	adds	r3, #0
 8004a36:	bf18      	it	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	0692      	lsls	r2, r2, #26
 8004a3c:	d42d      	bmi.n	8004a9a <_printf_common+0xbe>
 8004a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a42:	4639      	mov	r1, r7
 8004a44:	4630      	mov	r0, r6
 8004a46:	47c0      	blx	r8
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d020      	beq.n	8004a8e <_printf_common+0xb2>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	68e5      	ldr	r5, [r4, #12]
 8004a50:	f8d9 2000 	ldr.w	r2, [r9]
 8004a54:	f003 0306 	and.w	r3, r3, #6
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	bf08      	it	eq
 8004a5c:	1aad      	subeq	r5, r5, r2
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	6922      	ldr	r2, [r4, #16]
 8004a62:	bf0c      	ite	eq
 8004a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a68:	2500      	movne	r5, #0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	bfc4      	itt	gt
 8004a6e:	1a9b      	subgt	r3, r3, r2
 8004a70:	18ed      	addgt	r5, r5, r3
 8004a72:	f04f 0900 	mov.w	r9, #0
 8004a76:	341a      	adds	r4, #26
 8004a78:	454d      	cmp	r5, r9
 8004a7a:	d11a      	bne.n	8004ab2 <_printf_common+0xd6>
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	e008      	b.n	8004a92 <_printf_common+0xb6>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4652      	mov	r2, sl
 8004a84:	4639      	mov	r1, r7
 8004a86:	4630      	mov	r0, r6
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d103      	bne.n	8004a96 <_printf_common+0xba>
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	3501      	adds	r5, #1
 8004a98:	e7c3      	b.n	8004a22 <_printf_common+0x46>
 8004a9a:	18e1      	adds	r1, r4, r3
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	2030      	movs	r0, #48	; 0x30
 8004aa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa4:	4422      	add	r2, r4
 8004aa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aae:	3302      	adds	r3, #2
 8004ab0:	e7c5      	b.n	8004a3e <_printf_common+0x62>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	4630      	mov	r0, r6
 8004aba:	47c0      	blx	r8
 8004abc:	3001      	adds	r0, #1
 8004abe:	d0e6      	beq.n	8004a8e <_printf_common+0xb2>
 8004ac0:	f109 0901 	add.w	r9, r9, #1
 8004ac4:	e7d8      	b.n	8004a78 <_printf_common+0x9c>
	...

08004ac8 <_printf_i>:
 8004ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004acc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	7e09      	ldrb	r1, [r1, #24]
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	296e      	cmp	r1, #110	; 0x6e
 8004ad8:	4617      	mov	r7, r2
 8004ada:	4606      	mov	r6, r0
 8004adc:	4698      	mov	r8, r3
 8004ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ae0:	f000 80b3 	beq.w	8004c4a <_printf_i+0x182>
 8004ae4:	d822      	bhi.n	8004b2c <_printf_i+0x64>
 8004ae6:	2963      	cmp	r1, #99	; 0x63
 8004ae8:	d036      	beq.n	8004b58 <_printf_i+0x90>
 8004aea:	d80a      	bhi.n	8004b02 <_printf_i+0x3a>
 8004aec:	2900      	cmp	r1, #0
 8004aee:	f000 80b9 	beq.w	8004c64 <_printf_i+0x19c>
 8004af2:	2958      	cmp	r1, #88	; 0x58
 8004af4:	f000 8083 	beq.w	8004bfe <_printf_i+0x136>
 8004af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004afc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b00:	e032      	b.n	8004b68 <_printf_i+0xa0>
 8004b02:	2964      	cmp	r1, #100	; 0x64
 8004b04:	d001      	beq.n	8004b0a <_printf_i+0x42>
 8004b06:	2969      	cmp	r1, #105	; 0x69
 8004b08:	d1f6      	bne.n	8004af8 <_printf_i+0x30>
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	0605      	lsls	r5, r0, #24
 8004b10:	f103 0104 	add.w	r1, r3, #4
 8004b14:	d52a      	bpl.n	8004b6c <_printf_i+0xa4>
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da03      	bge.n	8004b26 <_printf_i+0x5e>
 8004b1e:	222d      	movs	r2, #45	; 0x2d
 8004b20:	425b      	negs	r3, r3
 8004b22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b26:	486f      	ldr	r0, [pc, #444]	; (8004ce4 <_printf_i+0x21c>)
 8004b28:	220a      	movs	r2, #10
 8004b2a:	e039      	b.n	8004ba0 <_printf_i+0xd8>
 8004b2c:	2973      	cmp	r1, #115	; 0x73
 8004b2e:	f000 809d 	beq.w	8004c6c <_printf_i+0x1a4>
 8004b32:	d808      	bhi.n	8004b46 <_printf_i+0x7e>
 8004b34:	296f      	cmp	r1, #111	; 0x6f
 8004b36:	d020      	beq.n	8004b7a <_printf_i+0xb2>
 8004b38:	2970      	cmp	r1, #112	; 0x70
 8004b3a:	d1dd      	bne.n	8004af8 <_printf_i+0x30>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	f043 0320 	orr.w	r3, r3, #32
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	e003      	b.n	8004b4e <_printf_i+0x86>
 8004b46:	2975      	cmp	r1, #117	; 0x75
 8004b48:	d017      	beq.n	8004b7a <_printf_i+0xb2>
 8004b4a:	2978      	cmp	r1, #120	; 0x78
 8004b4c:	d1d4      	bne.n	8004af8 <_printf_i+0x30>
 8004b4e:	2378      	movs	r3, #120	; 0x78
 8004b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b54:	4864      	ldr	r0, [pc, #400]	; (8004ce8 <_printf_i+0x220>)
 8004b56:	e055      	b.n	8004c04 <_printf_i+0x13c>
 8004b58:	6813      	ldr	r3, [r2, #0]
 8004b5a:	1d19      	adds	r1, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6011      	str	r1, [r2, #0]
 8004b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e08c      	b.n	8004c86 <_printf_i+0x1be>
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6011      	str	r1, [r2, #0]
 8004b70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b74:	bf18      	it	ne
 8004b76:	b21b      	sxthne	r3, r3
 8004b78:	e7cf      	b.n	8004b1a <_printf_i+0x52>
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	6825      	ldr	r5, [r4, #0]
 8004b7e:	1d18      	adds	r0, r3, #4
 8004b80:	6010      	str	r0, [r2, #0]
 8004b82:	0628      	lsls	r0, r5, #24
 8004b84:	d501      	bpl.n	8004b8a <_printf_i+0xc2>
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	e002      	b.n	8004b90 <_printf_i+0xc8>
 8004b8a:	0668      	lsls	r0, r5, #25
 8004b8c:	d5fb      	bpl.n	8004b86 <_printf_i+0xbe>
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	4854      	ldr	r0, [pc, #336]	; (8004ce4 <_printf_i+0x21c>)
 8004b92:	296f      	cmp	r1, #111	; 0x6f
 8004b94:	bf14      	ite	ne
 8004b96:	220a      	movne	r2, #10
 8004b98:	2208      	moveq	r2, #8
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ba0:	6865      	ldr	r5, [r4, #4]
 8004ba2:	60a5      	str	r5, [r4, #8]
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	f2c0 8095 	blt.w	8004cd4 <_printf_i+0x20c>
 8004baa:	6821      	ldr	r1, [r4, #0]
 8004bac:	f021 0104 	bic.w	r1, r1, #4
 8004bb0:	6021      	str	r1, [r4, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d13d      	bne.n	8004c32 <_printf_i+0x16a>
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	f040 808e 	bne.w	8004cd8 <_printf_i+0x210>
 8004bbc:	4665      	mov	r5, ip
 8004bbe:	2a08      	cmp	r2, #8
 8004bc0:	d10b      	bne.n	8004bda <_printf_i+0x112>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07db      	lsls	r3, r3, #31
 8004bc6:	d508      	bpl.n	8004bda <_printf_i+0x112>
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	bfde      	ittt	le
 8004bd0:	2330      	movle	r3, #48	; 0x30
 8004bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bd6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004bda:	ebac 0305 	sub.w	r3, ip, r5
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	f8cd 8000 	str.w	r8, [sp]
 8004be4:	463b      	mov	r3, r7
 8004be6:	aa03      	add	r2, sp, #12
 8004be8:	4621      	mov	r1, r4
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff fef6 	bl	80049dc <_printf_common>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d14d      	bne.n	8004c90 <_printf_i+0x1c8>
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bf8:	b005      	add	sp, #20
 8004bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bfe:	4839      	ldr	r0, [pc, #228]	; (8004ce4 <_printf_i+0x21c>)
 8004c00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	6821      	ldr	r1, [r4, #0]
 8004c08:	1d1d      	adds	r5, r3, #4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6015      	str	r5, [r2, #0]
 8004c0e:	060a      	lsls	r2, r1, #24
 8004c10:	d50b      	bpl.n	8004c2a <_printf_i+0x162>
 8004c12:	07ca      	lsls	r2, r1, #31
 8004c14:	bf44      	itt	mi
 8004c16:	f041 0120 	orrmi.w	r1, r1, #32
 8004c1a:	6021      	strmi	r1, [r4, #0]
 8004c1c:	b91b      	cbnz	r3, 8004c26 <_printf_i+0x15e>
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	f022 0220 	bic.w	r2, r2, #32
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	2210      	movs	r2, #16
 8004c28:	e7b7      	b.n	8004b9a <_printf_i+0xd2>
 8004c2a:	064d      	lsls	r5, r1, #25
 8004c2c:	bf48      	it	mi
 8004c2e:	b29b      	uxthmi	r3, r3
 8004c30:	e7ef      	b.n	8004c12 <_printf_i+0x14a>
 8004c32:	4665      	mov	r5, ip
 8004c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c38:	fb02 3311 	mls	r3, r2, r1, r3
 8004c3c:	5cc3      	ldrb	r3, [r0, r3]
 8004c3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c42:	460b      	mov	r3, r1
 8004c44:	2900      	cmp	r1, #0
 8004c46:	d1f5      	bne.n	8004c34 <_printf_i+0x16c>
 8004c48:	e7b9      	b.n	8004bbe <_printf_i+0xf6>
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	6825      	ldr	r5, [r4, #0]
 8004c4e:	6961      	ldr	r1, [r4, #20]
 8004c50:	1d18      	adds	r0, r3, #4
 8004c52:	6010      	str	r0, [r2, #0]
 8004c54:	0628      	lsls	r0, r5, #24
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	d501      	bpl.n	8004c5e <_printf_i+0x196>
 8004c5a:	6019      	str	r1, [r3, #0]
 8004c5c:	e002      	b.n	8004c64 <_printf_i+0x19c>
 8004c5e:	066a      	lsls	r2, r5, #25
 8004c60:	d5fb      	bpl.n	8004c5a <_printf_i+0x192>
 8004c62:	8019      	strh	r1, [r3, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	6123      	str	r3, [r4, #16]
 8004c68:	4665      	mov	r5, ip
 8004c6a:	e7b9      	b.n	8004be0 <_printf_i+0x118>
 8004c6c:	6813      	ldr	r3, [r2, #0]
 8004c6e:	1d19      	adds	r1, r3, #4
 8004c70:	6011      	str	r1, [r2, #0]
 8004c72:	681d      	ldr	r5, [r3, #0]
 8004c74:	6862      	ldr	r2, [r4, #4]
 8004c76:	2100      	movs	r1, #0
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f7fb faa9 	bl	80001d0 <memchr>
 8004c7e:	b108      	cbz	r0, 8004c84 <_printf_i+0x1bc>
 8004c80:	1b40      	subs	r0, r0, r5
 8004c82:	6060      	str	r0, [r4, #4]
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	6123      	str	r3, [r4, #16]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8e:	e7a7      	b.n	8004be0 <_printf_i+0x118>
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	462a      	mov	r2, r5
 8004c94:	4639      	mov	r1, r7
 8004c96:	4630      	mov	r0, r6
 8004c98:	47c0      	blx	r8
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d0aa      	beq.n	8004bf4 <_printf_i+0x12c>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	079b      	lsls	r3, r3, #30
 8004ca2:	d413      	bmi.n	8004ccc <_printf_i+0x204>
 8004ca4:	68e0      	ldr	r0, [r4, #12]
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	4298      	cmp	r0, r3
 8004caa:	bfb8      	it	lt
 8004cac:	4618      	movlt	r0, r3
 8004cae:	e7a3      	b.n	8004bf8 <_printf_i+0x130>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	464a      	mov	r2, r9
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	47c0      	blx	r8
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d09a      	beq.n	8004bf4 <_printf_i+0x12c>
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	68e3      	ldr	r3, [r4, #12]
 8004cc2:	9a03      	ldr	r2, [sp, #12]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	42ab      	cmp	r3, r5
 8004cc8:	dcf2      	bgt.n	8004cb0 <_printf_i+0x1e8>
 8004cca:	e7eb      	b.n	8004ca4 <_printf_i+0x1dc>
 8004ccc:	2500      	movs	r5, #0
 8004cce:	f104 0919 	add.w	r9, r4, #25
 8004cd2:	e7f5      	b.n	8004cc0 <_printf_i+0x1f8>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ac      	bne.n	8004c32 <_printf_i+0x16a>
 8004cd8:	7803      	ldrb	r3, [r0, #0]
 8004cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce2:	e76c      	b.n	8004bbe <_printf_i+0xf6>
 8004ce4:	080053a9 	.word	0x080053a9
 8004ce8:	080053ba 	.word	0x080053ba

08004cec <_sbrk_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4c06      	ldr	r4, [pc, #24]	; (8004d08 <_sbrk_r+0x1c>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	f7fc fbe6 	bl	80014c8 <_sbrk>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_sbrk_r+0x1a>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_sbrk_r+0x1a>
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	200001ac 	.word	0x200001ac

08004d0c <__sread>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	460c      	mov	r4, r1
 8004d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d14:	f000 fa96 	bl	8005244 <_read_r>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	bfab      	itete	ge
 8004d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d20:	181b      	addge	r3, r3, r0
 8004d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d26:	bfac      	ite	ge
 8004d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d2a:	81a3      	strhlt	r3, [r4, #12]
 8004d2c:	bd10      	pop	{r4, pc}

08004d2e <__swrite>:
 8004d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d32:	461f      	mov	r7, r3
 8004d34:	898b      	ldrh	r3, [r1, #12]
 8004d36:	05db      	lsls	r3, r3, #23
 8004d38:	4605      	mov	r5, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	d505      	bpl.n	8004d4c <__swrite+0x1e>
 8004d40:	2302      	movs	r3, #2
 8004d42:	2200      	movs	r2, #0
 8004d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d48:	f000 f9b6 	bl	80050b8 <_lseek_r>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	4632      	mov	r2, r6
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d62:	f000 b869 	b.w	8004e38 <_write_r>

08004d66 <__sseek>:
 8004d66:	b510      	push	{r4, lr}
 8004d68:	460c      	mov	r4, r1
 8004d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6e:	f000 f9a3 	bl	80050b8 <_lseek_r>
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	bf15      	itete	ne
 8004d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d82:	81a3      	strheq	r3, [r4, #12]
 8004d84:	bf18      	it	ne
 8004d86:	81a3      	strhne	r3, [r4, #12]
 8004d88:	bd10      	pop	{r4, pc}

08004d8a <__sclose>:
 8004d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8e:	f000 b8d3 	b.w	8004f38 <_close_r>
	...

08004d94 <__swbuf_r>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	460e      	mov	r6, r1
 8004d98:	4614      	mov	r4, r2
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	b118      	cbz	r0, 8004da6 <__swbuf_r+0x12>
 8004d9e:	6983      	ldr	r3, [r0, #24]
 8004da0:	b90b      	cbnz	r3, 8004da6 <__swbuf_r+0x12>
 8004da2:	f7ff fbf7 	bl	8004594 <__sinit>
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <__swbuf_r+0x98>)
 8004da8:	429c      	cmp	r4, r3
 8004daa:	d12a      	bne.n	8004e02 <__swbuf_r+0x6e>
 8004dac:	686c      	ldr	r4, [r5, #4]
 8004dae:	69a3      	ldr	r3, [r4, #24]
 8004db0:	60a3      	str	r3, [r4, #8]
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	071a      	lsls	r2, r3, #28
 8004db6:	d52e      	bpl.n	8004e16 <__swbuf_r+0x82>
 8004db8:	6923      	ldr	r3, [r4, #16]
 8004dba:	b363      	cbz	r3, 8004e16 <__swbuf_r+0x82>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	6820      	ldr	r0, [r4, #0]
 8004dc0:	1ac0      	subs	r0, r0, r3
 8004dc2:	6963      	ldr	r3, [r4, #20]
 8004dc4:	b2f6      	uxtb	r6, r6
 8004dc6:	4283      	cmp	r3, r0
 8004dc8:	4637      	mov	r7, r6
 8004dca:	dc04      	bgt.n	8004dd6 <__swbuf_r+0x42>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f948 	bl	8005064 <_fflush_r>
 8004dd4:	bb28      	cbnz	r0, 8004e22 <__swbuf_r+0x8e>
 8004dd6:	68a3      	ldr	r3, [r4, #8]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	60a3      	str	r3, [r4, #8]
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	701e      	strb	r6, [r3, #0]
 8004de4:	6963      	ldr	r3, [r4, #20]
 8004de6:	3001      	adds	r0, #1
 8004de8:	4283      	cmp	r3, r0
 8004dea:	d004      	beq.n	8004df6 <__swbuf_r+0x62>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	07db      	lsls	r3, r3, #31
 8004df0:	d519      	bpl.n	8004e26 <__swbuf_r+0x92>
 8004df2:	2e0a      	cmp	r6, #10
 8004df4:	d117      	bne.n	8004e26 <__swbuf_r+0x92>
 8004df6:	4621      	mov	r1, r4
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 f933 	bl	8005064 <_fflush_r>
 8004dfe:	b190      	cbz	r0, 8004e26 <__swbuf_r+0x92>
 8004e00:	e00f      	b.n	8004e22 <__swbuf_r+0x8e>
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <__swbuf_r+0x9c>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	d101      	bne.n	8004e0c <__swbuf_r+0x78>
 8004e08:	68ac      	ldr	r4, [r5, #8]
 8004e0a:	e7d0      	b.n	8004dae <__swbuf_r+0x1a>
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <__swbuf_r+0xa0>)
 8004e0e:	429c      	cmp	r4, r3
 8004e10:	bf08      	it	eq
 8004e12:	68ec      	ldreq	r4, [r5, #12]
 8004e14:	e7cb      	b.n	8004dae <__swbuf_r+0x1a>
 8004e16:	4621      	mov	r1, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 f81f 	bl	8004e5c <__swsetup_r>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d0cc      	beq.n	8004dbc <__swbuf_r+0x28>
 8004e22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e26:	4638      	mov	r0, r7
 8004e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	08005358 	.word	0x08005358
 8004e30:	08005378 	.word	0x08005378
 8004e34:	08005338 	.word	0x08005338

08004e38 <_write_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4c07      	ldr	r4, [pc, #28]	; (8004e58 <_write_r+0x20>)
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	4608      	mov	r0, r1
 8004e40:	4611      	mov	r1, r2
 8004e42:	2200      	movs	r2, #0
 8004e44:	6022      	str	r2, [r4, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f7fc faed 	bl	8001426 <_write>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_write_r+0x1e>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_write_r+0x1e>
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	200001ac 	.word	0x200001ac

08004e5c <__swsetup_r>:
 8004e5c:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <__swsetup_r+0xcc>)
 8004e5e:	b570      	push	{r4, r5, r6, lr}
 8004e60:	681d      	ldr	r5, [r3, #0]
 8004e62:	4606      	mov	r6, r0
 8004e64:	460c      	mov	r4, r1
 8004e66:	b125      	cbz	r5, 8004e72 <__swsetup_r+0x16>
 8004e68:	69ab      	ldr	r3, [r5, #24]
 8004e6a:	b913      	cbnz	r3, 8004e72 <__swsetup_r+0x16>
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f7ff fb91 	bl	8004594 <__sinit>
 8004e72:	4b2e      	ldr	r3, [pc, #184]	; (8004f2c <__swsetup_r+0xd0>)
 8004e74:	429c      	cmp	r4, r3
 8004e76:	d10f      	bne.n	8004e98 <__swsetup_r+0x3c>
 8004e78:	686c      	ldr	r4, [r5, #4]
 8004e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	0715      	lsls	r5, r2, #28
 8004e82:	d42c      	bmi.n	8004ede <__swsetup_r+0x82>
 8004e84:	06d0      	lsls	r0, r2, #27
 8004e86:	d411      	bmi.n	8004eac <__swsetup_r+0x50>
 8004e88:	2209      	movs	r2, #9
 8004e8a:	6032      	str	r2, [r6, #0]
 8004e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e96:	e03e      	b.n	8004f16 <__swsetup_r+0xba>
 8004e98:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <__swsetup_r+0xd4>)
 8004e9a:	429c      	cmp	r4, r3
 8004e9c:	d101      	bne.n	8004ea2 <__swsetup_r+0x46>
 8004e9e:	68ac      	ldr	r4, [r5, #8]
 8004ea0:	e7eb      	b.n	8004e7a <__swsetup_r+0x1e>
 8004ea2:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <__swsetup_r+0xd8>)
 8004ea4:	429c      	cmp	r4, r3
 8004ea6:	bf08      	it	eq
 8004ea8:	68ec      	ldreq	r4, [r5, #12]
 8004eaa:	e7e6      	b.n	8004e7a <__swsetup_r+0x1e>
 8004eac:	0751      	lsls	r1, r2, #29
 8004eae:	d512      	bpl.n	8004ed6 <__swsetup_r+0x7a>
 8004eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eb2:	b141      	cbz	r1, 8004ec6 <__swsetup_r+0x6a>
 8004eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	d002      	beq.n	8004ec2 <__swsetup_r+0x66>
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f000 f973 	bl	80051a8 <_free_r>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6063      	str	r3, [r4, #4]
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f043 0308 	orr.w	r3, r3, #8
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	b94b      	cbnz	r3, 8004ef6 <__swsetup_r+0x9a>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eec:	d003      	beq.n	8004ef6 <__swsetup_r+0x9a>
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f000 f917 	bl	8005124 <__smakebuf_r>
 8004ef6:	89a2      	ldrh	r2, [r4, #12]
 8004ef8:	f012 0301 	ands.w	r3, r2, #1
 8004efc:	d00c      	beq.n	8004f18 <__swsetup_r+0xbc>
 8004efe:	2300      	movs	r3, #0
 8004f00:	60a3      	str	r3, [r4, #8]
 8004f02:	6963      	ldr	r3, [r4, #20]
 8004f04:	425b      	negs	r3, r3
 8004f06:	61a3      	str	r3, [r4, #24]
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	b953      	cbnz	r3, 8004f22 <__swsetup_r+0xc6>
 8004f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004f14:	d1ba      	bne.n	8004e8c <__swsetup_r+0x30>
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	0792      	lsls	r2, r2, #30
 8004f1a:	bf58      	it	pl
 8004f1c:	6963      	ldrpl	r3, [r4, #20]
 8004f1e:	60a3      	str	r3, [r4, #8]
 8004f20:	e7f2      	b.n	8004f08 <__swsetup_r+0xac>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e7f7      	b.n	8004f16 <__swsetup_r+0xba>
 8004f26:	bf00      	nop
 8004f28:	2000000c 	.word	0x2000000c
 8004f2c:	08005358 	.word	0x08005358
 8004f30:	08005378 	.word	0x08005378
 8004f34:	08005338 	.word	0x08005338

08004f38 <_close_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4c06      	ldr	r4, [pc, #24]	; (8004f54 <_close_r+0x1c>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4605      	mov	r5, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	f7fc fa8b 	bl	800145e <_close>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_close_r+0x1a>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_close_r+0x1a>
 8004f50:	602b      	str	r3, [r5, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	200001ac 	.word	0x200001ac

08004f58 <__sflush_r>:
 8004f58:	898a      	ldrh	r2, [r1, #12]
 8004f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	4605      	mov	r5, r0
 8004f60:	0710      	lsls	r0, r2, #28
 8004f62:	460c      	mov	r4, r1
 8004f64:	d458      	bmi.n	8005018 <__sflush_r+0xc0>
 8004f66:	684b      	ldr	r3, [r1, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	dc05      	bgt.n	8004f78 <__sflush_r+0x20>
 8004f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	dc02      	bgt.n	8004f78 <__sflush_r+0x20>
 8004f72:	2000      	movs	r0, #0
 8004f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	d0f9      	beq.n	8004f72 <__sflush_r+0x1a>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f84:	682f      	ldr	r7, [r5, #0]
 8004f86:	6a21      	ldr	r1, [r4, #32]
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	d032      	beq.n	8004ff2 <__sflush_r+0x9a>
 8004f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	075a      	lsls	r2, r3, #29
 8004f92:	d505      	bpl.n	8004fa0 <__sflush_r+0x48>
 8004f94:	6863      	ldr	r3, [r4, #4]
 8004f96:	1ac0      	subs	r0, r0, r3
 8004f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f9a:	b10b      	cbz	r3, 8004fa0 <__sflush_r+0x48>
 8004f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f9e:	1ac0      	subs	r0, r0, r3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fa6:	6a21      	ldr	r1, [r4, #32]
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b0      	blx	r6
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	d106      	bne.n	8004fc0 <__sflush_r+0x68>
 8004fb2:	6829      	ldr	r1, [r5, #0]
 8004fb4:	291d      	cmp	r1, #29
 8004fb6:	d848      	bhi.n	800504a <__sflush_r+0xf2>
 8004fb8:	4a29      	ldr	r2, [pc, #164]	; (8005060 <__sflush_r+0x108>)
 8004fba:	40ca      	lsrs	r2, r1
 8004fbc:	07d6      	lsls	r6, r2, #31
 8004fbe:	d544      	bpl.n	800504a <__sflush_r+0xf2>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	6062      	str	r2, [r4, #4]
 8004fc4:	04d9      	lsls	r1, r3, #19
 8004fc6:	6922      	ldr	r2, [r4, #16]
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	d504      	bpl.n	8004fd6 <__sflush_r+0x7e>
 8004fcc:	1c42      	adds	r2, r0, #1
 8004fce:	d101      	bne.n	8004fd4 <__sflush_r+0x7c>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b903      	cbnz	r3, 8004fd6 <__sflush_r+0x7e>
 8004fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8004fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fd8:	602f      	str	r7, [r5, #0]
 8004fda:	2900      	cmp	r1, #0
 8004fdc:	d0c9      	beq.n	8004f72 <__sflush_r+0x1a>
 8004fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe2:	4299      	cmp	r1, r3
 8004fe4:	d002      	beq.n	8004fec <__sflush_r+0x94>
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 f8de 	bl	80051a8 <_free_r>
 8004fec:	2000      	movs	r0, #0
 8004fee:	6360      	str	r0, [r4, #52]	; 0x34
 8004ff0:	e7c0      	b.n	8004f74 <__sflush_r+0x1c>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b0      	blx	r6
 8004ff8:	1c41      	adds	r1, r0, #1
 8004ffa:	d1c8      	bne.n	8004f8e <__sflush_r+0x36>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0c5      	beq.n	8004f8e <__sflush_r+0x36>
 8005002:	2b1d      	cmp	r3, #29
 8005004:	d001      	beq.n	800500a <__sflush_r+0xb2>
 8005006:	2b16      	cmp	r3, #22
 8005008:	d101      	bne.n	800500e <__sflush_r+0xb6>
 800500a:	602f      	str	r7, [r5, #0]
 800500c:	e7b1      	b.n	8004f72 <__sflush_r+0x1a>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005014:	81a3      	strh	r3, [r4, #12]
 8005016:	e7ad      	b.n	8004f74 <__sflush_r+0x1c>
 8005018:	690f      	ldr	r7, [r1, #16]
 800501a:	2f00      	cmp	r7, #0
 800501c:	d0a9      	beq.n	8004f72 <__sflush_r+0x1a>
 800501e:	0793      	lsls	r3, r2, #30
 8005020:	680e      	ldr	r6, [r1, #0]
 8005022:	bf08      	it	eq
 8005024:	694b      	ldreq	r3, [r1, #20]
 8005026:	600f      	str	r7, [r1, #0]
 8005028:	bf18      	it	ne
 800502a:	2300      	movne	r3, #0
 800502c:	eba6 0807 	sub.w	r8, r6, r7
 8005030:	608b      	str	r3, [r1, #8]
 8005032:	f1b8 0f00 	cmp.w	r8, #0
 8005036:	dd9c      	ble.n	8004f72 <__sflush_r+0x1a>
 8005038:	4643      	mov	r3, r8
 800503a:	463a      	mov	r2, r7
 800503c:	6a21      	ldr	r1, [r4, #32]
 800503e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005040:	4628      	mov	r0, r5
 8005042:	47b0      	blx	r6
 8005044:	2800      	cmp	r0, #0
 8005046:	dc06      	bgt.n	8005056 <__sflush_r+0xfe>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005054:	e78e      	b.n	8004f74 <__sflush_r+0x1c>
 8005056:	4407      	add	r7, r0
 8005058:	eba8 0800 	sub.w	r8, r8, r0
 800505c:	e7e9      	b.n	8005032 <__sflush_r+0xda>
 800505e:	bf00      	nop
 8005060:	20400001 	.word	0x20400001

08005064 <_fflush_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	690b      	ldr	r3, [r1, #16]
 8005068:	4605      	mov	r5, r0
 800506a:	460c      	mov	r4, r1
 800506c:	b1db      	cbz	r3, 80050a6 <_fflush_r+0x42>
 800506e:	b118      	cbz	r0, 8005078 <_fflush_r+0x14>
 8005070:	6983      	ldr	r3, [r0, #24]
 8005072:	b90b      	cbnz	r3, 8005078 <_fflush_r+0x14>
 8005074:	f7ff fa8e 	bl	8004594 <__sinit>
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <_fflush_r+0x48>)
 800507a:	429c      	cmp	r4, r3
 800507c:	d109      	bne.n	8005092 <_fflush_r+0x2e>
 800507e:	686c      	ldr	r4, [r5, #4]
 8005080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005084:	b17b      	cbz	r3, 80050a6 <_fflush_r+0x42>
 8005086:	4621      	mov	r1, r4
 8005088:	4628      	mov	r0, r5
 800508a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800508e:	f7ff bf63 	b.w	8004f58 <__sflush_r>
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <_fflush_r+0x4c>)
 8005094:	429c      	cmp	r4, r3
 8005096:	d101      	bne.n	800509c <_fflush_r+0x38>
 8005098:	68ac      	ldr	r4, [r5, #8]
 800509a:	e7f1      	b.n	8005080 <_fflush_r+0x1c>
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <_fflush_r+0x50>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	bf08      	it	eq
 80050a2:	68ec      	ldreq	r4, [r5, #12]
 80050a4:	e7ec      	b.n	8005080 <_fflush_r+0x1c>
 80050a6:	2000      	movs	r0, #0
 80050a8:	bd38      	pop	{r3, r4, r5, pc}
 80050aa:	bf00      	nop
 80050ac:	08005358 	.word	0x08005358
 80050b0:	08005378 	.word	0x08005378
 80050b4:	08005338 	.word	0x08005338

080050b8 <_lseek_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4c07      	ldr	r4, [pc, #28]	; (80050d8 <_lseek_r+0x20>)
 80050bc:	4605      	mov	r5, r0
 80050be:	4608      	mov	r0, r1
 80050c0:	4611      	mov	r1, r2
 80050c2:	2200      	movs	r2, #0
 80050c4:	6022      	str	r2, [r4, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f7fc f9f0 	bl	80014ac <_lseek>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_lseek_r+0x1e>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_lseek_r+0x1e>
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200001ac 	.word	0x200001ac

080050dc <__swhatbuf_r>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	460e      	mov	r6, r1
 80050e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	b096      	sub	sp, #88	; 0x58
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	da07      	bge.n	80050fe <__swhatbuf_r+0x22>
 80050ee:	2300      	movs	r3, #0
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	89b3      	ldrh	r3, [r6, #12]
 80050f4:	061a      	lsls	r2, r3, #24
 80050f6:	d410      	bmi.n	800511a <__swhatbuf_r+0x3e>
 80050f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fc:	e00e      	b.n	800511c <__swhatbuf_r+0x40>
 80050fe:	466a      	mov	r2, sp
 8005100:	f000 f8b2 	bl	8005268 <_fstat_r>
 8005104:	2800      	cmp	r0, #0
 8005106:	dbf2      	blt.n	80050ee <__swhatbuf_r+0x12>
 8005108:	9a01      	ldr	r2, [sp, #4]
 800510a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800510e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005112:	425a      	negs	r2, r3
 8005114:	415a      	adcs	r2, r3
 8005116:	602a      	str	r2, [r5, #0]
 8005118:	e7ee      	b.n	80050f8 <__swhatbuf_r+0x1c>
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	2000      	movs	r0, #0
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	b016      	add	sp, #88	; 0x58
 8005122:	bd70      	pop	{r4, r5, r6, pc}

08005124 <__smakebuf_r>:
 8005124:	898b      	ldrh	r3, [r1, #12]
 8005126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005128:	079d      	lsls	r5, r3, #30
 800512a:	4606      	mov	r6, r0
 800512c:	460c      	mov	r4, r1
 800512e:	d507      	bpl.n	8005140 <__smakebuf_r+0x1c>
 8005130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	2301      	movs	r3, #1
 800513a:	6163      	str	r3, [r4, #20]
 800513c:	b002      	add	sp, #8
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	ab01      	add	r3, sp, #4
 8005142:	466a      	mov	r2, sp
 8005144:	f7ff ffca 	bl	80050dc <__swhatbuf_r>
 8005148:	9900      	ldr	r1, [sp, #0]
 800514a:	4605      	mov	r5, r0
 800514c:	4630      	mov	r0, r6
 800514e:	f7ff faab 	bl	80046a8 <_malloc_r>
 8005152:	b948      	cbnz	r0, 8005168 <__smakebuf_r+0x44>
 8005154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005158:	059a      	lsls	r2, r3, #22
 800515a:	d4ef      	bmi.n	800513c <__smakebuf_r+0x18>
 800515c:	f023 0303 	bic.w	r3, r3, #3
 8005160:	f043 0302 	orr.w	r3, r3, #2
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	e7e3      	b.n	8005130 <__smakebuf_r+0xc>
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <__smakebuf_r+0x7c>)
 800516a:	62b3      	str	r3, [r6, #40]	; 0x28
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	6020      	str	r0, [r4, #0]
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	9b00      	ldr	r3, [sp, #0]
 8005178:	6163      	str	r3, [r4, #20]
 800517a:	9b01      	ldr	r3, [sp, #4]
 800517c:	6120      	str	r0, [r4, #16]
 800517e:	b15b      	cbz	r3, 8005198 <__smakebuf_r+0x74>
 8005180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005184:	4630      	mov	r0, r6
 8005186:	f000 f881 	bl	800528c <_isatty_r>
 800518a:	b128      	cbz	r0, 8005198 <__smakebuf_r+0x74>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	431d      	orrs	r5, r3
 800519c:	81a5      	strh	r5, [r4, #12]
 800519e:	e7cd      	b.n	800513c <__smakebuf_r+0x18>
 80051a0:	0800455d 	.word	0x0800455d

080051a4 <__malloc_lock>:
 80051a4:	4770      	bx	lr

080051a6 <__malloc_unlock>:
 80051a6:	4770      	bx	lr

080051a8 <_free_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4605      	mov	r5, r0
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d045      	beq.n	800523c <_free_r+0x94>
 80051b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b4:	1f0c      	subs	r4, r1, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfb8      	it	lt
 80051ba:	18e4      	addlt	r4, r4, r3
 80051bc:	f7ff fff2 	bl	80051a4 <__malloc_lock>
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <_free_r+0x98>)
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	4610      	mov	r0, r2
 80051c6:	b933      	cbnz	r3, 80051d6 <_free_r+0x2e>
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	6014      	str	r4, [r2, #0]
 80051cc:	4628      	mov	r0, r5
 80051ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d2:	f7ff bfe8 	b.w	80051a6 <__malloc_unlock>
 80051d6:	42a3      	cmp	r3, r4
 80051d8:	d90c      	bls.n	80051f4 <_free_r+0x4c>
 80051da:	6821      	ldr	r1, [r4, #0]
 80051dc:	1862      	adds	r2, r4, r1
 80051de:	4293      	cmp	r3, r2
 80051e0:	bf04      	itt	eq
 80051e2:	681a      	ldreq	r2, [r3, #0]
 80051e4:	685b      	ldreq	r3, [r3, #4]
 80051e6:	6063      	str	r3, [r4, #4]
 80051e8:	bf04      	itt	eq
 80051ea:	1852      	addeq	r2, r2, r1
 80051ec:	6022      	streq	r2, [r4, #0]
 80051ee:	6004      	str	r4, [r0, #0]
 80051f0:	e7ec      	b.n	80051cc <_free_r+0x24>
 80051f2:	4613      	mov	r3, r2
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	b10a      	cbz	r2, 80051fc <_free_r+0x54>
 80051f8:	42a2      	cmp	r2, r4
 80051fa:	d9fa      	bls.n	80051f2 <_free_r+0x4a>
 80051fc:	6819      	ldr	r1, [r3, #0]
 80051fe:	1858      	adds	r0, r3, r1
 8005200:	42a0      	cmp	r0, r4
 8005202:	d10b      	bne.n	800521c <_free_r+0x74>
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	4401      	add	r1, r0
 8005208:	1858      	adds	r0, r3, r1
 800520a:	4282      	cmp	r2, r0
 800520c:	6019      	str	r1, [r3, #0]
 800520e:	d1dd      	bne.n	80051cc <_free_r+0x24>
 8005210:	6810      	ldr	r0, [r2, #0]
 8005212:	6852      	ldr	r2, [r2, #4]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	4401      	add	r1, r0
 8005218:	6019      	str	r1, [r3, #0]
 800521a:	e7d7      	b.n	80051cc <_free_r+0x24>
 800521c:	d902      	bls.n	8005224 <_free_r+0x7c>
 800521e:	230c      	movs	r3, #12
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	e7d3      	b.n	80051cc <_free_r+0x24>
 8005224:	6820      	ldr	r0, [r4, #0]
 8005226:	1821      	adds	r1, r4, r0
 8005228:	428a      	cmp	r2, r1
 800522a:	bf04      	itt	eq
 800522c:	6811      	ldreq	r1, [r2, #0]
 800522e:	6852      	ldreq	r2, [r2, #4]
 8005230:	6062      	str	r2, [r4, #4]
 8005232:	bf04      	itt	eq
 8005234:	1809      	addeq	r1, r1, r0
 8005236:	6021      	streq	r1, [r4, #0]
 8005238:	605c      	str	r4, [r3, #4]
 800523a:	e7c7      	b.n	80051cc <_free_r+0x24>
 800523c:	bd38      	pop	{r3, r4, r5, pc}
 800523e:	bf00      	nop
 8005240:	20000090 	.word	0x20000090

08005244 <_read_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4c07      	ldr	r4, [pc, #28]	; (8005264 <_read_r+0x20>)
 8005248:	4605      	mov	r5, r0
 800524a:	4608      	mov	r0, r1
 800524c:	4611      	mov	r1, r2
 800524e:	2200      	movs	r2, #0
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f7fc f8ca 	bl	80013ec <_read>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_read_r+0x1e>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	b103      	cbz	r3, 8005262 <_read_r+0x1e>
 8005260:	602b      	str	r3, [r5, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	200001ac 	.word	0x200001ac

08005268 <_fstat_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4c07      	ldr	r4, [pc, #28]	; (8005288 <_fstat_r+0x20>)
 800526c:	2300      	movs	r3, #0
 800526e:	4605      	mov	r5, r0
 8005270:	4608      	mov	r0, r1
 8005272:	4611      	mov	r1, r2
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	f7fc f8fe 	bl	8001476 <_fstat>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	d102      	bne.n	8005284 <_fstat_r+0x1c>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	b103      	cbz	r3, 8005284 <_fstat_r+0x1c>
 8005282:	602b      	str	r3, [r5, #0]
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	bf00      	nop
 8005288:	200001ac 	.word	0x200001ac

0800528c <_isatty_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4c06      	ldr	r4, [pc, #24]	; (80052a8 <_isatty_r+0x1c>)
 8005290:	2300      	movs	r3, #0
 8005292:	4605      	mov	r5, r0
 8005294:	4608      	mov	r0, r1
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	f7fc f8fd 	bl	8001496 <_isatty>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_isatty_r+0x1a>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_isatty_r+0x1a>
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	200001ac 	.word	0x200001ac

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
