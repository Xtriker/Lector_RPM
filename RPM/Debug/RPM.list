
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c1c  08003c1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c24  08003c24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003c38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003c38  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106fb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002106  00000000  00000000  00030737  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00032840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  000336f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f64  00000000  00000000  00034498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b776  00000000  00000000  000373fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa10d  00000000  00000000  00042b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ecc7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce0  00000000  00000000  000eccfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003bb8 	.word	0x08003bb8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003bb8 	.word	0x08003bb8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <app_SeleccionDisplay>:
}

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d86f      	bhi.n	80005bc <app_SeleccionDisplay+0xf0>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <app_SeleccionDisplay+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	080004f5 	.word	0x080004f5
 80004e8:	08000527 	.word	0x08000527
 80004ec:	08000559 	.word	0x08000559
 80004f0:	0800058b 	.word	0x0800058b
	{
		case 0:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fe:	f001 f9cb 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 f9c4 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	4837      	ldr	r0, [pc, #220]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000516:	f001 f9bf 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4835      	ldr	r0, [pc, #212]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000520:	f001 f9ba 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000524:	e062      	b.n	80005ec <app_SeleccionDisplay+0x120>
		case 1:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f001 f9b2 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f001 f9ab 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	482b      	ldr	r0, [pc, #172]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000548:	f001 f9a6 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	4828      	ldr	r0, [pc, #160]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000552:	f001 f9a1 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000556:	e049      	b.n	80005ec <app_SeleccionDisplay+0x120>
		case 2:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f001 f999 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 f992 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2120      	movs	r1, #32
 8000578:	481e      	ldr	r0, [pc, #120]	; (80005f4 <app_SeleccionDisplay+0x128>)
 800057a:	f001 f98d 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2110      	movs	r1, #16
 8000582:	481c      	ldr	r0, [pc, #112]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000584:	f001 f988 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000588:	e030      	b.n	80005ec <app_SeleccionDisplay+0x120>
		case 3:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f001 f980 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 f979 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	4812      	ldr	r0, [pc, #72]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005ac:	f001 f974 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2110      	movs	r1, #16
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005b6:	f001 f96f 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 80005ba:	e017      	b.n	80005ec <app_SeleccionDisplay+0x120>
		default:
		{
			/* Envia todos los displays a 1 logicos */
			HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f001 f967 	bl	8001898 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f001 f960 	bl	8001898 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2120      	movs	r1, #32
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005de:	f001 f95b 	bl	8001898 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2110      	movs	r1, #16
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005e8:	f001 f956 	bl	8001898 <HAL_GPIO_WritePin>
		}
	}
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	48000400 	.word	0x48000400

080005f8 <app_LetrasADisplay>:

}

/* Impresion de letras en display de 7 segmentos */
void app_LetrasADisplay(char Letras)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	//volatile uint8_t i=0;
	switch(Letras)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3b61      	subs	r3, #97	; 0x61
 8000606:	2b18      	cmp	r3, #24
 8000608:	f200 82f7 	bhi.w	8000bfa <app_LetrasADisplay+0x602>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <app_LetrasADisplay+0x1c>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000679 	.word	0x08000679
 8000618:	080006c7 	.word	0x080006c7
 800061c:	08000715 	.word	0x08000715
 8000620:	08000763 	.word	0x08000763
 8000624:	080007b1 	.word	0x080007b1
 8000628:	080007ff 	.word	0x080007ff
 800062c:	0800084d 	.word	0x0800084d
 8000630:	0800089b 	.word	0x0800089b
 8000634:	080008e9 	.word	0x080008e9
 8000638:	08000937 	.word	0x08000937
 800063c:	08000bfb 	.word	0x08000bfb
 8000640:	08000985 	.word	0x08000985
 8000644:	08000bfb 	.word	0x08000bfb
 8000648:	080009d9 	.word	0x080009d9
 800064c:	08000a27 	.word	0x08000a27
 8000650:	08000bfb 	.word	0x08000bfb
 8000654:	08000bfb 	.word	0x08000bfb
 8000658:	08000a75 	.word	0x08000a75
 800065c:	08000ac3 	.word	0x08000ac3
 8000660:	08000bfb 	.word	0x08000bfb
 8000664:	08000b5f 	.word	0x08000b5f
 8000668:	08000b11 	.word	0x08000b11
 800066c:	08000bfb 	.word	0x08000bfb
 8000670:	08000bfb 	.word	0x08000bfb
 8000674:	08000bad 	.word	0x08000bad
		{
			case 'A' | 'a':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f001 f909 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2102      	movs	r1, #2
 800068a:	48d2      	ldr	r0, [pc, #840]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800068c:	f001 f904 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2104      	movs	r1, #4
 8000694:	48cf      	ldr	r0, [pc, #828]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000696:	f001 f8ff 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2101      	movs	r1, #1
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f001 f8f9 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2110      	movs	r1, #16
 80006aa:	48ca      	ldr	r0, [pc, #808]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006ac:	f001 f8f4 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	48c7      	ldr	r0, [pc, #796]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006b6:	f001 f8ef 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	48c5      	ldr	r0, [pc, #788]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006c0:	f001 f8ea 	bl	8001898 <HAL_GPIO_WritePin>

			}break;
 80006c4:	e299      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'B' | 'b':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f001 f8e2 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	48be      	ldr	r0, [pc, #760]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006da:	f001 f8dd 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2104      	movs	r1, #4
 80006e2:	48bc      	ldr	r0, [pc, #752]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006e4:	f001 f8d8 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2101      	movs	r1, #1
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f001 f8d2 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	48b6      	ldr	r0, [pc, #728]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006fa:	f001 f8cd 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	48b4      	ldr	r0, [pc, #720]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000704:	f001 f8c8 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	48b1      	ldr	r0, [pc, #708]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800070e:	f001 f8c3 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000712:	e272      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'C' | 'c':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 f8bb 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2102      	movs	r1, #2
 8000726:	48ab      	ldr	r0, [pc, #684]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000728:	f001 f8b6 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	48a8      	ldr	r0, [pc, #672]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000732:	f001 f8b1 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	2101      	movs	r1, #1
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f001 f8ab 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	2110      	movs	r1, #16
 8000746:	48a3      	ldr	r0, [pc, #652]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000748:	f001 f8a6 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	48a0      	ldr	r0, [pc, #640]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000752:	f001 f8a1 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	489e      	ldr	r0, [pc, #632]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800075c:	f001 f89c 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000760:	e24b      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'D' | 'd':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f001 f894 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	4897      	ldr	r0, [pc, #604]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000776:	f001 f88f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	2104      	movs	r1, #4
 800077e:	4895      	ldr	r0, [pc, #596]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000780:	f001 f88a 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	2101      	movs	r1, #1
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f001 f884 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	488f      	ldr	r0, [pc, #572]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000796:	f001 f87f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	488d      	ldr	r0, [pc, #564]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007a0:	f001 f87a 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	488a      	ldr	r0, [pc, #552]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007aa:	f001 f875 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 80007ae:	e224      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'E' | 'e':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 f86d 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	4884      	ldr	r0, [pc, #528]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007c4:	f001 f868 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2104      	movs	r1, #4
 80007cc:	4881      	ldr	r0, [pc, #516]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007ce:	f001 f863 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2101      	movs	r1, #1
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 f85d 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	487c      	ldr	r0, [pc, #496]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007e4:	f001 f858 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	4879      	ldr	r0, [pc, #484]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007ee:	f001 f853 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	4877      	ldr	r0, [pc, #476]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007f8:	f001 f84e 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 80007fc:	e1fd      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'F' | 'f':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f001 f846 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2102      	movs	r1, #2
 8000810:	4870      	ldr	r0, [pc, #448]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000812:	f001 f841 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2104      	movs	r1, #4
 800081a:	486e      	ldr	r0, [pc, #440]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800081c:	f001 f83c 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f001 f836 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2110      	movs	r1, #16
 8000830:	4868      	ldr	r0, [pc, #416]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000832:	f001 f831 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4866      	ldr	r0, [pc, #408]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800083c:	f001 f82c 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4863      	ldr	r0, [pc, #396]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000846:	f001 f827 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 800084a:	e1d6      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'G' | 'g':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f001 f81f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	2102      	movs	r1, #2
 800085e:	485d      	ldr	r0, [pc, #372]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000860:	f001 f81a 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	2104      	movs	r1, #4
 8000868:	485a      	ldr	r0, [pc, #360]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800086a:	f001 f815 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f001 f80f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2110      	movs	r1, #16
 800087e:	4855      	ldr	r0, [pc, #340]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000880:	f001 f80a 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4852      	ldr	r0, [pc, #328]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800088a:	f001 f805 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800088e:	2201      	movs	r2, #1
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	4850      	ldr	r0, [pc, #320]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000894:	f001 f800 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000898:	e1af      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'H' | 'h':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 fff8 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2102      	movs	r1, #2
 80008ac:	4849      	ldr	r0, [pc, #292]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008ae:	f000 fff3 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2104      	movs	r1, #4
 80008b6:	4847      	ldr	r0, [pc, #284]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008b8:	f000 ffee 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f000 ffe8 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	4841      	ldr	r0, [pc, #260]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008ce:	f000 ffe3 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	483f      	ldr	r0, [pc, #252]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008d8:	f000 ffde 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80008dc:	2201      	movs	r2, #1
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008e2:	f000 ffd9 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 80008e6:	e188      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'I' | 'i':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 ffd1 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	4836      	ldr	r0, [pc, #216]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008fc:	f000 ffcc 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2104      	movs	r1, #4
 8000904:	4833      	ldr	r0, [pc, #204]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000906:	f000 ffc7 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2101      	movs	r1, #1
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 ffc1 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	2110      	movs	r1, #16
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800091c:	f000 ffbc 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	482b      	ldr	r0, [pc, #172]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000926:	f000 ffb7 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	4829      	ldr	r0, [pc, #164]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000930:	f000 ffb2 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000934:	e161      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'J' | 'j':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f000 ffaa 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	2102      	movs	r1, #2
 8000948:	4822      	ldr	r0, [pc, #136]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800094a:	f000 ffa5 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	4820      	ldr	r0, [pc, #128]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000954:	f000 ffa0 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 ff9a 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2110      	movs	r1, #16
 8000968:	481a      	ldr	r0, [pc, #104]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800096a:	f000 ff95 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2140      	movs	r1, #64	; 0x40
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000974:	f000 ff90 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800097e:	f000 ff8b 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000982:	e13a      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'L' | 'l':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f000 ff83 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2102      	movs	r1, #2
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000998:	f000 ff7e 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009a2:	f000 ff79 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2101      	movs	r1, #1
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 ff73 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2110      	movs	r1, #16
 80009b6:	4807      	ldr	r0, [pc, #28]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009b8:	f000 ff6e 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009c2:	f000 ff69 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	4802      	ldr	r0, [pc, #8]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009cc:	f000 ff64 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 80009d0:	e113      	b.n	8000bfa <app_LetrasADisplay+0x602>
 80009d2:	bf00      	nop
 80009d4:	48000800 	.word	0x48000800
			case 'N' | 'n':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 ff59 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2102      	movs	r1, #2
 80009ea:	4886      	ldr	r0, [pc, #536]	; (8000c04 <app_LetrasADisplay+0x60c>)
 80009ec:	f000 ff54 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2104      	movs	r1, #4
 80009f4:	4883      	ldr	r0, [pc, #524]	; (8000c04 <app_LetrasADisplay+0x60c>)
 80009f6:	f000 ff4f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 ff49 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2110      	movs	r1, #16
 8000a0a:	487e      	ldr	r0, [pc, #504]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a0c:	f000 ff44 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	487b      	ldr	r0, [pc, #492]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a16:	f000 ff3f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4879      	ldr	r0, [pc, #484]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a20:	f000 ff3a 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000a24:	e0e9      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'O' | 'o':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f000 ff32 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	4872      	ldr	r0, [pc, #456]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a3a:	f000 ff2d 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2104      	movs	r1, #4
 8000a42:	4870      	ldr	r0, [pc, #448]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a44:	f000 ff28 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f000 ff22 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	486a      	ldr	r0, [pc, #424]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a5a:	f000 ff1d 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	4868      	ldr	r0, [pc, #416]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a64:	f000 ff18 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4865      	ldr	r0, [pc, #404]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a6e:	f000 ff13 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000a72:	e0c2      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'R' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f000 ff0b 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	485f      	ldr	r0, [pc, #380]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a88:	f000 ff06 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2104      	movs	r1, #4
 8000a90:	485c      	ldr	r0, [pc, #368]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a92:	f000 ff01 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f000 fefb 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	4857      	ldr	r0, [pc, #348]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000aa8:	f000 fef6 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	4854      	ldr	r0, [pc, #336]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ab2:	f000 fef1 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	4852      	ldr	r0, [pc, #328]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000abc:	f000 feec 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000ac0:	e09b      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'S' | 's':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fee4 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	484b      	ldr	r0, [pc, #300]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ad6:	f000 fedf 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2104      	movs	r1, #4
 8000ade:	4849      	ldr	r0, [pc, #292]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ae0:	f000 feda 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fed4 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	4843      	ldr	r0, [pc, #268]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000af6:	f000 fecf 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4841      	ldr	r0, [pc, #260]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b00:	f000 feca 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	483e      	ldr	r0, [pc, #248]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b0a:	f000 fec5 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000b0e:	e074      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'T' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 febd 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	4838      	ldr	r0, [pc, #224]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b24:	f000 feb8 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4835      	ldr	r0, [pc, #212]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b2e:	f000 feb3 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2101      	movs	r1, #1
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f000 fead 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2110      	movs	r1, #16
 8000b42:	4830      	ldr	r0, [pc, #192]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b44:	f000 fea8 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	482d      	ldr	r0, [pc, #180]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b4e:	f000 fea3 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	482b      	ldr	r0, [pc, #172]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b58:	f000 fe9e 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000b5c:	e04d      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'U' | 'u':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fe96 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b72:	f000 fe91 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b7c:	f000 fe8c 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fe86 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	481c      	ldr	r0, [pc, #112]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b92:	f000 fe81 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	481a      	ldr	r0, [pc, #104]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b9c:	f000 fe7c 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4817      	ldr	r0, [pc, #92]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ba6:	f000 fe77 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000baa:	e026      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'Y' | 'y':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f000 fe6f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4811      	ldr	r0, [pc, #68]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bc0:	f000 fe6a 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bca:	f000 fe65 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fe5f 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2110      	movs	r1, #16
 8000bde:	4809      	ldr	r0, [pc, #36]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000be0:	f000 fe5a 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bea:	f000 fe55 	bl	8001898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bf4:	f000 fe50 	bl	8001898 <HAL_GPIO_WritePin>
			}break;
 8000bf8:	bf00      	nop
			default:
			{
				/*No hace nada */
			}
		}
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	48000800 	.word	0x48000800

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fb2d 	bl	800126a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f80c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f902 	bl	8000e1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 f8d0 	bl	8000dbc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c1c:	f000 f880 	bl	8000d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <main+0x20>)
 8000c22:	f001 ff23 	bl	8002a6c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <main+0x1e>
 8000c28:	20000028 	.word	0x20000028

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0a4      	sub	sp, #144	; 0x90
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c36:	2244      	movs	r2, #68	; 0x44
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 ffb4 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2234      	movs	r2, #52	; 0x34
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 ffa6 	bl	8003ba8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000c5c:	f000 fe66 	bl	800192c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c60:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <SystemClock_Config+0xf0>)
 8000c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <SystemClock_Config+0xf0>)
 8000c68:	f023 0318 	bic.w	r3, r3, #24
 8000c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c74:	f000 fe78 	bl	8001968 <HAL_PWREx_ControlVoltageScaling>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000c7e:	f000 f997 	bl	8000fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c82:	2314      	movs	r3, #20
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c86:	2301      	movs	r3, #1
 8000c88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c92:	2360      	movs	r3, #96	; 0x60
 8000c94:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 45;
 8000ca4:	232d      	movs	r3, #45	; 0x2d
 8000ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 feaa 	bl	8001a14 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cc6:	f000 f973 	bl	8000fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fafa 	bl	80022e0 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cf2:	f000 f95d 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fcf1 	bl	80026e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000d0c:	f000 f950 	bl	8000fb0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d10:	f001 fe70 	bl	80029f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d14:	bf00      	nop
 8000d16:	3790      	adds	r7, #144	; 0x90
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d48:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d6a:	f001 fe53 	bl	8002a14 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d74:	f000 f91c 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d86:	f001 ffba 	bl	8002cfe <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d90:	f000 f90e 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000da2:	f002 f995 	bl	80030d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dac:	f000 f900 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000028 	.word	0x20000028

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <MX_USART2_UART_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000e00:	f002 f9ea 	bl	80031d8 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f000 f8d1 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000007c 	.word	0x2000007c
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a50      	ldr	r2, [pc, #320]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	4b4b      	ldr	r3, [pc, #300]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a3e      	ldr	r2, [pc, #248]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <MX_GPIO_Init+0x15c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8000e98:	4838      	ldr	r0, [pc, #224]	; (8000f7c <MX_GPIO_Init+0x160>)
 8000e9a:	f000 fcfd 	bl	8001898 <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f241 5131 	movw	r1, #5425	; 0x1531
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f000 fcf6 	bl	8001898 <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Display_3_Pin|Display_2_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f242 0130 	movw	r1, #8240	; 0x2030
 8000eb2:	4833      	ldr	r0, [pc, #204]	; (8000f80 <MX_GPIO_Init+0x164>)
 8000eb4:	f000 fcf0 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boton_azul_Pin */
  GPIO_InitStruct.Pin = Boton_azul_Pin;
 8000eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <MX_GPIO_Init+0x168>)
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_azul_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	482b      	ldr	r0, [pc, #172]	; (8000f7c <MX_GPIO_Init+0x160>)
 8000ece:	f000 fb71 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8000ed2:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8000ed6:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4824      	ldr	r0, [pc, #144]	; (8000f7c <MX_GPIO_Init+0x160>)
 8000eec:	f000 fb62 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8000ef0:	f241 5331 	movw	r3, #5425	; 0x1531
 8000ef4:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f000 fb52 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Display_3_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Display_3_Pin|Display_2_Pin;
 8000f10:	f242 0330 	movw	r3, #8240	; 0x2030
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4815      	ldr	r0, [pc, #84]	; (8000f80 <MX_GPIO_Init+0x164>)
 8000f2a:	f000 fb43 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <MX_GPIO_Init+0x160>)
 8000f44:	f000 fb36 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 8000f48:	2340      	movs	r3, #64	; 0x40
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_GPIO_Init+0x164>)
 8000f5c:	f000 fb2a 	bl	80015b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2028      	movs	r0, #40	; 0x28
 8000f66:	f000 faee 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f6a:	2028      	movs	r0, #40	; 0x28
 8000f6c:	f000 fb07 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000400 	.word	0x48000400
 8000f84:	10210000 	.word	0x10210000

08000f88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == Boton_azul_Pin)
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f98:	d104      	bne.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <HAL_GPIO_EXTI_Callback+0x24>)
 8000fa0:	f000 fc92 	bl	80018c8 <HAL_GPIO_TogglePin>
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	48000400 	.word	0x48000400

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x44>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_MspInit+0x44>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_MspInit+0x44>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x44>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x44>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x44>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d113      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6593      	str	r3, [r2, #88]	; 0x58
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201c      	movs	r0, #28
 8001038:	f000 fa85 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103c:	201c      	movs	r0, #28
 800103e:	f000 fa9e 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_UART_MspInit+0x7c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d128      	bne.n	80010c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_UART_MspInit+0x80>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <HAL_UART_MspInit+0x80>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_UART_MspInit+0x80>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_UART_MspInit+0x80>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_UART_MspInit+0x80>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UART_MspInit+0x80>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b2:	2307      	movs	r3, #7
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f000 fa78 	bl	80015b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40004400 	.word	0x40004400
 80010d0:	40021000 	.word	0x40021000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  char mensaje[]= {'e','r','r','o'};
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <HardFault_Handler+0x58>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	607b      	str	r3, [r7, #4]
	  app_SeleccionDisplay(0);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff f9eb 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[0]);
 80010f6:	793b      	ldrb	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa7d 	bl	80005f8 <app_LetrasADisplay>
	  HAL_Delay(3);
 80010fe:	2003      	movs	r0, #3
 8001100:	f000 f924 	bl	800134c <HAL_Delay>
	  app_SeleccionDisplay(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff f9e1 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[1]);
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa73 	bl	80005f8 <app_LetrasADisplay>
	  HAL_Delay(3);
 8001112:	2003      	movs	r0, #3
 8001114:	f000 f91a 	bl	800134c <HAL_Delay>
	  app_SeleccionDisplay(2);
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff f9d7 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[2]);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa69 	bl	80005f8 <app_LetrasADisplay>
	  HAL_Delay(3);
 8001126:	2003      	movs	r0, #3
 8001128:	f000 f910 	bl	800134c <HAL_Delay>
	  app_SeleccionDisplay(3);
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff f9cd 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[3]);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa5f 	bl	80005f8 <app_LetrasADisplay>
  {
 800113a:	e7d6      	b.n	80010ea <HardFault_Handler+0x6>
 800113c:	08003bd0 	.word	0x08003bd0

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f8c6 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM2_IRQHandler+0x10>)
 800118e:	f001 fc97 	bl	8002ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000028 	.word	0x20000028

0800119c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a4:	f000 fbaa 	bl	80018fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <SystemInit+0x64>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <SystemInit+0x64>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <SystemInit+0x68>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <SystemInit+0x68>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <SystemInit+0x68>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <SystemInit+0x68>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <SystemInit+0x68>)
 80011d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <SystemInit+0x68>)
 80011e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SystemInit+0x68>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <SystemInit+0x68>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <SystemInit+0x68>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SystemInit+0x64>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001202:	609a      	str	r2, [r3, #8]
#endif
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	40021000 	.word	0x40021000

08001218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800121c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800121e:	e003      	b.n	8001228 <LoopCopyDataInit>

08001220 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001222:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001224:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001226:	3104      	adds	r1, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <LoopForever+0xa>)
	ldr	r3, =_edata
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <LoopForever+0xe>)
	adds	r2, r0, r1
 800122c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800122e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001230:	d3f6      	bcc.n	8001220 <CopyDataInit>
	ldr	r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001234:	e002      	b.n	800123c <LoopFillZerobss>

08001236 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001236:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001238:	f842 3b04 	str.w	r3, [r2], #4

0800123c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <LoopForever+0x16>)
	cmp	r2, r3
 800123e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001240:	d3f9      	bcc.n	8001236 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001242:	f7ff ffb3 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f002 fc8b 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124a:	f7ff fcdd 	bl	8000c08 <main>

0800124e <LoopForever>:

LoopForever:
    b LoopForever
 800124e:	e7fe      	b.n	800124e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001250:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001254:	08003c2c 	.word	0x08003c2c
	ldr	r0, =_sdata
 8001258:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800125c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001260:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001264:	20000100 	.word	0x20000100

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>

0800126a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f95b 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f80e 	bl	800129c <HAL_InitTick>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	e001      	b.n	8001290 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800128c:	f7ff fe98 	bl	8000fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001290:	79fb      	ldrb	r3, [r7, #7]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_InitTick+0x68>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d022      	beq.n	80012f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_InitTick+0x6c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_InitTick+0x68>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f968 	bl	800159a <HAL_SYSTICK_Config>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10f      	bne.n	80012f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d809      	bhi.n	80012ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d6:	2200      	movs	r2, #0
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	f04f 30ff 	mov.w	r0, #4294967295
 80012de:	f000 f932 	bl	8001546 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_InitTick+0x70>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e007      	b.n	80012fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e004      	b.n	80012fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000008 	.word	0x20000008
 8001308:	20000000 	.word	0x20000000
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_IncTick+0x1c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x20>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_IncTick+0x1c>)
 8001320:	6013      	str	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	200000fc 	.word	0x200000fc
 8001330:	20000008 	.word	0x20000008

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200000fc 	.word	0x200000fc

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d004      	beq.n	8001370 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_Delay+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001370:	bf00      	nop
 8001372:	f7ff ffdf 	bl	8001334 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d8f7      	bhi.n	8001372 <HAL_Delay+0x26>
  {
  }
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	e14e      	b.n	8001862 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8140 	beq.w	800185c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d00b      	beq.n	80015fc <HAL_GPIO_Init+0x48>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f0:	2b11      	cmp	r3, #17
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b12      	cmp	r3, #18
 80015fa:	d130      	bne.n	800165e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001632:	2201      	movs	r2, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	f003 0201 	and.w	r2, r3, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0xea>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b12      	cmp	r3, #18
 800169c:	d123      	bne.n	80016e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	6939      	ldr	r1, [r7, #16]
 80016e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0203 	and.w	r2, r3, #3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 809a 	beq.w	800185c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001728:	4b55      	ldr	r3, [pc, #340]	; (8001880 <HAL_GPIO_Init+0x2cc>)
 800172a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172c:	4a54      	ldr	r2, [pc, #336]	; (8001880 <HAL_GPIO_Init+0x2cc>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6613      	str	r3, [r2, #96]	; 0x60
 8001734:	4b52      	ldr	r3, [pc, #328]	; (8001880 <HAL_GPIO_Init+0x2cc>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001740:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_GPIO_Init+0x2d0>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800176a:	d013      	beq.n	8001794 <HAL_GPIO_Init+0x1e0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_GPIO_Init+0x2d4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_GPIO_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_GPIO_Init+0x2d8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <HAL_GPIO_Init+0x1d8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a44      	ldr	r2, [pc, #272]	; (8001890 <HAL_GPIO_Init+0x2dc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_GPIO_Init+0x1d4>
 8001784:	2303      	movs	r3, #3
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 8001788:	2307      	movs	r3, #7
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 8001794:	2300      	movs	r3, #0
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a6:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_GPIO_Init+0x2d0>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017b4:	4b37      	ldr	r3, [pc, #220]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d8:	4a2e      	ldr	r2, [pc, #184]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001802:	4a24      	ldr	r2, [pc, #144]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f aea9 	bne.w	80015c4 <HAL_GPIO_Init+0x10>
  }
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	48000c00 	.word	0x48000c00
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e0:	887a      	ldrh	r2, [r7, #2]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e8:	887a      	ldrh	r2, [r7, #2]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fb34 	bl	8000f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_PWREx_GetVoltageRange+0x18>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40007000 	.word	0x40007000

08001968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001976:	d130      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001984:	d038      	beq.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001994:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2232      	movs	r2, #50	; 0x32
 800199c:	fb02 f303 	mul.w	r3, r2, r3
 80019a0:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0c9b      	lsrs	r3, r3, #18
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ac:	e002      	b.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d102      	bne.n	80019c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f2      	bne.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d4:	d110      	bne.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e00f      	b.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e6:	d007      	beq.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f0:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	431bde83 	.word	0x431bde83

08001a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f000 bc56 	b.w	80022d4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a28:	4ba1      	ldr	r3, [pc, #644]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a32:	4b9f      	ldr	r3, [pc, #636]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80e6 	beq.w	8001c16 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4c>
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	f040 808d 	bne.w	8001b72 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	f040 8089 	bne.w	8001b72 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a60:	4b93      	ldr	r3, [pc, #588]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_RCC_OscConfig+0x66>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f000 bc2d 	b.w	80022d4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7e:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_RCC_OscConfig+0x80>
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a92:	e005      	b.n	8001aa0 <HAL_RCC_OscConfig+0x8c>
 8001a94:	4b86      	ldr	r3, [pc, #536]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d224      	bcs.n	8001aee <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fdbd 	bl	8002628 <RCC_SetFlashLatencyFromMSIRange>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f000 bc0d 	b.w	80022d4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aba:	4b7d      	ldr	r3, [pc, #500]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7c      	ldr	r2, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	4977      	ldr	r1, [pc, #476]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad8:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	4972      	ldr	r1, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e025      	b.n	8001b3a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aee:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6f      	ldr	r2, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	496a      	ldr	r1, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	4965      	ldr	r1, [pc, #404]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fd7c 	bl	8002628 <RCC_SetFlashLatencyFromMSIRange>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e3cc      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3a:	f000 fcb3 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4601      	mov	r1, r0
 8001b40:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x2a0>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	fa21 f303 	lsr.w	r3, r1, r3
 8001b56:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_OscConfig+0x2a4>)
 8001b58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b5a:	4b58      	ldr	r3, [pc, #352]	; (8001cbc <HAL_RCC_OscConfig+0x2a8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb9c 	bl	800129c <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d052      	beq.n	8001c14 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	e3b0      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d032      	beq.n	8001be0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a4c      	ldr	r2, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fbd5 	bl	8001334 <HAL_GetTick>
 8001b8a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fbd1 	bl	8001334 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e399      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bac:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a3f      	ldr	r2, [pc, #252]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	493a      	ldr	r1, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4935      	ldr	r1, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
 8001bde:	e01a      	b.n	8001c16 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be0:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fba2 	bl	8001334 <HAL_GetTick>
 8001bf0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fb9e 	bl	8001334 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e366      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x1e0>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d073      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x220>
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d10e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d063      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2f4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d15f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e343      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x250>
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x28c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x274>
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x28c>
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <HAL_RCC_OscConfig+0x29c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb44 	bl	8001334 <HAL_GetTick>
 8001cac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	e010      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2be>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08003bd4 	.word	0x08003bd4
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fb38 	bl	8001334 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e300      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd2:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2ac>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb28 	bl	8001334 <HAL_GetTick>
 8001ce4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb24 	bl	8001334 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e2ec      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	4b96      	ldr	r3, [pc, #600]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2d4>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d060      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x314>
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d116      	bne.n	8001d56 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d28:	4b8a      	ldr	r3, [pc, #552]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x32c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e2c9      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b84      	ldr	r3, [pc, #528]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	4981      	ldr	r1, [pc, #516]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d54:	e040      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d023      	beq.n	8001da6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d5e:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7c      	ldr	r2, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fae3 	bl	8001334 <HAL_GetTick>
 8001d6e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fadf 	bl	8001334 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e2a7      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	496d      	ldr	r1, [pc, #436]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e018      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6a      	ldr	r2, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fabf 	bl	8001334 <HAL_GetTick>
 8001db6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fabb 	bl	8001334 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e283      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dcc:	4b61      	ldr	r3, [pc, #388]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d07f      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05f      	beq.n	8001eac <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d037      	beq.n	8001e72 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e25c      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	4a4a      	ldr	r2, [pc, #296]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e34:	f7ff fa7e 	bl	8001334 <HAL_GetTick>
 8001e38:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fa7a 	bl	8001334 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b11      	cmp	r3, #17
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e242      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ef      	bne.n	8001e3c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	f023 0210 	bic.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	493a      	ldr	r1, [pc, #232]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e78:	4a36      	ldr	r2, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa57 	bl	8001334 <HAL_GetTick>
 8001e86:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fa53 	bl	8001334 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b11      	cmp	r3, #17
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e21b      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0ef      	beq.n	8001e8a <HAL_RCC_OscConfig+0x476>
 8001eaa:	e01b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fa3a 	bl	8001334 <HAL_GetTick>
 8001ec0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fa36 	bl	8001334 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b11      	cmp	r3, #17
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1fe      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ef      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80c1 	beq.w	8002074 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10e      	bne.n	8001f22 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_OscConfig+0x540>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_RCC_OscConfig+0x544>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_OscConfig+0x544>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_RCC_OscConfig+0x544>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f9fb 	bl	8001334 <HAL_GetTick>
 8001f3e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f40:	e00c      	b.n	8001f5c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f42:	f7ff f9f7 	bl	8001334 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d905      	bls.n	8001f5c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1bf      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5c:	4bb1      	ldr	r3, [pc, #708]	; (8002224 <HAL_RCC_OscConfig+0x810>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ec      	beq.n	8001f42 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d02c      	beq.n	8001fce <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001f74:	4bac      	ldr	r3, [pc, #688]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	49a8      	ldr	r1, [pc, #672]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f9a:	4ba3      	ldr	r3, [pc, #652]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	4aa1      	ldr	r2, [pc, #644]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001faa:	4b9f      	ldr	r3, [pc, #636]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	4a9d      	ldr	r2, [pc, #628]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fbc:	4b9a      	ldr	r3, [pc, #616]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	4a99      	ldr	r2, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fcc:	e00f      	b.n	8001fee <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fce:	4b96      	ldr	r3, [pc, #600]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	4a94      	ldr	r2, [pc, #592]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fde:	4b92      	ldr	r3, [pc, #584]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	4a90      	ldr	r2, [pc, #576]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f99d 	bl	8001334 <HAL_GetTick>
 8001ffa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff f999 	bl	8001334 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e15f      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	4b84      	ldr	r3, [pc, #528]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ed      	beq.n	8001ffe <HAL_RCC_OscConfig+0x5ea>
 8002022:	e01d      	b.n	8002060 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f986 	bl	8001334 <HAL_GetTick>
 8002028:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff f982 	bl	8001334 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e148      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002042:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ed      	bne.n	800202c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002050:	4b75      	ldr	r3, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a74      	ldr	r2, [pc, #464]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 800206e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002072:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d03c      	beq.n	80020fa <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002088:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 800208a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff f94c 	bl	8001334 <HAL_GetTick>
 800209c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a0:	f7ff f948 	bl	8001334 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e110      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80020b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ef      	beq.n	80020a0 <HAL_RCC_OscConfig+0x68c>
 80020c0:	e01b      	b.n	80020fa <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80020c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff f92f 	bl	8001334 <HAL_GetTick>
 80020d6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020da:	f7ff f92b 	bl	8001334 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0f3      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020ec:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80020ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ef      	bne.n	80020da <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80e7 	beq.w	80022d2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	2b02      	cmp	r3, #2
 800210a:	f040 80b7 	bne.w	800227c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	429a      	cmp	r2, r3
 8002120:	d124      	bne.n	800216c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212c:	3b01      	subs	r3, #1
 800212e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d11b      	bne.n	800216c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d113      	bne.n	800216c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	3b01      	subs	r3, #1
 8002152:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d109      	bne.n	800216c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	3b01      	subs	r3, #1
 8002166:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d061      	beq.n	8002230 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d056      	beq.n	8002220 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800217c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800217e:	f7ff f8d9 	bl	8001334 <HAL_GetTick>
 8002182:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff f8d5 	bl	8001334 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e09d      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_RCC_OscConfig+0x818>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021be:	0212      	lsls	r2, r2, #8
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021c6:	0852      	lsrs	r2, r2, #1
 80021c8:	3a01      	subs	r2, #1
 80021ca:	0552      	lsls	r2, r2, #21
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021d2:	0852      	lsrs	r2, r2, #1
 80021d4:	3a01      	subs	r2, #1
 80021d6:	0652      	lsls	r2, r2, #25
 80021d8:	430a      	orrs	r2, r1
 80021da:	4913      	ldr	r1, [pc, #76]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f8:	f7ff f89c 	bl	8001334 <HAL_GetTick>
 80021fc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff f898 	bl	8001334 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e060      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_OscConfig+0x814>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800221e:	e058      	b.n	80022d2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e057      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
 8002224:	40007000 	.word	0x40007000
 8002228:	40021000 	.word	0x40021000
 800222c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d14a      	bne.n	80022d2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a26      	ldr	r2, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002254:	f7ff f86e 	bl	8001334 <HAL_GetTick>
 8002258:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff f86a 	bl	8001334 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e032      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x848>
 800227a:	e02a      	b.n	80022d2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d025      	beq.n	80022ce <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 8002288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800228c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 8002294:	f023 0303 	bic.w	r3, r3, #3
 8002298:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 80022a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f845 	bl	8001334 <HAL_GetTick>
 80022aa:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff f841 	bl	8001334 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x8c8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x89a>
 80022cc:	e001      	b.n	80022d2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0c8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4961      	ldr	r1, [pc, #388]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b0      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d04c      	beq.n	80023ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d107      	bne.n	8002348 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d121      	bne.n	8002388 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e09e      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d107      	bne.n	8002360 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d115      	bne.n	8002388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e092      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e086      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002378:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e07e      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002388:	4b42      	ldr	r3, [pc, #264]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 0203 	bic.w	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	493f      	ldr	r1, [pc, #252]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239a:	f7fe ffcb 	bl	8001334 <HAL_GetTick>
 800239e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7fe ffc7 	bl	8001334 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e066      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 020c 	and.w	r2, r3, #12
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d1eb      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d6:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	492c      	ldr	r1, [pc, #176]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d210      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4924      	ldr	r1, [pc, #144]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_ClockConfig+0x1b0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e036      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4918      	ldr	r1, [pc, #96]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4910      	ldr	r1, [pc, #64]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002456:	f000 f825 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800245a:	4601      	mov	r1, r0
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_ClockConfig+0x1b4>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	fa21 f303 	lsr.w	r3, r1, r3
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe ff0e 	bl	800129c <HAL_InitTick>
 8002480:	4603      	mov	r3, r0
 8002482:	72fb      	strb	r3, [r7, #11]

  return status;
 8002484:	7afb      	ldrb	r3, [r7, #11]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
 8002498:	08003bd4 	.word	0x08003bd4
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x34>
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d121      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d11e      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10d      	bne.n	800252c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002514:	e00a      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d102      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	e004      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d101      	bne.n	800252c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800252a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d133      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xa4>
 8002542:	2b03      	cmp	r3, #3
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0xaa>
 8002546:	e005      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800254a:	617b      	str	r3, [r7, #20]
      break;
 800254c:	e005      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002550:	617b      	str	r3, [r7, #20]
      break;
 8002552:	e002      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	617b      	str	r3, [r7, #20]
      break;
 8002558:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	3301      	adds	r3, #1
 8002566:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	fb02 f203 	mul.w	r2, r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0e5b      	lsrs	r3, r3, #25
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800259a:	69bb      	ldr	r3, [r7, #24]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3724      	adds	r7, #36	; 0x24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08003bec 	.word	0x08003bec
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	007a1200 	.word	0x007a1200

080025b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_RCC_GetHCLKFreq+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000000 	.word	0x20000000

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d8:	4601      	mov	r1, r0
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08003be4 	.word	0x08003be4

080025fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002600:	f7ff ffda 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 8002604:	4601      	mov	r1, r0
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0adb      	lsrs	r3, r3, #11
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	fa21 f303 	lsr.w	r3, r1, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	08003be4 	.word	0x08003be4

08002628 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002640:	f7ff f984 	bl	800194c <HAL_PWREx_GetVoltageRange>
 8002644:	6178      	str	r0, [r7, #20]
 8002646:	e014      	b.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6593      	str	r3, [r2, #88]	; 0x58
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002660:	f7ff f974 	bl	800194c <HAL_PWREx_GetVoltageRange>
 8002664:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002666:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002678:	d10b      	bne.n	8002692 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d919      	bls.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2ba0      	cmp	r3, #160	; 0xa0
 8002684:	d902      	bls.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002686:	2302      	movs	r3, #2
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e013      	b.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800268c:	2301      	movs	r3, #1
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	e010      	b.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b80      	cmp	r3, #128	; 0x80
 8002696:	d902      	bls.n	800269e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002698:	2303      	movs	r3, #3
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e00a      	b.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d102      	bne.n	80026aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a4:	2302      	movs	r3, #2
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	e004      	b.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b70      	cmp	r3, #112	; 0x70
 80026ae:	d101      	bne.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b0:	2301      	movs	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 0207 	bic.w	r2, r3, #7
 80026bc:	4909      	ldr	r1, [pc, #36]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40022000 	.word	0x40022000

080026e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026f0:	2300      	movs	r3, #0
 80026f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026f4:	2300      	movs	r3, #0
 80026f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 809e 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800270a:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	4a3f      	ldr	r2, [pc, #252]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272a:	6593      	str	r3, [r2, #88]	; 0x58
 800272c:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002738:	2301      	movs	r3, #1
 800273a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273c:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002748:	f7fe fdf4 	bl	8001334 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800274e:	e009      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe fdf0 	bl	8001334 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d902      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	74fb      	strb	r3, [r7, #19]
        break;
 8002762:	e005      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ef      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d15a      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002780:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01e      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	429a      	cmp	r2, r3
 8002790:	d019      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d016      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fdb0 	bl	8001334 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d6:	e00b      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe fdac 	bl	8001334 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d902      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	74fb      	strb	r3, [r7, #19]
            break;
 80027ee:	e006      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ec      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4904      	ldr	r1, [pc, #16]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800281a:	e009      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	74bb      	strb	r3, [r7, #18]
 8002820:	e006      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7c7b      	ldrb	r3, [r7, #17]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4a6d      	ldr	r2, [pc, #436]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284e:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f023 0203 	bic.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4964      	ldr	r1, [pc, #400]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002870:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 020c 	bic.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	495c      	ldr	r1, [pc, #368]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002892:	4b57      	ldr	r3, [pc, #348]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4953      	ldr	r1, [pc, #332]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b4:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	494b      	ldr	r1, [pc, #300]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4942      	ldr	r1, [pc, #264]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	493a      	ldr	r1, [pc, #232]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291a:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	4931      	ldr	r1, [pc, #196]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4929      	ldr	r1, [pc, #164]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4920      	ldr	r1, [pc, #128]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	4918      	ldr	r1, [pc, #96]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299e:	d105      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	490a      	ldr	r1, [pc, #40]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e01d      	b.n	8002a62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fae4 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f000 fa3e 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_TIM_Base_Start_IT+0x50>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d00b      	beq.n	8002aae <HAL_TIM_Base_Start_IT+0x42>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d007      	beq.n	8002aae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	00010007 	.word	0x00010007

08002ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d122      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d11b      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0202 	mvn.w	r2, #2
 8002aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f9c8 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9ba 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f9cb 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d122      	bne.n	8002b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d11b      	bne.n	8002b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0204 	mvn.w	r2, #4
 8002b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2202      	movs	r2, #2
 8002b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f99e 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f990 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f9a1 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d122      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0208 	mvn.w	r2, #8
 8002b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2204      	movs	r2, #4
 8002b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f974 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f966 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f977 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d122      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d11b      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0210 	mvn.w	r2, #16
 8002be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2208      	movs	r2, #8
 8002bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f94a 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f93c 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f94d 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0201 	mvn.w	r2, #1
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f916 	bl	8002e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	2b80      	cmp	r3, #128	; 0x80
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 faa0 	bl	80031b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d10e      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fa93 	bl	80031c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d10e      	bne.n	8002cca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b40      	cmp	r3, #64	; 0x40
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8fb 	bl	8002ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d107      	bne.n	8002cf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0220 	mvn.w	r2, #32
 8002cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fa53 	bl	800319c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_ConfigClockSource+0x18>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0a8      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x16a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d40:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d067      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x124>
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d80b      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x70>
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d073      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x144>
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d802      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x66>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d06f      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d62:	e078      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d06c      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x144>
 8002d68:	2b30      	cmp	r3, #48	; 0x30
 8002d6a:	d06a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002d6c:	e073      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d6e:	2b70      	cmp	r3, #112	; 0x70
 8002d70:	d00d      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x90>
 8002d72:	2b70      	cmp	r3, #112	; 0x70
 8002d74:	d804      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x82>
 8002d76:	2b50      	cmp	r3, #80	; 0x50
 8002d78:	d033      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0xe4>
 8002d7a:	2b60      	cmp	r3, #96	; 0x60
 8002d7c:	d041      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002d7e:	e06a      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	d066      	beq.n	8002e54 <HAL_TIM_ConfigClockSource+0x156>
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8a:	d017      	beq.n	8002dbc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002d8c:	e063      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f000 f977 	bl	8003090 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002db0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	609a      	str	r2, [r3, #8]
      break;
 8002dba:	e04c      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f000 f960 	bl	8003090 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dde:	609a      	str	r2, [r3, #8]
      break;
 8002de0:	e039      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f000 f8d4 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2150      	movs	r1, #80	; 0x50
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f92d 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e00:	e029      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f000 f8f3 	bl	8002ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2160      	movs	r1, #96	; 0x60
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f91d 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e20:	e019      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 f8b4 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2140      	movs	r1, #64	; 0x40
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f90d 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e40:	e009      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f000 f904 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002e54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <TIM_Base_SetConfig+0xbc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0x20>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d108      	bne.n	8002f06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <TIM_Base_SetConfig+0xbc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0x52>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0x52>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <TIM_Base_SetConfig+0xc0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0x52>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <TIM_Base_SetConfig+0xc4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <TIM_Base_SetConfig+0xbc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_Base_SetConfig+0xa0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <TIM_Base_SetConfig+0xc0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0xa0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <TIM_Base_SetConfig+0xc4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d103      	bne.n	8002f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	615a      	str	r2, [r3, #20]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400

08002f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f023 030a 	bic.w	r3, r3, #10
 8002fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b087      	sub	sp, #28
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0210 	bic.w	r2, r3, #16
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	031b      	lsls	r3, r3, #12
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	f043 0307 	orr.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	021a      	lsls	r2, r3, #8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e04f      	b.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a21      	ldr	r2, [pc, #132]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003118:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d004      	beq.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10c      	bne.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003162:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4313      	orrs	r3, r2
 800316c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40014000 	.word	0x40014000

0800319c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e040      	b.n	800326c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd ff28 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f82c 	bl	8003274 <UART_SetConfig>
 800321c:	4603      	mov	r3, r0
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e022      	b.n	800326c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fb34 	bl	800389c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003242:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003252:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fbbb 	bl	80039e0 <UART_CheckIdleState>
 800326a:	4603      	mov	r3, r0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003278:	b08a      	sub	sp, #40	; 0x28
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4313      	orrs	r3, r2
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4bbc      	ldr	r3, [pc, #752]	; (800359c <UART_SetConfig+0x328>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b2:	430b      	orrs	r3, r1
 80032b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4ab2      	ldr	r2, [pc, #712]	; (80035a0 <UART_SetConfig+0x32c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	4313      	orrs	r3, r2
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4aa9      	ldr	r2, [pc, #676]	; (80035a4 <UART_SetConfig+0x330>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d126      	bne.n	8003352 <UART_SetConfig+0xde>
 8003304:	4ba8      	ldr	r3, [pc, #672]	; (80035a8 <UART_SetConfig+0x334>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b03      	cmp	r3, #3
 8003310:	d81a      	bhi.n	8003348 <UART_SetConfig+0xd4>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <UART_SetConfig+0xa4>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003329 	.word	0x08003329
 800331c:	08003339 	.word	0x08003339
 8003320:	08003331 	.word	0x08003331
 8003324:	08003341 	.word	0x08003341
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e0ab      	b.n	8003488 <UART_SetConfig+0x214>
 8003330:	2302      	movs	r3, #2
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003336:	e0a7      	b.n	8003488 <UART_SetConfig+0x214>
 8003338:	2304      	movs	r3, #4
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e0a3      	b.n	8003488 <UART_SetConfig+0x214>
 8003340:	2308      	movs	r3, #8
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e09f      	b.n	8003488 <UART_SetConfig+0x214>
 8003348:	2310      	movs	r3, #16
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	bf00      	nop
 8003350:	e09a      	b.n	8003488 <UART_SetConfig+0x214>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a95      	ldr	r2, [pc, #596]	; (80035ac <UART_SetConfig+0x338>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d138      	bne.n	80033ce <UART_SetConfig+0x15a>
 800335c:	4b92      	ldr	r3, [pc, #584]	; (80035a8 <UART_SetConfig+0x334>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d82c      	bhi.n	80033c4 <UART_SetConfig+0x150>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <UART_SetConfig+0xfc>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	080033a5 	.word	0x080033a5
 8003374:	080033c5 	.word	0x080033c5
 8003378:	080033c5 	.word	0x080033c5
 800337c:	080033c5 	.word	0x080033c5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033c5 	.word	0x080033c5
 8003388:	080033c5 	.word	0x080033c5
 800338c:	080033c5 	.word	0x080033c5
 8003390:	080033ad 	.word	0x080033ad
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033c5 	.word	0x080033c5
 80033a0:	080033bd 	.word	0x080033bd
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e06d      	b.n	8003488 <UART_SetConfig+0x214>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e069      	b.n	8003488 <UART_SetConfig+0x214>
 80033b4:	2304      	movs	r3, #4
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e065      	b.n	8003488 <UART_SetConfig+0x214>
 80033bc:	2308      	movs	r3, #8
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e061      	b.n	8003488 <UART_SetConfig+0x214>
 80033c4:	2310      	movs	r3, #16
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	bf00      	nop
 80033cc:	e05c      	b.n	8003488 <UART_SetConfig+0x214>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a77      	ldr	r2, [pc, #476]	; (80035b0 <UART_SetConfig+0x33c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d125      	bne.n	8003424 <UART_SetConfig+0x1b0>
 80033d8:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <UART_SetConfig+0x334>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d011      	beq.n	800340a <UART_SetConfig+0x196>
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d802      	bhi.n	80033f0 <UART_SetConfig+0x17c>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <UART_SetConfig+0x186>
 80033ee:	e014      	b.n	800341a <UART_SetConfig+0x1a6>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d006      	beq.n	8003402 <UART_SetConfig+0x18e>
 80033f4:	2b30      	cmp	r3, #48	; 0x30
 80033f6:	d00c      	beq.n	8003412 <UART_SetConfig+0x19e>
 80033f8:	e00f      	b.n	800341a <UART_SetConfig+0x1a6>
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003400:	e042      	b.n	8003488 <UART_SetConfig+0x214>
 8003402:	2302      	movs	r3, #2
 8003404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003408:	e03e      	b.n	8003488 <UART_SetConfig+0x214>
 800340a:	2304      	movs	r3, #4
 800340c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003410:	e03a      	b.n	8003488 <UART_SetConfig+0x214>
 8003412:	2308      	movs	r3, #8
 8003414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003418:	e036      	b.n	8003488 <UART_SetConfig+0x214>
 800341a:	2310      	movs	r3, #16
 800341c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003420:	bf00      	nop
 8003422:	e031      	b.n	8003488 <UART_SetConfig+0x214>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <UART_SetConfig+0x32c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d129      	bne.n	8003482 <UART_SetConfig+0x20e>
 800342e:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <UART_SetConfig+0x334>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343c:	d014      	beq.n	8003468 <UART_SetConfig+0x1f4>
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d802      	bhi.n	800344a <UART_SetConfig+0x1d6>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <UART_SetConfig+0x1e4>
 8003448:	e016      	b.n	8003478 <UART_SetConfig+0x204>
 800344a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344e:	d007      	beq.n	8003460 <UART_SetConfig+0x1ec>
 8003450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003454:	d00c      	beq.n	8003470 <UART_SetConfig+0x1fc>
 8003456:	e00f      	b.n	8003478 <UART_SetConfig+0x204>
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345e:	e013      	b.n	8003488 <UART_SetConfig+0x214>
 8003460:	2302      	movs	r3, #2
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003466:	e00f      	b.n	8003488 <UART_SetConfig+0x214>
 8003468:	2304      	movs	r3, #4
 800346a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346e:	e00b      	b.n	8003488 <UART_SetConfig+0x214>
 8003470:	2308      	movs	r3, #8
 8003472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003476:	e007      	b.n	8003488 <UART_SetConfig+0x214>
 8003478:	2310      	movs	r3, #16
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <UART_SetConfig+0x214>
 8003482:	2310      	movs	r3, #16
 8003484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a44      	ldr	r2, [pc, #272]	; (80035a0 <UART_SetConfig+0x32c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f040 80fb 	bne.w	800368a <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003498:	2b08      	cmp	r3, #8
 800349a:	d824      	bhi.n	80034e6 <UART_SetConfig+0x272>
 800349c:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0x230>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034e7 	.word	0x080034e7
 80034ac:	080034d1 	.word	0x080034d1
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	080034d7 	.word	0x080034d7
 80034b8:	080034e7 	.word	0x080034e7
 80034bc:	080034e7 	.word	0x080034e7
 80034c0:	080034e7 	.word	0x080034e7
 80034c4:	080034df 	.word	0x080034df
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80034c8:	f7ff f882 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80034cc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034ce:	e00d      	b.n	80034ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80034d0:	4b38      	ldr	r3, [pc, #224]	; (80035b4 <UART_SetConfig+0x340>)
 80034d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034d4:	e00a      	b.n	80034ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80034d6:	f7fe ffe5 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 80034da:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034dc:	e006      	b.n	80034ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80034de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034e4:	e002      	b.n	80034ec <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	76fb      	strb	r3, [r7, #27]
        break;
 80034ea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 81c8 	beq.w	8003884 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	d305      	bcc.n	8003510 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	d902      	bls.n	8003516 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	76fb      	strb	r3, [r7, #27]
 8003514:	e1b6      	b.n	8003884 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8003516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800351a:	2b08      	cmp	r3, #8
 800351c:	f200 80a2 	bhi.w	8003664 <UART_SetConfig+0x3f0>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x2b4>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003665 	.word	0x08003665
 8003530:	080035b9 	.word	0x080035b9
 8003534:	08003665 	.word	0x08003665
 8003538:	080035ed 	.word	0x080035ed
 800353c:	08003665 	.word	0x08003665
 8003540:	08003665 	.word	0x08003665
 8003544:	08003665 	.word	0x08003665
 8003548:	0800363b 	.word	0x0800363b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7ff f840 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8003550:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4619      	mov	r1, r3
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f04f 0400 	mov.w	r4, #0
 8003562:	0214      	lsls	r4, r2, #8
 8003564:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003568:	020b      	lsls	r3, r1, #8
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6852      	ldr	r2, [r2, #4]
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	4611      	mov	r1, r2
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	eb13 0b01 	adds.w	fp, r3, r1
 800357a:	eb44 0c02 	adc.w	ip, r4, r2
 800357e:	4658      	mov	r0, fp
 8003580:	4661      	mov	r1, ip
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f04f 0400 	mov.w	r4, #0
 800358a:	461a      	mov	r2, r3
 800358c:	4623      	mov	r3, r4
 800358e:	f7fc fe1d 	bl	80001cc <__aeabi_uldivmod>
 8003592:	4603      	mov	r3, r0
 8003594:	460c      	mov	r4, r1
 8003596:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003598:	e067      	b.n	800366a <UART_SetConfig+0x3f6>
 800359a:	bf00      	nop
 800359c:	efff69f3 	.word	0xefff69f3
 80035a0:	40008000 	.word	0x40008000
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40004400 	.word	0x40004400
 80035b0:	40004800 	.word	0x40004800
 80035b4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	f04f 0400 	mov.w	r4, #0
 80035c2:	49ae      	ldr	r1, [pc, #696]	; (800387c <UART_SetConfig+0x608>)
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	eb13 0b01 	adds.w	fp, r3, r1
 80035cc:	eb44 0c02 	adc.w	ip, r4, r2
 80035d0:	4658      	mov	r0, fp
 80035d2:	4661      	mov	r1, ip
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f04f 0400 	mov.w	r4, #0
 80035dc:	461a      	mov	r2, r3
 80035de:	4623      	mov	r3, r4
 80035e0:	f7fc fdf4 	bl	80001cc <__aeabi_uldivmod>
 80035e4:	4603      	mov	r3, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035ea:	e03e      	b.n	800366a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80035ec:	f7fe ff5a 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 80035f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4619      	mov	r1, r3
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	f04f 0400 	mov.w	r4, #0
 8003602:	0214      	lsls	r4, r2, #8
 8003604:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003608:	020b      	lsls	r3, r1, #8
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6852      	ldr	r2, [r2, #4]
 800360e:	0852      	lsrs	r2, r2, #1
 8003610:	4611      	mov	r1, r2
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	eb13 0b01 	adds.w	fp, r3, r1
 800361a:	eb44 0c02 	adc.w	ip, r4, r2
 800361e:	4658      	mov	r0, fp
 8003620:	4661      	mov	r1, ip
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f04f 0400 	mov.w	r4, #0
 800362a:	461a      	mov	r2, r3
 800362c:	4623      	mov	r3, r4
 800362e:	f7fc fdcd 	bl	80001cc <__aeabi_uldivmod>
 8003632:	4603      	mov	r3, r0
 8003634:	460c      	mov	r4, r1
 8003636:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003638:	e017      	b.n	800366a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	f04f 0400 	mov.w	r4, #0
 8003644:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003648:	f144 0100 	adc.w	r1, r4, #0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f04f 0400 	mov.w	r4, #0
 8003654:	461a      	mov	r2, r3
 8003656:	4623      	mov	r3, r4
 8003658:	f7fc fdb8 	bl	80001cc <__aeabi_uldivmod>
 800365c:	4603      	mov	r3, r0
 800365e:	460c      	mov	r4, r1
 8003660:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003662:	e002      	b.n	800366a <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	76fb      	strb	r3, [r7, #27]
            break;
 8003668:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003670:	d308      	bcc.n	8003684 <UART_SetConfig+0x410>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003678:	d204      	bcs.n	8003684 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e0ff      	b.n	8003884 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	76fb      	strb	r3, [r7, #27]
 8003688:	e0fc      	b.n	8003884 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003692:	f040 8083 	bne.w	800379c <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8003696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800369a:	2b08      	cmp	r3, #8
 800369c:	d85e      	bhi.n	800375c <UART_SetConfig+0x4e8>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x430>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	08003709 	.word	0x08003709
 80036b0:	0800375d 	.word	0x0800375d
 80036b4:	08003725 	.word	0x08003725
 80036b8:	0800375d 	.word	0x0800375d
 80036bc:	0800375d 	.word	0x0800375d
 80036c0:	0800375d 	.word	0x0800375d
 80036c4:	08003745 	.word	0x08003745
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe ff82 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80036cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	005a      	lsls	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	441a      	add	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036e6:	e03c      	b.n	8003762 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7fe ff88 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 80036ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	005a      	lsls	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	b29b      	uxth	r3, r3
 8003704:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003706:	e02c      	b.n	8003762 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003712:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6852      	ldr	r2, [r2, #4]
 800371a:	fbb3 f3f2 	udiv	r3, r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003722:	e01e      	b.n	8003762 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003724:	f7fe febe 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8003728:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	005a      	lsls	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	b29b      	uxth	r3, r3
 8003740:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003742:	e00e      	b.n	8003762 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	b29b      	uxth	r3, r3
 8003758:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800375a:	e002      	b.n	8003762 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	76fb      	strb	r3, [r7, #27]
        break;
 8003760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d916      	bls.n	8003796 <UART_SetConfig+0x522>
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d212      	bcs.n	8003796 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f023 030f 	bic.w	r3, r3, #15
 8003778:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	b29b      	uxth	r3, r3
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	b29a      	uxth	r2, r3
 8003786:	89fb      	ldrh	r3, [r7, #14]
 8003788:	4313      	orrs	r3, r2
 800378a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	89fa      	ldrh	r2, [r7, #14]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	e076      	b.n	8003884 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	76fb      	strb	r3, [r7, #27]
 800379a:	e073      	b.n	8003884 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 800379c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d85c      	bhi.n	800385e <UART_SetConfig+0x5ea>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <UART_SetConfig+0x538>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037ef 	.word	0x080037ef
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	0800385f 	.word	0x0800385f
 80037bc:	08003829 	.word	0x08003829
 80037c0:	0800385f 	.word	0x0800385f
 80037c4:	0800385f 	.word	0x0800385f
 80037c8:	0800385f 	.word	0x0800385f
 80037cc:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7fe fefe 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80037d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085a      	lsrs	r2, r3, #1
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	441a      	add	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037ec:	e03a      	b.n	8003864 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ee:	f7fe ff05 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 80037f2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	085a      	lsrs	r2, r3, #1
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	b29b      	uxth	r3, r3
 8003808:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800380a:	e02b      	b.n	8003864 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003816:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6852      	ldr	r2, [r2, #4]
 800381e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003826:	e01d      	b.n	8003864 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003828:	f7fe fe3c 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800382c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	085a      	lsrs	r2, r3, #1
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003844:	e00e      	b.n	8003864 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	b29b      	uxth	r3, r3
 800385a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800385c:	e002      	b.n	8003864 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	76fb      	strb	r3, [r7, #27]
        break;
 8003862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d90a      	bls.n	8003880 <UART_SetConfig+0x60c>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d206      	bcs.n	8003880 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	e003      	b.n	8003884 <UART_SetConfig+0x610>
 800387c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003890:	7efb      	ldrb	r3, [r7, #27]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3728      	adds	r7, #40	; 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800389c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d10a      	bne.n	80039b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039ee:	f7fd fca1 	bl	8001334 <HAL_GetTick>
 80039f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d10e      	bne.n	8003a20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f82a 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e020      	b.n	8003a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d10e      	bne.n	8003a4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f814 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e00a      	b.n	8003a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	e05d      	b.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d059      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fd fc56 	bl	8001334 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11b      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e042      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02b      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aee:	d123      	bne.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e00f      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d092      	beq.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4e0d      	ldr	r6, [pc, #52]	; (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	; (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1ba4      	subs	r4, r4, r6
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	42a5      	cmp	r5, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4e0b      	ldr	r6, [pc, #44]	; (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	; (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f000 f820 	bl	8003bb8 <_init>
 8003b78:	1ba4      	subs	r4, r4, r6
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2500      	movs	r5, #0
 8003b7e:	42a5      	cmp	r5, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b88:	4798      	blx	r3
 8003b8a:	3501      	adds	r5, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b92:	4798      	blx	r3
 8003b94:	3501      	adds	r5, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08003c24 	.word	0x08003c24
 8003b9c:	08003c24 	.word	0x08003c24
 8003ba0:	08003c24 	.word	0x08003c24
 8003ba4:	08003c28 	.word	0x08003c28

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
