
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009170  08009170  00019170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009500  08009500  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009508  08009508  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001dc  080096ec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080096ec  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013762  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000276f  00000000  00000000  0003396e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  000360e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  00037288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e76  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3ae  00000000  00000000  0003c15e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000adcb6  00000000  00000000  0004950c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f71c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc4  00000000  00000000  000f7240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009154 	.word	0x08009154

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009154 	.word	0x08009154

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <app_LecturaEncoder>:

/* Variables gloables */
uint16_t Primero = 0,Segundo = 0,Tercero = 0,Cuarto = 0, Total = 0;

uint8_t app_LecturaEncoder(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	/* Inicia el Timer de bajo consumo */
	HAL_LPTIM_Encoder_Start(&hlptim1, 36);
 8000f8e:	2124      	movs	r1, #36	; 0x24
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <app_LecturaEncoder+0x2c>)
 8000f92:	f001 fb73 	bl	800267c <HAL_LPTIM_Encoder_Start>

	/* Definicion de las variables */
	volatile uint8_t ValorEncoder = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]

	/* Lectura del valor del encoder */
	ValorEncoder = HAL_LPTIM_ReadCounter(&hlptim1)/4;
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <app_LecturaEncoder+0x2c>)
 8000f9c:	f001 fbba 	bl	8002714 <HAL_LPTIM_ReadCounter>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	71fb      	strb	r3, [r7, #7]


	/*Devuelve valor del encoder*/
	return ValorEncoder;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	b2db      	uxtb	r3, r3

	/* Desabilita el Encoder */
		HAL_LPTIM_Encoder_Stop(&hlptim1);
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000214 	.word	0x20000214

08000fb8 <app_SeleccionEncoder>:

void app_SeleccionEncoder(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	if(Aumento > 3)
 8000fbc:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <app_SeleccionEncoder+0xec>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d903      	bls.n	8000fcc <app_SeleccionEncoder+0x14>
		  {
			  Aumento = 0;
 8000fc4:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <app_SeleccionEncoder+0xec>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
				  {

				  }
			  }
		  }
}
 8000fca:	e069      	b.n	80010a0 <app_SeleccionEncoder+0xe8>
			  switch(Aumento)
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <app_SeleccionEncoder+0xec>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d865      	bhi.n	80010a0 <app_SeleccionEncoder+0xe8>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <app_SeleccionEncoder+0x24>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08001011 	.word	0x08001011
 8000fe4:	08001043 	.word	0x08001043
 8000fe8:	08001073 	.word	0x08001073
					  Primero = app_LecturaEncoder()*1000;
 8000fec:	f7ff ffcc 	bl	8000f88 <app_LecturaEncoder>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	0152      	lsls	r2, r2, #5
 8000ff8:	1ad2      	subs	r2, r2, r3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <app_SeleccionEncoder+0xf0>)
 8001004:	801a      	strh	r2, [r3, #0]
					  Total = Primero;
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <app_SeleccionEncoder+0xf0>)
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <app_SeleccionEncoder+0xf4>)
 800100c:	801a      	strh	r2, [r3, #0]
				  }break;
 800100e:	e047      	b.n	80010a0 <app_SeleccionEncoder+0xe8>
					  Segundo = app_LecturaEncoder()*100;
 8001010:	f7ff ffba 	bl	8000f88 <app_LecturaEncoder>
 8001014:	4603      	mov	r3, r0
 8001016:	b29b      	uxth	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4413      	add	r3, r2
 800101e:	461a      	mov	r2, r3
 8001020:	0091      	lsls	r1, r2, #2
 8001022:	461a      	mov	r2, r3
 8001024:	460b      	mov	r3, r1
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <app_SeleccionEncoder+0xf8>)
 800102e:	801a      	strh	r2, [r3, #0]
					  Total = Primero +Segundo;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <app_SeleccionEncoder+0xf0>)
 8001032:	881a      	ldrh	r2, [r3, #0]
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <app_SeleccionEncoder+0xf8>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	4413      	add	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <app_SeleccionEncoder+0xf4>)
 800103e:	801a      	strh	r2, [r3, #0]
				  }break;
 8001040:	e02e      	b.n	80010a0 <app_SeleccionEncoder+0xe8>
					  Tercero = app_LecturaEncoder()*10;
 8001042:	f7ff ffa1 	bl	8000f88 <app_LecturaEncoder>
 8001046:	4603      	mov	r3, r0
 8001048:	b29b      	uxth	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <app_SeleccionEncoder+0xfc>)
 8001056:	801a      	strh	r2, [r3, #0]
					  Total = Primero +Segundo+Tercero;
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <app_SeleccionEncoder+0xf0>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <app_SeleccionEncoder+0xf8>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4413      	add	r3, r2
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <app_SeleccionEncoder+0xfc>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	4413      	add	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <app_SeleccionEncoder+0xf4>)
 800106e:	801a      	strh	r2, [r3, #0]
				  }break;
 8001070:	e016      	b.n	80010a0 <app_SeleccionEncoder+0xe8>
					  Cuarto = app_LecturaEncoder()*1;
 8001072:	f7ff ff89 	bl	8000f88 <app_LecturaEncoder>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <app_SeleccionEncoder+0x100>)
 800107c:	801a      	strh	r2, [r3, #0]
					  Total = Primero +Segundo+Tercero+Cuarto;
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <app_SeleccionEncoder+0xf0>)
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <app_SeleccionEncoder+0xf8>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <app_SeleccionEncoder+0xfc>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <app_SeleccionEncoder+0x100>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <app_SeleccionEncoder+0xf4>)
 800109c:	801a      	strh	r2, [r3, #0]
				  }break;
 800109e:	bf00      	nop
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000206 	.word	0x20000206
 80010a8:	200001f8 	.word	0x200001f8
 80010ac:	20000200 	.word	0x20000200
 80010b0:	200001fa 	.word	0x200001fa
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	200001fe 	.word	0x200001fe

080010bc <app_ConteoFrecuencia>:

Estados seleccion = Inicio;

uint16_t incremento = 0,frecuencia = 0;
uint16_t app_ConteoFrecuencia(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

	htim2.Instance->CNT = 0;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <app_ConteoFrecuencia+0x58>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim2.Instance->CNT < 1000)
 80010c8:	e015      	b.n	80010f6 <app_ConteoFrecuencia+0x3a>
	{
		/* Espera el estado de flanco de subida */
		while(!(HAL_GPIO_ReadPin(Entrada_GPIO_Port, Entrada_Pin)));
 80010ca:	bf00      	nop
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <app_ConteoFrecuencia+0x5c>)
 80010d0:	f001 f9b8 	bl	8002444 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f8      	beq.n	80010cc <app_ConteoFrecuencia+0x10>
		/* Espera el estado de flanco de bajada */
		while((HAL_GPIO_ReadPin(Entrada_GPIO_Port, Entrada_Pin)));
 80010da:	bf00      	nop
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <app_ConteoFrecuencia+0x5c>)
 80010e0:	f001 f9b0 	bl	8002444 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f8      	bne.n	80010dc <app_ConteoFrecuencia+0x20>
		incremento = incremento + 1;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <app_ConteoFrecuencia+0x60>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <app_ConteoFrecuencia+0x60>)
 80010f4:	801a      	strh	r2, [r3, #0]
	while(htim2.Instance->CNT < 1000)
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <app_ConteoFrecuencia+0x58>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001100:	d3e3      	bcc.n	80010ca <app_ConteoFrecuencia+0xe>
	}
	return frecuencia = incremento;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <app_ConteoFrecuencia+0x60>)
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <app_ConteoFrecuencia+0x64>)
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <app_ConteoFrecuencia+0x64>)
 800110c:	881b      	ldrh	r3, [r3, #0]
	incremento = 0;

}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000250 	.word	0x20000250
 8001118:	48000400 	.word	0x48000400
 800111c:	20000202 	.word	0x20000202
 8001120:	20000204 	.word	0x20000204

08001124 <app_LecturaPulsos>:
	RPM = promedio*60;
	return RPM;
}

uint16_t app_LecturaPulsos(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	volatile uint16_t Lectura = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim2);
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <app_LecturaPulsos+0x28>)
 8001130:	f002 fcf6 	bl	8003b20 <HAL_TIM_Base_Start_IT>
	return Lectura = app_ConteoFrecuencia();
 8001134:	f7ff ffc2 	bl	80010bc <app_ConteoFrecuencia>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4613      	mov	r3, r2
 800113e:	80fb      	strh	r3, [r7, #6]
 8001140:	4613      	mov	r3, r2
	HAL_TIM_Base_Stop_IT(&htim2);

}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000250 	.word	0x20000250

08001150 <PIDInit>:

PIDControl pid;
void PIDInit(float kp, float ki, float kd,
             float sampleTimeSeconds, float minOutput, float maxOutput, 
             PIDMode mode, PIDDirection controllerDirection)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	ed87 0a07 	vstr	s0, [r7, #28]
 800115a:	edc7 0a06 	vstr	s1, [r7, #24]
 800115e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001162:	edc7 1a04 	vstr	s3, [r7, #16]
 8001166:	ed87 2a03 	vstr	s4, [r7, #12]
 800116a:	edc7 2a02 	vstr	s5, [r7, #8]
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
    pid.controllerDirection = controllerDirection;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <PIDInit+0x7c>)
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    pid.mode = mode;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <PIDInit+0x7c>)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39

    if(sampleTimeSeconds > 0.0f)
 8001188:	edd7 7a04 	vldr	s15, [r7, #16]
 800118c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	dd03      	ble.n	800119e <PIDInit+0x4e>
    {
        pid.sampleTime = sampleTimeSeconds;
 8001196:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <PIDInit+0x7c>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	6293      	str	r3, [r2, #40]	; 0x28
 800119c:	e003      	b.n	80011a6 <PIDInit+0x56>
    }
    else
    {
        // If the passed parameter was incorrect, set to 1 second
        pid.sampleTime = 1.0f;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <PIDInit+0x7c>)
 80011a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    PIDOutputLimitsSet(minOutput, maxOutput);
 80011a6:	edd7 0a02 	vldr	s1, [r7, #8]
 80011aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80011ae:	f000 f8a1 	bl	80012f4 <PIDOutputLimitsSet>
    PIDTuningsSet(kp, ki, kd);
 80011b2:	ed97 1a05 	vldr	s2, [r7, #20]
 80011b6:	edd7 0a06 	vldr	s1, [r7, #24]
 80011ba:	ed97 0a07 	vldr	s0, [r7, #28]
 80011be:	f000 f8f5 	bl	80013ac <PIDTuningsSet>
}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002a4 	.word	0x200002a4

080011d0 <PIDCompute>:
        
bool PIDCompute(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
    float error, dInput;

    if(pid.mode == MANUAL)
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <PIDCompute+0x120>)
 80011d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <PIDCompute+0x14>
    {
        return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e07f      	b.n	80012e4 <PIDCompute+0x114>
    }
    
    /* Error clasico de PID */
    error = (pid.setpoint) - (pid.input);
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <PIDCompute+0x120>)
 80011e6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <PIDCompute+0x120>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	edc7 7a01 	vstr	s15, [r7, #4]
    
    /* Calculo de la parte integrativa */
    pid.iTerm += (pid.alteredKi) * error;
 80011f8:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <PIDCompute+0x120>)
 80011fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80011fe:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <PIDCompute+0x120>)
 8001200:	edd3 6a07 	vldr	s13, [r3, #28]
 8001204:	edd7 7a01 	vldr	s15, [r7, #4]
 8001208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <PIDCompute+0x120>)
 8001212:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    
    // Constrain the integrator to make sure it does not exceed output bounds
    pid.iTerm = CONSTRAIN( (pid.iTerm), (pid.outMin), (pid.outMax) );
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <PIDCompute+0x120>)
 8001218:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <PIDCompute+0x120>)
 800121e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	d502      	bpl.n	8001232 <PIDCompute+0x62>
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <PIDCompute+0x120>)
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	e00f      	b.n	8001252 <PIDCompute+0x82>
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <PIDCompute+0x120>)
 8001234:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <PIDCompute+0x120>)
 800123a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800123e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	dd02      	ble.n	800124e <PIDCompute+0x7e>
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <PIDCompute+0x120>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	e001      	b.n	8001252 <PIDCompute+0x82>
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <PIDCompute+0x120>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <PIDCompute+0x120>)
 8001254:	6253      	str	r3, [r2, #36]	; 0x24
    
    /* Determinar la parte derivativa de la lectura y el error derivativo de la lectura */
    dInput = (pid.input) - (pid.lastInput);
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <PIDCompute+0x120>)
 8001258:	ed93 7a00 	vldr	s14, [r3]
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <PIDCompute+0x120>)
 800125e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001266:	edc7 7a00 	vstr	s15, [r7]
    
    /* Realiza el ultimo calculo y lo guarda en la variable salida */
    pid.output = (pid.alteredKp) * error + (pid.iTerm) - (pid.alteredKd) * dInput;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <PIDCompute+0x120>)
 800126c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001270:	edd7 7a01 	vldr	s15, [r7, #4]
 8001274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <PIDCompute+0x120>)
 800127a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800127e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <PIDCompute+0x120>)
 8001284:	edd3 6a08 	vldr	s13, [r3, #32]
 8001288:	edd7 7a00 	vldr	s15, [r7]
 800128c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <PIDCompute+0x120>)
 8001296:	edc3 7a02 	vstr	s15, [r3, #8]
    
    // Bound the output
    pid.output = CONSTRAIN( (pid.output), (pid.outMin), (pid.outMax) );
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <PIDCompute+0x120>)
 800129c:	ed93 7a02 	vldr	s14, [r3, #8]
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <PIDCompute+0x120>)
 80012a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	d502      	bpl.n	80012b6 <PIDCompute+0xe6>
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <PIDCompute+0x120>)
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	e00f      	b.n	80012d6 <PIDCompute+0x106>
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <PIDCompute+0x120>)
 80012b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <PIDCompute+0x120>)
 80012be:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	dd02      	ble.n	80012d2 <PIDCompute+0x102>
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <PIDCompute+0x120>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	e001      	b.n	80012d6 <PIDCompute+0x106>
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <PIDCompute+0x120>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <PIDCompute+0x120>)
 80012d8:	6093      	str	r3, [r2, #8]
    
    /* Manda el valor actual de la lectura del sensor a una lectura previa */
    pid.lastInput = pid.input;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <PIDCompute+0x120>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <PIDCompute+0x120>)
 80012e0:	6053      	str	r3, [r2, #4]
    
    return true;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	200002a4 	.word	0x200002a4

080012f4 <PIDOutputLimitsSet>:
    pid.mode = mode;
}

void 
PIDOutputLimitsSet(float min, float max)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012fe:	edc7 0a00 	vstr	s1, [r7]
    // Check if the parameters are valid
    if(min >= max)
 8001302:	ed97 7a01 	vldr	s14, [r7, #4]
 8001306:	edd7 7a00 	vldr	s15, [r7]
 800130a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	da43      	bge.n	800139c <PIDOutputLimitsSet+0xa8>
    {
        return;
    }
    
    // Save the parameters
    pid.outMin = min;
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	62d3      	str	r3, [r2, #44]	; 0x2c
    pid.outMax = max;
 800131a:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
    
    // If in automatic, apply the new constraints
    if(pid.mode == AUTOMATIC)
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 8001322:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001326:	2b01      	cmp	r3, #1
 8001328:	d139      	bne.n	800139e <PIDOutputLimitsSet+0xaa>
    {
        pid.output = CONSTRAIN(pid.output, min, max);
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 800132c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001330:	ed97 7a01 	vldr	s14, [r7, #4]
 8001334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	dd01      	ble.n	8001342 <PIDOutputLimitsSet+0x4e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	e00d      	b.n	800135e <PIDOutputLimitsSet+0x6a>
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 8001344:	edd3 7a02 	vldr	s15, [r3, #8]
 8001348:	ed97 7a00 	vldr	s14, [r7]
 800134c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d501      	bpl.n	800135a <PIDOutputLimitsSet+0x66>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	e001      	b.n	800135e <PIDOutputLimitsSet+0x6a>
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 8001360:	6093      	str	r3, [r2, #8]
        pid.iTerm  = CONSTRAIN(pid.iTerm,  min, max);
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 8001364:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001368:	ed97 7a01 	vldr	s14, [r7, #4]
 800136c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	dd01      	ble.n	800137a <PIDOutputLimitsSet+0x86>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	e00d      	b.n	8001396 <PIDOutputLimitsSet+0xa2>
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 800137c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001380:	ed97 7a00 	vldr	s14, [r7]
 8001384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	d501      	bpl.n	8001392 <PIDOutputLimitsSet+0x9e>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	e001      	b.n	8001396 <PIDOutputLimitsSet+0xa2>
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <PIDOutputLimitsSet+0xb4>)
 8001398:	6253      	str	r3, [r2, #36]	; 0x24
 800139a:	e000      	b.n	800139e <PIDOutputLimitsSet+0xaa>
        return;
 800139c:	bf00      	nop
    }
}
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	200002a4 	.word	0x200002a4

080013ac <PIDTuningsSet>:

void 
PIDTuningsSet(float kp, float ki, float kd)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80013b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80013ba:	ed87 1a01 	vstr	s2, [r7, #4]
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 80013be:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d44b      	bmi.n	8001464 <PIDTuningsSet+0xb8>
 80013cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	d444      	bmi.n	8001464 <PIDTuningsSet+0xb8>
 80013da:	edd7 7a01 	vldr	s15, [r7, #4]
 80013de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d43d      	bmi.n	8001464 <PIDTuningsSet+0xb8>
    {
        return;
    }
    
    // Save the parameters for displaying purposes
    pid.dispKp = kp;
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <PIDTuningsSet+0xc4>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	60d3      	str	r3, [r2, #12]
    pid.dispKi = ki;
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <PIDTuningsSet+0xc4>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	6113      	str	r3, [r2, #16]
    pid.dispKd = kd;
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <PIDTuningsSet+0xc4>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6153      	str	r3, [r2, #20]
    
    // Alter the parameters for PID
    pid.alteredKp = kp;
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <PIDTuningsSet+0xc4>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6193      	str	r3, [r2, #24]
    pid.alteredKi = ki * pid.sampleTime;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <PIDTuningsSet+0xc4>)
 8001402:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001406:	edd7 7a02 	vldr	s15, [r7, #8]
 800140a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <PIDTuningsSet+0xc4>)
 8001410:	edc3 7a07 	vstr	s15, [r3, #28]
    pid.alteredKd = kd / pid.sampleTime;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <PIDTuningsSet+0xc4>)
 8001416:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800141a:	edd7 6a01 	vldr	s13, [r7, #4]
 800141e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <PIDTuningsSet+0xc4>)
 8001424:	edc3 7a08 	vstr	s15, [r3, #32]
    
    // Apply reverse direction to the altered values if necessary
    if(pid.controllerDirection == REVERSE)
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <PIDTuningsSet+0xc4>)
 800142a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142e:	2b01      	cmp	r3, #1
 8001430:	d119      	bne.n	8001466 <PIDTuningsSet+0xba>
    {
        pid.alteredKp = -(pid.alteredKp);
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <PIDTuningsSet+0xc4>)
 8001434:	edd3 7a06 	vldr	s15, [r3, #24]
 8001438:	eef1 7a67 	vneg.f32	s15, s15
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <PIDTuningsSet+0xc4>)
 800143e:	edc3 7a06 	vstr	s15, [r3, #24]
        pid.alteredKi = -(pid.alteredKi);
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <PIDTuningsSet+0xc4>)
 8001444:	edd3 7a07 	vldr	s15, [r3, #28]
 8001448:	eef1 7a67 	vneg.f32	s15, s15
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <PIDTuningsSet+0xc4>)
 800144e:	edc3 7a07 	vstr	s15, [r3, #28]
        pid.alteredKd = -(pid.alteredKd);
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <PIDTuningsSet+0xc4>)
 8001454:	edd3 7a08 	vldr	s15, [r3, #32]
 8001458:	eef1 7a67 	vneg.f32	s15, s15
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <PIDTuningsSet+0xc4>)
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
 8001462:	e000      	b.n	8001466 <PIDTuningsSet+0xba>
        return;
 8001464:	bf00      	nop
    }
}
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	200002a4 	.word	0x200002a4

08001474 <PIDSetpointSet>:
        // Save the new sampling time
        pid.sampleTime = sampleTimeSeconds;
    }
}

void PIDSetpointSet(float setpoint) { pid.setpoint = setpoint; }
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	ed87 0a01 	vstr	s0, [r7, #4]
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <PIDSetpointSet+0x1c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6353      	str	r3, [r2, #52]	; 0x34
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	200002a4 	.word	0x200002a4

08001494 <PIDInputSet>:
//      pid - The address of a PIDControl instantiation.
//      input - The value the controller will work with.
// Returns:
//      Nothing.
//
void PIDInputSet(float input) { pid.input = input; }
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <PIDInputSet+0x1c>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200002a4 	.word	0x200002a4

080014b4 <PIDOutputGet>:
 {
	 return pid.controllerDirection;
 }

float PIDOutputGet(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	return pid.output;
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <PIDOutputGet+0x18>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	ee07 3a90 	vmov	s15, r3
}
 80014c0:	eeb0 0a67 	vmov.f32	s0, s15
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	200002a4 	.word	0x200002a4

080014d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
/* Variables globales */

uint8_t Aumento = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == Boton_encoder_Pin)
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e0:	d10a      	bne.n	80014f8 <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80014e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <HAL_GPIO_EXTI_Callback+0x30>)
 80014e8:	f000 ffdc 	bl	80024a4 <HAL_GPIO_TogglePin>
		Aumento++;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_GPIO_EXTI_Callback+0x34>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GPIO_EXTI_Callback+0x34>)
 80014f6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	48000400 	.word	0x48000400
 8001504:	20000206 	.word	0x20000206

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	/* Cambiando el intervalo de maximo y minimo obtendras un mejor rango de tiempo */
	float minOutput = 1, maxOutput = 10,Valor = 0;
 800150e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <main+0xb0>)
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
	uint8_t  Mesument = 200;
 800151e:	23c8      	movs	r3, #200	; 0xc8
 8001520:	70fb      	strb	r3, [r7, #3]
	PIDInit(0.1, 100, 2, 2, minOutput, maxOutput, AUTOMATIC, DIRECT);
 8001522:	2100      	movs	r1, #0
 8001524:	2001      	movs	r0, #1
 8001526:	edd7 2a02 	vldr	s5, [r7, #8]
 800152a:	ed97 2a03 	vldr	s4, [r7, #12]
 800152e:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001532:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8001536:	eddf 0a21 	vldr	s1, [pc, #132]	; 80015bc <main+0xb4>
 800153a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80015c0 <main+0xb8>
 800153e:	f7ff fe07 	bl	8001150 <PIDInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f000 fc8a 	bl	8001e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f841 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 f971 	bl	8001830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800154e:	f000 f93f 	bl	80017d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001552:	f000 f8ef 	bl	8001734 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8001556:	f000 f8b7 	bl	80016c8 <MX_LPTIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  Mesument = app_LecturaPulsos();
 800155a:	f7ff fde3 	bl	8001124 <app_LecturaPulsos>
 800155e:	4603      	mov	r3, r0
 8001560:	70fb      	strb	r3, [r7, #3]
		  PIDSetpointSet(Total);
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <main+0xbc>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	f7ff ff7f 	bl	8001474 <PIDSetpointSet>
		  PIDInputSet(Mesument);
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	f7ff ff86 	bl	8001494 <PIDInputSet>
		  PIDCompute();
 8001588:	f7ff fe22 	bl	80011d0 <PIDCompute>
		  Valor = PIDOutputGet();
 800158c:	f7ff ff92 	bl	80014b4 <PIDOutputGet>
 8001590:	ed87 0a01 	vstr	s0, [r7, #4]
		  app_SeleccionEncoder();
 8001594:	f7ff fd10 	bl	8000fb8 <app_SeleccionEncoder>
		  //app_SeleccionDisplay(Display, Anodo);
	 //	  app_Despliegue(Valor);
		  printf("Valor: %f Entrada: %d Lectura: %d\r \n",Valor,Total,Mesument);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <main+0xbc>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <main+0xc0>)
 80015b0:	f004 fa34 	bl	8005a1c <iprintf>
		  Mesument = app_LecturaPulsos();
 80015b4:	e7d1      	b.n	800155a <main+0x52>
 80015b6:	bf00      	nop
 80015b8:	41200000 	.word	0x41200000
 80015bc:	42c80000 	.word	0x42c80000
 80015c0:	3dcccccd 	.word	0x3dcccccd
 80015c4:	20000200 	.word	0x20000200
 80015c8:	08009170 	.word	0x08009170

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0a4      	sub	sp, #144	; 0x90
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015d6:	2244      	movs	r2, #68	; 0x44
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fbd8 	bl	8004d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2234      	movs	r2, #52	; 0x34
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fbca 	bl	8004d90 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80015fc:	f001 f9f0 	bl	80029e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <SystemClock_Config+0xf8>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <SystemClock_Config+0xf8>)
 8001608:	f023 0318 	bic.w	r3, r3, #24
 800160c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001614:	f001 fa02 	bl	8002a1c <HAL_PWREx_ControlVoltageScaling>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800161e:	f000 f9e7 	bl	80019f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001622:	2314      	movs	r3, #20
 8001624:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001626:	2301      	movs	r3, #1
 8001628:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001632:	2360      	movs	r3, #96	; 0x60
 8001634:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800163a:	2301      	movs	r3, #1
 800163c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 45;
 8001644:	232d      	movs	r3, #45	; 0x2d
 8001646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001650:	2304      	movs	r3, #4
 8001652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fa34 	bl	8002ac8 <HAL_RCC_OscConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001666:	f000 f9c3 	bl	80019f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	230f      	movs	r3, #15
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166e:	2303      	movs	r3, #3
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001680:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001684:	2102      	movs	r1, #2
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fe84 	bl	8003394 <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001692:	f000 f9ad 	bl	80019f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 8001696:	f240 2302 	movw	r3, #514	; 0x202
 800169a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f878 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80016b2:	f000 f99d 	bl	80019f0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016b6:	f002 f9f7 	bl	8003aa8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016ba:	bf00      	nop
 80016bc:	3790      	adds	r7, #144	; 0x90
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <MX_LPTIM1_Init+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016e0:	2204      	movs	r2, #4
 80016e2:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_LPTIM1_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_LPTIM1_Init+0x64>)
 8001700:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_LPTIM1_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <MX_LPTIM1_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 200;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_LPTIM1_Init+0x64>)
 8001714:	22c8      	movs	r2, #200	; 0xc8
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_LPTIM1_Init+0x64>)
 800171a:	f000 fef5 	bl	8002508 <HAL_LPTIM_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_LPTIM1_Init+0x60>
  {
    Error_Handler();
 8001724:	f000 f964 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000214 	.word	0x20000214
 8001730:	40007c00 	.word	0x40007c00

08001734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <MX_TIM2_Init+0x98>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_TIM2_Init+0x98>)
 800175c:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_TIM2_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_TIM2_Init+0x98>)
 800176a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800176e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_TIM2_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_TIM2_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <MX_TIM2_Init+0x98>)
 800177e:	f002 f9a3 	bl	8003ac8 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001788:	f000 f932 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_TIM2_Init+0x98>)
 800179a:	f002 fb0a 	bl	8003db2 <HAL_TIM_ConfigClockSource>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017a4:	f000 f924 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_TIM2_Init+0x98>)
 80017b6:	f002 fce5 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80017c0:	f000 f916 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000250 	.word	0x20000250

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <MX_USART2_UART_Init+0x5c>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001814:	f002 fd3a 	bl	800428c <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800181e:	f000 f8e7 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200002e0 	.word	0x200002e0
 800182c:	40004400 	.word	0x40004400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b5c      	ldr	r3, [pc, #368]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a5b      	ldr	r2, [pc, #364]	; (80019b8 <MX_GPIO_Init+0x188>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a55      	ldr	r2, [pc, #340]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <MX_GPIO_Init+0x188>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <MX_GPIO_Init+0x188>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <MX_GPIO_Init+0x188>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <MX_GPIO_Init+0x188>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80018ac:	4843      	ldr	r0, [pc, #268]	; (80019bc <MX_GPIO_Init+0x18c>)
 80018ae:	f000 fde1 	bl	8002474 <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 80018b2:	2200      	movs	r2, #0
 80018b4:	f241 5131 	movw	r1, #5425	; 0x1531
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f000 fdda 	bl	8002474 <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Display_3_Pin|Display_2_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f242 0130 	movw	r1, #8240	; 0x2030
 80018c6:	483e      	ldr	r0, [pc, #248]	; (80019c0 <MX_GPIO_Init+0x190>)
 80018c8:	f000 fdd4 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boton_azul_Pin */
  GPIO_InitStruct.Pin = Boton_azul_Pin;
 80018cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d2:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <MX_GPIO_Init+0x194>)
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_azul_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4836      	ldr	r0, [pc, #216]	; (80019bc <MX_GPIO_Init+0x18c>)
 80018e2:	f000 fc3d 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 80018e6:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80018ea:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	482f      	ldr	r0, [pc, #188]	; (80019bc <MX_GPIO_Init+0x18c>)
 8001900:	f000 fc2e 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8001904:	f241 5331 	movw	r3, #5425	; 0x1531
 8001908:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f000 fc1e 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Display_3_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Display_3_Pin|Display_2_Pin;
 8001924:	f242 0330 	movw	r3, #8240	; 0x2030
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4820      	ldr	r0, [pc, #128]	; (80019c0 <MX_GPIO_Init+0x190>)
 800193e:	f000 fc0f 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194c:	2301      	movs	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4819      	ldr	r0, [pc, #100]	; (80019bc <MX_GPIO_Init+0x18c>)
 8001958:	f000 fc02 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 800195c:	2340      	movs	r3, #64	; 0x40
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <MX_GPIO_Init+0x190>)
 8001970:	f000 fbf6 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_encoder_Pin */
  GPIO_InitStruct.Pin = Boton_encoder_Pin;
 8001974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_GPIO_Init+0x198>)
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_encoder_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_GPIO_Init+0x190>)
 800198a:	f000 fbe9 	bl	8002160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2017      	movs	r0, #23
 8001994:	f000 fbad 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001998:	2017      	movs	r0, #23
 800199a:	f000 fbc6 	bl	800212a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2028      	movs	r0, #40	; 0x28
 80019a4:	f000 fba5 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019a8:	2028      	movs	r0, #40	; 0x28
 80019aa:	f000 fbbe 	bl	800212a <HAL_NVIC_EnableIRQ>

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000800 	.word	0x48000800
 80019c0:	48000400 	.word	0x48000400
 80019c4:	10210000 	.word	0x10210000
 80019c8:	10110000 	.word	0x10110000

080019cc <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80019d4:	1d39      	adds	r1, r7, #4
 80019d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019da:	2201      	movs	r2, #1
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <__io_putchar+0x20>)
 80019de:	f002 fca3 	bl	8004328 <HAL_UART_Transmit>

return ch;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200002e0 	.word	0x200002e0

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_MspInit+0x44>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_MspInit+0x44>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6613      	str	r3, [r2, #96]	; 0x60
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_MspInit+0x44>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_MspInit+0x44>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_MspInit+0x44>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MspInit+0x44>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_LPTIM_MspInit+0xb4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d143      	bne.n	8001af2 <HAL_LPTIM_MspInit+0xaa>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_LPTIM_MspInit+0xb8>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration    
    PC0     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <HAL_LPTIM_MspInit+0xbc>)
 8001ace:	f000 fb47 	bl	8002160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4806      	ldr	r0, [pc, #24]	; (8001b08 <HAL_LPTIM_MspInit+0xc0>)
 8001aee:	f000 fb37 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40007c00 	.word	0x40007c00
 8001b00:	40021000 	.word	0x40021000
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48000400 	.word	0x48000400

08001b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	d113      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_TIM_Base_MspInit+0x44>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_TIM_Base_MspInit+0x44>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_TIM_Base_MspInit+0x44>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	201c      	movs	r0, #28
 8001b3c:	f000 fad9 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b40:	201c      	movs	r0, #28
 8001b42:	f000 faf2 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <HAL_UART_MspInit+0x7c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d128      	bne.n	8001bc8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	6593      	str	r3, [r2, #88]	; 0x58
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc4:	f000 facc 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2c:	f000 f968 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c3c:	f000 fc4c 	bl	80024d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM2_IRQHandler+0x10>)
 8001c4a:	f001 ff93 	bl	8003b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000250 	.word	0x20000250

08001c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c60:	f000 fc3a 	bl	80024d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e00a      	b.n	8001c90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c7a:	f3af 8000 	nop.w
 8001c7e:	4601      	mov	r1, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	b2ca      	uxtb	r2, r1
 8001c88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf0      	blt.n	8001c7a <_read+0x12>
	}

return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e009      	b.n	8001cc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fe85 	bl	80019cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbf1      	blt.n	8001cb4 <_write+0x12>
	}
	return len;
 8001cd0:	687b      	ldr	r3, [r7, #4]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_close>:

int _close(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d02:	605a      	str	r2, [r3, #4]
	return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_isatty>:

int _isatty(int file)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x50>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x16>
		heap_end = &end;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <_sbrk+0x50>)
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <_sbrk+0x54>)
 8001d58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <_sbrk+0x50>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <_sbrk+0x50>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	466a      	mov	r2, sp
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d907      	bls.n	8001d7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d6e:	f002 ffe5 	bl	8004d3c <__errno>
 8001d72:	4602      	mov	r2, r0
 8001d74:	230c      	movs	r3, #12
 8001d76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7c:	e006      	b.n	8001d8c <_sbrk+0x48>
	}

	heap_end += incr;
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <_sbrk+0x50>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <_sbrk+0x50>)
 8001d88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000208 	.word	0x20000208
 8001d98:	20000368 	.word	0x20000368

08001d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <SystemInit+0x64>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da6:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <SystemInit+0x64>)
 8001da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <SystemInit+0x68>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <SystemInit+0x68>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <SystemInit+0x68>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <SystemInit+0x68>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <SystemInit+0x68>)
 8001dc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001dcc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <SystemInit+0x68>)
 8001dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <SystemInit+0x68>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <SystemInit+0x68>)
 8001de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <SystemInit+0x68>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SystemInit+0x64>)
 8001dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df2:	609a      	str	r2, [r3, #8]
#endif
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00
 8001e04:	40021000 	.word	0x40021000

08001e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e0e:	e003      	b.n	8001e18 <LoopCopyDataInit>

08001e10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e16:	3104      	adds	r1, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e20:	d3f6      	bcc.n	8001e10 <CopyDataInit>
	ldr	r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e24:	e002      	b.n	8001e2c <LoopFillZerobss>

08001e26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e28:	f842 3b04 	str.w	r3, [r2], #4

08001e2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <LoopForever+0x16>)
	cmp	r2, r3
 8001e2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e30:	d3f9      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e32:	f7ff ffb3 	bl	8001d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f002 ff87 	bl	8004d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e3a:	f7ff fb65 	bl	8001508 <main>

08001e3e <LoopForever>:

LoopForever:
    b LoopForever
 8001e3e:	e7fe      	b.n	8001e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e40:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001e44:	08009510 	.word	0x08009510
	ldr	r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e4c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001e50:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001e54:	20000368 	.word	0x20000368

08001e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC1_2_IRQHandler>

08001e5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f939 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f80e 	bl	8001e8c <HAL_InitTick>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	71fb      	strb	r3, [r7, #7]
 8001e7a:	e001      	b.n	8001e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e7c:	f7ff fdc0 	bl	8001a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e80:	79fb      	ldrb	r3, [r7, #7]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_InitTick+0x68>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d022      	beq.n	8001ee6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_InitTick+0x6c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_InitTick+0x68>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f946 	bl	8002146 <HAL_SYSTICK_Config>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	d809      	bhi.n	8001eda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ece:	f000 f910 	bl	80020f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_InitTick+0x70>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e007      	b.n	8001eea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e004      	b.n	8001eea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e001      	b.n	8001eea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_IncTick+0x1c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_IncTick+0x20>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <HAL_IncTick+0x1c>)
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000360 	.word	0x20000360
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000360 	.word	0x20000360

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	e14e      	b.n	800240e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8140 	beq.w	8002408 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d00b      	beq.n	80021a8 <HAL_GPIO_Init+0x48>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800219c:	2b11      	cmp	r3, #17
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b12      	cmp	r3, #18
 80021a6:	d130      	bne.n	800220a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021de:	2201      	movs	r2, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 0201 	and.w	r2, r3, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0xea>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b12      	cmp	r3, #18
 8002248:	d123      	bne.n	8002292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	6939      	ldr	r1, [r7, #16]
 800228e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0203 	and.w	r2, r3, #3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 809a 	beq.w	8002408 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d4:	4b55      	ldr	r3, [pc, #340]	; (800242c <HAL_GPIO_Init+0x2cc>)
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_GPIO_Init+0x2cc>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6613      	str	r3, [r2, #96]	; 0x60
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_GPIO_Init+0x2cc>)
 80022e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_GPIO_Init+0x2d0>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002316:	d013      	beq.n	8002340 <HAL_GPIO_Init+0x1e0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a46      	ldr	r2, [pc, #280]	; (8002434 <HAL_GPIO_Init+0x2d4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00d      	beq.n	800233c <HAL_GPIO_Init+0x1dc>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a45      	ldr	r2, [pc, #276]	; (8002438 <HAL_GPIO_Init+0x2d8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d007      	beq.n	8002338 <HAL_GPIO_Init+0x1d8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a44      	ldr	r2, [pc, #272]	; (800243c <HAL_GPIO_Init+0x2dc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_GPIO_Init+0x1d4>
 8002330:	2303      	movs	r3, #3
 8002332:	e006      	b.n	8002342 <HAL_GPIO_Init+0x1e2>
 8002334:	2307      	movs	r3, #7
 8002336:	e004      	b.n	8002342 <HAL_GPIO_Init+0x1e2>
 8002338:	2302      	movs	r3, #2
 800233a:	e002      	b.n	8002342 <HAL_GPIO_Init+0x1e2>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_GPIO_Init+0x1e2>
 8002340:	2300      	movs	r3, #0
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	f002 0203 	and.w	r2, r2, #3
 8002348:	0092      	lsls	r2, r2, #2
 800234a:	4093      	lsls	r3, r2
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002352:	4937      	ldr	r1, [pc, #220]	; (8002430 <HAL_GPIO_Init+0x2d0>)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002360:	4b37      	ldr	r3, [pc, #220]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002384:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ae:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_GPIO_Init+0x2e0>)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3301      	adds	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	f47f aea9 	bne.w	8002170 <HAL_GPIO_Init+0x10>
  }
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	48000400 	.word	0x48000400
 8002438:	48000800 	.word	0x48000800
 800243c:	48000c00 	.word	0x48000c00
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002490:	e002      	b.n	8002498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80024c2:	e002      	b.n	80024ca <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024c4:	887a      	ldrh	r2, [r7, #2]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe ffea 	bl	80014d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40010400 	.word	0x40010400

08002508 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0a7      	b.n	800266a <HAL_LPTIM_Init+0x162>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fa8a 	bl	8001a48 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002554:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800255e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8002560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f8f1 	bl	800274c <LPTIM_WaitForFlag>
 800256a:	4603      	mov	r3, r0
 800256c:	2b03      	cmp	r3, #3
 800256e:	d101      	bne.n	8002574 <HAL_LPTIM_Init+0x6c>
  {
    return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e07a      	b.n	800266a <HAL_LPTIM_Init+0x162>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f919 	bl	80027ac <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8d7 	bl	800272e <HAL_LPTIM_GetState>
 8002580:	4603      	mov	r3, r0
 8002582:	2b03      	cmp	r3, #3
 8002584:	d101      	bne.n	800258a <HAL_LPTIM_Init+0x82>
  {
    return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e06f      	b.n	800266a <HAL_LPTIM_Init+0x162>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d004      	beq.n	80025a4 <HAL_LPTIM_Init+0x9c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025a2:	d103      	bne.n	80025ac <HAL_LPTIM_Init+0xa4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 031e 	bic.w	r3, r3, #30
 80025aa:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d005      	beq.n	80025c4 <HAL_LPTIM_Init+0xbc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025c2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_LPTIM_Init+0x16c>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80025d4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80025da:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80025e0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80025e6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d004      	beq.n	8002600 <HAL_LPTIM_Init+0xf8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025fe:	d107      	bne.n	8002610 <HAL_LPTIM_Init+0x108>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002608:	4313      	orrs	r3, r2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002618:	4293      	cmp	r3, r2
 800261a:	d00a      	beq.n	8002632 <HAL_LPTIM_Init+0x12a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002624:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800262a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_LPTIM_Init+0x170>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d108      	bne.n	8002656 <HAL_LPTIM_Init+0x14e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	621a      	str	r2, [r3, #32]
 8002654:	e004      	b.n	8002660 <HAL_LPTIM_Init+0x158>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800265e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	ff19f1f8 	.word	0xff19f1f8
 8002678:	40007c00 	.word	0x40007c00

0800267c <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f023 0306 	bic.w	r3, r3, #6
 800269c:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80026be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2210      	movs	r2, #16
 80026d6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80026e0:	2110      	movs	r1, #16
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f832 	bl	800274c <LPTIM_WaitForFlag>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d101      	bne.n	80026f2 <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e00c      	b.n	800270c <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0204 	orr.w	r2, r2, #4
 8002700:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800273c:	b2db      	uxtb	r3, r3
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <LPTIM_WaitForFlag+0x58>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <LPTIM_WaitForFlag+0x5c>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	0b9b      	lsrs	r3, r3, #14
 8002766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	60bb      	str	r3, [r7, #8]
    do
    {
      count--;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	3b01      	subs	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <LPTIM_WaitForFlag+0x34>
      {
        result = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	73fb      	strb	r3, [r7, #15]
      }
    }
    while((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4013      	ands	r3, r2
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d002      	beq.n	8002796 <LPTIM_WaitForFlag+0x4a>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ec      	bne.n	8002770 <LPTIM_WaitForFlag+0x24>

    return result;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20000000 	.word	0x20000000
 80027a8:	d1b71759 	.word	0xd1b71759

080027ac <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a85      	ldr	r2, [pc, #532]	; (80029d4 <LPTIM_Disable+0x228>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <LPTIM_Disable+0x20>
 80027c4:	4a84      	ldr	r2, [pc, #528]	; (80029d8 <LPTIM_Disable+0x22c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <LPTIM_Disable+0x2e>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 80027ca:	e00d      	b.n	80027e8 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80027cc:	4b83      	ldr	r3, [pc, #524]	; (80029dc <LPTIM_Disable+0x230>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 80027d8:	e006      	b.n	80027e8 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80027da:	4b80      	ldr	r3, [pc, #512]	; (80029dc <LPTIM_Disable+0x230>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 80027e6:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6d      	ldr	r2, [pc, #436]	; (80029d4 <LPTIM_Disable+0x228>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <LPTIM_Disable+0x7e>
 8002822:	4a6d      	ldr	r2, [pc, #436]	; (80029d8 <LPTIM_Disable+0x22c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00d      	beq.n	8002844 <LPTIM_Disable+0x98>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8002828:	e019      	b.n	800285e <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 800282a:	4b6c      	ldr	r3, [pc, #432]	; (80029dc <LPTIM_Disable+0x230>)
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	4a6b      	ldr	r2, [pc, #428]	; (80029dc <LPTIM_Disable+0x230>)
 8002830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002834:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8002836:	4b69      	ldr	r3, [pc, #420]	; (80029dc <LPTIM_Disable+0x230>)
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	4a68      	ldr	r2, [pc, #416]	; (80029dc <LPTIM_Disable+0x230>)
 800283c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002840:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 8002842:	e00c      	b.n	800285e <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM2_FORCE_RESET();
 8002844:	4b65      	ldr	r3, [pc, #404]	; (80029dc <LPTIM_Disable+0x230>)
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	4a64      	ldr	r2, [pc, #400]	; (80029dc <LPTIM_Disable+0x230>)
 800284a:	f043 0320 	orr.w	r3, r3, #32
 800284e:	63d3      	str	r3, [r2, #60]	; 0x3c
       __HAL_RCC_LPTIM2_RELEASE_RESET();
 8002850:	4b62      	ldr	r3, [pc, #392]	; (80029dc <LPTIM_Disable+0x230>)
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	4a61      	ldr	r2, [pc, #388]	; (80029dc <LPTIM_Disable+0x230>)
 8002856:	f023 0320 	bic.w	r3, r3, #32
 800285a:	63d3      	str	r3, [r2, #60]	; 0x3c
       break;
 800285c:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <LPTIM_Disable+0xc6>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <LPTIM_Disable+0xc6>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8096 	beq.w	800299e <LPTIM_Disable+0x1f2>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <LPTIM_Disable+0x228>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <LPTIM_Disable+0xd8>
 800287c:	4a56      	ldr	r2, [pc, #344]	; (80029d8 <LPTIM_Disable+0x22c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <LPTIM_Disable+0xea>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8002882:	e011      	b.n	80028a8 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002884:	4b55      	ldr	r3, [pc, #340]	; (80029dc <LPTIM_Disable+0x230>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	4a54      	ldr	r2, [pc, #336]	; (80029dc <LPTIM_Disable+0x230>)
 800288c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8002894:	e008      	b.n	80028a8 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8002896:	4b51      	ldr	r3, [pc, #324]	; (80029dc <LPTIM_Disable+0x230>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	4a4f      	ldr	r2, [pc, #316]	; (80029dc <LPTIM_Disable+0x230>)
 800289e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80028a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 80028a6:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01a      	beq.n	80028e4 <LPTIM_Disable+0x138>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80028c6:	2108      	movs	r1, #8
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff3f 	bl	800274c <LPTIM_WaitForFlag>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d103      	bne.n	80028dc <LPTIM_Disable+0x130>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2203      	movs	r2, #3
 80028d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2208      	movs	r2, #8
 80028e2:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01a      	beq.n	8002920 <LPTIM_Disable+0x174>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002902:	2110      	movs	r1, #16
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff21 	bl	800274c <LPTIM_WaitForFlag>
 800290a:	4603      	mov	r3, r0
 800290c:	2b03      	cmp	r3, #3
 800290e:	d103      	bne.n	8002918 <LPTIM_Disable+0x16c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2203      	movs	r2, #3
 8002914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2210      	movs	r2, #16
 800291e:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01c      	beq.n	8002960 <LPTIM_Disable+0x1b4>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800293e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff02 	bl	800274c <LPTIM_WaitForFlag>
 8002948:	4603      	mov	r3, r0
 800294a:	2b03      	cmp	r3, #3
 800294c:	d103      	bne.n	8002956 <LPTIM_Disable+0x1aa>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2203      	movs	r2, #3
 8002952:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295e:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <LPTIM_Disable+0x228>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <LPTIM_Disable+0x1c6>
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <LPTIM_Disable+0x22c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00b      	beq.n	8002988 <LPTIM_Disable+0x1dc>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8002970:	e016      	b.n	80029a0 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <LPTIM_Disable+0x230>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800297c:	4917      	ldr	r1, [pc, #92]	; (80029dc <LPTIM_Disable+0x230>)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 8002986:	e00b      	b.n	80029a0 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8002988:	4b14      	ldr	r3, [pc, #80]	; (80029dc <LPTIM_Disable+0x230>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002992:	4912      	ldr	r1, [pc, #72]	; (80029dc <LPTIM_Disable+0x230>)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 800299c:	e000      	b.n	80029a0 <LPTIM_Disable+0x1f4>
    }
  }
 800299e:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a3a      	ldr	r2, [r7, #32]
 80029b6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80029c8:	b662      	cpsie	i

  __enable_irq();
}
 80029ca:	bf00      	nop
 80029cc:	3728      	adds	r7, #40	; 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40007c00 	.word	0x40007c00
 80029d8:	40009400 	.word	0x40009400
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40007000 	.word	0x40007000

08002a00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40007000 	.word	0x40007000

08002a1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2a:	d130      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a38:	d038      	beq.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2232      	movs	r2, #50	; 0x32
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0c9b      	lsrs	r3, r3, #18
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a60:	e002      	b.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a74:	d102      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f2      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d110      	bne.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e00f      	b.n	8002aae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d007      	beq.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aa4:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	431bde83 	.word	0x431bde83

08002ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f000 bc56 	b.w	8003388 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002adc:	4ba1      	ldr	r3, [pc, #644]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae6:	4b9f      	ldr	r3, [pc, #636]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80e6 	beq.w	8002cca <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4c>
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	f040 808d 	bne.w	8002c26 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	f040 8089 	bne.w	8002c26 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b14:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_RCC_OscConfig+0x66>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f000 bc2d 	b.w	8003388 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b32:	4b8c      	ldr	r3, [pc, #560]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <HAL_RCC_OscConfig+0x80>
 8002b3e:	4b89      	ldr	r3, [pc, #548]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b46:	e005      	b.n	8002b54 <HAL_RCC_OscConfig+0x8c>
 8002b48:	4b86      	ldr	r3, [pc, #536]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d224      	bcs.n	8002ba2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fdbd 	bl	80036dc <RCC_SetFlashLatencyFromMSIRange>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f000 bc0d 	b.w	8003388 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6e:	4b7d      	ldr	r3, [pc, #500]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a7c      	ldr	r2, [pc, #496]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b7a      	ldr	r3, [pc, #488]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	4977      	ldr	r1, [pc, #476]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8c:	4b75      	ldr	r3, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	4972      	ldr	r1, [pc, #456]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
 8002ba0:	e025      	b.n	8002bee <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba2:	4b70      	ldr	r3, [pc, #448]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6f      	ldr	r2, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b6d      	ldr	r3, [pc, #436]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	496a      	ldr	r1, [pc, #424]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc0:	4b68      	ldr	r3, [pc, #416]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	4965      	ldr	r1, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fd7c 	bl	80036dc <RCC_SetFlashLatencyFromMSIRange>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e3cc      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bee:	f000 fcb3 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4a5a      	ldr	r2, [pc, #360]	; (8002d68 <HAL_RCC_OscConfig+0x2a0>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	fa21 f303 	lsr.w	r3, r1, r3
 8002c0a:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_RCC_OscConfig+0x2a4>)
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_RCC_OscConfig+0x2a8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f93a 	bl	8001e8c <HAL_InitTick>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d052      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	e3b0      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d032      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c2e:	4b4d      	ldr	r3, [pc, #308]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a4c      	ldr	r2, [pc, #304]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff f973 	bl	8001f24 <HAL_GetTick>
 8002c3e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c42:	f7ff f96f 	bl	8001f24 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e399      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3f      	ldr	r2, [pc, #252]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	493a      	ldr	r1, [pc, #232]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4935      	ldr	r1, [pc, #212]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
 8002c92:	e01a      	b.n	8002cca <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ca0:	f7ff f940 	bl	8001f24 <HAL_GetTick>
 8002ca4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca8:	f7ff f93c 	bl	8001f24 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e366      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1e0>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d073      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x220>
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d10e      	bne.n	8002d00 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d063      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2f4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d15f      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e343      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x250>
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0x28c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x274>
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0x28c>
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_RCC_OscConfig+0x29c>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7ff f8e2 	bl	8001f24 <HAL_GetTick>
 8002d60:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d62:	e010      	b.n	8002d86 <HAL_RCC_OscConfig+0x2be>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08009198 	.word	0x08009198
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7ff f8d6 	bl	8001f24 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e300      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d86:	4ba0      	ldr	r3, [pc, #640]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2ac>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7ff f8c6 	bl	8001f24 <HAL_GetTick>
 8002d98:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7ff f8c2 	bl	8001f24 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e2ec      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dae:	4b96      	ldr	r3, [pc, #600]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2d4>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d060      	beq.n	8002e8c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_OscConfig+0x314>
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d116      	bne.n	8002e0a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ddc:	4b8a      	ldr	r3, [pc, #552]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x32c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e2c9      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b84      	ldr	r3, [pc, #528]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	4981      	ldr	r1, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e08:	e040      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d023      	beq.n	8002e5a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	4b7d      	ldr	r3, [pc, #500]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7ff f881 	bl	8001f24 <HAL_GetTick>
 8002e22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7ff f87d 	bl	8001f24 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e2a7      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e38:	4b73      	ldr	r3, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	496d      	ldr	r1, [pc, #436]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
 8002e58:	e018      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6a      	ldr	r2, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7ff f85d 	bl	8001f24 <HAL_GetTick>
 8002e6a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff f859 	bl	8001f24 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e283      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e80:	4b61      	ldr	r3, [pc, #388]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07f      	beq.n	8002f98 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05f      	beq.n	8002f60 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d037      	beq.n	8002f26 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e25c      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ed8:	4b4b      	ldr	r3, [pc, #300]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ede:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee8:	f7ff f81c 	bl	8001f24 <HAL_GetTick>
 8002eec:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f818 	bl	8001f24 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b11      	cmp	r3, #17
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e242      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ef      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	493a      	ldr	r1, [pc, #232]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	4a36      	ldr	r2, [pc, #216]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fff5 	bl	8001f24 <HAL_GetTick>
 8002f3a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fff1 	bl	8001f24 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b11      	cmp	r3, #17
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e21b      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ef      	beq.n	8002f3e <HAL_RCC_OscConfig+0x476>
 8002f5e:	e01b      	b.n	8002f98 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe ffd8 	bl	8001f24 <HAL_GetTick>
 8002f74:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe ffd4 	bl	8001f24 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b11      	cmp	r3, #17
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1fe      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ef      	bne.n	8002f78 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80c1 	beq.w	8003128 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	4a12      	ldr	r2, [pc, #72]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_OscConfig+0x540>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_OscConfig+0x544>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_OscConfig+0x544>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x544>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe ff99 	bl	8001f24 <HAL_GetTick>
 8002ff2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff4:	e00c      	b.n	8003010 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fe ff95 	bl	8001f24 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d905      	bls.n	8003010 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1bf      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
 8003008:	40021000 	.word	0x40021000
 800300c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	4bb1      	ldr	r3, [pc, #708]	; (80032d8 <HAL_RCC_OscConfig+0x810>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ec      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02c      	beq.n	8003082 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003028:	4bac      	ldr	r3, [pc, #688]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	49a8      	ldr	r1, [pc, #672]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800304e:	4ba3      	ldr	r3, [pc, #652]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	4aa1      	ldr	r2, [pc, #644]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800305e:	4b9f      	ldr	r3, [pc, #636]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	4a9d      	ldr	r2, [pc, #628]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306e:	e018      	b.n	80030a2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003070:	4b9a      	ldr	r3, [pc, #616]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a99      	ldr	r2, [pc, #612]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003080:	e00f      	b.n	80030a2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003082:	4b96      	ldr	r3, [pc, #600]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	4a94      	ldr	r2, [pc, #592]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003092:	4b92      	ldr	r3, [pc, #584]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	4a90      	ldr	r2, [pc, #576]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800309a:	f023 0304 	bic.w	r3, r3, #4
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe ff3b 	bl	8001f24 <HAL_GetTick>
 80030ae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe ff37 	bl	8001f24 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e15f      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c8:	4b84      	ldr	r3, [pc, #528]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ed      	beq.n	80030b2 <HAL_RCC_OscConfig+0x5ea>
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe ff24 	bl	8001f24 <HAL_GetTick>
 80030dc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fe ff20 	bl	8001f24 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e148      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f6:	4b79      	ldr	r3, [pc, #484]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ed      	bne.n	80030e0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003104:	4b75      	ldr	r3, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	4a74      	ldr	r2, [pc, #464]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a6e      	ldr	r2, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d03c      	beq.n	80031ae <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800313c:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800313e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003142:	4a66      	ldr	r2, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe feea 	bl	8001f24 <HAL_GetTick>
 8003150:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003154:	f7fe fee6 	bl	8001f24 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e110      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <HAL_RCC_OscConfig+0x68c>
 8003174:	e01b      	b.n	80031ae <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003176:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800317c:	4a57      	ldr	r2, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe fecd 	bl	8001f24 <HAL_GetTick>
 800318a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800318e:	f7fe fec9 	bl	8001f24 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0f3      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031a0:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 80031a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ef      	bne.n	800318e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80e7 	beq.w	8003386 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	2b02      	cmp	r3, #2
 80031be:	f040 80b7 	bne.w	8003330 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031c2:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0203 	and.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d124      	bne.n	8003220 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	3b01      	subs	r3, #1
 80031e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d11b      	bne.n	8003220 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d113      	bne.n	8003220 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d109      	bne.n	8003220 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d061      	beq.n	80032e4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d056      	beq.n	80032d4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003226:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800322c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003230:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003232:	f7fe fe77 	bl	8001f24 <HAL_GetTick>
 8003236:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fe73 	bl	8001f24 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e09d      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_OscConfig+0x818>)
 800325e:	4013      	ands	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003268:	3a01      	subs	r2, #1
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003272:	0212      	lsls	r2, r2, #8
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800327a:	0852      	lsrs	r2, r2, #1
 800327c:	3a01      	subs	r2, #1
 800327e:	0552      	lsls	r2, r2, #21
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	3a01      	subs	r2, #1
 800328a:	0652      	lsls	r2, r2, #25
 800328c:	430a      	orrs	r2, r1
 800328e:	4913      	ldr	r1, [pc, #76]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003290:	4313      	orrs	r3, r2
 8003292:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 800329a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ac:	f7fe fe3a 	bl	8001f24 <HAL_GetTick>
 80032b0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fe36 	bl	8001f24 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e060      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_OscConfig+0x814>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d2:	e058      	b.n	8003386 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e057      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
 80032d8:	40007000 	.word	0x40007000
 80032dc:	40021000 	.word	0x40021000
 80032e0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d14a      	bne.n	8003386 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a26      	ldr	r2, [pc, #152]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003308:	f7fe fe0c 	bl	8001f24 <HAL_GetTick>
 800330c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fe08 	bl	8001f24 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e032      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x848>
 800332e:	e02a      	b.n	8003386 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d025      	beq.n	8003382 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 800333c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003340:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003348:	f023 0303 	bic.w	r3, r3, #3
 800334c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003354:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003358:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe fde3 	bl	8001f24 <HAL_GetTick>
 800335e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe fddf 	bl	8001f24 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e009      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_OscConfig+0x8c8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x89a>
 8003380:	e001      	b.n	8003386 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0c8      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	4961      	ldr	r1, [pc, #388]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b5f      	ldr	r3, [pc, #380]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b0      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d04c      	beq.n	800347e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d121      	bne.n	800343c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e09e      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d107      	bne.n	8003414 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003404:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d115      	bne.n	800343c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e092      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800341c:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e086      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342c:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e07e      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 0203 	bic.w	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	493f      	ldr	r1, [pc, #252]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344e:	f7fe fd69 	bl	8001f24 <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003454:	e00a      	b.n	800346c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003456:	f7fe fd65 	bl	8001f24 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e066      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 020c 	and.w	r2, r3, #12
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	429a      	cmp	r2, r3
 800347c:	d1eb      	bne.n	8003456 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	492c      	ldr	r1, [pc, #176]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d210      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0207 	bic.w	r2, r3, #7
 80034b2:	4924      	ldr	r1, [pc, #144]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCC_ClockConfig+0x1b0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e036      	b.n	800353a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4918      	ldr	r1, [pc, #96]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4910      	ldr	r1, [pc, #64]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800350a:	f000 f825 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 800350e:	4601      	mov	r1, r0
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCC_ClockConfig+0x1b4>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	5cd3      	ldrb	r3, [r2, r3]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	fa21 f303 	lsr.w	r3, r1, r3
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fcac 	bl	8001e8c <HAL_InitTick>
 8003534:	4603      	mov	r3, r0
 8003536:	72fb      	strb	r3, [r7, #11]

  return status;
 8003538:	7afb      	ldrb	r3, [r7, #11]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40022000 	.word	0x40022000
 8003548:	40021000 	.word	0x40021000
 800354c:	08009198 	.word	0x08009198
 8003550:	20000000 	.word	0x20000000
 8003554:	20000004 	.word	0x20000004

08003558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x34>
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d121      	bne.n	80035ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d11e      	bne.n	80035ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800358c:	4b33      	ldr	r3, [pc, #204]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003598:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e005      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035a8:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10d      	bne.n	80035e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d102      	bne.n	80035d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	e004      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_RCC_GetSysClockFreq+0x110>)
 80035de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d133      	bne.n	800364e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035e6:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0xa4>
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0xaa>
 80035fa:	e005      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035fe:	617b      	str	r3, [r7, #20]
      break;
 8003600:	e005      	b.n	800360e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003602:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_GetSysClockFreq+0x110>)
 8003604:	617b      	str	r3, [r7, #20]
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	617b      	str	r3, [r7, #20]
      break;
 800360c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	3301      	adds	r3, #1
 800361a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	fb02 f203 	mul.w	r2, r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	0e5b      	lsrs	r3, r3, #25
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800364e:	69bb      	ldr	r3, [r7, #24]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3724      	adds	r7, #36	; 0x24
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40021000 	.word	0x40021000
 8003660:	080091b0 	.word	0x080091b0
 8003664:	00f42400 	.word	0x00f42400
 8003668:	007a1200 	.word	0x007a1200

0800366c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4601      	mov	r1, r0
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	080091a8 	.word	0x080091a8

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036b4:	f7ff ffda 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b8:	4601      	mov	r1, r0
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0adb      	lsrs	r3, r3, #11
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	080091a8 	.word	0x080091a8

080036dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036f4:	f7ff f984 	bl	8002a00 <HAL_PWREx_GetVoltageRange>
 80036f8:	6178      	str	r0, [r7, #20]
 80036fa:	e014      	b.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4a24      	ldr	r2, [pc, #144]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	; 0x58
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003714:	f7ff f974 	bl	8002a00 <HAL_PWREx_GetVoltageRange>
 8003718:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372c:	d10b      	bne.n	8003746 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d919      	bls.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2ba0      	cmp	r3, #160	; 0xa0
 8003738:	d902      	bls.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800373a:	2302      	movs	r3, #2
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e013      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003740:	2301      	movs	r3, #1
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e010      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d902      	bls.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800374c:	2303      	movs	r3, #3
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e00a      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d102      	bne.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003758:	2302      	movs	r3, #2
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e004      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b70      	cmp	r3, #112	; 0x70
 8003762:	d101      	bne.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003764:	2301      	movs	r3, #1
 8003766:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 0207 	bic.w	r2, r3, #7
 8003770:	4909      	ldr	r1, [pc, #36]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	40022000 	.word	0x40022000

0800379c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a4:	2300      	movs	r3, #0
 80037a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a8:	2300      	movs	r3, #0
 80037aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 809e 	beq.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	6593      	str	r3, [r2, #88]	; 0x58
 80037e0:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ec:	2301      	movs	r3, #1
 80037ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f0:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a39      	ldr	r2, [pc, #228]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80037f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fc:	f7fe fb92 	bl	8001f24 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003802:	e009      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003804:	f7fe fb8e 	bl	8001f24 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d902      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	74fb      	strb	r3, [r7, #19]
        break;
 8003816:	e005      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003818:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ef      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d15a      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01e      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	429a      	cmp	r2, r3
 8003844:	d019      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003850:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800385a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003872:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe fb4e 	bl	8001f24 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	e00b      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fb4a 	bl	8001f24 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d902      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	74fb      	strb	r3, [r7, #19]
            break;
 80038a2:	e006      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ec      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4904      	ldr	r1, [pc, #16]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038ce:	e009      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	74bb      	strb	r3, [r7, #18]
 80038d4:	e006      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e4:	7c7b      	ldrb	r3, [r7, #17]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b6e      	ldr	r3, [pc, #440]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	4a6d      	ldr	r2, [pc, #436]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003902:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f023 0203 	bic.w	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4964      	ldr	r1, [pc, #400]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003924:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f023 020c 	bic.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	495c      	ldr	r1, [pc, #368]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003946:	4b57      	ldr	r3, [pc, #348]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4953      	ldr	r1, [pc, #332]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003968:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	494b      	ldr	r1, [pc, #300]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800398a:	4b46      	ldr	r3, [pc, #280]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4942      	ldr	r1, [pc, #264]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ac:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	493a      	ldr	r1, [pc, #232]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ce:	4b35      	ldr	r3, [pc, #212]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	4931      	ldr	r1, [pc, #196]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	4929      	ldr	r1, [pc, #164]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4920      	ldr	r1, [pc, #128]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	4918      	ldr	r1, [pc, #96]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a52:	d105      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a98:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e01d      	b.n	8003b16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe f80c 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f000 fa3e 	bl	8003f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <HAL_TIM_Base_Start_IT+0x50>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d00b      	beq.n	8003b62 <HAL_TIM_Base_Start_IT+0x42>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d007      	beq.n	8003b62 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	00010007 	.word	0x00010007

08003b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d122      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d11b      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9c8 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9ba 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f9cb 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d122      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0204 	mvn.w	r2, #4
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f99e 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f990 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f9a1 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0208 	mvn.w	r2, #8
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f974 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f966 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f977 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0210 	mvn.w	r2, #16
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f94a 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f93c 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f94d 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0201 	mvn.w	r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f916 	bl	8003f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 faa0 	bl	8004264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d32:	d10e      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fa93 	bl	8004278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d10e      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8fb 	bl	8003f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0220 	mvn.w	r2, #32
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa53 	bl	8004250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_ConfigClockSource+0x18>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e0a8      	b.n	8003f1c <HAL_TIM_ConfigClockSource+0x16a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d067      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0x124>
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d80b      	bhi.n	8003e22 <HAL_TIM_ConfigClockSource+0x70>
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d073      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x144>
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d802      	bhi.n	8003e18 <HAL_TIM_ConfigClockSource+0x66>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d06f      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e16:	e078      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d06c      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x144>
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d06a      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003e20:	e073      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e22:	2b70      	cmp	r3, #112	; 0x70
 8003e24:	d00d      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x90>
 8003e26:	2b70      	cmp	r3, #112	; 0x70
 8003e28:	d804      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x82>
 8003e2a:	2b50      	cmp	r3, #80	; 0x50
 8003e2c:	d033      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0xe4>
 8003e2e:	2b60      	cmp	r3, #96	; 0x60
 8003e30:	d041      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003e32:	e06a      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d066      	beq.n	8003f08 <HAL_TIM_ConfigClockSource+0x156>
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	d017      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003e40:	e063      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6899      	ldr	r1, [r3, #8]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f000 f977 	bl	8004144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	609a      	str	r2, [r3, #8]
      break;
 8003e6e:	e04c      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6899      	ldr	r1, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f000 f960 	bl	8004144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e92:	609a      	str	r2, [r3, #8]
      break;
 8003e94:	e039      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f000 f8d4 	bl	8004050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2150      	movs	r1, #80	; 0x50
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f92d 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003eb4:	e029      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6859      	ldr	r1, [r3, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f000 f8f3 	bl	80040ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2160      	movs	r1, #96	; 0x60
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f91d 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003ed4:	e019      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f000 f8b4 	bl	8004050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2140      	movs	r1, #64	; 0x40
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f90d 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003ef4:	e009      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f000 f904 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003f06:	e000      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003f08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <TIM_Base_SetConfig+0xbc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_Base_SetConfig+0x20>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d108      	bne.n	8003fba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a21      	ldr	r2, [pc, #132]	; (8004044 <TIM_Base_SetConfig+0xbc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_Base_SetConfig+0x52>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d007      	beq.n	8003fda <TIM_Base_SetConfig+0x52>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <TIM_Base_SetConfig+0xc0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_Base_SetConfig+0x52>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <TIM_Base_SetConfig+0xc4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d108      	bne.n	8003fec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <TIM_Base_SetConfig+0xbc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <TIM_Base_SetConfig+0xa0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <TIM_Base_SetConfig+0xc0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <TIM_Base_SetConfig+0xa0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <TIM_Base_SetConfig+0xc4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d103      	bne.n	8004030 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	615a      	str	r2, [r3, #20]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400

08004050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800407a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 030a 	bic.w	r3, r3, #10
 800408c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b087      	sub	sp, #28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0210 	bic.w	r2, r3, #16
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	f043 0307 	orr.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	021a      	lsls	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	431a      	orrs	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004198:	2302      	movs	r3, #2
 800419a:	e04f      	b.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a21      	ldr	r2, [pc, #132]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a14      	ldr	r2, [pc, #80]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d004      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a10      	ldr	r2, [pc, #64]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4313      	orrs	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40014000 	.word	0x40014000

08004250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e040      	b.n	8004320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fc50 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f8c0 	bl	8004450 <UART_SetConfig>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fbc8 	bl	8004a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fc4f 	bl	8004bbc <UART_CheckIdleState>
 800431e:	4603      	mov	r3, r0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	2b20      	cmp	r3, #32
 800433e:	f040 8081 	bne.w	8004444 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_Transmit+0x26>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e079      	b.n	8004446 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit+0x38>
 800435c:	2302      	movs	r3, #2
 800435e:	e072      	b.n	8004446 <HAL_UART_Transmit+0x11e>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2221      	movs	r2, #33	; 0x21
 8004372:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004374:	f7fd fdd6 	bl	8001f24 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004392:	d108      	bne.n	80043a6 <HAL_UART_Transmit+0x7e>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e003      	b.n	80043ae <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80043b6:	e02d      	b.n	8004414 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2200      	movs	r2, #0
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fc3f 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e039      	b.n	8004446 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	881a      	ldrh	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e4:	b292      	uxth	r2, r2
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	3302      	adds	r3, #2
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e008      	b.n	8004402 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b292      	uxth	r2, r2
 80043fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1cb      	bne.n	80043b8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2200      	movs	r2, #0
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fc0b 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e005      	b.n	8004446 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e000      	b.n	8004446 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004450:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004454:	b08a      	sub	sp, #40	; 0x28
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4313      	orrs	r3, r2
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4bbc      	ldr	r3, [pc, #752]	; (8004778 <UART_SetConfig+0x328>)
 8004486:	4013      	ands	r3, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800448e:	430b      	orrs	r3, r1
 8004490:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4ab2      	ldr	r2, [pc, #712]	; (800477c <UART_SetConfig+0x32c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	4313      	orrs	r3, r2
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d2:	430a      	orrs	r2, r1
 80044d4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4aa9      	ldr	r2, [pc, #676]	; (8004780 <UART_SetConfig+0x330>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d126      	bne.n	800452e <UART_SetConfig+0xde>
 80044e0:	4ba8      	ldr	r3, [pc, #672]	; (8004784 <UART_SetConfig+0x334>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d81a      	bhi.n	8004524 <UART_SetConfig+0xd4>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0xa4>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004505 	.word	0x08004505
 80044f8:	08004515 	.word	0x08004515
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	0800451d 	.word	0x0800451d
 8004504:	2301      	movs	r3, #1
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450a:	e0ab      	b.n	8004664 <UART_SetConfig+0x214>
 800450c:	2302      	movs	r3, #2
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e0a7      	b.n	8004664 <UART_SetConfig+0x214>
 8004514:	2304      	movs	r3, #4
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e0a3      	b.n	8004664 <UART_SetConfig+0x214>
 800451c:	2308      	movs	r3, #8
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e09f      	b.n	8004664 <UART_SetConfig+0x214>
 8004524:	2310      	movs	r3, #16
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	bf00      	nop
 800452c:	e09a      	b.n	8004664 <UART_SetConfig+0x214>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a95      	ldr	r2, [pc, #596]	; (8004788 <UART_SetConfig+0x338>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d138      	bne.n	80045aa <UART_SetConfig+0x15a>
 8004538:	4b92      	ldr	r3, [pc, #584]	; (8004784 <UART_SetConfig+0x334>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d82c      	bhi.n	80045a0 <UART_SetConfig+0x150>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0xfc>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004581 	.word	0x08004581
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080045a1 	.word	0x080045a1
 8004558:	080045a1 	.word	0x080045a1
 800455c:	08004591 	.word	0x08004591
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a1 	.word	0x080045a1
 8004568:	080045a1 	.word	0x080045a1
 800456c:	08004589 	.word	0x08004589
 8004570:	080045a1 	.word	0x080045a1
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045a1 	.word	0x080045a1
 800457c:	08004599 	.word	0x08004599
 8004580:	2300      	movs	r3, #0
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	e06d      	b.n	8004664 <UART_SetConfig+0x214>
 8004588:	2302      	movs	r3, #2
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e069      	b.n	8004664 <UART_SetConfig+0x214>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	e065      	b.n	8004664 <UART_SetConfig+0x214>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459e:	e061      	b.n	8004664 <UART_SetConfig+0x214>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	bf00      	nop
 80045a8:	e05c      	b.n	8004664 <UART_SetConfig+0x214>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a77      	ldr	r2, [pc, #476]	; (800478c <UART_SetConfig+0x33c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d125      	bne.n	8004600 <UART_SetConfig+0x1b0>
 80045b4:	4b73      	ldr	r3, [pc, #460]	; (8004784 <UART_SetConfig+0x334>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d011      	beq.n	80045e6 <UART_SetConfig+0x196>
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d802      	bhi.n	80045cc <UART_SetConfig+0x17c>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <UART_SetConfig+0x186>
 80045ca:	e014      	b.n	80045f6 <UART_SetConfig+0x1a6>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d006      	beq.n	80045de <UART_SetConfig+0x18e>
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d00c      	beq.n	80045ee <UART_SetConfig+0x19e>
 80045d4:	e00f      	b.n	80045f6 <UART_SetConfig+0x1a6>
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045dc:	e042      	b.n	8004664 <UART_SetConfig+0x214>
 80045de:	2302      	movs	r3, #2
 80045e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e4:	e03e      	b.n	8004664 <UART_SetConfig+0x214>
 80045e6:	2304      	movs	r3, #4
 80045e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ec:	e03a      	b.n	8004664 <UART_SetConfig+0x214>
 80045ee:	2308      	movs	r3, #8
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f4:	e036      	b.n	8004664 <UART_SetConfig+0x214>
 80045f6:	2310      	movs	r3, #16
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fc:	bf00      	nop
 80045fe:	e031      	b.n	8004664 <UART_SetConfig+0x214>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5d      	ldr	r2, [pc, #372]	; (800477c <UART_SetConfig+0x32c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d129      	bne.n	800465e <UART_SetConfig+0x20e>
 800460a:	4b5e      	ldr	r3, [pc, #376]	; (8004784 <UART_SetConfig+0x334>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d014      	beq.n	8004644 <UART_SetConfig+0x1f4>
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d802      	bhi.n	8004626 <UART_SetConfig+0x1d6>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <UART_SetConfig+0x1e4>
 8004624:	e016      	b.n	8004654 <UART_SetConfig+0x204>
 8004626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462a:	d007      	beq.n	800463c <UART_SetConfig+0x1ec>
 800462c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004630:	d00c      	beq.n	800464c <UART_SetConfig+0x1fc>
 8004632:	e00f      	b.n	8004654 <UART_SetConfig+0x204>
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e013      	b.n	8004664 <UART_SetConfig+0x214>
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e00f      	b.n	8004664 <UART_SetConfig+0x214>
 8004644:	2304      	movs	r3, #4
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e00b      	b.n	8004664 <UART_SetConfig+0x214>
 800464c:	2308      	movs	r3, #8
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e007      	b.n	8004664 <UART_SetConfig+0x214>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <UART_SetConfig+0x214>
 800465e:	2310      	movs	r3, #16
 8004660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a44      	ldr	r2, [pc, #272]	; (800477c <UART_SetConfig+0x32c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	f040 80fb 	bne.w	8004866 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004674:	2b08      	cmp	r3, #8
 8004676:	d824      	bhi.n	80046c2 <UART_SetConfig+0x272>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0x230>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046c3 	.word	0x080046c3
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046c3 	.word	0x080046c3
 8004690:	080046b3 	.word	0x080046b3
 8004694:	080046c3 	.word	0x080046c3
 8004698:	080046c3 	.word	0x080046c3
 800469c:	080046c3 	.word	0x080046c3
 80046a0:	080046bb 	.word	0x080046bb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe ffee 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 80046a8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046aa:	e00d      	b.n	80046c8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80046ac:	4b38      	ldr	r3, [pc, #224]	; (8004790 <UART_SetConfig+0x340>)
 80046ae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046b0:	e00a      	b.n	80046c8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80046b2:	f7fe ff51 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80046b6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046b8:	e006      	b.n	80046c8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80046ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046c0:	e002      	b.n	80046c8 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	76fb      	strb	r3, [r7, #27]
        break;
 80046c6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 81c8 	beq.w	8004a60 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d305      	bcc.n	80046ec <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d902      	bls.n	80046f2 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e1b6      	b.n	8004a60 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 80046f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	f200 80a2 	bhi.w	8004840 <UART_SetConfig+0x3f0>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <UART_SetConfig+0x2b4>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004729 	.word	0x08004729
 8004708:	08004841 	.word	0x08004841
 800470c:	08004795 	.word	0x08004795
 8004710:	08004841 	.word	0x08004841
 8004714:	080047c9 	.word	0x080047c9
 8004718:	08004841 	.word	0x08004841
 800471c:	08004841 	.word	0x08004841
 8004720:	08004841 	.word	0x08004841
 8004724:	08004817 	.word	0x08004817
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004728:	f7fe ffac 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 800472c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4619      	mov	r1, r3
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	f04f 0400 	mov.w	r4, #0
 800473e:	0214      	lsls	r4, r2, #8
 8004740:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004744:	020b      	lsls	r3, r1, #8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6852      	ldr	r2, [r2, #4]
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	4611      	mov	r1, r2
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	eb13 0b01 	adds.w	fp, r3, r1
 8004756:	eb44 0c02 	adc.w	ip, r4, r2
 800475a:	4658      	mov	r0, fp
 800475c:	4661      	mov	r1, ip
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	461a      	mov	r2, r3
 8004768:	4623      	mov	r3, r4
 800476a:	f7fc fa8d 	bl	8000c88 <__aeabi_uldivmod>
 800476e:	4603      	mov	r3, r0
 8004770:	460c      	mov	r4, r1
 8004772:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004774:	e067      	b.n	8004846 <UART_SetConfig+0x3f6>
 8004776:	bf00      	nop
 8004778:	efff69f3 	.word	0xefff69f3
 800477c:	40008000 	.word	0x40008000
 8004780:	40013800 	.word	0x40013800
 8004784:	40021000 	.word	0x40021000
 8004788:	40004400 	.word	0x40004400
 800478c:	40004800 	.word	0x40004800
 8004790:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	f04f 0400 	mov.w	r4, #0
 800479e:	49ae      	ldr	r1, [pc, #696]	; (8004a58 <UART_SetConfig+0x608>)
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	eb13 0b01 	adds.w	fp, r3, r1
 80047a8:	eb44 0c02 	adc.w	ip, r4, r2
 80047ac:	4658      	mov	r0, fp
 80047ae:	4661      	mov	r1, ip
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f04f 0400 	mov.w	r4, #0
 80047b8:	461a      	mov	r2, r3
 80047ba:	4623      	mov	r3, r4
 80047bc:	f7fc fa64 	bl	8000c88 <__aeabi_uldivmod>
 80047c0:	4603      	mov	r3, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80047c6:	e03e      	b.n	8004846 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80047c8:	f7fe fec6 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80047cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4619      	mov	r1, r3
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	f04f 0400 	mov.w	r4, #0
 80047de:	0214      	lsls	r4, r2, #8
 80047e0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047e4:	020b      	lsls	r3, r1, #8
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6852      	ldr	r2, [r2, #4]
 80047ea:	0852      	lsrs	r2, r2, #1
 80047ec:	4611      	mov	r1, r2
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	eb13 0b01 	adds.w	fp, r3, r1
 80047f6:	eb44 0c02 	adc.w	ip, r4, r2
 80047fa:	4658      	mov	r0, fp
 80047fc:	4661      	mov	r1, ip
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	461a      	mov	r2, r3
 8004808:	4623      	mov	r3, r4
 800480a:	f7fc fa3d 	bl	8000c88 <__aeabi_uldivmod>
 800480e:	4603      	mov	r3, r0
 8004810:	460c      	mov	r4, r1
 8004812:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004814:	e017      	b.n	8004846 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	f04f 0400 	mov.w	r4, #0
 8004820:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004824:	f144 0100 	adc.w	r1, r4, #0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	461a      	mov	r2, r3
 8004832:	4623      	mov	r3, r4
 8004834:	f7fc fa28 	bl	8000c88 <__aeabi_uldivmod>
 8004838:	4603      	mov	r3, r0
 800483a:	460c      	mov	r4, r1
 800483c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800483e:	e002      	b.n	8004846 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	76fb      	strb	r3, [r7, #27]
            break;
 8004844:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800484c:	d308      	bcc.n	8004860 <UART_SetConfig+0x410>
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004854:	d204      	bcs.n	8004860 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	e0ff      	b.n	8004a60 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	76fb      	strb	r3, [r7, #27]
 8004864:	e0fc      	b.n	8004a60 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486e:	f040 8083 	bne.w	8004978 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8004872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004876:	2b08      	cmp	r3, #8
 8004878:	d85e      	bhi.n	8004938 <UART_SetConfig+0x4e8>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <UART_SetConfig+0x430>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048c5 	.word	0x080048c5
 8004888:	080048e5 	.word	0x080048e5
 800488c:	08004939 	.word	0x08004939
 8004890:	08004901 	.word	0x08004901
 8004894:	08004939 	.word	0x08004939
 8004898:	08004939 	.word	0x08004939
 800489c:	08004939 	.word	0x08004939
 80048a0:	08004921 	.word	0x08004921
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7fe feee 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 80048a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	005a      	lsls	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	b29b      	uxth	r3, r3
 80048c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048c2:	e03c      	b.n	800493e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7fe fef4 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80048c8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	005a      	lsls	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048e2:	e02c      	b.n	800493e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80048ee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6852      	ldr	r2, [r2, #4]
 80048f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048fe:	e01e      	b.n	800493e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004900:	f7fe fe2a 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8004904:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	005a      	lsls	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800491e:	e00e      	b.n	800493e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	b29b      	uxth	r3, r3
 8004934:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004936:	e002      	b.n	800493e <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	76fb      	strb	r3, [r7, #27]
        break;
 800493c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d916      	bls.n	8004972 <UART_SetConfig+0x522>
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494a:	d212      	bcs.n	8004972 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f023 030f 	bic.w	r3, r3, #15
 8004954:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	b29a      	uxth	r2, r3
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	4313      	orrs	r3, r2
 8004966:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	89fa      	ldrh	r2, [r7, #14]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	e076      	b.n	8004a60 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	76fb      	strb	r3, [r7, #27]
 8004976:	e073      	b.n	8004a60 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8004978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800497c:	2b08      	cmp	r3, #8
 800497e:	d85c      	bhi.n	8004a3a <UART_SetConfig+0x5ea>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <UART_SetConfig+0x538>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049cb 	.word	0x080049cb
 8004990:	080049e9 	.word	0x080049e9
 8004994:	08004a3b 	.word	0x08004a3b
 8004998:	08004a05 	.word	0x08004a05
 800499c:	08004a3b 	.word	0x08004a3b
 80049a0:	08004a3b 	.word	0x08004a3b
 80049a4:	08004a3b 	.word	0x08004a3b
 80049a8:	08004a23 	.word	0x08004a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ac:	f7fe fe6a 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 80049b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	085a      	lsrs	r2, r3, #1
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	441a      	add	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049c8:	e03a      	b.n	8004a40 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ca:	f7fe fe71 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80049ce:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	085a      	lsrs	r2, r3, #1
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049e6:	e02b      	b.n	8004a40 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80049f2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6852      	ldr	r2, [r2, #4]
 80049fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a02:	e01d      	b.n	8004a40 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a04:	f7fe fda8 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8004a08:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085a      	lsrs	r2, r3, #1
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	441a      	add	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a20:	e00e      	b.n	8004a40 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a38:	e002      	b.n	8004a40 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	76fb      	strb	r3, [r7, #27]
        break;
 8004a3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d90a      	bls.n	8004a5c <UART_SetConfig+0x60c>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d206      	bcs.n	8004a5c <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e003      	b.n	8004a60 <UART_SetConfig+0x610>
 8004a58:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a6c:	7efb      	ldrb	r3, [r7, #27]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01a      	beq.n	8004b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b76:	d10a      	bne.n	8004b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004bca:	f7fd f9ab 	bl	8001f24 <HAL_GetTick>
 8004bce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d10e      	bne.n	8004bfc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f82a 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e020      	b.n	8004c3e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d10e      	bne.n	8004c28 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f814 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e00a      	b.n	8004c3e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c56:	e05d      	b.n	8004d14 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5e:	d059      	beq.n	8004d14 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c60:	f7fd f960 	bl	8001f24 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d11b      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e042      	b.n	8004d34 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02b      	beq.n	8004d14 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cca:	d123      	bne.n	8004d14 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ce4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0201 	bic.w	r2, r2, #1
 8004cf4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e00f      	b.n	8004d34 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d092      	beq.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <__errno>:
 8004d3c:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <__errno+0x8>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	2000000c 	.word	0x2000000c

08004d48 <__libc_init_array>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4e0d      	ldr	r6, [pc, #52]	; (8004d80 <__libc_init_array+0x38>)
 8004d4c:	4c0d      	ldr	r4, [pc, #52]	; (8004d84 <__libc_init_array+0x3c>)
 8004d4e:	1ba4      	subs	r4, r4, r6
 8004d50:	10a4      	asrs	r4, r4, #2
 8004d52:	2500      	movs	r5, #0
 8004d54:	42a5      	cmp	r5, r4
 8004d56:	d109      	bne.n	8004d6c <__libc_init_array+0x24>
 8004d58:	4e0b      	ldr	r6, [pc, #44]	; (8004d88 <__libc_init_array+0x40>)
 8004d5a:	4c0c      	ldr	r4, [pc, #48]	; (8004d8c <__libc_init_array+0x44>)
 8004d5c:	f004 f9fa 	bl	8009154 <_init>
 8004d60:	1ba4      	subs	r4, r4, r6
 8004d62:	10a4      	asrs	r4, r4, #2
 8004d64:	2500      	movs	r5, #0
 8004d66:	42a5      	cmp	r5, r4
 8004d68:	d105      	bne.n	8004d76 <__libc_init_array+0x2e>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d70:	4798      	blx	r3
 8004d72:	3501      	adds	r5, #1
 8004d74:	e7ee      	b.n	8004d54 <__libc_init_array+0xc>
 8004d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d7a:	4798      	blx	r3
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	e7f2      	b.n	8004d66 <__libc_init_array+0x1e>
 8004d80:	08009508 	.word	0x08009508
 8004d84:	08009508 	.word	0x08009508
 8004d88:	08009508 	.word	0x08009508
 8004d8c:	0800950c 	.word	0x0800950c

08004d90 <memset>:
 8004d90:	4402      	add	r2, r0
 8004d92:	4603      	mov	r3, r0
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d100      	bne.n	8004d9a <memset+0xa>
 8004d98:	4770      	bx	lr
 8004d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9e:	e7f9      	b.n	8004d94 <memset+0x4>

08004da0 <__cvt>:
 8004da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	ec55 4b10 	vmov	r4, r5, d0
 8004da8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004daa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004dae:	2d00      	cmp	r5, #0
 8004db0:	460e      	mov	r6, r1
 8004db2:	4691      	mov	r9, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	bfb8      	it	lt
 8004db8:	4622      	movlt	r2, r4
 8004dba:	462b      	mov	r3, r5
 8004dbc:	f027 0720 	bic.w	r7, r7, #32
 8004dc0:	bfbb      	ittet	lt
 8004dc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004dc6:	461d      	movlt	r5, r3
 8004dc8:	2300      	movge	r3, #0
 8004dca:	232d      	movlt	r3, #45	; 0x2d
 8004dcc:	bfb8      	it	lt
 8004dce:	4614      	movlt	r4, r2
 8004dd0:	2f46      	cmp	r7, #70	; 0x46
 8004dd2:	700b      	strb	r3, [r1, #0]
 8004dd4:	d004      	beq.n	8004de0 <__cvt+0x40>
 8004dd6:	2f45      	cmp	r7, #69	; 0x45
 8004dd8:	d100      	bne.n	8004ddc <__cvt+0x3c>
 8004dda:	3601      	adds	r6, #1
 8004ddc:	2102      	movs	r1, #2
 8004dde:	e000      	b.n	8004de2 <__cvt+0x42>
 8004de0:	2103      	movs	r1, #3
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	ab02      	add	r3, sp, #8
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	4632      	mov	r2, r6
 8004dec:	4653      	mov	r3, sl
 8004dee:	ec45 4b10 	vmov	d0, r4, r5
 8004df2:	f001 fd8d 	bl	8006910 <_dtoa_r>
 8004df6:	2f47      	cmp	r7, #71	; 0x47
 8004df8:	4680      	mov	r8, r0
 8004dfa:	d102      	bne.n	8004e02 <__cvt+0x62>
 8004dfc:	f019 0f01 	tst.w	r9, #1
 8004e00:	d026      	beq.n	8004e50 <__cvt+0xb0>
 8004e02:	2f46      	cmp	r7, #70	; 0x46
 8004e04:	eb08 0906 	add.w	r9, r8, r6
 8004e08:	d111      	bne.n	8004e2e <__cvt+0x8e>
 8004e0a:	f898 3000 	ldrb.w	r3, [r8]
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d10a      	bne.n	8004e28 <__cvt+0x88>
 8004e12:	2200      	movs	r2, #0
 8004e14:	2300      	movs	r3, #0
 8004e16:	4620      	mov	r0, r4
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f7fb fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e1e:	b918      	cbnz	r0, 8004e28 <__cvt+0x88>
 8004e20:	f1c6 0601 	rsb	r6, r6, #1
 8004e24:	f8ca 6000 	str.w	r6, [sl]
 8004e28:	f8da 3000 	ldr.w	r3, [sl]
 8004e2c:	4499      	add	r9, r3
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2300      	movs	r3, #0
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3a:	b938      	cbnz	r0, 8004e4c <__cvt+0xac>
 8004e3c:	2230      	movs	r2, #48	; 0x30
 8004e3e:	9b03      	ldr	r3, [sp, #12]
 8004e40:	454b      	cmp	r3, r9
 8004e42:	d205      	bcs.n	8004e50 <__cvt+0xb0>
 8004e44:	1c59      	adds	r1, r3, #1
 8004e46:	9103      	str	r1, [sp, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e7f8      	b.n	8004e3e <__cvt+0x9e>
 8004e4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e54:	eba3 0308 	sub.w	r3, r3, r8
 8004e58:	4640      	mov	r0, r8
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	b004      	add	sp, #16
 8004e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004e62 <__exponent>:
 8004e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e64:	2900      	cmp	r1, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	bfba      	itte	lt
 8004e6a:	4249      	neglt	r1, r1
 8004e6c:	232d      	movlt	r3, #45	; 0x2d
 8004e6e:	232b      	movge	r3, #43	; 0x2b
 8004e70:	2909      	cmp	r1, #9
 8004e72:	f804 2b02 	strb.w	r2, [r4], #2
 8004e76:	7043      	strb	r3, [r0, #1]
 8004e78:	dd20      	ble.n	8004ebc <__exponent+0x5a>
 8004e7a:	f10d 0307 	add.w	r3, sp, #7
 8004e7e:	461f      	mov	r7, r3
 8004e80:	260a      	movs	r6, #10
 8004e82:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e86:	fb06 1115 	mls	r1, r6, r5, r1
 8004e8a:	3130      	adds	r1, #48	; 0x30
 8004e8c:	2d09      	cmp	r5, #9
 8004e8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e92:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004e96:	4629      	mov	r1, r5
 8004e98:	dc09      	bgt.n	8004eae <__exponent+0x4c>
 8004e9a:	3130      	adds	r1, #48	; 0x30
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ea2:	42bb      	cmp	r3, r7
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	d304      	bcc.n	8004eb2 <__exponent+0x50>
 8004ea8:	1a10      	subs	r0, r2, r0
 8004eaa:	b003      	add	sp, #12
 8004eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eae:	4613      	mov	r3, r2
 8004eb0:	e7e7      	b.n	8004e82 <__exponent+0x20>
 8004eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb6:	f804 2b01 	strb.w	r2, [r4], #1
 8004eba:	e7f2      	b.n	8004ea2 <__exponent+0x40>
 8004ebc:	2330      	movs	r3, #48	; 0x30
 8004ebe:	4419      	add	r1, r3
 8004ec0:	7083      	strb	r3, [r0, #2]
 8004ec2:	1d02      	adds	r2, r0, #4
 8004ec4:	70c1      	strb	r1, [r0, #3]
 8004ec6:	e7ef      	b.n	8004ea8 <__exponent+0x46>

08004ec8 <_printf_float>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	b08d      	sub	sp, #52	; 0x34
 8004ece:	460c      	mov	r4, r1
 8004ed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	4605      	mov	r5, r0
 8004eda:	f002 fec7 	bl	8007c6c <_localeconv_r>
 8004ede:	6803      	ldr	r3, [r0, #0]
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb f974 	bl	80001d0 <strlen>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	930a      	str	r3, [sp, #40]	; 0x28
 8004eec:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef0:	9005      	str	r0, [sp, #20]
 8004ef2:	3307      	adds	r3, #7
 8004ef4:	f023 0307 	bic.w	r3, r3, #7
 8004ef8:	f103 0208 	add.w	r2, r3, #8
 8004efc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f00:	f8d4 b000 	ldr.w	fp, [r4]
 8004f04:	f8c8 2000 	str.w	r2, [r8]
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f10:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f18:	9307      	str	r3, [sp, #28]
 8004f1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f22:	4ba7      	ldr	r3, [pc, #668]	; (80051c0 <_printf_float+0x2f8>)
 8004f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f28:	f7fb fe00 	bl	8000b2c <__aeabi_dcmpun>
 8004f2c:	bb70      	cbnz	r0, 8004f8c <_printf_float+0xc4>
 8004f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f32:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <_printf_float+0x2f8>)
 8004f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f38:	f7fb fdda 	bl	8000af0 <__aeabi_dcmple>
 8004f3c:	bb30      	cbnz	r0, 8004f8c <_printf_float+0xc4>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2300      	movs	r3, #0
 8004f42:	4640      	mov	r0, r8
 8004f44:	4649      	mov	r1, r9
 8004f46:	f7fb fdc9 	bl	8000adc <__aeabi_dcmplt>
 8004f4a:	b110      	cbz	r0, 8004f52 <_printf_float+0x8a>
 8004f4c:	232d      	movs	r3, #45	; 0x2d
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f52:	4a9c      	ldr	r2, [pc, #624]	; (80051c4 <_printf_float+0x2fc>)
 8004f54:	4b9c      	ldr	r3, [pc, #624]	; (80051c8 <_printf_float+0x300>)
 8004f56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004f5a:	bf8c      	ite	hi
 8004f5c:	4690      	movhi	r8, r2
 8004f5e:	4698      	movls	r8, r3
 8004f60:	2303      	movs	r3, #3
 8004f62:	f02b 0204 	bic.w	r2, fp, #4
 8004f66:	6123      	str	r3, [r4, #16]
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	f04f 0900 	mov.w	r9, #0
 8004f6e:	9700      	str	r7, [sp, #0]
 8004f70:	4633      	mov	r3, r6
 8004f72:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f74:	4621      	mov	r1, r4
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 f9e6 	bl	8005348 <_printf_common>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f040 808d 	bne.w	800509c <_printf_float+0x1d4>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f86:	b00d      	add	sp, #52	; 0x34
 8004f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb fdca 	bl	8000b2c <__aeabi_dcmpun>
 8004f98:	b110      	cbz	r0, 8004fa0 <_printf_float+0xd8>
 8004f9a:	4a8c      	ldr	r2, [pc, #560]	; (80051cc <_printf_float+0x304>)
 8004f9c:	4b8c      	ldr	r3, [pc, #560]	; (80051d0 <_printf_float+0x308>)
 8004f9e:	e7da      	b.n	8004f56 <_printf_float+0x8e>
 8004fa0:	6861      	ldr	r1, [r4, #4]
 8004fa2:	1c4b      	adds	r3, r1, #1
 8004fa4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004fa8:	a80a      	add	r0, sp, #40	; 0x28
 8004faa:	d13e      	bne.n	800502a <_printf_float+0x162>
 8004fac:	2306      	movs	r3, #6
 8004fae:	6063      	str	r3, [r4, #4]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004fb6:	ab09      	add	r3, sp, #36	; 0x24
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	ec49 8b10 	vmov	d0, r8, r9
 8004fbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	f8cd a004 	str.w	sl, [sp, #4]
 8004fc8:	6861      	ldr	r1, [r4, #4]
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f7ff fee8 	bl	8004da0 <__cvt>
 8004fd0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004fd4:	2b47      	cmp	r3, #71	; 0x47
 8004fd6:	4680      	mov	r8, r0
 8004fd8:	d109      	bne.n	8004fee <_printf_float+0x126>
 8004fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fdc:	1cd8      	adds	r0, r3, #3
 8004fde:	db02      	blt.n	8004fe6 <_printf_float+0x11e>
 8004fe0:	6862      	ldr	r2, [r4, #4]
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	dd47      	ble.n	8005076 <_printf_float+0x1ae>
 8004fe6:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fea:	fa5f fa8a 	uxtb.w	sl, sl
 8004fee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004ff2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ff4:	d824      	bhi.n	8005040 <_printf_float+0x178>
 8004ff6:	3901      	subs	r1, #1
 8004ff8:	4652      	mov	r2, sl
 8004ffa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ffe:	9109      	str	r1, [sp, #36]	; 0x24
 8005000:	f7ff ff2f 	bl	8004e62 <__exponent>
 8005004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005006:	1813      	adds	r3, r2, r0
 8005008:	2a01      	cmp	r2, #1
 800500a:	4681      	mov	r9, r0
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	dc02      	bgt.n	8005016 <_printf_float+0x14e>
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	07d1      	lsls	r1, r2, #31
 8005014:	d501      	bpl.n	800501a <_printf_float+0x152>
 8005016:	3301      	adds	r3, #1
 8005018:	6123      	str	r3, [r4, #16]
 800501a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0a5      	beq.n	8004f6e <_printf_float+0xa6>
 8005022:	232d      	movs	r3, #45	; 0x2d
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	e7a1      	b.n	8004f6e <_printf_float+0xa6>
 800502a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800502e:	f000 8177 	beq.w	8005320 <_printf_float+0x458>
 8005032:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005036:	d1bb      	bne.n	8004fb0 <_printf_float+0xe8>
 8005038:	2900      	cmp	r1, #0
 800503a:	d1b9      	bne.n	8004fb0 <_printf_float+0xe8>
 800503c:	2301      	movs	r3, #1
 800503e:	e7b6      	b.n	8004fae <_printf_float+0xe6>
 8005040:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005044:	d119      	bne.n	800507a <_printf_float+0x1b2>
 8005046:	2900      	cmp	r1, #0
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	dd0c      	ble.n	8005066 <_printf_float+0x19e>
 800504c:	6121      	str	r1, [r4, #16]
 800504e:	b913      	cbnz	r3, 8005056 <_printf_float+0x18e>
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	07d2      	lsls	r2, r2, #31
 8005054:	d502      	bpl.n	800505c <_printf_float+0x194>
 8005056:	3301      	adds	r3, #1
 8005058:	440b      	add	r3, r1
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005060:	f04f 0900 	mov.w	r9, #0
 8005064:	e7d9      	b.n	800501a <_printf_float+0x152>
 8005066:	b913      	cbnz	r3, 800506e <_printf_float+0x1a6>
 8005068:	6822      	ldr	r2, [r4, #0]
 800506a:	07d0      	lsls	r0, r2, #31
 800506c:	d501      	bpl.n	8005072 <_printf_float+0x1aa>
 800506e:	3302      	adds	r3, #2
 8005070:	e7f3      	b.n	800505a <_printf_float+0x192>
 8005072:	2301      	movs	r3, #1
 8005074:	e7f1      	b.n	800505a <_printf_float+0x192>
 8005076:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800507a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800507e:	4293      	cmp	r3, r2
 8005080:	db05      	blt.n	800508e <_printf_float+0x1c6>
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	07d1      	lsls	r1, r2, #31
 8005088:	d5e8      	bpl.n	800505c <_printf_float+0x194>
 800508a:	3301      	adds	r3, #1
 800508c:	e7e5      	b.n	800505a <_printf_float+0x192>
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfd4      	ite	le
 8005092:	f1c3 0302 	rsble	r3, r3, #2
 8005096:	2301      	movgt	r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	e7de      	b.n	800505a <_printf_float+0x192>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	055a      	lsls	r2, r3, #21
 80050a0:	d407      	bmi.n	80050b2 <_printf_float+0x1ea>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	4642      	mov	r2, r8
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	d12b      	bne.n	8005108 <_printf_float+0x240>
 80050b0:	e767      	b.n	8004f82 <_printf_float+0xba>
 80050b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80050b6:	f240 80dc 	bls.w	8005272 <_printf_float+0x3aa>
 80050ba:	2200      	movs	r2, #0
 80050bc:	2300      	movs	r3, #0
 80050be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050c2:	f7fb fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d033      	beq.n	8005132 <_printf_float+0x26a>
 80050ca:	2301      	movs	r3, #1
 80050cc:	4a41      	ldr	r2, [pc, #260]	; (80051d4 <_printf_float+0x30c>)
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f af54 	beq.w	8004f82 <_printf_float+0xba>
 80050da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050de:	429a      	cmp	r2, r3
 80050e0:	db02      	blt.n	80050e8 <_printf_float+0x220>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	07d8      	lsls	r0, r3, #31
 80050e6:	d50f      	bpl.n	8005108 <_printf_float+0x240>
 80050e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f af45 	beq.w	8004f82 <_printf_float+0xba>
 80050f8:	f04f 0800 	mov.w	r8, #0
 80050fc:	f104 091a 	add.w	r9, r4, #26
 8005100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005102:	3b01      	subs	r3, #1
 8005104:	4543      	cmp	r3, r8
 8005106:	dc09      	bgt.n	800511c <_printf_float+0x254>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	079b      	lsls	r3, r3, #30
 800510c:	f100 8103 	bmi.w	8005316 <_printf_float+0x44e>
 8005110:	68e0      	ldr	r0, [r4, #12]
 8005112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005114:	4298      	cmp	r0, r3
 8005116:	bfb8      	it	lt
 8005118:	4618      	movlt	r0, r3
 800511a:	e734      	b.n	8004f86 <_printf_float+0xbe>
 800511c:	2301      	movs	r3, #1
 800511e:	464a      	mov	r2, r9
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	f43f af2b 	beq.w	8004f82 <_printf_float+0xba>
 800512c:	f108 0801 	add.w	r8, r8, #1
 8005130:	e7e6      	b.n	8005100 <_printf_float+0x238>
 8005132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	dc2b      	bgt.n	8005190 <_printf_float+0x2c8>
 8005138:	2301      	movs	r3, #1
 800513a:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <_printf_float+0x30c>)
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f af1d 	beq.w	8004f82 <_printf_float+0xba>
 8005148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514a:	b923      	cbnz	r3, 8005156 <_printf_float+0x28e>
 800514c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800514e:	b913      	cbnz	r3, 8005156 <_printf_float+0x28e>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07d9      	lsls	r1, r3, #31
 8005154:	d5d8      	bpl.n	8005108 <_printf_float+0x240>
 8005156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800515a:	4631      	mov	r1, r6
 800515c:	4628      	mov	r0, r5
 800515e:	47b8      	blx	r7
 8005160:	3001      	adds	r0, #1
 8005162:	f43f af0e 	beq.w	8004f82 <_printf_float+0xba>
 8005166:	f04f 0900 	mov.w	r9, #0
 800516a:	f104 0a1a 	add.w	sl, r4, #26
 800516e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005170:	425b      	negs	r3, r3
 8005172:	454b      	cmp	r3, r9
 8005174:	dc01      	bgt.n	800517a <_printf_float+0x2b2>
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	e794      	b.n	80050a4 <_printf_float+0x1dc>
 800517a:	2301      	movs	r3, #1
 800517c:	4652      	mov	r2, sl
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	f43f aefc 	beq.w	8004f82 <_printf_float+0xba>
 800518a:	f109 0901 	add.w	r9, r9, #1
 800518e:	e7ee      	b.n	800516e <_printf_float+0x2a6>
 8005190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005194:	429a      	cmp	r2, r3
 8005196:	bfa8      	it	ge
 8005198:	461a      	movge	r2, r3
 800519a:	2a00      	cmp	r2, #0
 800519c:	4691      	mov	r9, r2
 800519e:	dd07      	ble.n	80051b0 <_printf_float+0x2e8>
 80051a0:	4613      	mov	r3, r2
 80051a2:	4631      	mov	r1, r6
 80051a4:	4642      	mov	r2, r8
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f aee9 	beq.w	8004f82 <_printf_float+0xba>
 80051b0:	f104 031a 	add.w	r3, r4, #26
 80051b4:	f04f 0b00 	mov.w	fp, #0
 80051b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051bc:	9306      	str	r3, [sp, #24]
 80051be:	e015      	b.n	80051ec <_printf_float+0x324>
 80051c0:	7fefffff 	.word	0x7fefffff
 80051c4:	080091e8 	.word	0x080091e8
 80051c8:	080091e4 	.word	0x080091e4
 80051cc:	080091f0 	.word	0x080091f0
 80051d0:	080091ec 	.word	0x080091ec
 80051d4:	080091f4 	.word	0x080091f4
 80051d8:	2301      	movs	r3, #1
 80051da:	9a06      	ldr	r2, [sp, #24]
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	f43f aecd 	beq.w	8004f82 <_printf_float+0xba>
 80051e8:	f10b 0b01 	add.w	fp, fp, #1
 80051ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80051f0:	ebaa 0309 	sub.w	r3, sl, r9
 80051f4:	455b      	cmp	r3, fp
 80051f6:	dcef      	bgt.n	80051d8 <_printf_float+0x310>
 80051f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051fc:	429a      	cmp	r2, r3
 80051fe:	44d0      	add	r8, sl
 8005200:	db15      	blt.n	800522e <_printf_float+0x366>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	07da      	lsls	r2, r3, #31
 8005206:	d412      	bmi.n	800522e <_printf_float+0x366>
 8005208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800520c:	eba3 020a 	sub.w	r2, r3, sl
 8005210:	eba3 0a01 	sub.w	sl, r3, r1
 8005214:	4592      	cmp	sl, r2
 8005216:	bfa8      	it	ge
 8005218:	4692      	movge	sl, r2
 800521a:	f1ba 0f00 	cmp.w	sl, #0
 800521e:	dc0e      	bgt.n	800523e <_printf_float+0x376>
 8005220:	f04f 0800 	mov.w	r8, #0
 8005224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005228:	f104 091a 	add.w	r9, r4, #26
 800522c:	e019      	b.n	8005262 <_printf_float+0x39a>
 800522e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	d1e5      	bne.n	8005208 <_printf_float+0x340>
 800523c:	e6a1      	b.n	8004f82 <_printf_float+0xba>
 800523e:	4653      	mov	r3, sl
 8005240:	4642      	mov	r2, r8
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	d1e9      	bne.n	8005220 <_printf_float+0x358>
 800524c:	e699      	b.n	8004f82 <_printf_float+0xba>
 800524e:	2301      	movs	r3, #1
 8005250:	464a      	mov	r2, r9
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	f43f ae92 	beq.w	8004f82 <_printf_float+0xba>
 800525e:	f108 0801 	add.w	r8, r8, #1
 8005262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	eba3 030a 	sub.w	r3, r3, sl
 800526c:	4543      	cmp	r3, r8
 800526e:	dcee      	bgt.n	800524e <_printf_float+0x386>
 8005270:	e74a      	b.n	8005108 <_printf_float+0x240>
 8005272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005274:	2a01      	cmp	r2, #1
 8005276:	dc01      	bgt.n	800527c <_printf_float+0x3b4>
 8005278:	07db      	lsls	r3, r3, #31
 800527a:	d53a      	bpl.n	80052f2 <_printf_float+0x42a>
 800527c:	2301      	movs	r3, #1
 800527e:	4642      	mov	r2, r8
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f ae7b 	beq.w	8004f82 <_printf_float+0xba>
 800528c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005290:	4631      	mov	r1, r6
 8005292:	4628      	mov	r0, r5
 8005294:	47b8      	blx	r7
 8005296:	3001      	adds	r0, #1
 8005298:	f108 0801 	add.w	r8, r8, #1
 800529c:	f43f ae71 	beq.w	8004f82 <_printf_float+0xba>
 80052a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a2:	2200      	movs	r2, #0
 80052a4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80052a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052ac:	2300      	movs	r3, #0
 80052ae:	f7fb fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80052b2:	b9c8      	cbnz	r0, 80052e8 <_printf_float+0x420>
 80052b4:	4653      	mov	r3, sl
 80052b6:	4642      	mov	r2, r8
 80052b8:	4631      	mov	r1, r6
 80052ba:	4628      	mov	r0, r5
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	d10e      	bne.n	80052e0 <_printf_float+0x418>
 80052c2:	e65e      	b.n	8004f82 <_printf_float+0xba>
 80052c4:	2301      	movs	r3, #1
 80052c6:	4652      	mov	r2, sl
 80052c8:	4631      	mov	r1, r6
 80052ca:	4628      	mov	r0, r5
 80052cc:	47b8      	blx	r7
 80052ce:	3001      	adds	r0, #1
 80052d0:	f43f ae57 	beq.w	8004f82 <_printf_float+0xba>
 80052d4:	f108 0801 	add.w	r8, r8, #1
 80052d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052da:	3b01      	subs	r3, #1
 80052dc:	4543      	cmp	r3, r8
 80052de:	dcf1      	bgt.n	80052c4 <_printf_float+0x3fc>
 80052e0:	464b      	mov	r3, r9
 80052e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052e6:	e6de      	b.n	80050a6 <_printf_float+0x1de>
 80052e8:	f04f 0800 	mov.w	r8, #0
 80052ec:	f104 0a1a 	add.w	sl, r4, #26
 80052f0:	e7f2      	b.n	80052d8 <_printf_float+0x410>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e7df      	b.n	80052b6 <_printf_float+0x3ee>
 80052f6:	2301      	movs	r3, #1
 80052f8:	464a      	mov	r2, r9
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	f43f ae3e 	beq.w	8004f82 <_printf_float+0xba>
 8005306:	f108 0801 	add.w	r8, r8, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	4543      	cmp	r3, r8
 8005312:	dcf0      	bgt.n	80052f6 <_printf_float+0x42e>
 8005314:	e6fc      	b.n	8005110 <_printf_float+0x248>
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	f104 0919 	add.w	r9, r4, #25
 800531e:	e7f4      	b.n	800530a <_printf_float+0x442>
 8005320:	2900      	cmp	r1, #0
 8005322:	f43f ae8b 	beq.w	800503c <_printf_float+0x174>
 8005326:	2300      	movs	r3, #0
 8005328:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800532c:	ab09      	add	r3, sp, #36	; 0x24
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	ec49 8b10 	vmov	d0, r8, r9
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	f8cd a004 	str.w	sl, [sp, #4]
 800533a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800533e:	4628      	mov	r0, r5
 8005340:	f7ff fd2e 	bl	8004da0 <__cvt>
 8005344:	4680      	mov	r8, r0
 8005346:	e648      	b.n	8004fda <_printf_float+0x112>

08005348 <_printf_common>:
 8005348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	4691      	mov	r9, r2
 800534e:	461f      	mov	r7, r3
 8005350:	688a      	ldr	r2, [r1, #8]
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005358:	4293      	cmp	r3, r2
 800535a:	bfb8      	it	lt
 800535c:	4613      	movlt	r3, r2
 800535e:	f8c9 3000 	str.w	r3, [r9]
 8005362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005366:	4606      	mov	r6, r0
 8005368:	460c      	mov	r4, r1
 800536a:	b112      	cbz	r2, 8005372 <_printf_common+0x2a>
 800536c:	3301      	adds	r3, #1
 800536e:	f8c9 3000 	str.w	r3, [r9]
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	0699      	lsls	r1, r3, #26
 8005376:	bf42      	ittt	mi
 8005378:	f8d9 3000 	ldrmi.w	r3, [r9]
 800537c:	3302      	addmi	r3, #2
 800537e:	f8c9 3000 	strmi.w	r3, [r9]
 8005382:	6825      	ldr	r5, [r4, #0]
 8005384:	f015 0506 	ands.w	r5, r5, #6
 8005388:	d107      	bne.n	800539a <_printf_common+0x52>
 800538a:	f104 0a19 	add.w	sl, r4, #25
 800538e:	68e3      	ldr	r3, [r4, #12]
 8005390:	f8d9 2000 	ldr.w	r2, [r9]
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	42ab      	cmp	r3, r5
 8005398:	dc28      	bgt.n	80053ec <_printf_common+0xa4>
 800539a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	3300      	adds	r3, #0
 80053a2:	bf18      	it	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	0692      	lsls	r2, r2, #26
 80053a8:	d42d      	bmi.n	8005406 <_printf_common+0xbe>
 80053aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053ae:	4639      	mov	r1, r7
 80053b0:	4630      	mov	r0, r6
 80053b2:	47c0      	blx	r8
 80053b4:	3001      	adds	r0, #1
 80053b6:	d020      	beq.n	80053fa <_printf_common+0xb2>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	68e5      	ldr	r5, [r4, #12]
 80053bc:	f8d9 2000 	ldr.w	r2, [r9]
 80053c0:	f003 0306 	and.w	r3, r3, #6
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	bf08      	it	eq
 80053c8:	1aad      	subeq	r5, r5, r2
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	6922      	ldr	r2, [r4, #16]
 80053ce:	bf0c      	ite	eq
 80053d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d4:	2500      	movne	r5, #0
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bfc4      	itt	gt
 80053da:	1a9b      	subgt	r3, r3, r2
 80053dc:	18ed      	addgt	r5, r5, r3
 80053de:	f04f 0900 	mov.w	r9, #0
 80053e2:	341a      	adds	r4, #26
 80053e4:	454d      	cmp	r5, r9
 80053e6:	d11a      	bne.n	800541e <_printf_common+0xd6>
 80053e8:	2000      	movs	r0, #0
 80053ea:	e008      	b.n	80053fe <_printf_common+0xb6>
 80053ec:	2301      	movs	r3, #1
 80053ee:	4652      	mov	r2, sl
 80053f0:	4639      	mov	r1, r7
 80053f2:	4630      	mov	r0, r6
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d103      	bne.n	8005402 <_printf_common+0xba>
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005402:	3501      	adds	r5, #1
 8005404:	e7c3      	b.n	800538e <_printf_common+0x46>
 8005406:	18e1      	adds	r1, r4, r3
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	2030      	movs	r0, #48	; 0x30
 800540c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005410:	4422      	add	r2, r4
 8005412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800541a:	3302      	adds	r3, #2
 800541c:	e7c5      	b.n	80053aa <_printf_common+0x62>
 800541e:	2301      	movs	r3, #1
 8005420:	4622      	mov	r2, r4
 8005422:	4639      	mov	r1, r7
 8005424:	4630      	mov	r0, r6
 8005426:	47c0      	blx	r8
 8005428:	3001      	adds	r0, #1
 800542a:	d0e6      	beq.n	80053fa <_printf_common+0xb2>
 800542c:	f109 0901 	add.w	r9, r9, #1
 8005430:	e7d8      	b.n	80053e4 <_printf_common+0x9c>
	...

08005434 <_printf_i>:
 8005434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800543c:	460c      	mov	r4, r1
 800543e:	7e09      	ldrb	r1, [r1, #24]
 8005440:	b085      	sub	sp, #20
 8005442:	296e      	cmp	r1, #110	; 0x6e
 8005444:	4617      	mov	r7, r2
 8005446:	4606      	mov	r6, r0
 8005448:	4698      	mov	r8, r3
 800544a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800544c:	f000 80b3 	beq.w	80055b6 <_printf_i+0x182>
 8005450:	d822      	bhi.n	8005498 <_printf_i+0x64>
 8005452:	2963      	cmp	r1, #99	; 0x63
 8005454:	d036      	beq.n	80054c4 <_printf_i+0x90>
 8005456:	d80a      	bhi.n	800546e <_printf_i+0x3a>
 8005458:	2900      	cmp	r1, #0
 800545a:	f000 80b9 	beq.w	80055d0 <_printf_i+0x19c>
 800545e:	2958      	cmp	r1, #88	; 0x58
 8005460:	f000 8083 	beq.w	800556a <_printf_i+0x136>
 8005464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800546c:	e032      	b.n	80054d4 <_printf_i+0xa0>
 800546e:	2964      	cmp	r1, #100	; 0x64
 8005470:	d001      	beq.n	8005476 <_printf_i+0x42>
 8005472:	2969      	cmp	r1, #105	; 0x69
 8005474:	d1f6      	bne.n	8005464 <_printf_i+0x30>
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	6813      	ldr	r3, [r2, #0]
 800547a:	0605      	lsls	r5, r0, #24
 800547c:	f103 0104 	add.w	r1, r3, #4
 8005480:	d52a      	bpl.n	80054d8 <_printf_i+0xa4>
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	da03      	bge.n	8005492 <_printf_i+0x5e>
 800548a:	222d      	movs	r2, #45	; 0x2d
 800548c:	425b      	negs	r3, r3
 800548e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005492:	486f      	ldr	r0, [pc, #444]	; (8005650 <_printf_i+0x21c>)
 8005494:	220a      	movs	r2, #10
 8005496:	e039      	b.n	800550c <_printf_i+0xd8>
 8005498:	2973      	cmp	r1, #115	; 0x73
 800549a:	f000 809d 	beq.w	80055d8 <_printf_i+0x1a4>
 800549e:	d808      	bhi.n	80054b2 <_printf_i+0x7e>
 80054a0:	296f      	cmp	r1, #111	; 0x6f
 80054a2:	d020      	beq.n	80054e6 <_printf_i+0xb2>
 80054a4:	2970      	cmp	r1, #112	; 0x70
 80054a6:	d1dd      	bne.n	8005464 <_printf_i+0x30>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	f043 0320 	orr.w	r3, r3, #32
 80054ae:	6023      	str	r3, [r4, #0]
 80054b0:	e003      	b.n	80054ba <_printf_i+0x86>
 80054b2:	2975      	cmp	r1, #117	; 0x75
 80054b4:	d017      	beq.n	80054e6 <_printf_i+0xb2>
 80054b6:	2978      	cmp	r1, #120	; 0x78
 80054b8:	d1d4      	bne.n	8005464 <_printf_i+0x30>
 80054ba:	2378      	movs	r3, #120	; 0x78
 80054bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054c0:	4864      	ldr	r0, [pc, #400]	; (8005654 <_printf_i+0x220>)
 80054c2:	e055      	b.n	8005570 <_printf_i+0x13c>
 80054c4:	6813      	ldr	r3, [r2, #0]
 80054c6:	1d19      	adds	r1, r3, #4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6011      	str	r1, [r2, #0]
 80054cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054d4:	2301      	movs	r3, #1
 80054d6:	e08c      	b.n	80055f2 <_printf_i+0x1be>
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6011      	str	r1, [r2, #0]
 80054dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054e0:	bf18      	it	ne
 80054e2:	b21b      	sxthne	r3, r3
 80054e4:	e7cf      	b.n	8005486 <_printf_i+0x52>
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	6825      	ldr	r5, [r4, #0]
 80054ea:	1d18      	adds	r0, r3, #4
 80054ec:	6010      	str	r0, [r2, #0]
 80054ee:	0628      	lsls	r0, r5, #24
 80054f0:	d501      	bpl.n	80054f6 <_printf_i+0xc2>
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	e002      	b.n	80054fc <_printf_i+0xc8>
 80054f6:	0668      	lsls	r0, r5, #25
 80054f8:	d5fb      	bpl.n	80054f2 <_printf_i+0xbe>
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	4854      	ldr	r0, [pc, #336]	; (8005650 <_printf_i+0x21c>)
 80054fe:	296f      	cmp	r1, #111	; 0x6f
 8005500:	bf14      	ite	ne
 8005502:	220a      	movne	r2, #10
 8005504:	2208      	moveq	r2, #8
 8005506:	2100      	movs	r1, #0
 8005508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800550c:	6865      	ldr	r5, [r4, #4]
 800550e:	60a5      	str	r5, [r4, #8]
 8005510:	2d00      	cmp	r5, #0
 8005512:	f2c0 8095 	blt.w	8005640 <_printf_i+0x20c>
 8005516:	6821      	ldr	r1, [r4, #0]
 8005518:	f021 0104 	bic.w	r1, r1, #4
 800551c:	6021      	str	r1, [r4, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d13d      	bne.n	800559e <_printf_i+0x16a>
 8005522:	2d00      	cmp	r5, #0
 8005524:	f040 808e 	bne.w	8005644 <_printf_i+0x210>
 8005528:	4665      	mov	r5, ip
 800552a:	2a08      	cmp	r2, #8
 800552c:	d10b      	bne.n	8005546 <_printf_i+0x112>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	07db      	lsls	r3, r3, #31
 8005532:	d508      	bpl.n	8005546 <_printf_i+0x112>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	6862      	ldr	r2, [r4, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	bfde      	ittt	le
 800553c:	2330      	movle	r3, #48	; 0x30
 800553e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005542:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005546:	ebac 0305 	sub.w	r3, ip, r5
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	f8cd 8000 	str.w	r8, [sp]
 8005550:	463b      	mov	r3, r7
 8005552:	aa03      	add	r2, sp, #12
 8005554:	4621      	mov	r1, r4
 8005556:	4630      	mov	r0, r6
 8005558:	f7ff fef6 	bl	8005348 <_printf_common>
 800555c:	3001      	adds	r0, #1
 800555e:	d14d      	bne.n	80055fc <_printf_i+0x1c8>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005564:	b005      	add	sp, #20
 8005566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800556a:	4839      	ldr	r0, [pc, #228]	; (8005650 <_printf_i+0x21c>)
 800556c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005570:	6813      	ldr	r3, [r2, #0]
 8005572:	6821      	ldr	r1, [r4, #0]
 8005574:	1d1d      	adds	r5, r3, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6015      	str	r5, [r2, #0]
 800557a:	060a      	lsls	r2, r1, #24
 800557c:	d50b      	bpl.n	8005596 <_printf_i+0x162>
 800557e:	07ca      	lsls	r2, r1, #31
 8005580:	bf44      	itt	mi
 8005582:	f041 0120 	orrmi.w	r1, r1, #32
 8005586:	6021      	strmi	r1, [r4, #0]
 8005588:	b91b      	cbnz	r3, 8005592 <_printf_i+0x15e>
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	f022 0220 	bic.w	r2, r2, #32
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	2210      	movs	r2, #16
 8005594:	e7b7      	b.n	8005506 <_printf_i+0xd2>
 8005596:	064d      	lsls	r5, r1, #25
 8005598:	bf48      	it	mi
 800559a:	b29b      	uxthmi	r3, r3
 800559c:	e7ef      	b.n	800557e <_printf_i+0x14a>
 800559e:	4665      	mov	r5, ip
 80055a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80055a4:	fb02 3311 	mls	r3, r2, r1, r3
 80055a8:	5cc3      	ldrb	r3, [r0, r3]
 80055aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055ae:	460b      	mov	r3, r1
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d1f5      	bne.n	80055a0 <_printf_i+0x16c>
 80055b4:	e7b9      	b.n	800552a <_printf_i+0xf6>
 80055b6:	6813      	ldr	r3, [r2, #0]
 80055b8:	6825      	ldr	r5, [r4, #0]
 80055ba:	6961      	ldr	r1, [r4, #20]
 80055bc:	1d18      	adds	r0, r3, #4
 80055be:	6010      	str	r0, [r2, #0]
 80055c0:	0628      	lsls	r0, r5, #24
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	d501      	bpl.n	80055ca <_printf_i+0x196>
 80055c6:	6019      	str	r1, [r3, #0]
 80055c8:	e002      	b.n	80055d0 <_printf_i+0x19c>
 80055ca:	066a      	lsls	r2, r5, #25
 80055cc:	d5fb      	bpl.n	80055c6 <_printf_i+0x192>
 80055ce:	8019      	strh	r1, [r3, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	6123      	str	r3, [r4, #16]
 80055d4:	4665      	mov	r5, ip
 80055d6:	e7b9      	b.n	800554c <_printf_i+0x118>
 80055d8:	6813      	ldr	r3, [r2, #0]
 80055da:	1d19      	adds	r1, r3, #4
 80055dc:	6011      	str	r1, [r2, #0]
 80055de:	681d      	ldr	r5, [r3, #0]
 80055e0:	6862      	ldr	r2, [r4, #4]
 80055e2:	2100      	movs	r1, #0
 80055e4:	4628      	mov	r0, r5
 80055e6:	f7fa fdfb 	bl	80001e0 <memchr>
 80055ea:	b108      	cbz	r0, 80055f0 <_printf_i+0x1bc>
 80055ec:	1b40      	subs	r0, r0, r5
 80055ee:	6060      	str	r0, [r4, #4]
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	6123      	str	r3, [r4, #16]
 80055f4:	2300      	movs	r3, #0
 80055f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055fa:	e7a7      	b.n	800554c <_printf_i+0x118>
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	462a      	mov	r2, r5
 8005600:	4639      	mov	r1, r7
 8005602:	4630      	mov	r0, r6
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d0aa      	beq.n	8005560 <_printf_i+0x12c>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	079b      	lsls	r3, r3, #30
 800560e:	d413      	bmi.n	8005638 <_printf_i+0x204>
 8005610:	68e0      	ldr	r0, [r4, #12]
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	4298      	cmp	r0, r3
 8005616:	bfb8      	it	lt
 8005618:	4618      	movlt	r0, r3
 800561a:	e7a3      	b.n	8005564 <_printf_i+0x130>
 800561c:	2301      	movs	r3, #1
 800561e:	464a      	mov	r2, r9
 8005620:	4639      	mov	r1, r7
 8005622:	4630      	mov	r0, r6
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d09a      	beq.n	8005560 <_printf_i+0x12c>
 800562a:	3501      	adds	r5, #1
 800562c:	68e3      	ldr	r3, [r4, #12]
 800562e:	9a03      	ldr	r2, [sp, #12]
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	42ab      	cmp	r3, r5
 8005634:	dcf2      	bgt.n	800561c <_printf_i+0x1e8>
 8005636:	e7eb      	b.n	8005610 <_printf_i+0x1dc>
 8005638:	2500      	movs	r5, #0
 800563a:	f104 0919 	add.w	r9, r4, #25
 800563e:	e7f5      	b.n	800562c <_printf_i+0x1f8>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ac      	bne.n	800559e <_printf_i+0x16a>
 8005644:	7803      	ldrb	r3, [r0, #0]
 8005646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800564a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800564e:	e76c      	b.n	800552a <_printf_i+0xf6>
 8005650:	080091f6 	.word	0x080091f6
 8005654:	08009207 	.word	0x08009207

08005658 <_scanf_float>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	469a      	mov	sl, r3
 800565e:	688b      	ldr	r3, [r1, #8]
 8005660:	4616      	mov	r6, r2
 8005662:	1e5a      	subs	r2, r3, #1
 8005664:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005668:	b087      	sub	sp, #28
 800566a:	bf83      	ittte	hi
 800566c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005670:	189b      	addhi	r3, r3, r2
 8005672:	9301      	strhi	r3, [sp, #4]
 8005674:	2300      	movls	r3, #0
 8005676:	bf86      	itte	hi
 8005678:	f240 135d 	movwhi	r3, #349	; 0x15d
 800567c:	608b      	strhi	r3, [r1, #8]
 800567e:	9301      	strls	r3, [sp, #4]
 8005680:	680b      	ldr	r3, [r1, #0]
 8005682:	4688      	mov	r8, r1
 8005684:	f04f 0b00 	mov.w	fp, #0
 8005688:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800568c:	f848 3b1c 	str.w	r3, [r8], #28
 8005690:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005694:	4607      	mov	r7, r0
 8005696:	460c      	mov	r4, r1
 8005698:	4645      	mov	r5, r8
 800569a:	465a      	mov	r2, fp
 800569c:	46d9      	mov	r9, fp
 800569e:	f8cd b008 	str.w	fp, [sp, #8]
 80056a2:	68a1      	ldr	r1, [r4, #8]
 80056a4:	b181      	cbz	r1, 80056c8 <_scanf_float+0x70>
 80056a6:	6833      	ldr	r3, [r6, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b49      	cmp	r3, #73	; 0x49
 80056ac:	d071      	beq.n	8005792 <_scanf_float+0x13a>
 80056ae:	d84d      	bhi.n	800574c <_scanf_float+0xf4>
 80056b0:	2b39      	cmp	r3, #57	; 0x39
 80056b2:	d840      	bhi.n	8005736 <_scanf_float+0xde>
 80056b4:	2b31      	cmp	r3, #49	; 0x31
 80056b6:	f080 8088 	bcs.w	80057ca <_scanf_float+0x172>
 80056ba:	2b2d      	cmp	r3, #45	; 0x2d
 80056bc:	f000 8090 	beq.w	80057e0 <_scanf_float+0x188>
 80056c0:	d815      	bhi.n	80056ee <_scanf_float+0x96>
 80056c2:	2b2b      	cmp	r3, #43	; 0x2b
 80056c4:	f000 808c 	beq.w	80057e0 <_scanf_float+0x188>
 80056c8:	f1b9 0f00 	cmp.w	r9, #0
 80056cc:	d003      	beq.n	80056d6 <_scanf_float+0x7e>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	3a01      	subs	r2, #1
 80056d8:	2a01      	cmp	r2, #1
 80056da:	f200 80ea 	bhi.w	80058b2 <_scanf_float+0x25a>
 80056de:	4545      	cmp	r5, r8
 80056e0:	f200 80dc 	bhi.w	800589c <_scanf_float+0x244>
 80056e4:	2601      	movs	r6, #1
 80056e6:	4630      	mov	r0, r6
 80056e8:	b007      	add	sp, #28
 80056ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ee:	2b2e      	cmp	r3, #46	; 0x2e
 80056f0:	f000 809f 	beq.w	8005832 <_scanf_float+0x1da>
 80056f4:	2b30      	cmp	r3, #48	; 0x30
 80056f6:	d1e7      	bne.n	80056c8 <_scanf_float+0x70>
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80056fe:	d064      	beq.n	80057ca <_scanf_float+0x172>
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	f109 0901 	add.w	r9, r9, #1
 800570c:	b11b      	cbz	r3, 8005716 <_scanf_float+0xbe>
 800570e:	3b01      	subs	r3, #1
 8005710:	3101      	adds	r1, #1
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	60a1      	str	r1, [r4, #8]
 8005716:	68a3      	ldr	r3, [r4, #8]
 8005718:	3b01      	subs	r3, #1
 800571a:	60a3      	str	r3, [r4, #8]
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	3301      	adds	r3, #1
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	6873      	ldr	r3, [r6, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	6073      	str	r3, [r6, #4]
 800572a:	f340 80ac 	ble.w	8005886 <_scanf_float+0x22e>
 800572e:	6833      	ldr	r3, [r6, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	e7b5      	b.n	80056a2 <_scanf_float+0x4a>
 8005736:	2b45      	cmp	r3, #69	; 0x45
 8005738:	f000 8085 	beq.w	8005846 <_scanf_float+0x1ee>
 800573c:	2b46      	cmp	r3, #70	; 0x46
 800573e:	d06a      	beq.n	8005816 <_scanf_float+0x1be>
 8005740:	2b41      	cmp	r3, #65	; 0x41
 8005742:	d1c1      	bne.n	80056c8 <_scanf_float+0x70>
 8005744:	2a01      	cmp	r2, #1
 8005746:	d1bf      	bne.n	80056c8 <_scanf_float+0x70>
 8005748:	2202      	movs	r2, #2
 800574a:	e046      	b.n	80057da <_scanf_float+0x182>
 800574c:	2b65      	cmp	r3, #101	; 0x65
 800574e:	d07a      	beq.n	8005846 <_scanf_float+0x1ee>
 8005750:	d818      	bhi.n	8005784 <_scanf_float+0x12c>
 8005752:	2b54      	cmp	r3, #84	; 0x54
 8005754:	d066      	beq.n	8005824 <_scanf_float+0x1cc>
 8005756:	d811      	bhi.n	800577c <_scanf_float+0x124>
 8005758:	2b4e      	cmp	r3, #78	; 0x4e
 800575a:	d1b5      	bne.n	80056c8 <_scanf_float+0x70>
 800575c:	2a00      	cmp	r2, #0
 800575e:	d146      	bne.n	80057ee <_scanf_float+0x196>
 8005760:	f1b9 0f00 	cmp.w	r9, #0
 8005764:	d145      	bne.n	80057f2 <_scanf_float+0x19a>
 8005766:	6821      	ldr	r1, [r4, #0]
 8005768:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800576c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005770:	d13f      	bne.n	80057f2 <_scanf_float+0x19a>
 8005772:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005776:	6021      	str	r1, [r4, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	e02e      	b.n	80057da <_scanf_float+0x182>
 800577c:	2b59      	cmp	r3, #89	; 0x59
 800577e:	d01e      	beq.n	80057be <_scanf_float+0x166>
 8005780:	2b61      	cmp	r3, #97	; 0x61
 8005782:	e7de      	b.n	8005742 <_scanf_float+0xea>
 8005784:	2b6e      	cmp	r3, #110	; 0x6e
 8005786:	d0e9      	beq.n	800575c <_scanf_float+0x104>
 8005788:	d815      	bhi.n	80057b6 <_scanf_float+0x15e>
 800578a:	2b66      	cmp	r3, #102	; 0x66
 800578c:	d043      	beq.n	8005816 <_scanf_float+0x1be>
 800578e:	2b69      	cmp	r3, #105	; 0x69
 8005790:	d19a      	bne.n	80056c8 <_scanf_float+0x70>
 8005792:	f1bb 0f00 	cmp.w	fp, #0
 8005796:	d138      	bne.n	800580a <_scanf_float+0x1b2>
 8005798:	f1b9 0f00 	cmp.w	r9, #0
 800579c:	d197      	bne.n	80056ce <_scanf_float+0x76>
 800579e:	6821      	ldr	r1, [r4, #0]
 80057a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80057a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80057a8:	d195      	bne.n	80056d6 <_scanf_float+0x7e>
 80057aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80057ae:	6021      	str	r1, [r4, #0]
 80057b0:	f04f 0b01 	mov.w	fp, #1
 80057b4:	e011      	b.n	80057da <_scanf_float+0x182>
 80057b6:	2b74      	cmp	r3, #116	; 0x74
 80057b8:	d034      	beq.n	8005824 <_scanf_float+0x1cc>
 80057ba:	2b79      	cmp	r3, #121	; 0x79
 80057bc:	d184      	bne.n	80056c8 <_scanf_float+0x70>
 80057be:	f1bb 0f07 	cmp.w	fp, #7
 80057c2:	d181      	bne.n	80056c8 <_scanf_float+0x70>
 80057c4:	f04f 0b08 	mov.w	fp, #8
 80057c8:	e007      	b.n	80057da <_scanf_float+0x182>
 80057ca:	eb12 0f0b 	cmn.w	r2, fp
 80057ce:	f47f af7b 	bne.w	80056c8 <_scanf_float+0x70>
 80057d2:	6821      	ldr	r1, [r4, #0]
 80057d4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80057d8:	6021      	str	r1, [r4, #0]
 80057da:	702b      	strb	r3, [r5, #0]
 80057dc:	3501      	adds	r5, #1
 80057de:	e79a      	b.n	8005716 <_scanf_float+0xbe>
 80057e0:	6821      	ldr	r1, [r4, #0]
 80057e2:	0608      	lsls	r0, r1, #24
 80057e4:	f57f af70 	bpl.w	80056c8 <_scanf_float+0x70>
 80057e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80057ec:	e7f4      	b.n	80057d8 <_scanf_float+0x180>
 80057ee:	2a02      	cmp	r2, #2
 80057f0:	d047      	beq.n	8005882 <_scanf_float+0x22a>
 80057f2:	f1bb 0f01 	cmp.w	fp, #1
 80057f6:	d003      	beq.n	8005800 <_scanf_float+0x1a8>
 80057f8:	f1bb 0f04 	cmp.w	fp, #4
 80057fc:	f47f af64 	bne.w	80056c8 <_scanf_float+0x70>
 8005800:	f10b 0b01 	add.w	fp, fp, #1
 8005804:	fa5f fb8b 	uxtb.w	fp, fp
 8005808:	e7e7      	b.n	80057da <_scanf_float+0x182>
 800580a:	f1bb 0f03 	cmp.w	fp, #3
 800580e:	d0f7      	beq.n	8005800 <_scanf_float+0x1a8>
 8005810:	f1bb 0f05 	cmp.w	fp, #5
 8005814:	e7f2      	b.n	80057fc <_scanf_float+0x1a4>
 8005816:	f1bb 0f02 	cmp.w	fp, #2
 800581a:	f47f af55 	bne.w	80056c8 <_scanf_float+0x70>
 800581e:	f04f 0b03 	mov.w	fp, #3
 8005822:	e7da      	b.n	80057da <_scanf_float+0x182>
 8005824:	f1bb 0f06 	cmp.w	fp, #6
 8005828:	f47f af4e 	bne.w	80056c8 <_scanf_float+0x70>
 800582c:	f04f 0b07 	mov.w	fp, #7
 8005830:	e7d3      	b.n	80057da <_scanf_float+0x182>
 8005832:	6821      	ldr	r1, [r4, #0]
 8005834:	0588      	lsls	r0, r1, #22
 8005836:	f57f af47 	bpl.w	80056c8 <_scanf_float+0x70>
 800583a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800583e:	6021      	str	r1, [r4, #0]
 8005840:	f8cd 9008 	str.w	r9, [sp, #8]
 8005844:	e7c9      	b.n	80057da <_scanf_float+0x182>
 8005846:	6821      	ldr	r1, [r4, #0]
 8005848:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800584c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005850:	d006      	beq.n	8005860 <_scanf_float+0x208>
 8005852:	0548      	lsls	r0, r1, #21
 8005854:	f57f af38 	bpl.w	80056c8 <_scanf_float+0x70>
 8005858:	f1b9 0f00 	cmp.w	r9, #0
 800585c:	f43f af3b 	beq.w	80056d6 <_scanf_float+0x7e>
 8005860:	0588      	lsls	r0, r1, #22
 8005862:	bf58      	it	pl
 8005864:	9802      	ldrpl	r0, [sp, #8]
 8005866:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800586a:	bf58      	it	pl
 800586c:	eba9 0000 	subpl.w	r0, r9, r0
 8005870:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005874:	bf58      	it	pl
 8005876:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800587a:	6021      	str	r1, [r4, #0]
 800587c:	f04f 0900 	mov.w	r9, #0
 8005880:	e7ab      	b.n	80057da <_scanf_float+0x182>
 8005882:	2203      	movs	r2, #3
 8005884:	e7a9      	b.n	80057da <_scanf_float+0x182>
 8005886:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800588a:	9205      	str	r2, [sp, #20]
 800588c:	4631      	mov	r1, r6
 800588e:	4638      	mov	r0, r7
 8005890:	4798      	blx	r3
 8005892:	9a05      	ldr	r2, [sp, #20]
 8005894:	2800      	cmp	r0, #0
 8005896:	f43f af04 	beq.w	80056a2 <_scanf_float+0x4a>
 800589a:	e715      	b.n	80056c8 <_scanf_float+0x70>
 800589c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80058a4:	4632      	mov	r2, r6
 80058a6:	4638      	mov	r0, r7
 80058a8:	4798      	blx	r3
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	e715      	b.n	80056de <_scanf_float+0x86>
 80058b2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d80a      	bhi.n	80058d0 <_scanf_float+0x278>
 80058ba:	f1bb 0f02 	cmp.w	fp, #2
 80058be:	d968      	bls.n	8005992 <_scanf_float+0x33a>
 80058c0:	f1ab 0b03 	sub.w	fp, fp, #3
 80058c4:	fa5f fb8b 	uxtb.w	fp, fp
 80058c8:	eba5 0b0b 	sub.w	fp, r5, fp
 80058cc:	455d      	cmp	r5, fp
 80058ce:	d14b      	bne.n	8005968 <_scanf_float+0x310>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	05da      	lsls	r2, r3, #23
 80058d4:	d51f      	bpl.n	8005916 <_scanf_float+0x2be>
 80058d6:	055b      	lsls	r3, r3, #21
 80058d8:	d468      	bmi.n	80059ac <_scanf_float+0x354>
 80058da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	2965      	cmp	r1, #101	; 0x65
 80058e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80058e6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	d00d      	beq.n	800590a <_scanf_float+0x2b2>
 80058ee:	2945      	cmp	r1, #69	; 0x45
 80058f0:	d00b      	beq.n	800590a <_scanf_float+0x2b2>
 80058f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058f6:	4632      	mov	r2, r6
 80058f8:	4638      	mov	r0, r7
 80058fa:	4798      	blx	r3
 80058fc:	6923      	ldr	r3, [r4, #16]
 80058fe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005902:	3b01      	subs	r3, #1
 8005904:	f1a5 0b02 	sub.w	fp, r5, #2
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800590e:	4632      	mov	r2, r6
 8005910:	4638      	mov	r0, r7
 8005912:	4798      	blx	r3
 8005914:	465d      	mov	r5, fp
 8005916:	6826      	ldr	r6, [r4, #0]
 8005918:	f016 0610 	ands.w	r6, r6, #16
 800591c:	d17a      	bne.n	8005a14 <_scanf_float+0x3bc>
 800591e:	702e      	strb	r6, [r5, #0]
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592a:	d142      	bne.n	80059b2 <_scanf_float+0x35a>
 800592c:	9b02      	ldr	r3, [sp, #8]
 800592e:	eba9 0303 	sub.w	r3, r9, r3
 8005932:	425a      	negs	r2, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d149      	bne.n	80059cc <_scanf_float+0x374>
 8005938:	2200      	movs	r2, #0
 800593a:	4641      	mov	r1, r8
 800593c:	4638      	mov	r0, r7
 800593e:	f000 febb 	bl	80066b8 <_strtod_r>
 8005942:	6825      	ldr	r5, [r4, #0]
 8005944:	f8da 3000 	ldr.w	r3, [sl]
 8005948:	f015 0f02 	tst.w	r5, #2
 800594c:	f103 0204 	add.w	r2, r3, #4
 8005950:	ec59 8b10 	vmov	r8, r9, d0
 8005954:	f8ca 2000 	str.w	r2, [sl]
 8005958:	d043      	beq.n	80059e2 <_scanf_float+0x38a>
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	e9c3 8900 	strd	r8, r9, [r3]
 8005960:	68e3      	ldr	r3, [r4, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60e3      	str	r3, [r4, #12]
 8005966:	e6be      	b.n	80056e6 <_scanf_float+0x8e>
 8005968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800596c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005970:	4632      	mov	r2, r6
 8005972:	4638      	mov	r0, r7
 8005974:	4798      	blx	r3
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	3b01      	subs	r3, #1
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	e7a6      	b.n	80058cc <_scanf_float+0x274>
 800597e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005982:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005986:	4632      	mov	r2, r6
 8005988:	4638      	mov	r0, r7
 800598a:	4798      	blx	r3
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	3b01      	subs	r3, #1
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	4545      	cmp	r5, r8
 8005994:	d8f3      	bhi.n	800597e <_scanf_float+0x326>
 8005996:	e6a5      	b.n	80056e4 <_scanf_float+0x8c>
 8005998:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800599c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80059a0:	4632      	mov	r2, r6
 80059a2:	4638      	mov	r0, r7
 80059a4:	4798      	blx	r3
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	6123      	str	r3, [r4, #16]
 80059ac:	4545      	cmp	r5, r8
 80059ae:	d8f3      	bhi.n	8005998 <_scanf_float+0x340>
 80059b0:	e698      	b.n	80056e4 <_scanf_float+0x8c>
 80059b2:	9b03      	ldr	r3, [sp, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0bf      	beq.n	8005938 <_scanf_float+0x2e0>
 80059b8:	9904      	ldr	r1, [sp, #16]
 80059ba:	230a      	movs	r3, #10
 80059bc:	4632      	mov	r2, r6
 80059be:	3101      	adds	r1, #1
 80059c0:	4638      	mov	r0, r7
 80059c2:	f000 ff05 	bl	80067d0 <_strtol_r>
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	9d04      	ldr	r5, [sp, #16]
 80059ca:	1ac2      	subs	r2, r0, r3
 80059cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059d0:	429d      	cmp	r5, r3
 80059d2:	bf28      	it	cs
 80059d4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80059d8:	490f      	ldr	r1, [pc, #60]	; (8005a18 <_scanf_float+0x3c0>)
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f83c 	bl	8005a58 <siprintf>
 80059e0:	e7aa      	b.n	8005938 <_scanf_float+0x2e0>
 80059e2:	f015 0504 	ands.w	r5, r5, #4
 80059e6:	d1b8      	bne.n	800595a <_scanf_float+0x302>
 80059e8:	681f      	ldr	r7, [r3, #0]
 80059ea:	ee10 2a10 	vmov	r2, s0
 80059ee:	464b      	mov	r3, r9
 80059f0:	ee10 0a10 	vmov	r0, s0
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fb f899 	bl	8000b2c <__aeabi_dcmpun>
 80059fa:	b128      	cbz	r0, 8005a08 <_scanf_float+0x3b0>
 80059fc:	4628      	mov	r0, r5
 80059fe:	f000 f825 	bl	8005a4c <nanf>
 8005a02:	ed87 0a00 	vstr	s0, [r7]
 8005a06:	e7ab      	b.n	8005960 <_scanf_float+0x308>
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	f7fb f8ec 	bl	8000be8 <__aeabi_d2f>
 8005a10:	6038      	str	r0, [r7, #0]
 8005a12:	e7a5      	b.n	8005960 <_scanf_float+0x308>
 8005a14:	2600      	movs	r6, #0
 8005a16:	e666      	b.n	80056e6 <_scanf_float+0x8e>
 8005a18:	08009218 	.word	0x08009218

08005a1c <iprintf>:
 8005a1c:	b40f      	push	{r0, r1, r2, r3}
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <iprintf+0x2c>)
 8005a20:	b513      	push	{r0, r1, r4, lr}
 8005a22:	681c      	ldr	r4, [r3, #0]
 8005a24:	b124      	cbz	r4, 8005a30 <iprintf+0x14>
 8005a26:	69a3      	ldr	r3, [r4, #24]
 8005a28:	b913      	cbnz	r3, 8005a30 <iprintf+0x14>
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f001 fd68 	bl	8007500 <__sinit>
 8005a30:	ab05      	add	r3, sp, #20
 8005a32:	9a04      	ldr	r2, [sp, #16]
 8005a34:	68a1      	ldr	r1, [r4, #8]
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f002 ff7b 	bl	8008934 <_vfiprintf_r>
 8005a3e:	b002      	add	sp, #8
 8005a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a44:	b004      	add	sp, #16
 8005a46:	4770      	bx	lr
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <nanf>:
 8005a4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a54 <nanf+0x8>
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	7fc00000 	.word	0x7fc00000

08005a58 <siprintf>:
 8005a58:	b40e      	push	{r1, r2, r3}
 8005a5a:	b500      	push	{lr}
 8005a5c:	b09c      	sub	sp, #112	; 0x70
 8005a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a60:	9002      	str	r0, [sp, #8]
 8005a62:	9006      	str	r0, [sp, #24]
 8005a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a68:	4809      	ldr	r0, [pc, #36]	; (8005a90 <siprintf+0x38>)
 8005a6a:	9107      	str	r1, [sp, #28]
 8005a6c:	9104      	str	r1, [sp, #16]
 8005a6e:	4909      	ldr	r1, [pc, #36]	; (8005a94 <siprintf+0x3c>)
 8005a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a74:	9105      	str	r1, [sp, #20]
 8005a76:	6800      	ldr	r0, [r0, #0]
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	a902      	add	r1, sp, #8
 8005a7c:	f002 fe38 	bl	80086f0 <_svfiprintf_r>
 8005a80:	9b02      	ldr	r3, [sp, #8]
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	b01c      	add	sp, #112	; 0x70
 8005a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a8c:	b003      	add	sp, #12
 8005a8e:	4770      	bx	lr
 8005a90:	2000000c 	.word	0x2000000c
 8005a94:	ffff0208 	.word	0xffff0208

08005a98 <sulp>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	ec45 4b10 	vmov	d0, r4, r5
 8005aa2:	4616      	mov	r6, r2
 8005aa4:	f002 fbe0 	bl	8008268 <__ulp>
 8005aa8:	ec51 0b10 	vmov	r0, r1, d0
 8005aac:	b17e      	cbz	r6, 8005ace <sulp+0x36>
 8005aae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ab2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dd09      	ble.n	8005ace <sulp+0x36>
 8005aba:	051b      	lsls	r3, r3, #20
 8005abc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ac0:	2400      	movs	r4, #0
 8005ac2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f7fa fd95 	bl	80005f8 <__aeabi_dmul>
 8005ace:	bd70      	pop	{r4, r5, r6, pc}

08005ad0 <_strtod_l>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	461f      	mov	r7, r3
 8005ad6:	b0a1      	sub	sp, #132	; 0x84
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4681      	mov	r9, r0
 8005adc:	4638      	mov	r0, r7
 8005ade:	460e      	mov	r6, r1
 8005ae0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ae2:	931c      	str	r3, [sp, #112]	; 0x70
 8005ae4:	f002 f8bf 	bl	8007c66 <__localeconv_l>
 8005ae8:	4680      	mov	r8, r0
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	f7fa fb70 	bl	80001d0 <strlen>
 8005af0:	f04f 0a00 	mov.w	sl, #0
 8005af4:	4604      	mov	r4, r0
 8005af6:	f04f 0b00 	mov.w	fp, #0
 8005afa:	961b      	str	r6, [sp, #108]	; 0x6c
 8005afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005afe:	781a      	ldrb	r2, [r3, #0]
 8005b00:	2a0d      	cmp	r2, #13
 8005b02:	d832      	bhi.n	8005b6a <_strtod_l+0x9a>
 8005b04:	2a09      	cmp	r2, #9
 8005b06:	d236      	bcs.n	8005b76 <_strtod_l+0xa6>
 8005b08:	2a00      	cmp	r2, #0
 8005b0a:	d03e      	beq.n	8005b8a <_strtod_l+0xba>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005b12:	782b      	ldrb	r3, [r5, #0]
 8005b14:	2b30      	cmp	r3, #48	; 0x30
 8005b16:	f040 80ac 	bne.w	8005c72 <_strtod_l+0x1a2>
 8005b1a:	786b      	ldrb	r3, [r5, #1]
 8005b1c:	2b58      	cmp	r3, #88	; 0x58
 8005b1e:	d001      	beq.n	8005b24 <_strtod_l+0x54>
 8005b20:	2b78      	cmp	r3, #120	; 0x78
 8005b22:	d167      	bne.n	8005bf4 <_strtod_l+0x124>
 8005b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	ab1c      	add	r3, sp, #112	; 0x70
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	9702      	str	r7, [sp, #8]
 8005b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b30:	4a88      	ldr	r2, [pc, #544]	; (8005d54 <_strtod_l+0x284>)
 8005b32:	a91b      	add	r1, sp, #108	; 0x6c
 8005b34:	4648      	mov	r0, r9
 8005b36:	f001 fdbc 	bl	80076b2 <__gethex>
 8005b3a:	f010 0407 	ands.w	r4, r0, #7
 8005b3e:	4606      	mov	r6, r0
 8005b40:	d005      	beq.n	8005b4e <_strtod_l+0x7e>
 8005b42:	2c06      	cmp	r4, #6
 8005b44:	d12b      	bne.n	8005b9e <_strtod_l+0xce>
 8005b46:	3501      	adds	r5, #1
 8005b48:	2300      	movs	r3, #0
 8005b4a:	951b      	str	r5, [sp, #108]	; 0x6c
 8005b4c:	930d      	str	r3, [sp, #52]	; 0x34
 8005b4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 859a 	bne.w	800668a <_strtod_l+0xbba>
 8005b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b58:	b1e3      	cbz	r3, 8005b94 <_strtod_l+0xc4>
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b60:	ec43 2b10 	vmov	d0, r2, r3
 8005b64:	b021      	add	sp, #132	; 0x84
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	2a2b      	cmp	r2, #43	; 0x2b
 8005b6c:	d015      	beq.n	8005b9a <_strtod_l+0xca>
 8005b6e:	2a2d      	cmp	r2, #45	; 0x2d
 8005b70:	d004      	beq.n	8005b7c <_strtod_l+0xac>
 8005b72:	2a20      	cmp	r2, #32
 8005b74:	d1ca      	bne.n	8005b0c <_strtod_l+0x3c>
 8005b76:	3301      	adds	r3, #1
 8005b78:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b7a:	e7bf      	b.n	8005afc <_strtod_l+0x2c>
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	920d      	str	r2, [sp, #52]	; 0x34
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1c2      	bne.n	8005b10 <_strtod_l+0x40>
 8005b8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b8c:	961b      	str	r6, [sp, #108]	; 0x6c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f040 8579 	bne.w	8006686 <_strtod_l+0xbb6>
 8005b94:	4652      	mov	r2, sl
 8005b96:	465b      	mov	r3, fp
 8005b98:	e7e2      	b.n	8005b60 <_strtod_l+0x90>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	e7ef      	b.n	8005b7e <_strtod_l+0xae>
 8005b9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ba0:	b13a      	cbz	r2, 8005bb2 <_strtod_l+0xe2>
 8005ba2:	2135      	movs	r1, #53	; 0x35
 8005ba4:	a81e      	add	r0, sp, #120	; 0x78
 8005ba6:	f002 fc57 	bl	8008458 <__copybits>
 8005baa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005bac:	4648      	mov	r0, r9
 8005bae:	f002 f8c4 	bl	8007d3a <_Bfree>
 8005bb2:	3c01      	subs	r4, #1
 8005bb4:	2c04      	cmp	r4, #4
 8005bb6:	d806      	bhi.n	8005bc6 <_strtod_l+0xf6>
 8005bb8:	e8df f004 	tbb	[pc, r4]
 8005bbc:	1714030a 	.word	0x1714030a
 8005bc0:	0a          	.byte	0x0a
 8005bc1:	00          	.byte	0x00
 8005bc2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005bc6:	0730      	lsls	r0, r6, #28
 8005bc8:	d5c1      	bpl.n	8005b4e <_strtod_l+0x7e>
 8005bca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005bce:	e7be      	b.n	8005b4e <_strtod_l+0x7e>
 8005bd0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005bd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005bd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bda:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005bde:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005be2:	e7f0      	b.n	8005bc6 <_strtod_l+0xf6>
 8005be4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005d58 <_strtod_l+0x288>
 8005be8:	e7ed      	b.n	8005bc6 <_strtod_l+0xf6>
 8005bea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005bee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005bf2:	e7e8      	b.n	8005bc6 <_strtod_l+0xf6>
 8005bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	d0f9      	beq.n	8005bf4 <_strtod_l+0x124>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0a4      	beq.n	8005b4e <_strtod_l+0x7e>
 8005c04:	2301      	movs	r3, #1
 8005c06:	2500      	movs	r5, #0
 8005c08:	9306      	str	r3, [sp, #24]
 8005c0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c0c:	9308      	str	r3, [sp, #32]
 8005c0e:	9507      	str	r5, [sp, #28]
 8005c10:	9505      	str	r5, [sp, #20]
 8005c12:	220a      	movs	r2, #10
 8005c14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005c16:	7807      	ldrb	r7, [r0, #0]
 8005c18:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005c1c:	b2d9      	uxtb	r1, r3
 8005c1e:	2909      	cmp	r1, #9
 8005c20:	d929      	bls.n	8005c76 <_strtod_l+0x1a6>
 8005c22:	4622      	mov	r2, r4
 8005c24:	f8d8 1000 	ldr.w	r1, [r8]
 8005c28:	f002 ffed 	bl	8008c06 <strncmp>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d031      	beq.n	8005c94 <_strtod_l+0x1c4>
 8005c30:	2000      	movs	r0, #0
 8005c32:	9c05      	ldr	r4, [sp, #20]
 8005c34:	9004      	str	r0, [sp, #16]
 8005c36:	463b      	mov	r3, r7
 8005c38:	4602      	mov	r2, r0
 8005c3a:	2b65      	cmp	r3, #101	; 0x65
 8005c3c:	d001      	beq.n	8005c42 <_strtod_l+0x172>
 8005c3e:	2b45      	cmp	r3, #69	; 0x45
 8005c40:	d114      	bne.n	8005c6c <_strtod_l+0x19c>
 8005c42:	b924      	cbnz	r4, 8005c4e <_strtod_l+0x17e>
 8005c44:	b910      	cbnz	r0, 8005c4c <_strtod_l+0x17c>
 8005c46:	9b06      	ldr	r3, [sp, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d09e      	beq.n	8005b8a <_strtod_l+0xba>
 8005c4c:	2400      	movs	r4, #0
 8005c4e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005c50:	1c73      	adds	r3, r6, #1
 8005c52:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c54:	7873      	ldrb	r3, [r6, #1]
 8005c56:	2b2b      	cmp	r3, #43	; 0x2b
 8005c58:	d078      	beq.n	8005d4c <_strtod_l+0x27c>
 8005c5a:	2b2d      	cmp	r3, #45	; 0x2d
 8005c5c:	d070      	beq.n	8005d40 <_strtod_l+0x270>
 8005c5e:	f04f 0c00 	mov.w	ip, #0
 8005c62:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005c66:	2f09      	cmp	r7, #9
 8005c68:	d97c      	bls.n	8005d64 <_strtod_l+0x294>
 8005c6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005c6c:	f04f 0e00 	mov.w	lr, #0
 8005c70:	e09a      	b.n	8005da8 <_strtod_l+0x2d8>
 8005c72:	2300      	movs	r3, #0
 8005c74:	e7c7      	b.n	8005c06 <_strtod_l+0x136>
 8005c76:	9905      	ldr	r1, [sp, #20]
 8005c78:	2908      	cmp	r1, #8
 8005c7a:	bfdd      	ittte	le
 8005c7c:	9907      	ldrle	r1, [sp, #28]
 8005c7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c82:	9307      	strle	r3, [sp, #28]
 8005c84:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005c88:	9b05      	ldr	r3, [sp, #20]
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	9305      	str	r3, [sp, #20]
 8005c90:	901b      	str	r0, [sp, #108]	; 0x6c
 8005c92:	e7bf      	b.n	8005c14 <_strtod_l+0x144>
 8005c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c96:	191a      	adds	r2, r3, r4
 8005c98:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c9a:	9a05      	ldr	r2, [sp, #20]
 8005c9c:	5d1b      	ldrb	r3, [r3, r4]
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	d037      	beq.n	8005d12 <_strtod_l+0x242>
 8005ca2:	9c05      	ldr	r4, [sp, #20]
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005caa:	2909      	cmp	r1, #9
 8005cac:	d913      	bls.n	8005cd6 <_strtod_l+0x206>
 8005cae:	2101      	movs	r1, #1
 8005cb0:	9104      	str	r1, [sp, #16]
 8005cb2:	e7c2      	b.n	8005c3a <_strtod_l+0x16a>
 8005cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	2b30      	cmp	r3, #48	; 0x30
 8005cc0:	d0f8      	beq.n	8005cb4 <_strtod_l+0x1e4>
 8005cc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005cc6:	2a08      	cmp	r2, #8
 8005cc8:	f200 84e4 	bhi.w	8006694 <_strtod_l+0xbc4>
 8005ccc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005cce:	9208      	str	r2, [sp, #32]
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005cda:	f100 0101 	add.w	r1, r0, #1
 8005cde:	d012      	beq.n	8005d06 <_strtod_l+0x236>
 8005ce0:	440a      	add	r2, r1
 8005ce2:	eb00 0c04 	add.w	ip, r0, r4
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	270a      	movs	r7, #10
 8005cea:	458c      	cmp	ip, r1
 8005cec:	d113      	bne.n	8005d16 <_strtod_l+0x246>
 8005cee:	1821      	adds	r1, r4, r0
 8005cf0:	2908      	cmp	r1, #8
 8005cf2:	f104 0401 	add.w	r4, r4, #1
 8005cf6:	4404      	add	r4, r0
 8005cf8:	dc19      	bgt.n	8005d2e <_strtod_l+0x25e>
 8005cfa:	9b07      	ldr	r3, [sp, #28]
 8005cfc:	210a      	movs	r1, #10
 8005cfe:	fb01 e303 	mla	r3, r1, r3, lr
 8005d02:	9307      	str	r3, [sp, #28]
 8005d04:	2100      	movs	r1, #0
 8005d06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d08:	1c58      	adds	r0, r3, #1
 8005d0a:	901b      	str	r0, [sp, #108]	; 0x6c
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	4608      	mov	r0, r1
 8005d10:	e7c9      	b.n	8005ca6 <_strtod_l+0x1d6>
 8005d12:	9805      	ldr	r0, [sp, #20]
 8005d14:	e7d3      	b.n	8005cbe <_strtod_l+0x1ee>
 8005d16:	2908      	cmp	r1, #8
 8005d18:	f101 0101 	add.w	r1, r1, #1
 8005d1c:	dc03      	bgt.n	8005d26 <_strtod_l+0x256>
 8005d1e:	9b07      	ldr	r3, [sp, #28]
 8005d20:	437b      	muls	r3, r7
 8005d22:	9307      	str	r3, [sp, #28]
 8005d24:	e7e1      	b.n	8005cea <_strtod_l+0x21a>
 8005d26:	2910      	cmp	r1, #16
 8005d28:	bfd8      	it	le
 8005d2a:	437d      	mulle	r5, r7
 8005d2c:	e7dd      	b.n	8005cea <_strtod_l+0x21a>
 8005d2e:	2c10      	cmp	r4, #16
 8005d30:	bfdc      	itt	le
 8005d32:	210a      	movle	r1, #10
 8005d34:	fb01 e505 	mlale	r5, r1, r5, lr
 8005d38:	e7e4      	b.n	8005d04 <_strtod_l+0x234>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	9304      	str	r3, [sp, #16]
 8005d3e:	e781      	b.n	8005c44 <_strtod_l+0x174>
 8005d40:	f04f 0c01 	mov.w	ip, #1
 8005d44:	1cb3      	adds	r3, r6, #2
 8005d46:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d48:	78b3      	ldrb	r3, [r6, #2]
 8005d4a:	e78a      	b.n	8005c62 <_strtod_l+0x192>
 8005d4c:	f04f 0c00 	mov.w	ip, #0
 8005d50:	e7f8      	b.n	8005d44 <_strtod_l+0x274>
 8005d52:	bf00      	nop
 8005d54:	08009220 	.word	0x08009220
 8005d58:	7ff00000 	.word	0x7ff00000
 8005d5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d5e:	1c5f      	adds	r7, r3, #1
 8005d60:	971b      	str	r7, [sp, #108]	; 0x6c
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b30      	cmp	r3, #48	; 0x30
 8005d66:	d0f9      	beq.n	8005d5c <_strtod_l+0x28c>
 8005d68:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005d6c:	2f08      	cmp	r7, #8
 8005d6e:	f63f af7d 	bhi.w	8005c6c <_strtod_l+0x19c>
 8005d72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005d76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d78:	930a      	str	r3, [sp, #40]	; 0x28
 8005d7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d7c:	1c5f      	adds	r7, r3, #1
 8005d7e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005d86:	f1b8 0f09 	cmp.w	r8, #9
 8005d8a:	d937      	bls.n	8005dfc <_strtod_l+0x32c>
 8005d8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d8e:	1a7f      	subs	r7, r7, r1
 8005d90:	2f08      	cmp	r7, #8
 8005d92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005d96:	dc37      	bgt.n	8005e08 <_strtod_l+0x338>
 8005d98:	45be      	cmp	lr, r7
 8005d9a:	bfa8      	it	ge
 8005d9c:	46be      	movge	lr, r7
 8005d9e:	f1bc 0f00 	cmp.w	ip, #0
 8005da2:	d001      	beq.n	8005da8 <_strtod_l+0x2d8>
 8005da4:	f1ce 0e00 	rsb	lr, lr, #0
 8005da8:	2c00      	cmp	r4, #0
 8005daa:	d151      	bne.n	8005e50 <_strtod_l+0x380>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f47f aece 	bne.w	8005b4e <_strtod_l+0x7e>
 8005db2:	9a06      	ldr	r2, [sp, #24]
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	f47f aeca 	bne.w	8005b4e <_strtod_l+0x7e>
 8005dba:	9a04      	ldr	r2, [sp, #16]
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	f47f aee4 	bne.w	8005b8a <_strtod_l+0xba>
 8005dc2:	2b4e      	cmp	r3, #78	; 0x4e
 8005dc4:	d027      	beq.n	8005e16 <_strtod_l+0x346>
 8005dc6:	dc21      	bgt.n	8005e0c <_strtod_l+0x33c>
 8005dc8:	2b49      	cmp	r3, #73	; 0x49
 8005dca:	f47f aede 	bne.w	8005b8a <_strtod_l+0xba>
 8005dce:	49a0      	ldr	r1, [pc, #640]	; (8006050 <_strtod_l+0x580>)
 8005dd0:	a81b      	add	r0, sp, #108	; 0x6c
 8005dd2:	f001 fea1 	bl	8007b18 <__match>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f43f aed7 	beq.w	8005b8a <_strtod_l+0xba>
 8005ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dde:	499d      	ldr	r1, [pc, #628]	; (8006054 <_strtod_l+0x584>)
 8005de0:	3b01      	subs	r3, #1
 8005de2:	a81b      	add	r0, sp, #108	; 0x6c
 8005de4:	931b      	str	r3, [sp, #108]	; 0x6c
 8005de6:	f001 fe97 	bl	8007b18 <__match>
 8005dea:	b910      	cbnz	r0, 8005df2 <_strtod_l+0x322>
 8005dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dee:	3301      	adds	r3, #1
 8005df0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005df2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006068 <_strtod_l+0x598>
 8005df6:	f04f 0a00 	mov.w	sl, #0
 8005dfa:	e6a8      	b.n	8005b4e <_strtod_l+0x7e>
 8005dfc:	210a      	movs	r1, #10
 8005dfe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005e02:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005e06:	e7b8      	b.n	8005d7a <_strtod_l+0x2aa>
 8005e08:	46be      	mov	lr, r7
 8005e0a:	e7c8      	b.n	8005d9e <_strtod_l+0x2ce>
 8005e0c:	2b69      	cmp	r3, #105	; 0x69
 8005e0e:	d0de      	beq.n	8005dce <_strtod_l+0x2fe>
 8005e10:	2b6e      	cmp	r3, #110	; 0x6e
 8005e12:	f47f aeba 	bne.w	8005b8a <_strtod_l+0xba>
 8005e16:	4990      	ldr	r1, [pc, #576]	; (8006058 <_strtod_l+0x588>)
 8005e18:	a81b      	add	r0, sp, #108	; 0x6c
 8005e1a:	f001 fe7d 	bl	8007b18 <__match>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f43f aeb3 	beq.w	8005b8a <_strtod_l+0xba>
 8005e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b28      	cmp	r3, #40	; 0x28
 8005e2a:	d10e      	bne.n	8005e4a <_strtod_l+0x37a>
 8005e2c:	aa1e      	add	r2, sp, #120	; 0x78
 8005e2e:	498b      	ldr	r1, [pc, #556]	; (800605c <_strtod_l+0x58c>)
 8005e30:	a81b      	add	r0, sp, #108	; 0x6c
 8005e32:	f001 fe85 	bl	8007b40 <__hexnan>
 8005e36:	2805      	cmp	r0, #5
 8005e38:	d107      	bne.n	8005e4a <_strtod_l+0x37a>
 8005e3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e3c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005e40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005e44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005e48:	e681      	b.n	8005b4e <_strtod_l+0x7e>
 8005e4a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006070 <_strtod_l+0x5a0>
 8005e4e:	e7d2      	b.n	8005df6 <_strtod_l+0x326>
 8005e50:	ebae 0302 	sub.w	r3, lr, r2
 8005e54:	9306      	str	r3, [sp, #24]
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	9807      	ldr	r0, [sp, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bf08      	it	eq
 8005e5e:	4623      	moveq	r3, r4
 8005e60:	2c10      	cmp	r4, #16
 8005e62:	9305      	str	r3, [sp, #20]
 8005e64:	46a0      	mov	r8, r4
 8005e66:	bfa8      	it	ge
 8005e68:	f04f 0810 	movge.w	r8, #16
 8005e6c:	f7fa fb4a 	bl	8000504 <__aeabi_ui2d>
 8005e70:	2c09      	cmp	r4, #9
 8005e72:	4682      	mov	sl, r0
 8005e74:	468b      	mov	fp, r1
 8005e76:	dc13      	bgt.n	8005ea0 <_strtod_l+0x3d0>
 8005e78:	9b06      	ldr	r3, [sp, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f43f ae67 	beq.w	8005b4e <_strtod_l+0x7e>
 8005e80:	9b06      	ldr	r3, [sp, #24]
 8005e82:	dd7a      	ble.n	8005f7a <_strtod_l+0x4aa>
 8005e84:	2b16      	cmp	r3, #22
 8005e86:	dc61      	bgt.n	8005f4c <_strtod_l+0x47c>
 8005e88:	4a75      	ldr	r2, [pc, #468]	; (8006060 <_strtod_l+0x590>)
 8005e8a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005e8e:	e9de 0100 	ldrd	r0, r1, [lr]
 8005e92:	4652      	mov	r2, sl
 8005e94:	465b      	mov	r3, fp
 8005e96:	f7fa fbaf 	bl	80005f8 <__aeabi_dmul>
 8005e9a:	4682      	mov	sl, r0
 8005e9c:	468b      	mov	fp, r1
 8005e9e:	e656      	b.n	8005b4e <_strtod_l+0x7e>
 8005ea0:	4b6f      	ldr	r3, [pc, #444]	; (8006060 <_strtod_l+0x590>)
 8005ea2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005ea6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005eaa:	f7fa fba5 	bl	80005f8 <__aeabi_dmul>
 8005eae:	4606      	mov	r6, r0
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	f7fa fb26 	bl	8000504 <__aeabi_ui2d>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa f9e4 	bl	800028c <__adddf3>
 8005ec4:	2c0f      	cmp	r4, #15
 8005ec6:	4682      	mov	sl, r0
 8005ec8:	468b      	mov	fp, r1
 8005eca:	ddd5      	ble.n	8005e78 <_strtod_l+0x3a8>
 8005ecc:	9b06      	ldr	r3, [sp, #24]
 8005ece:	eba4 0808 	sub.w	r8, r4, r8
 8005ed2:	4498      	add	r8, r3
 8005ed4:	f1b8 0f00 	cmp.w	r8, #0
 8005ed8:	f340 8096 	ble.w	8006008 <_strtod_l+0x538>
 8005edc:	f018 030f 	ands.w	r3, r8, #15
 8005ee0:	d00a      	beq.n	8005ef8 <_strtod_l+0x428>
 8005ee2:	495f      	ldr	r1, [pc, #380]	; (8006060 <_strtod_l+0x590>)
 8005ee4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ee8:	4652      	mov	r2, sl
 8005eea:	465b      	mov	r3, fp
 8005eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef0:	f7fa fb82 	bl	80005f8 <__aeabi_dmul>
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	468b      	mov	fp, r1
 8005ef8:	f038 080f 	bics.w	r8, r8, #15
 8005efc:	d073      	beq.n	8005fe6 <_strtod_l+0x516>
 8005efe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005f02:	dd47      	ble.n	8005f94 <_strtod_l+0x4c4>
 8005f04:	2400      	movs	r4, #0
 8005f06:	46a0      	mov	r8, r4
 8005f08:	9407      	str	r4, [sp, #28]
 8005f0a:	9405      	str	r4, [sp, #20]
 8005f0c:	2322      	movs	r3, #34	; 0x22
 8005f0e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006068 <_strtod_l+0x598>
 8005f12:	f8c9 3000 	str.w	r3, [r9]
 8005f16:	f04f 0a00 	mov.w	sl, #0
 8005f1a:	9b07      	ldr	r3, [sp, #28]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f43f ae16 	beq.w	8005b4e <_strtod_l+0x7e>
 8005f22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f24:	4648      	mov	r0, r9
 8005f26:	f001 ff08 	bl	8007d3a <_Bfree>
 8005f2a:	9905      	ldr	r1, [sp, #20]
 8005f2c:	4648      	mov	r0, r9
 8005f2e:	f001 ff04 	bl	8007d3a <_Bfree>
 8005f32:	4641      	mov	r1, r8
 8005f34:	4648      	mov	r0, r9
 8005f36:	f001 ff00 	bl	8007d3a <_Bfree>
 8005f3a:	9907      	ldr	r1, [sp, #28]
 8005f3c:	4648      	mov	r0, r9
 8005f3e:	f001 fefc 	bl	8007d3a <_Bfree>
 8005f42:	4621      	mov	r1, r4
 8005f44:	4648      	mov	r0, r9
 8005f46:	f001 fef8 	bl	8007d3a <_Bfree>
 8005f4a:	e600      	b.n	8005b4e <_strtod_l+0x7e>
 8005f4c:	9a06      	ldr	r2, [sp, #24]
 8005f4e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005f52:	4293      	cmp	r3, r2
 8005f54:	dbba      	blt.n	8005ecc <_strtod_l+0x3fc>
 8005f56:	4d42      	ldr	r5, [pc, #264]	; (8006060 <_strtod_l+0x590>)
 8005f58:	f1c4 040f 	rsb	r4, r4, #15
 8005f5c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005f60:	4652      	mov	r2, sl
 8005f62:	465b      	mov	r3, fp
 8005f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f68:	f7fa fb46 	bl	80005f8 <__aeabi_dmul>
 8005f6c:	9b06      	ldr	r3, [sp, #24]
 8005f6e:	1b1c      	subs	r4, r3, r4
 8005f70:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005f74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f78:	e78d      	b.n	8005e96 <_strtod_l+0x3c6>
 8005f7a:	f113 0f16 	cmn.w	r3, #22
 8005f7e:	dba5      	blt.n	8005ecc <_strtod_l+0x3fc>
 8005f80:	4a37      	ldr	r2, [pc, #220]	; (8006060 <_strtod_l+0x590>)
 8005f82:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005f86:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	f7fa fc5d 	bl	800084c <__aeabi_ddiv>
 8005f92:	e782      	b.n	8005e9a <_strtod_l+0x3ca>
 8005f94:	2300      	movs	r3, #0
 8005f96:	4e33      	ldr	r6, [pc, #204]	; (8006064 <_strtod_l+0x594>)
 8005f98:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	4659      	mov	r1, fp
 8005fa0:	461d      	mov	r5, r3
 8005fa2:	f1b8 0f01 	cmp.w	r8, #1
 8005fa6:	dc21      	bgt.n	8005fec <_strtod_l+0x51c>
 8005fa8:	b10b      	cbz	r3, 8005fae <_strtod_l+0x4de>
 8005faa:	4682      	mov	sl, r0
 8005fac:	468b      	mov	fp, r1
 8005fae:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <_strtod_l+0x594>)
 8005fb0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005fb4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005fb8:	4652      	mov	r2, sl
 8005fba:	465b      	mov	r3, fp
 8005fbc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005fc0:	f7fa fb1a 	bl	80005f8 <__aeabi_dmul>
 8005fc4:	4b28      	ldr	r3, [pc, #160]	; (8006068 <_strtod_l+0x598>)
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	400b      	ands	r3, r1
 8005fca:	4928      	ldr	r1, [pc, #160]	; (800606c <_strtod_l+0x59c>)
 8005fcc:	428b      	cmp	r3, r1
 8005fce:	4682      	mov	sl, r0
 8005fd0:	d898      	bhi.n	8005f04 <_strtod_l+0x434>
 8005fd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005fd6:	428b      	cmp	r3, r1
 8005fd8:	bf86      	itte	hi
 8005fda:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006074 <_strtod_l+0x5a4>
 8005fde:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005fe2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9304      	str	r3, [sp, #16]
 8005fea:	e077      	b.n	80060dc <_strtod_l+0x60c>
 8005fec:	f018 0f01 	tst.w	r8, #1
 8005ff0:	d006      	beq.n	8006000 <_strtod_l+0x530>
 8005ff2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa fafd 	bl	80005f8 <__aeabi_dmul>
 8005ffe:	2301      	movs	r3, #1
 8006000:	3501      	adds	r5, #1
 8006002:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006006:	e7cc      	b.n	8005fa2 <_strtod_l+0x4d2>
 8006008:	d0ed      	beq.n	8005fe6 <_strtod_l+0x516>
 800600a:	f1c8 0800 	rsb	r8, r8, #0
 800600e:	f018 020f 	ands.w	r2, r8, #15
 8006012:	d00a      	beq.n	800602a <_strtod_l+0x55a>
 8006014:	4b12      	ldr	r3, [pc, #72]	; (8006060 <_strtod_l+0x590>)
 8006016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800601a:	4650      	mov	r0, sl
 800601c:	4659      	mov	r1, fp
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f7fa fc13 	bl	800084c <__aeabi_ddiv>
 8006026:	4682      	mov	sl, r0
 8006028:	468b      	mov	fp, r1
 800602a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800602e:	d0da      	beq.n	8005fe6 <_strtod_l+0x516>
 8006030:	f1b8 0f1f 	cmp.w	r8, #31
 8006034:	dd20      	ble.n	8006078 <_strtod_l+0x5a8>
 8006036:	2400      	movs	r4, #0
 8006038:	46a0      	mov	r8, r4
 800603a:	9407      	str	r4, [sp, #28]
 800603c:	9405      	str	r4, [sp, #20]
 800603e:	2322      	movs	r3, #34	; 0x22
 8006040:	f04f 0a00 	mov.w	sl, #0
 8006044:	f04f 0b00 	mov.w	fp, #0
 8006048:	f8c9 3000 	str.w	r3, [r9]
 800604c:	e765      	b.n	8005f1a <_strtod_l+0x44a>
 800604e:	bf00      	nop
 8006050:	080091e9 	.word	0x080091e9
 8006054:	08009273 	.word	0x08009273
 8006058:	080091f1 	.word	0x080091f1
 800605c:	08009234 	.word	0x08009234
 8006060:	08009318 	.word	0x08009318
 8006064:	080092f0 	.word	0x080092f0
 8006068:	7ff00000 	.word	0x7ff00000
 800606c:	7ca00000 	.word	0x7ca00000
 8006070:	fff80000 	.word	0xfff80000
 8006074:	7fefffff 	.word	0x7fefffff
 8006078:	f018 0310 	ands.w	r3, r8, #16
 800607c:	bf18      	it	ne
 800607e:	236a      	movne	r3, #106	; 0x6a
 8006080:	4da0      	ldr	r5, [pc, #640]	; (8006304 <_strtod_l+0x834>)
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	4650      	mov	r0, sl
 8006086:	4659      	mov	r1, fp
 8006088:	2300      	movs	r3, #0
 800608a:	f1b8 0f00 	cmp.w	r8, #0
 800608e:	f300 810a 	bgt.w	80062a6 <_strtod_l+0x7d6>
 8006092:	b10b      	cbz	r3, 8006098 <_strtod_l+0x5c8>
 8006094:	4682      	mov	sl, r0
 8006096:	468b      	mov	fp, r1
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	b1bb      	cbz	r3, 80060cc <_strtod_l+0x5fc>
 800609c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80060a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	4659      	mov	r1, fp
 80060a8:	dd10      	ble.n	80060cc <_strtod_l+0x5fc>
 80060aa:	2b1f      	cmp	r3, #31
 80060ac:	f340 8107 	ble.w	80062be <_strtod_l+0x7ee>
 80060b0:	2b34      	cmp	r3, #52	; 0x34
 80060b2:	bfde      	ittt	le
 80060b4:	3b20      	suble	r3, #32
 80060b6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80060ba:	fa02 f303 	lslle.w	r3, r2, r3
 80060be:	f04f 0a00 	mov.w	sl, #0
 80060c2:	bfcc      	ite	gt
 80060c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80060c8:	ea03 0b01 	andle.w	fp, r3, r1
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	4650      	mov	r0, sl
 80060d2:	4659      	mov	r1, fp
 80060d4:	f7fa fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d1ac      	bne.n	8006036 <_strtod_l+0x566>
 80060dc:	9b07      	ldr	r3, [sp, #28]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	9a05      	ldr	r2, [sp, #20]
 80060e2:	9908      	ldr	r1, [sp, #32]
 80060e4:	4623      	mov	r3, r4
 80060e6:	4648      	mov	r0, r9
 80060e8:	f001 fe79 	bl	8007dde <__s2b>
 80060ec:	9007      	str	r0, [sp, #28]
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f43f af08 	beq.w	8005f04 <_strtod_l+0x434>
 80060f4:	9a06      	ldr	r2, [sp, #24]
 80060f6:	9b06      	ldr	r3, [sp, #24]
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	f1c3 0300 	rsb	r3, r3, #0
 80060fe:	bfa8      	it	ge
 8006100:	2300      	movge	r3, #0
 8006102:	930e      	str	r3, [sp, #56]	; 0x38
 8006104:	2400      	movs	r4, #0
 8006106:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800610a:	9316      	str	r3, [sp, #88]	; 0x58
 800610c:	46a0      	mov	r8, r4
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	4648      	mov	r0, r9
 8006112:	6859      	ldr	r1, [r3, #4]
 8006114:	f001 fddd 	bl	8007cd2 <_Balloc>
 8006118:	9005      	str	r0, [sp, #20]
 800611a:	2800      	cmp	r0, #0
 800611c:	f43f aef6 	beq.w	8005f0c <_strtod_l+0x43c>
 8006120:	9b07      	ldr	r3, [sp, #28]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	3202      	adds	r2, #2
 8006126:	f103 010c 	add.w	r1, r3, #12
 800612a:	0092      	lsls	r2, r2, #2
 800612c:	300c      	adds	r0, #12
 800612e:	f001 fdc5 	bl	8007cbc <memcpy>
 8006132:	aa1e      	add	r2, sp, #120	; 0x78
 8006134:	a91d      	add	r1, sp, #116	; 0x74
 8006136:	ec4b ab10 	vmov	d0, sl, fp
 800613a:	4648      	mov	r0, r9
 800613c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006140:	f002 f908 	bl	8008354 <__d2b>
 8006144:	901c      	str	r0, [sp, #112]	; 0x70
 8006146:	2800      	cmp	r0, #0
 8006148:	f43f aee0 	beq.w	8005f0c <_strtod_l+0x43c>
 800614c:	2101      	movs	r1, #1
 800614e:	4648      	mov	r0, r9
 8006150:	f001 fed1 	bl	8007ef6 <__i2b>
 8006154:	4680      	mov	r8, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	f43f aed8 	beq.w	8005f0c <_strtod_l+0x43c>
 800615c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800615e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006160:	2e00      	cmp	r6, #0
 8006162:	bfab      	itete	ge
 8006164:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006166:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006168:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800616a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800616c:	bfac      	ite	ge
 800616e:	18f7      	addge	r7, r6, r3
 8006170:	1b9d      	sublt	r5, r3, r6
 8006172:	9b04      	ldr	r3, [sp, #16]
 8006174:	1af6      	subs	r6, r6, r3
 8006176:	4416      	add	r6, r2
 8006178:	4b63      	ldr	r3, [pc, #396]	; (8006308 <_strtod_l+0x838>)
 800617a:	3e01      	subs	r6, #1
 800617c:	429e      	cmp	r6, r3
 800617e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006182:	f280 80af 	bge.w	80062e4 <_strtod_l+0x814>
 8006186:	1b9b      	subs	r3, r3, r6
 8006188:	2b1f      	cmp	r3, #31
 800618a:	eba2 0203 	sub.w	r2, r2, r3
 800618e:	f04f 0101 	mov.w	r1, #1
 8006192:	f300 809b 	bgt.w	80062cc <_strtod_l+0x7fc>
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	930f      	str	r3, [sp, #60]	; 0x3c
 800619c:	2300      	movs	r3, #0
 800619e:	930a      	str	r3, [sp, #40]	; 0x28
 80061a0:	18be      	adds	r6, r7, r2
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	42b7      	cmp	r7, r6
 80061a6:	4415      	add	r5, r2
 80061a8:	441d      	add	r5, r3
 80061aa:	463b      	mov	r3, r7
 80061ac:	bfa8      	it	ge
 80061ae:	4633      	movge	r3, r6
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	bfa8      	it	ge
 80061b4:	462b      	movge	r3, r5
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bfc2      	ittt	gt
 80061ba:	1af6      	subgt	r6, r6, r3
 80061bc:	1aed      	subgt	r5, r5, r3
 80061be:	1aff      	subgt	r7, r7, r3
 80061c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c2:	b1bb      	cbz	r3, 80061f4 <_strtod_l+0x724>
 80061c4:	4641      	mov	r1, r8
 80061c6:	461a      	mov	r2, r3
 80061c8:	4648      	mov	r0, r9
 80061ca:	f001 ff33 	bl	8008034 <__pow5mult>
 80061ce:	4680      	mov	r8, r0
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f43f ae9b 	beq.w	8005f0c <_strtod_l+0x43c>
 80061d6:	4601      	mov	r1, r0
 80061d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80061da:	4648      	mov	r0, r9
 80061dc:	f001 fe94 	bl	8007f08 <__multiply>
 80061e0:	900c      	str	r0, [sp, #48]	; 0x30
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f43f ae92 	beq.w	8005f0c <_strtod_l+0x43c>
 80061e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061ea:	4648      	mov	r0, r9
 80061ec:	f001 fda5 	bl	8007d3a <_Bfree>
 80061f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f2:	931c      	str	r3, [sp, #112]	; 0x70
 80061f4:	2e00      	cmp	r6, #0
 80061f6:	dc7a      	bgt.n	80062ee <_strtod_l+0x81e>
 80061f8:	9b06      	ldr	r3, [sp, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dd08      	ble.n	8006210 <_strtod_l+0x740>
 80061fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006200:	9905      	ldr	r1, [sp, #20]
 8006202:	4648      	mov	r0, r9
 8006204:	f001 ff16 	bl	8008034 <__pow5mult>
 8006208:	9005      	str	r0, [sp, #20]
 800620a:	2800      	cmp	r0, #0
 800620c:	f43f ae7e 	beq.w	8005f0c <_strtod_l+0x43c>
 8006210:	2d00      	cmp	r5, #0
 8006212:	dd08      	ble.n	8006226 <_strtod_l+0x756>
 8006214:	462a      	mov	r2, r5
 8006216:	9905      	ldr	r1, [sp, #20]
 8006218:	4648      	mov	r0, r9
 800621a:	f001 ff59 	bl	80080d0 <__lshift>
 800621e:	9005      	str	r0, [sp, #20]
 8006220:	2800      	cmp	r0, #0
 8006222:	f43f ae73 	beq.w	8005f0c <_strtod_l+0x43c>
 8006226:	2f00      	cmp	r7, #0
 8006228:	dd08      	ble.n	800623c <_strtod_l+0x76c>
 800622a:	4641      	mov	r1, r8
 800622c:	463a      	mov	r2, r7
 800622e:	4648      	mov	r0, r9
 8006230:	f001 ff4e 	bl	80080d0 <__lshift>
 8006234:	4680      	mov	r8, r0
 8006236:	2800      	cmp	r0, #0
 8006238:	f43f ae68 	beq.w	8005f0c <_strtod_l+0x43c>
 800623c:	9a05      	ldr	r2, [sp, #20]
 800623e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006240:	4648      	mov	r0, r9
 8006242:	f001 ffb3 	bl	80081ac <__mdiff>
 8006246:	4604      	mov	r4, r0
 8006248:	2800      	cmp	r0, #0
 800624a:	f43f ae5f 	beq.w	8005f0c <_strtod_l+0x43c>
 800624e:	68c3      	ldr	r3, [r0, #12]
 8006250:	930c      	str	r3, [sp, #48]	; 0x30
 8006252:	2300      	movs	r3, #0
 8006254:	60c3      	str	r3, [r0, #12]
 8006256:	4641      	mov	r1, r8
 8006258:	f001 ff8e 	bl	8008178 <__mcmp>
 800625c:	2800      	cmp	r0, #0
 800625e:	da55      	bge.n	800630c <_strtod_l+0x83c>
 8006260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006262:	b9e3      	cbnz	r3, 800629e <_strtod_l+0x7ce>
 8006264:	f1ba 0f00 	cmp.w	sl, #0
 8006268:	d119      	bne.n	800629e <_strtod_l+0x7ce>
 800626a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800626e:	b9b3      	cbnz	r3, 800629e <_strtod_l+0x7ce>
 8006270:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006274:	0d1b      	lsrs	r3, r3, #20
 8006276:	051b      	lsls	r3, r3, #20
 8006278:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800627c:	d90f      	bls.n	800629e <_strtod_l+0x7ce>
 800627e:	6963      	ldr	r3, [r4, #20]
 8006280:	b913      	cbnz	r3, 8006288 <_strtod_l+0x7b8>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	2b01      	cmp	r3, #1
 8006286:	dd0a      	ble.n	800629e <_strtod_l+0x7ce>
 8006288:	4621      	mov	r1, r4
 800628a:	2201      	movs	r2, #1
 800628c:	4648      	mov	r0, r9
 800628e:	f001 ff1f 	bl	80080d0 <__lshift>
 8006292:	4641      	mov	r1, r8
 8006294:	4604      	mov	r4, r0
 8006296:	f001 ff6f 	bl	8008178 <__mcmp>
 800629a:	2800      	cmp	r0, #0
 800629c:	dc67      	bgt.n	800636e <_strtod_l+0x89e>
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d171      	bne.n	8006388 <_strtod_l+0x8b8>
 80062a4:	e63d      	b.n	8005f22 <_strtod_l+0x452>
 80062a6:	f018 0f01 	tst.w	r8, #1
 80062aa:	d004      	beq.n	80062b6 <_strtod_l+0x7e6>
 80062ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062b0:	f7fa f9a2 	bl	80005f8 <__aeabi_dmul>
 80062b4:	2301      	movs	r3, #1
 80062b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062ba:	3508      	adds	r5, #8
 80062bc:	e6e5      	b.n	800608a <_strtod_l+0x5ba>
 80062be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	ea03 0a0a 	and.w	sl, r3, sl
 80062ca:	e6ff      	b.n	80060cc <_strtod_l+0x5fc>
 80062cc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80062d0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80062d4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80062d8:	36e2      	adds	r6, #226	; 0xe2
 80062da:	fa01 f306 	lsl.w	r3, r1, r6
 80062de:	930a      	str	r3, [sp, #40]	; 0x28
 80062e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80062e2:	e75d      	b.n	80061a0 <_strtod_l+0x6d0>
 80062e4:	2300      	movs	r3, #0
 80062e6:	930a      	str	r3, [sp, #40]	; 0x28
 80062e8:	2301      	movs	r3, #1
 80062ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80062ec:	e758      	b.n	80061a0 <_strtod_l+0x6d0>
 80062ee:	4632      	mov	r2, r6
 80062f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062f2:	4648      	mov	r0, r9
 80062f4:	f001 feec 	bl	80080d0 <__lshift>
 80062f8:	901c      	str	r0, [sp, #112]	; 0x70
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f47f af7c 	bne.w	80061f8 <_strtod_l+0x728>
 8006300:	e604      	b.n	8005f0c <_strtod_l+0x43c>
 8006302:	bf00      	nop
 8006304:	08009248 	.word	0x08009248
 8006308:	fffffc02 	.word	0xfffffc02
 800630c:	465d      	mov	r5, fp
 800630e:	f040 8086 	bne.w	800641e <_strtod_l+0x94e>
 8006312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006318:	b32a      	cbz	r2, 8006366 <_strtod_l+0x896>
 800631a:	4aaf      	ldr	r2, [pc, #700]	; (80065d8 <_strtod_l+0xb08>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d153      	bne.n	80063c8 <_strtod_l+0x8f8>
 8006320:	9b04      	ldr	r3, [sp, #16]
 8006322:	4650      	mov	r0, sl
 8006324:	b1d3      	cbz	r3, 800635c <_strtod_l+0x88c>
 8006326:	4aad      	ldr	r2, [pc, #692]	; (80065dc <_strtod_l+0xb0c>)
 8006328:	402a      	ands	r2, r5
 800632a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800632e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006332:	d816      	bhi.n	8006362 <_strtod_l+0x892>
 8006334:	0d12      	lsrs	r2, r2, #20
 8006336:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	4298      	cmp	r0, r3
 8006340:	d142      	bne.n	80063c8 <_strtod_l+0x8f8>
 8006342:	4ba7      	ldr	r3, [pc, #668]	; (80065e0 <_strtod_l+0xb10>)
 8006344:	429d      	cmp	r5, r3
 8006346:	d102      	bne.n	800634e <_strtod_l+0x87e>
 8006348:	3001      	adds	r0, #1
 800634a:	f43f addf 	beq.w	8005f0c <_strtod_l+0x43c>
 800634e:	4ba3      	ldr	r3, [pc, #652]	; (80065dc <_strtod_l+0xb0c>)
 8006350:	402b      	ands	r3, r5
 8006352:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006356:	f04f 0a00 	mov.w	sl, #0
 800635a:	e7a0      	b.n	800629e <_strtod_l+0x7ce>
 800635c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006360:	e7ed      	b.n	800633e <_strtod_l+0x86e>
 8006362:	460b      	mov	r3, r1
 8006364:	e7eb      	b.n	800633e <_strtod_l+0x86e>
 8006366:	bb7b      	cbnz	r3, 80063c8 <_strtod_l+0x8f8>
 8006368:	f1ba 0f00 	cmp.w	sl, #0
 800636c:	d12c      	bne.n	80063c8 <_strtod_l+0x8f8>
 800636e:	9904      	ldr	r1, [sp, #16]
 8006370:	4a9a      	ldr	r2, [pc, #616]	; (80065dc <_strtod_l+0xb0c>)
 8006372:	465b      	mov	r3, fp
 8006374:	b1f1      	cbz	r1, 80063b4 <_strtod_l+0x8e4>
 8006376:	ea02 010b 	and.w	r1, r2, fp
 800637a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800637e:	dc19      	bgt.n	80063b4 <_strtod_l+0x8e4>
 8006380:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006384:	f77f ae5b 	ble.w	800603e <_strtod_l+0x56e>
 8006388:	4a96      	ldr	r2, [pc, #600]	; (80065e4 <_strtod_l+0xb14>)
 800638a:	2300      	movs	r3, #0
 800638c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006390:	4650      	mov	r0, sl
 8006392:	4659      	mov	r1, fp
 8006394:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006398:	f7fa f92e 	bl	80005f8 <__aeabi_dmul>
 800639c:	4682      	mov	sl, r0
 800639e:	468b      	mov	fp, r1
 80063a0:	2900      	cmp	r1, #0
 80063a2:	f47f adbe 	bne.w	8005f22 <_strtod_l+0x452>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f47f adbb 	bne.w	8005f22 <_strtod_l+0x452>
 80063ac:	2322      	movs	r3, #34	; 0x22
 80063ae:	f8c9 3000 	str.w	r3, [r9]
 80063b2:	e5b6      	b.n	8005f22 <_strtod_l+0x452>
 80063b4:	4013      	ands	r3, r2
 80063b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80063ba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80063be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80063c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80063c6:	e76a      	b.n	800629e <_strtod_l+0x7ce>
 80063c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ca:	b193      	cbz	r3, 80063f2 <_strtod_l+0x922>
 80063cc:	422b      	tst	r3, r5
 80063ce:	f43f af66 	beq.w	800629e <_strtod_l+0x7ce>
 80063d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063d4:	9a04      	ldr	r2, [sp, #16]
 80063d6:	4650      	mov	r0, sl
 80063d8:	4659      	mov	r1, fp
 80063da:	b173      	cbz	r3, 80063fa <_strtod_l+0x92a>
 80063dc:	f7ff fb5c 	bl	8005a98 <sulp>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063e8:	f7f9 ff50 	bl	800028c <__adddf3>
 80063ec:	4682      	mov	sl, r0
 80063ee:	468b      	mov	fp, r1
 80063f0:	e755      	b.n	800629e <_strtod_l+0x7ce>
 80063f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063f4:	ea13 0f0a 	tst.w	r3, sl
 80063f8:	e7e9      	b.n	80063ce <_strtod_l+0x8fe>
 80063fa:	f7ff fb4d 	bl	8005a98 <sulp>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006406:	f7f9 ff3f 	bl	8000288 <__aeabi_dsub>
 800640a:	2200      	movs	r2, #0
 800640c:	2300      	movs	r3, #0
 800640e:	4682      	mov	sl, r0
 8006410:	468b      	mov	fp, r1
 8006412:	f7fa fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 8006416:	2800      	cmp	r0, #0
 8006418:	f47f ae11 	bne.w	800603e <_strtod_l+0x56e>
 800641c:	e73f      	b.n	800629e <_strtod_l+0x7ce>
 800641e:	4641      	mov	r1, r8
 8006420:	4620      	mov	r0, r4
 8006422:	f001 ffe6 	bl	80083f2 <__ratio>
 8006426:	ec57 6b10 	vmov	r6, r7, d0
 800642a:	2200      	movs	r2, #0
 800642c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006430:	ee10 0a10 	vmov	r0, s0
 8006434:	4639      	mov	r1, r7
 8006436:	f7fa fb5b 	bl	8000af0 <__aeabi_dcmple>
 800643a:	2800      	cmp	r0, #0
 800643c:	d077      	beq.n	800652e <_strtod_l+0xa5e>
 800643e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d04a      	beq.n	80064da <_strtod_l+0xa0a>
 8006444:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <_strtod_l+0xb18>)
 8006446:	2200      	movs	r2, #0
 8006448:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800644c:	4f66      	ldr	r7, [pc, #408]	; (80065e8 <_strtod_l+0xb18>)
 800644e:	2600      	movs	r6, #0
 8006450:	4b62      	ldr	r3, [pc, #392]	; (80065dc <_strtod_l+0xb0c>)
 8006452:	402b      	ands	r3, r5
 8006454:	930f      	str	r3, [sp, #60]	; 0x3c
 8006456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006458:	4b64      	ldr	r3, [pc, #400]	; (80065ec <_strtod_l+0xb1c>)
 800645a:	429a      	cmp	r2, r3
 800645c:	f040 80ce 	bne.w	80065fc <_strtod_l+0xb2c>
 8006460:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006464:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006468:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800646c:	ec4b ab10 	vmov	d0, sl, fp
 8006470:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006474:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006478:	f001 fef6 	bl	8008268 <__ulp>
 800647c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006480:	ec53 2b10 	vmov	r2, r3, d0
 8006484:	f7fa f8b8 	bl	80005f8 <__aeabi_dmul>
 8006488:	4652      	mov	r2, sl
 800648a:	465b      	mov	r3, fp
 800648c:	f7f9 fefe 	bl	800028c <__adddf3>
 8006490:	460b      	mov	r3, r1
 8006492:	4952      	ldr	r1, [pc, #328]	; (80065dc <_strtod_l+0xb0c>)
 8006494:	4a56      	ldr	r2, [pc, #344]	; (80065f0 <_strtod_l+0xb20>)
 8006496:	4019      	ands	r1, r3
 8006498:	4291      	cmp	r1, r2
 800649a:	4682      	mov	sl, r0
 800649c:	d95b      	bls.n	8006556 <_strtod_l+0xa86>
 800649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d103      	bne.n	80064b0 <_strtod_l+0x9e0>
 80064a8:	9b08      	ldr	r3, [sp, #32]
 80064aa:	3301      	adds	r3, #1
 80064ac:	f43f ad2e 	beq.w	8005f0c <_strtod_l+0x43c>
 80064b0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80065e0 <_strtod_l+0xb10>
 80064b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80064b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064ba:	4648      	mov	r0, r9
 80064bc:	f001 fc3d 	bl	8007d3a <_Bfree>
 80064c0:	9905      	ldr	r1, [sp, #20]
 80064c2:	4648      	mov	r0, r9
 80064c4:	f001 fc39 	bl	8007d3a <_Bfree>
 80064c8:	4641      	mov	r1, r8
 80064ca:	4648      	mov	r0, r9
 80064cc:	f001 fc35 	bl	8007d3a <_Bfree>
 80064d0:	4621      	mov	r1, r4
 80064d2:	4648      	mov	r0, r9
 80064d4:	f001 fc31 	bl	8007d3a <_Bfree>
 80064d8:	e619      	b.n	800610e <_strtod_l+0x63e>
 80064da:	f1ba 0f00 	cmp.w	sl, #0
 80064de:	d11a      	bne.n	8006516 <_strtod_l+0xa46>
 80064e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064e4:	b9eb      	cbnz	r3, 8006522 <_strtod_l+0xa52>
 80064e6:	2200      	movs	r2, #0
 80064e8:	4b3f      	ldr	r3, [pc, #252]	; (80065e8 <_strtod_l+0xb18>)
 80064ea:	4630      	mov	r0, r6
 80064ec:	4639      	mov	r1, r7
 80064ee:	f7fa faf5 	bl	8000adc <__aeabi_dcmplt>
 80064f2:	b9c8      	cbnz	r0, 8006528 <_strtod_l+0xa58>
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	2200      	movs	r2, #0
 80064fa:	4b3e      	ldr	r3, [pc, #248]	; (80065f4 <_strtod_l+0xb24>)
 80064fc:	f7fa f87c 	bl	80005f8 <__aeabi_dmul>
 8006500:	4606      	mov	r6, r0
 8006502:	460f      	mov	r7, r1
 8006504:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006508:	9618      	str	r6, [sp, #96]	; 0x60
 800650a:	9319      	str	r3, [sp, #100]	; 0x64
 800650c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006510:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006514:	e79c      	b.n	8006450 <_strtod_l+0x980>
 8006516:	f1ba 0f01 	cmp.w	sl, #1
 800651a:	d102      	bne.n	8006522 <_strtod_l+0xa52>
 800651c:	2d00      	cmp	r5, #0
 800651e:	f43f ad8e 	beq.w	800603e <_strtod_l+0x56e>
 8006522:	2200      	movs	r2, #0
 8006524:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <_strtod_l+0xb28>)
 8006526:	e78f      	b.n	8006448 <_strtod_l+0x978>
 8006528:	2600      	movs	r6, #0
 800652a:	4f32      	ldr	r7, [pc, #200]	; (80065f4 <_strtod_l+0xb24>)
 800652c:	e7ea      	b.n	8006504 <_strtod_l+0xa34>
 800652e:	4b31      	ldr	r3, [pc, #196]	; (80065f4 <_strtod_l+0xb24>)
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	2200      	movs	r2, #0
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800653c:	4606      	mov	r6, r0
 800653e:	460f      	mov	r7, r1
 8006540:	b933      	cbnz	r3, 8006550 <_strtod_l+0xa80>
 8006542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006546:	9010      	str	r0, [sp, #64]	; 0x40
 8006548:	9311      	str	r3, [sp, #68]	; 0x44
 800654a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800654e:	e7df      	b.n	8006510 <_strtod_l+0xa40>
 8006550:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006554:	e7f9      	b.n	800654a <_strtod_l+0xa7a>
 8006556:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800655a:	9b04      	ldr	r3, [sp, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ab      	bne.n	80064b8 <_strtod_l+0x9e8>
 8006560:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006564:	0d1b      	lsrs	r3, r3, #20
 8006566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006568:	051b      	lsls	r3, r3, #20
 800656a:	429a      	cmp	r2, r3
 800656c:	465d      	mov	r5, fp
 800656e:	d1a3      	bne.n	80064b8 <_strtod_l+0x9e8>
 8006570:	4639      	mov	r1, r7
 8006572:	4630      	mov	r0, r6
 8006574:	f7fa faf0 	bl	8000b58 <__aeabi_d2iz>
 8006578:	f7f9 ffd4 	bl	8000524 <__aeabi_i2d>
 800657c:	460b      	mov	r3, r1
 800657e:	4602      	mov	r2, r0
 8006580:	4639      	mov	r1, r7
 8006582:	4630      	mov	r0, r6
 8006584:	f7f9 fe80 	bl	8000288 <__aeabi_dsub>
 8006588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	b933      	cbnz	r3, 800659e <_strtod_l+0xace>
 8006590:	f1ba 0f00 	cmp.w	sl, #0
 8006594:	d103      	bne.n	800659e <_strtod_l+0xace>
 8006596:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800659a:	2d00      	cmp	r5, #0
 800659c:	d06d      	beq.n	800667a <_strtod_l+0xbaa>
 800659e:	a30a      	add	r3, pc, #40	; (adr r3, 80065c8 <_strtod_l+0xaf8>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	4630      	mov	r0, r6
 80065a6:	4639      	mov	r1, r7
 80065a8:	f7fa fa98 	bl	8000adc <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f47f acb8 	bne.w	8005f22 <_strtod_l+0x452>
 80065b2:	a307      	add	r3, pc, #28	; (adr r3, 80065d0 <_strtod_l+0xb00>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f7fa faac 	bl	8000b18 <__aeabi_dcmpgt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f43f af79 	beq.w	80064b8 <_strtod_l+0x9e8>
 80065c6:	e4ac      	b.n	8005f22 <_strtod_l+0x452>
 80065c8:	94a03595 	.word	0x94a03595
 80065cc:	3fdfffff 	.word	0x3fdfffff
 80065d0:	35afe535 	.word	0x35afe535
 80065d4:	3fe00000 	.word	0x3fe00000
 80065d8:	000fffff 	.word	0x000fffff
 80065dc:	7ff00000 	.word	0x7ff00000
 80065e0:	7fefffff 	.word	0x7fefffff
 80065e4:	39500000 	.word	0x39500000
 80065e8:	3ff00000 	.word	0x3ff00000
 80065ec:	7fe00000 	.word	0x7fe00000
 80065f0:	7c9fffff 	.word	0x7c9fffff
 80065f4:	3fe00000 	.word	0x3fe00000
 80065f8:	bff00000 	.word	0xbff00000
 80065fc:	9b04      	ldr	r3, [sp, #16]
 80065fe:	b333      	cbz	r3, 800664e <_strtod_l+0xb7e>
 8006600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006602:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006606:	d822      	bhi.n	800664e <_strtod_l+0xb7e>
 8006608:	a327      	add	r3, pc, #156	; (adr r3, 80066a8 <_strtod_l+0xbd8>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	4630      	mov	r0, r6
 8006610:	4639      	mov	r1, r7
 8006612:	f7fa fa6d 	bl	8000af0 <__aeabi_dcmple>
 8006616:	b1a0      	cbz	r0, 8006642 <_strtod_l+0xb72>
 8006618:	4639      	mov	r1, r7
 800661a:	4630      	mov	r0, r6
 800661c:	f7fa fac4 	bl	8000ba8 <__aeabi_d2uiz>
 8006620:	2800      	cmp	r0, #0
 8006622:	bf08      	it	eq
 8006624:	2001      	moveq	r0, #1
 8006626:	f7f9 ff6d 	bl	8000504 <__aeabi_ui2d>
 800662a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	bb03      	cbnz	r3, 8006674 <_strtod_l+0xba4>
 8006632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006636:	9012      	str	r0, [sp, #72]	; 0x48
 8006638:	9313      	str	r3, [sp, #76]	; 0x4c
 800663a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800663e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006644:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006646:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	930b      	str	r3, [sp, #44]	; 0x2c
 800664e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006652:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006656:	f001 fe07 	bl	8008268 <__ulp>
 800665a:	4650      	mov	r0, sl
 800665c:	ec53 2b10 	vmov	r2, r3, d0
 8006660:	4659      	mov	r1, fp
 8006662:	f7f9 ffc9 	bl	80005f8 <__aeabi_dmul>
 8006666:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800666a:	f7f9 fe0f 	bl	800028c <__adddf3>
 800666e:	4682      	mov	sl, r0
 8006670:	468b      	mov	fp, r1
 8006672:	e772      	b.n	800655a <_strtod_l+0xa8a>
 8006674:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006678:	e7df      	b.n	800663a <_strtod_l+0xb6a>
 800667a:	a30d      	add	r3, pc, #52	; (adr r3, 80066b0 <_strtod_l+0xbe0>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7fa fa2c 	bl	8000adc <__aeabi_dcmplt>
 8006684:	e79c      	b.n	80065c0 <_strtod_l+0xaf0>
 8006686:	2300      	movs	r3, #0
 8006688:	930d      	str	r3, [sp, #52]	; 0x34
 800668a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800668c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	f7ff ba61 	b.w	8005b56 <_strtod_l+0x86>
 8006694:	2b65      	cmp	r3, #101	; 0x65
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f43f ab4e 	beq.w	8005d3a <_strtod_l+0x26a>
 800669e:	2101      	movs	r1, #1
 80066a0:	4614      	mov	r4, r2
 80066a2:	9104      	str	r1, [sp, #16]
 80066a4:	f7ff bacb 	b.w	8005c3e <_strtod_l+0x16e>
 80066a8:	ffc00000 	.word	0xffc00000
 80066ac:	41dfffff 	.word	0x41dfffff
 80066b0:	94a03595 	.word	0x94a03595
 80066b4:	3fcfffff 	.word	0x3fcfffff

080066b8 <_strtod_r>:
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <_strtod_r+0x18>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	b410      	push	{r4}
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	4c04      	ldr	r4, [pc, #16]	; (80066d4 <_strtod_r+0x1c>)
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf08      	it	eq
 80066c6:	4623      	moveq	r3, r4
 80066c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066cc:	f7ff ba00 	b.w	8005ad0 <_strtod_l>
 80066d0:	2000000c 	.word	0x2000000c
 80066d4:	20000070 	.word	0x20000070

080066d8 <_strtol_l.isra.0>:
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	4680      	mov	r8, r0
 80066de:	4689      	mov	r9, r1
 80066e0:	4692      	mov	sl, r2
 80066e2:	461e      	mov	r6, r3
 80066e4:	460f      	mov	r7, r1
 80066e6:	463d      	mov	r5, r7
 80066e8:	9808      	ldr	r0, [sp, #32]
 80066ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066ee:	f001 fab7 	bl	8007c60 <__locale_ctype_ptr_l>
 80066f2:	4420      	add	r0, r4
 80066f4:	7843      	ldrb	r3, [r0, #1]
 80066f6:	f013 0308 	ands.w	r3, r3, #8
 80066fa:	d132      	bne.n	8006762 <_strtol_l.isra.0+0x8a>
 80066fc:	2c2d      	cmp	r4, #45	; 0x2d
 80066fe:	d132      	bne.n	8006766 <_strtol_l.isra.0+0x8e>
 8006700:	787c      	ldrb	r4, [r7, #1]
 8006702:	1cbd      	adds	r5, r7, #2
 8006704:	2201      	movs	r2, #1
 8006706:	2e00      	cmp	r6, #0
 8006708:	d05d      	beq.n	80067c6 <_strtol_l.isra.0+0xee>
 800670a:	2e10      	cmp	r6, #16
 800670c:	d109      	bne.n	8006722 <_strtol_l.isra.0+0x4a>
 800670e:	2c30      	cmp	r4, #48	; 0x30
 8006710:	d107      	bne.n	8006722 <_strtol_l.isra.0+0x4a>
 8006712:	782b      	ldrb	r3, [r5, #0]
 8006714:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006718:	2b58      	cmp	r3, #88	; 0x58
 800671a:	d14f      	bne.n	80067bc <_strtol_l.isra.0+0xe4>
 800671c:	786c      	ldrb	r4, [r5, #1]
 800671e:	2610      	movs	r6, #16
 8006720:	3502      	adds	r5, #2
 8006722:	2a00      	cmp	r2, #0
 8006724:	bf14      	ite	ne
 8006726:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800672a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800672e:	2700      	movs	r7, #0
 8006730:	fbb1 fcf6 	udiv	ip, r1, r6
 8006734:	4638      	mov	r0, r7
 8006736:	fb06 1e1c 	mls	lr, r6, ip, r1
 800673a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800673e:	2b09      	cmp	r3, #9
 8006740:	d817      	bhi.n	8006772 <_strtol_l.isra.0+0x9a>
 8006742:	461c      	mov	r4, r3
 8006744:	42a6      	cmp	r6, r4
 8006746:	dd23      	ble.n	8006790 <_strtol_l.isra.0+0xb8>
 8006748:	1c7b      	adds	r3, r7, #1
 800674a:	d007      	beq.n	800675c <_strtol_l.isra.0+0x84>
 800674c:	4584      	cmp	ip, r0
 800674e:	d31c      	bcc.n	800678a <_strtol_l.isra.0+0xb2>
 8006750:	d101      	bne.n	8006756 <_strtol_l.isra.0+0x7e>
 8006752:	45a6      	cmp	lr, r4
 8006754:	db19      	blt.n	800678a <_strtol_l.isra.0+0xb2>
 8006756:	fb00 4006 	mla	r0, r0, r6, r4
 800675a:	2701      	movs	r7, #1
 800675c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006760:	e7eb      	b.n	800673a <_strtol_l.isra.0+0x62>
 8006762:	462f      	mov	r7, r5
 8006764:	e7bf      	b.n	80066e6 <_strtol_l.isra.0+0xe>
 8006766:	2c2b      	cmp	r4, #43	; 0x2b
 8006768:	bf04      	itt	eq
 800676a:	1cbd      	addeq	r5, r7, #2
 800676c:	787c      	ldrbeq	r4, [r7, #1]
 800676e:	461a      	mov	r2, r3
 8006770:	e7c9      	b.n	8006706 <_strtol_l.isra.0+0x2e>
 8006772:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006776:	2b19      	cmp	r3, #25
 8006778:	d801      	bhi.n	800677e <_strtol_l.isra.0+0xa6>
 800677a:	3c37      	subs	r4, #55	; 0x37
 800677c:	e7e2      	b.n	8006744 <_strtol_l.isra.0+0x6c>
 800677e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006782:	2b19      	cmp	r3, #25
 8006784:	d804      	bhi.n	8006790 <_strtol_l.isra.0+0xb8>
 8006786:	3c57      	subs	r4, #87	; 0x57
 8006788:	e7dc      	b.n	8006744 <_strtol_l.isra.0+0x6c>
 800678a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800678e:	e7e5      	b.n	800675c <_strtol_l.isra.0+0x84>
 8006790:	1c7b      	adds	r3, r7, #1
 8006792:	d108      	bne.n	80067a6 <_strtol_l.isra.0+0xce>
 8006794:	2322      	movs	r3, #34	; 0x22
 8006796:	f8c8 3000 	str.w	r3, [r8]
 800679a:	4608      	mov	r0, r1
 800679c:	f1ba 0f00 	cmp.w	sl, #0
 80067a0:	d107      	bne.n	80067b2 <_strtol_l.isra.0+0xda>
 80067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a6:	b102      	cbz	r2, 80067aa <_strtol_l.isra.0+0xd2>
 80067a8:	4240      	negs	r0, r0
 80067aa:	f1ba 0f00 	cmp.w	sl, #0
 80067ae:	d0f8      	beq.n	80067a2 <_strtol_l.isra.0+0xca>
 80067b0:	b10f      	cbz	r7, 80067b6 <_strtol_l.isra.0+0xde>
 80067b2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80067b6:	f8ca 9000 	str.w	r9, [sl]
 80067ba:	e7f2      	b.n	80067a2 <_strtol_l.isra.0+0xca>
 80067bc:	2430      	movs	r4, #48	; 0x30
 80067be:	2e00      	cmp	r6, #0
 80067c0:	d1af      	bne.n	8006722 <_strtol_l.isra.0+0x4a>
 80067c2:	2608      	movs	r6, #8
 80067c4:	e7ad      	b.n	8006722 <_strtol_l.isra.0+0x4a>
 80067c6:	2c30      	cmp	r4, #48	; 0x30
 80067c8:	d0a3      	beq.n	8006712 <_strtol_l.isra.0+0x3a>
 80067ca:	260a      	movs	r6, #10
 80067cc:	e7a9      	b.n	8006722 <_strtol_l.isra.0+0x4a>
	...

080067d0 <_strtol_r>:
 80067d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067d2:	4c06      	ldr	r4, [pc, #24]	; (80067ec <_strtol_r+0x1c>)
 80067d4:	4d06      	ldr	r5, [pc, #24]	; (80067f0 <_strtol_r+0x20>)
 80067d6:	6824      	ldr	r4, [r4, #0]
 80067d8:	6a24      	ldr	r4, [r4, #32]
 80067da:	2c00      	cmp	r4, #0
 80067dc:	bf08      	it	eq
 80067de:	462c      	moveq	r4, r5
 80067e0:	9400      	str	r4, [sp, #0]
 80067e2:	f7ff ff79 	bl	80066d8 <_strtol_l.isra.0>
 80067e6:	b003      	add	sp, #12
 80067e8:	bd30      	pop	{r4, r5, pc}
 80067ea:	bf00      	nop
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	20000070 	.word	0x20000070

080067f4 <quorem>:
 80067f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	6903      	ldr	r3, [r0, #16]
 80067fa:	690c      	ldr	r4, [r1, #16]
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	4680      	mov	r8, r0
 8006800:	f2c0 8082 	blt.w	8006908 <quorem+0x114>
 8006804:	3c01      	subs	r4, #1
 8006806:	f101 0714 	add.w	r7, r1, #20
 800680a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800680e:	f100 0614 	add.w	r6, r0, #20
 8006812:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006816:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800681a:	eb06 030c 	add.w	r3, r6, ip
 800681e:	3501      	adds	r5, #1
 8006820:	eb07 090c 	add.w	r9, r7, ip
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	fbb0 f5f5 	udiv	r5, r0, r5
 800682a:	b395      	cbz	r5, 8006892 <quorem+0x9e>
 800682c:	f04f 0a00 	mov.w	sl, #0
 8006830:	4638      	mov	r0, r7
 8006832:	46b6      	mov	lr, r6
 8006834:	46d3      	mov	fp, sl
 8006836:	f850 2b04 	ldr.w	r2, [r0], #4
 800683a:	b293      	uxth	r3, r2
 800683c:	fb05 a303 	mla	r3, r5, r3, sl
 8006840:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006844:	b29b      	uxth	r3, r3
 8006846:	ebab 0303 	sub.w	r3, fp, r3
 800684a:	0c12      	lsrs	r2, r2, #16
 800684c:	f8de b000 	ldr.w	fp, [lr]
 8006850:	fb05 a202 	mla	r2, r5, r2, sl
 8006854:	fa13 f38b 	uxtah	r3, r3, fp
 8006858:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800685c:	fa1f fb82 	uxth.w	fp, r2
 8006860:	f8de 2000 	ldr.w	r2, [lr]
 8006864:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800686c:	b29b      	uxth	r3, r3
 800686e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006872:	4581      	cmp	r9, r0
 8006874:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006878:	f84e 3b04 	str.w	r3, [lr], #4
 800687c:	d2db      	bcs.n	8006836 <quorem+0x42>
 800687e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006882:	b933      	cbnz	r3, 8006892 <quorem+0x9e>
 8006884:	9b01      	ldr	r3, [sp, #4]
 8006886:	3b04      	subs	r3, #4
 8006888:	429e      	cmp	r6, r3
 800688a:	461a      	mov	r2, r3
 800688c:	d330      	bcc.n	80068f0 <quorem+0xfc>
 800688e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006892:	4640      	mov	r0, r8
 8006894:	f001 fc70 	bl	8008178 <__mcmp>
 8006898:	2800      	cmp	r0, #0
 800689a:	db25      	blt.n	80068e8 <quorem+0xf4>
 800689c:	3501      	adds	r5, #1
 800689e:	4630      	mov	r0, r6
 80068a0:	f04f 0c00 	mov.w	ip, #0
 80068a4:	f857 2b04 	ldr.w	r2, [r7], #4
 80068a8:	f8d0 e000 	ldr.w	lr, [r0]
 80068ac:	b293      	uxth	r3, r2
 80068ae:	ebac 0303 	sub.w	r3, ip, r3
 80068b2:	0c12      	lsrs	r2, r2, #16
 80068b4:	fa13 f38e 	uxtah	r3, r3, lr
 80068b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c6:	45b9      	cmp	r9, r7
 80068c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068cc:	f840 3b04 	str.w	r3, [r0], #4
 80068d0:	d2e8      	bcs.n	80068a4 <quorem+0xb0>
 80068d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80068d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80068da:	b92a      	cbnz	r2, 80068e8 <quorem+0xf4>
 80068dc:	3b04      	subs	r3, #4
 80068de:	429e      	cmp	r6, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	d30b      	bcc.n	80068fc <quorem+0x108>
 80068e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80068e8:	4628      	mov	r0, r5
 80068ea:	b003      	add	sp, #12
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	3b04      	subs	r3, #4
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	d1ca      	bne.n	800688e <quorem+0x9a>
 80068f8:	3c01      	subs	r4, #1
 80068fa:	e7c5      	b.n	8006888 <quorem+0x94>
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	3b04      	subs	r3, #4
 8006900:	2a00      	cmp	r2, #0
 8006902:	d1ef      	bne.n	80068e4 <quorem+0xf0>
 8006904:	3c01      	subs	r4, #1
 8006906:	e7ea      	b.n	80068de <quorem+0xea>
 8006908:	2000      	movs	r0, #0
 800690a:	e7ee      	b.n	80068ea <quorem+0xf6>
 800690c:	0000      	movs	r0, r0
	...

08006910 <_dtoa_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ec57 6b10 	vmov	r6, r7, d0
 8006918:	b097      	sub	sp, #92	; 0x5c
 800691a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800691c:	9106      	str	r1, [sp, #24]
 800691e:	4604      	mov	r4, r0
 8006920:	920b      	str	r2, [sp, #44]	; 0x2c
 8006922:	9312      	str	r3, [sp, #72]	; 0x48
 8006924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006928:	e9cd 6700 	strd	r6, r7, [sp]
 800692c:	b93d      	cbnz	r5, 800693e <_dtoa_r+0x2e>
 800692e:	2010      	movs	r0, #16
 8006930:	f001 f9aa 	bl	8007c88 <malloc>
 8006934:	6260      	str	r0, [r4, #36]	; 0x24
 8006936:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800693a:	6005      	str	r5, [r0, #0]
 800693c:	60c5      	str	r5, [r0, #12]
 800693e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	b151      	cbz	r1, 800695a <_dtoa_r+0x4a>
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	604a      	str	r2, [r1, #4]
 8006948:	2301      	movs	r3, #1
 800694a:	4093      	lsls	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
 800694e:	4620      	mov	r0, r4
 8006950:	f001 f9f3 	bl	8007d3a <_Bfree>
 8006954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	1e3b      	subs	r3, r7, #0
 800695c:	bfbb      	ittet	lt
 800695e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006962:	9301      	strlt	r3, [sp, #4]
 8006964:	2300      	movge	r3, #0
 8006966:	2201      	movlt	r2, #1
 8006968:	bfac      	ite	ge
 800696a:	f8c8 3000 	strge.w	r3, [r8]
 800696e:	f8c8 2000 	strlt.w	r2, [r8]
 8006972:	4baf      	ldr	r3, [pc, #700]	; (8006c30 <_dtoa_r+0x320>)
 8006974:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006978:	ea33 0308 	bics.w	r3, r3, r8
 800697c:	d114      	bne.n	80069a8 <_dtoa_r+0x98>
 800697e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006980:	f242 730f 	movw	r3, #9999	; 0x270f
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	b923      	cbnz	r3, 8006994 <_dtoa_r+0x84>
 800698a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800698e:	2800      	cmp	r0, #0
 8006990:	f000 8542 	beq.w	8007418 <_dtoa_r+0xb08>
 8006994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006996:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006c44 <_dtoa_r+0x334>
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8544 	beq.w	8007428 <_dtoa_r+0xb18>
 80069a0:	f10b 0303 	add.w	r3, fp, #3
 80069a4:	f000 bd3e 	b.w	8007424 <_dtoa_r+0xb14>
 80069a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069ac:	2200      	movs	r2, #0
 80069ae:	2300      	movs	r3, #0
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7fa f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b8:	4681      	mov	r9, r0
 80069ba:	b168      	cbz	r0, 80069d8 <_dtoa_r+0xc8>
 80069bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069be:	2301      	movs	r3, #1
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8524 	beq.w	8007412 <_dtoa_r+0xb02>
 80069ca:	4b9a      	ldr	r3, [pc, #616]	; (8006c34 <_dtoa_r+0x324>)
 80069cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069ce:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	f000 bd28 	b.w	8007428 <_dtoa_r+0xb18>
 80069d8:	aa14      	add	r2, sp, #80	; 0x50
 80069da:	a915      	add	r1, sp, #84	; 0x54
 80069dc:	ec47 6b10 	vmov	d0, r6, r7
 80069e0:	4620      	mov	r0, r4
 80069e2:	f001 fcb7 	bl	8008354 <__d2b>
 80069e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80069ea:	9004      	str	r0, [sp, #16]
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	d07c      	beq.n	8006aea <_dtoa_r+0x1da>
 80069f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80069f8:	46b2      	mov	sl, r6
 80069fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80069fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006a06:	2200      	movs	r2, #0
 8006a08:	4b8b      	ldr	r3, [pc, #556]	; (8006c38 <_dtoa_r+0x328>)
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	f7f9 fc3b 	bl	8000288 <__aeabi_dsub>
 8006a12:	a381      	add	r3, pc, #516	; (adr r3, 8006c18 <_dtoa_r+0x308>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f7f9 fdee 	bl	80005f8 <__aeabi_dmul>
 8006a1c:	a380      	add	r3, pc, #512	; (adr r3, 8006c20 <_dtoa_r+0x310>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fc33 	bl	800028c <__adddf3>
 8006a26:	4606      	mov	r6, r0
 8006a28:	4628      	mov	r0, r5
 8006a2a:	460f      	mov	r7, r1
 8006a2c:	f7f9 fd7a 	bl	8000524 <__aeabi_i2d>
 8006a30:	a37d      	add	r3, pc, #500	; (adr r3, 8006c28 <_dtoa_r+0x318>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fddf 	bl	80005f8 <__aeabi_dmul>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4630      	mov	r0, r6
 8006a40:	4639      	mov	r1, r7
 8006a42:	f7f9 fc23 	bl	800028c <__adddf3>
 8006a46:	4606      	mov	r6, r0
 8006a48:	460f      	mov	r7, r1
 8006a4a:	f7fa f885 	bl	8000b58 <__aeabi_d2iz>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4682      	mov	sl, r0
 8006a52:	2300      	movs	r3, #0
 8006a54:	4630      	mov	r0, r6
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7fa f840 	bl	8000adc <__aeabi_dcmplt>
 8006a5c:	b148      	cbz	r0, 8006a72 <_dtoa_r+0x162>
 8006a5e:	4650      	mov	r0, sl
 8006a60:	f7f9 fd60 	bl	8000524 <__aeabi_i2d>
 8006a64:	4632      	mov	r2, r6
 8006a66:	463b      	mov	r3, r7
 8006a68:	f7fa f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a6c:	b908      	cbnz	r0, 8006a72 <_dtoa_r+0x162>
 8006a6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a72:	f1ba 0f16 	cmp.w	sl, #22
 8006a76:	d859      	bhi.n	8006b2c <_dtoa_r+0x21c>
 8006a78:	4970      	ldr	r1, [pc, #448]	; (8006c3c <_dtoa_r+0x32c>)
 8006a7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a86:	f7fa f847 	bl	8000b18 <__aeabi_dcmpgt>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d050      	beq.n	8006b30 <_dtoa_r+0x220>
 8006a8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a92:	2300      	movs	r3, #0
 8006a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a98:	1b5d      	subs	r5, r3, r5
 8006a9a:	f1b5 0801 	subs.w	r8, r5, #1
 8006a9e:	bf49      	itett	mi
 8006aa0:	f1c5 0301 	rsbmi	r3, r5, #1
 8006aa4:	2300      	movpl	r3, #0
 8006aa6:	9305      	strmi	r3, [sp, #20]
 8006aa8:	f04f 0800 	movmi.w	r8, #0
 8006aac:	bf58      	it	pl
 8006aae:	9305      	strpl	r3, [sp, #20]
 8006ab0:	f1ba 0f00 	cmp.w	sl, #0
 8006ab4:	db3e      	blt.n	8006b34 <_dtoa_r+0x224>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	44d0      	add	r8, sl
 8006aba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	9b06      	ldr	r3, [sp, #24]
 8006ac2:	2b09      	cmp	r3, #9
 8006ac4:	f200 8090 	bhi.w	8006be8 <_dtoa_r+0x2d8>
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	bfc4      	itt	gt
 8006acc:	3b04      	subgt	r3, #4
 8006ace:	9306      	strgt	r3, [sp, #24]
 8006ad0:	9b06      	ldr	r3, [sp, #24]
 8006ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ad6:	bfcc      	ite	gt
 8006ad8:	2500      	movgt	r5, #0
 8006ada:	2501      	movle	r5, #1
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	f200 808f 	bhi.w	8006c00 <_dtoa_r+0x2f0>
 8006ae2:	e8df f003 	tbb	[pc, r3]
 8006ae6:	7f7d      	.short	0x7f7d
 8006ae8:	7131      	.short	0x7131
 8006aea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006aee:	441d      	add	r5, r3
 8006af0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006af4:	2820      	cmp	r0, #32
 8006af6:	dd13      	ble.n	8006b20 <_dtoa_r+0x210>
 8006af8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	fa08 f800 	lsl.w	r8, r8, r0
 8006b02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006b06:	fa23 f000 	lsr.w	r0, r3, r0
 8006b0a:	ea48 0000 	orr.w	r0, r8, r0
 8006b0e:	f7f9 fcf9 	bl	8000504 <__aeabi_ui2d>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4682      	mov	sl, r0
 8006b16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006b1a:	3d01      	subs	r5, #1
 8006b1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b1e:	e772      	b.n	8006a06 <_dtoa_r+0xf6>
 8006b20:	9b00      	ldr	r3, [sp, #0]
 8006b22:	f1c0 0020 	rsb	r0, r0, #32
 8006b26:	fa03 f000 	lsl.w	r0, r3, r0
 8006b2a:	e7f0      	b.n	8006b0e <_dtoa_r+0x1fe>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e7b1      	b.n	8006a94 <_dtoa_r+0x184>
 8006b30:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b32:	e7b0      	b.n	8006a96 <_dtoa_r+0x186>
 8006b34:	9b05      	ldr	r3, [sp, #20]
 8006b36:	eba3 030a 	sub.w	r3, r3, sl
 8006b3a:	9305      	str	r3, [sp, #20]
 8006b3c:	f1ca 0300 	rsb	r3, sl, #0
 8006b40:	9307      	str	r3, [sp, #28]
 8006b42:	2300      	movs	r3, #0
 8006b44:	930e      	str	r3, [sp, #56]	; 0x38
 8006b46:	e7bb      	b.n	8006ac0 <_dtoa_r+0x1b0>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dd59      	ble.n	8006c06 <_dtoa_r+0x2f6>
 8006b52:	9302      	str	r3, [sp, #8]
 8006b54:	4699      	mov	r9, r3
 8006b56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b58:	2200      	movs	r2, #0
 8006b5a:	6072      	str	r2, [r6, #4]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	f102 0014 	add.w	r0, r2, #20
 8006b62:	4298      	cmp	r0, r3
 8006b64:	6871      	ldr	r1, [r6, #4]
 8006b66:	d953      	bls.n	8006c10 <_dtoa_r+0x300>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f001 f8b2 	bl	8007cd2 <_Balloc>
 8006b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	f1b9 0f0e 	cmp.w	r9, #14
 8006b76:	f8d3 b000 	ldr.w	fp, [r3]
 8006b7a:	f200 80e6 	bhi.w	8006d4a <_dtoa_r+0x43a>
 8006b7e:	2d00      	cmp	r5, #0
 8006b80:	f000 80e3 	beq.w	8006d4a <_dtoa_r+0x43a>
 8006b84:	ed9d 7b00 	vldr	d7, [sp]
 8006b88:	f1ba 0f00 	cmp.w	sl, #0
 8006b8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006b90:	dd74      	ble.n	8006c7c <_dtoa_r+0x36c>
 8006b92:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <_dtoa_r+0x32c>)
 8006b94:	f00a 030f 	and.w	r3, sl, #15
 8006b98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b9c:	ed93 7b00 	vldr	d7, [r3]
 8006ba0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006ba4:	06f0      	lsls	r0, r6, #27
 8006ba6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006baa:	d565      	bpl.n	8006c78 <_dtoa_r+0x368>
 8006bac:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <_dtoa_r+0x330>)
 8006bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bb6:	f7f9 fe49 	bl	800084c <__aeabi_ddiv>
 8006bba:	e9cd 0100 	strd	r0, r1, [sp]
 8006bbe:	f006 060f 	and.w	r6, r6, #15
 8006bc2:	2503      	movs	r5, #3
 8006bc4:	4f1e      	ldr	r7, [pc, #120]	; (8006c40 <_dtoa_r+0x330>)
 8006bc6:	e04c      	b.n	8006c62 <_dtoa_r+0x352>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	930a      	str	r3, [sp, #40]	; 0x28
 8006bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bce:	4453      	add	r3, sl
 8006bd0:	f103 0901 	add.w	r9, r3, #1
 8006bd4:	9302      	str	r3, [sp, #8]
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	bfb8      	it	lt
 8006bdc:	2301      	movlt	r3, #1
 8006bde:	e7ba      	b.n	8006b56 <_dtoa_r+0x246>
 8006be0:	2300      	movs	r3, #0
 8006be2:	e7b2      	b.n	8006b4a <_dtoa_r+0x23a>
 8006be4:	2300      	movs	r3, #0
 8006be6:	e7f0      	b.n	8006bca <_dtoa_r+0x2ba>
 8006be8:	2501      	movs	r5, #1
 8006bea:	2300      	movs	r3, #0
 8006bec:	9306      	str	r3, [sp, #24]
 8006bee:	950a      	str	r5, [sp, #40]	; 0x28
 8006bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	4699      	mov	r9, r3
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2312      	movs	r3, #18
 8006bfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bfe:	e7aa      	b.n	8006b56 <_dtoa_r+0x246>
 8006c00:	2301      	movs	r3, #1
 8006c02:	930a      	str	r3, [sp, #40]	; 0x28
 8006c04:	e7f4      	b.n	8006bf0 <_dtoa_r+0x2e0>
 8006c06:	2301      	movs	r3, #1
 8006c08:	9302      	str	r3, [sp, #8]
 8006c0a:	4699      	mov	r9, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	e7f5      	b.n	8006bfc <_dtoa_r+0x2ec>
 8006c10:	3101      	adds	r1, #1
 8006c12:	6071      	str	r1, [r6, #4]
 8006c14:	0052      	lsls	r2, r2, #1
 8006c16:	e7a2      	b.n	8006b5e <_dtoa_r+0x24e>
 8006c18:	636f4361 	.word	0x636f4361
 8006c1c:	3fd287a7 	.word	0x3fd287a7
 8006c20:	8b60c8b3 	.word	0x8b60c8b3
 8006c24:	3fc68a28 	.word	0x3fc68a28
 8006c28:	509f79fb 	.word	0x509f79fb
 8006c2c:	3fd34413 	.word	0x3fd34413
 8006c30:	7ff00000 	.word	0x7ff00000
 8006c34:	080091f5 	.word	0x080091f5
 8006c38:	3ff80000 	.word	0x3ff80000
 8006c3c:	08009318 	.word	0x08009318
 8006c40:	080092f0 	.word	0x080092f0
 8006c44:	08009279 	.word	0x08009279
 8006c48:	07f1      	lsls	r1, r6, #31
 8006c4a:	d508      	bpl.n	8006c5e <_dtoa_r+0x34e>
 8006c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c54:	f7f9 fcd0 	bl	80005f8 <__aeabi_dmul>
 8006c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	1076      	asrs	r6, r6, #1
 8006c60:	3708      	adds	r7, #8
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	d1f0      	bne.n	8006c48 <_dtoa_r+0x338>
 8006c66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c6e:	f7f9 fded 	bl	800084c <__aeabi_ddiv>
 8006c72:	e9cd 0100 	strd	r0, r1, [sp]
 8006c76:	e01a      	b.n	8006cae <_dtoa_r+0x39e>
 8006c78:	2502      	movs	r5, #2
 8006c7a:	e7a3      	b.n	8006bc4 <_dtoa_r+0x2b4>
 8006c7c:	f000 80a0 	beq.w	8006dc0 <_dtoa_r+0x4b0>
 8006c80:	f1ca 0600 	rsb	r6, sl, #0
 8006c84:	4b9f      	ldr	r3, [pc, #636]	; (8006f04 <_dtoa_r+0x5f4>)
 8006c86:	4fa0      	ldr	r7, [pc, #640]	; (8006f08 <_dtoa_r+0x5f8>)
 8006c88:	f006 020f 	and.w	r2, r6, #15
 8006c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c98:	f7f9 fcae 	bl	80005f8 <__aeabi_dmul>
 8006c9c:	e9cd 0100 	strd	r0, r1, [sp]
 8006ca0:	1136      	asrs	r6, r6, #4
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2502      	movs	r5, #2
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	d17f      	bne.n	8006daa <_dtoa_r+0x49a>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e1      	bne.n	8006c72 <_dtoa_r+0x362>
 8006cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8087 	beq.w	8006dc4 <_dtoa_r+0x4b4>
 8006cb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4b93      	ldr	r3, [pc, #588]	; (8006f0c <_dtoa_r+0x5fc>)
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	f7f9 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d07c      	beq.n	8006dc4 <_dtoa_r+0x4b4>
 8006cca:	f1b9 0f00 	cmp.w	r9, #0
 8006cce:	d079      	beq.n	8006dc4 <_dtoa_r+0x4b4>
 8006cd0:	9b02      	ldr	r3, [sp, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd35      	ble.n	8006d42 <_dtoa_r+0x432>
 8006cd6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006cda:	9308      	str	r3, [sp, #32]
 8006cdc:	4639      	mov	r1, r7
 8006cde:	2200      	movs	r2, #0
 8006ce0:	4b8b      	ldr	r3, [pc, #556]	; (8006f10 <_dtoa_r+0x600>)
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7f9 fc88 	bl	80005f8 <__aeabi_dmul>
 8006ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8006cec:	9f02      	ldr	r7, [sp, #8]
 8006cee:	3501      	adds	r5, #1
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f7f9 fc17 	bl	8000524 <__aeabi_i2d>
 8006cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cfa:	f7f9 fc7d 	bl	80005f8 <__aeabi_dmul>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	4b84      	ldr	r3, [pc, #528]	; (8006f14 <_dtoa_r+0x604>)
 8006d02:	f7f9 fac3 	bl	800028c <__adddf3>
 8006d06:	4605      	mov	r5, r0
 8006d08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d0c:	2f00      	cmp	r7, #0
 8006d0e:	d15d      	bne.n	8006dcc <_dtoa_r+0x4bc>
 8006d10:	2200      	movs	r2, #0
 8006d12:	4b81      	ldr	r3, [pc, #516]	; (8006f18 <_dtoa_r+0x608>)
 8006d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d18:	f7f9 fab6 	bl	8000288 <__aeabi_dsub>
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4633      	mov	r3, r6
 8006d20:	e9cd 0100 	strd	r0, r1, [sp]
 8006d24:	f7f9 fef8 	bl	8000b18 <__aeabi_dcmpgt>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f040 8288 	bne.w	800723e <_dtoa_r+0x92e>
 8006d2e:	462a      	mov	r2, r5
 8006d30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d38:	f7f9 fed0 	bl	8000adc <__aeabi_dcmplt>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f040 827c 	bne.w	800723a <_dtoa_r+0x92a>
 8006d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d46:	e9cd 2300 	strd	r2, r3, [sp]
 8006d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f2c0 8150 	blt.w	8006ff2 <_dtoa_r+0x6e2>
 8006d52:	f1ba 0f0e 	cmp.w	sl, #14
 8006d56:	f300 814c 	bgt.w	8006ff2 <_dtoa_r+0x6e2>
 8006d5a:	4b6a      	ldr	r3, [pc, #424]	; (8006f04 <_dtoa_r+0x5f4>)
 8006d5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d60:	ed93 7b00 	vldr	d7, [r3]
 8006d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d6c:	f280 80d8 	bge.w	8006f20 <_dtoa_r+0x610>
 8006d70:	f1b9 0f00 	cmp.w	r9, #0
 8006d74:	f300 80d4 	bgt.w	8006f20 <_dtoa_r+0x610>
 8006d78:	f040 825e 	bne.w	8007238 <_dtoa_r+0x928>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4b66      	ldr	r3, [pc, #408]	; (8006f18 <_dtoa_r+0x608>)
 8006d80:	ec51 0b17 	vmov	r0, r1, d7
 8006d84:	f7f9 fc38 	bl	80005f8 <__aeabi_dmul>
 8006d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d8c:	f7f9 feba 	bl	8000b04 <__aeabi_dcmpge>
 8006d90:	464f      	mov	r7, r9
 8006d92:	464e      	mov	r6, r9
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 8234 	bne.w	8007202 <_dtoa_r+0x8f2>
 8006d9a:	2331      	movs	r3, #49	; 0x31
 8006d9c:	f10b 0501 	add.w	r5, fp, #1
 8006da0:	f88b 3000 	strb.w	r3, [fp]
 8006da4:	f10a 0a01 	add.w	sl, sl, #1
 8006da8:	e22f      	b.n	800720a <_dtoa_r+0x8fa>
 8006daa:	07f2      	lsls	r2, r6, #31
 8006dac:	d505      	bpl.n	8006dba <_dtoa_r+0x4aa>
 8006dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db2:	f7f9 fc21 	bl	80005f8 <__aeabi_dmul>
 8006db6:	3501      	adds	r5, #1
 8006db8:	2301      	movs	r3, #1
 8006dba:	1076      	asrs	r6, r6, #1
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	e772      	b.n	8006ca6 <_dtoa_r+0x396>
 8006dc0:	2502      	movs	r5, #2
 8006dc2:	e774      	b.n	8006cae <_dtoa_r+0x39e>
 8006dc4:	f8cd a020 	str.w	sl, [sp, #32]
 8006dc8:	464f      	mov	r7, r9
 8006dca:	e791      	b.n	8006cf0 <_dtoa_r+0x3e0>
 8006dcc:	4b4d      	ldr	r3, [pc, #308]	; (8006f04 <_dtoa_r+0x5f4>)
 8006dce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d047      	beq.n	8006e6c <_dtoa_r+0x55c>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	2000      	movs	r0, #0
 8006de2:	494e      	ldr	r1, [pc, #312]	; (8006f1c <_dtoa_r+0x60c>)
 8006de4:	f7f9 fd32 	bl	800084c <__aeabi_ddiv>
 8006de8:	462a      	mov	r2, r5
 8006dea:	4633      	mov	r3, r6
 8006dec:	f7f9 fa4c 	bl	8000288 <__aeabi_dsub>
 8006df0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006df4:	465d      	mov	r5, fp
 8006df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dfa:	f7f9 fead 	bl	8000b58 <__aeabi_d2iz>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	f7f9 fb90 	bl	8000524 <__aeabi_i2d>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e0c:	f7f9 fa3c 	bl	8000288 <__aeabi_dsub>
 8006e10:	3630      	adds	r6, #48	; 0x30
 8006e12:	f805 6b01 	strb.w	r6, [r5], #1
 8006e16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8006e1e:	f7f9 fe5d 	bl	8000adc <__aeabi_dcmplt>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d163      	bne.n	8006eee <_dtoa_r+0x5de>
 8006e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	4937      	ldr	r1, [pc, #220]	; (8006f0c <_dtoa_r+0x5fc>)
 8006e2e:	f7f9 fa2b 	bl	8000288 <__aeabi_dsub>
 8006e32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e36:	f7f9 fe51 	bl	8000adc <__aeabi_dcmplt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f040 80b7 	bne.w	8006fae <_dtoa_r+0x69e>
 8006e40:	eba5 030b 	sub.w	r3, r5, fp
 8006e44:	429f      	cmp	r7, r3
 8006e46:	f77f af7c 	ble.w	8006d42 <_dtoa_r+0x432>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	4b30      	ldr	r3, [pc, #192]	; (8006f10 <_dtoa_r+0x600>)
 8006e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e52:	f7f9 fbd1 	bl	80005f8 <__aeabi_dmul>
 8006e56:	2200      	movs	r2, #0
 8006e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e5c:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <_dtoa_r+0x600>)
 8006e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e62:	f7f9 fbc9 	bl	80005f8 <__aeabi_dmul>
 8006e66:	e9cd 0100 	strd	r0, r1, [sp]
 8006e6a:	e7c4      	b.n	8006df6 <_dtoa_r+0x4e6>
 8006e6c:	462a      	mov	r2, r5
 8006e6e:	4633      	mov	r3, r6
 8006e70:	f7f9 fbc2 	bl	80005f8 <__aeabi_dmul>
 8006e74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e78:	eb0b 0507 	add.w	r5, fp, r7
 8006e7c:	465e      	mov	r6, fp
 8006e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e82:	f7f9 fe69 	bl	8000b58 <__aeabi_d2iz>
 8006e86:	4607      	mov	r7, r0
 8006e88:	f7f9 fb4c 	bl	8000524 <__aeabi_i2d>
 8006e8c:	3730      	adds	r7, #48	; 0x30
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e96:	f7f9 f9f7 	bl	8000288 <__aeabi_dsub>
 8006e9a:	f806 7b01 	strb.w	r7, [r6], #1
 8006e9e:	42ae      	cmp	r6, r5
 8006ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	d126      	bne.n	8006ef8 <_dtoa_r+0x5e8>
 8006eaa:	4b1c      	ldr	r3, [pc, #112]	; (8006f1c <_dtoa_r+0x60c>)
 8006eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eb0:	f7f9 f9ec 	bl	800028c <__adddf3>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ebc:	f7f9 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d174      	bne.n	8006fae <_dtoa_r+0x69e>
 8006ec4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ec8:	2000      	movs	r0, #0
 8006eca:	4914      	ldr	r1, [pc, #80]	; (8006f1c <_dtoa_r+0x60c>)
 8006ecc:	f7f9 f9dc 	bl	8000288 <__aeabi_dsub>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ed8:	f7f9 fe00 	bl	8000adc <__aeabi_dcmplt>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f43f af30 	beq.w	8006d42 <_dtoa_r+0x432>
 8006ee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ee6:	2b30      	cmp	r3, #48	; 0x30
 8006ee8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006eec:	d002      	beq.n	8006ef4 <_dtoa_r+0x5e4>
 8006eee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006ef2:	e04a      	b.n	8006f8a <_dtoa_r+0x67a>
 8006ef4:	4615      	mov	r5, r2
 8006ef6:	e7f4      	b.n	8006ee2 <_dtoa_r+0x5d2>
 8006ef8:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <_dtoa_r+0x600>)
 8006efa:	f7f9 fb7d 	bl	80005f8 <__aeabi_dmul>
 8006efe:	e9cd 0100 	strd	r0, r1, [sp]
 8006f02:	e7bc      	b.n	8006e7e <_dtoa_r+0x56e>
 8006f04:	08009318 	.word	0x08009318
 8006f08:	080092f0 	.word	0x080092f0
 8006f0c:	3ff00000 	.word	0x3ff00000
 8006f10:	40240000 	.word	0x40240000
 8006f14:	401c0000 	.word	0x401c0000
 8006f18:	40140000 	.word	0x40140000
 8006f1c:	3fe00000 	.word	0x3fe00000
 8006f20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f24:	465d      	mov	r5, fp
 8006f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 fc8d 	bl	800084c <__aeabi_ddiv>
 8006f32:	f7f9 fe11 	bl	8000b58 <__aeabi_d2iz>
 8006f36:	4680      	mov	r8, r0
 8006f38:	f7f9 faf4 	bl	8000524 <__aeabi_i2d>
 8006f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f40:	f7f9 fb5a 	bl	80005f8 <__aeabi_dmul>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006f50:	f7f9 f99a 	bl	8000288 <__aeabi_dsub>
 8006f54:	f805 6b01 	strb.w	r6, [r5], #1
 8006f58:	eba5 060b 	sub.w	r6, r5, fp
 8006f5c:	45b1      	cmp	r9, r6
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	d139      	bne.n	8006fd8 <_dtoa_r+0x6c8>
 8006f64:	f7f9 f992 	bl	800028c <__adddf3>
 8006f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	460f      	mov	r7, r1
 8006f70:	f7f9 fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 8006f74:	b9c8      	cbnz	r0, 8006faa <_dtoa_r+0x69a>
 8006f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	f7f9 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f82:	b110      	cbz	r0, 8006f8a <_dtoa_r+0x67a>
 8006f84:	f018 0f01 	tst.w	r8, #1
 8006f88:	d10f      	bne.n	8006faa <_dtoa_r+0x69a>
 8006f8a:	9904      	ldr	r1, [sp, #16]
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 fed4 	bl	8007d3a <_Bfree>
 8006f92:	2300      	movs	r3, #0
 8006f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f96:	702b      	strb	r3, [r5, #0]
 8006f98:	f10a 0301 	add.w	r3, sl, #1
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8241 	beq.w	8007428 <_dtoa_r+0xb18>
 8006fa6:	601d      	str	r5, [r3, #0]
 8006fa8:	e23e      	b.n	8007428 <_dtoa_r+0xb18>
 8006faa:	f8cd a020 	str.w	sl, [sp, #32]
 8006fae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fb2:	2a39      	cmp	r2, #57	; 0x39
 8006fb4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006fb8:	d108      	bne.n	8006fcc <_dtoa_r+0x6bc>
 8006fba:	459b      	cmp	fp, r3
 8006fbc:	d10a      	bne.n	8006fd4 <_dtoa_r+0x6c4>
 8006fbe:	9b08      	ldr	r3, [sp, #32]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	9308      	str	r3, [sp, #32]
 8006fc4:	2330      	movs	r3, #48	; 0x30
 8006fc6:	f88b 3000 	strb.w	r3, [fp]
 8006fca:	465b      	mov	r3, fp
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	3201      	adds	r2, #1
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e78c      	b.n	8006eee <_dtoa_r+0x5de>
 8006fd4:	461d      	mov	r5, r3
 8006fd6:	e7ea      	b.n	8006fae <_dtoa_r+0x69e>
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4b9b      	ldr	r3, [pc, #620]	; (8007248 <_dtoa_r+0x938>)
 8006fdc:	f7f9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	460f      	mov	r7, r1
 8006fe8:	f7f9 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d09a      	beq.n	8006f26 <_dtoa_r+0x616>
 8006ff0:	e7cb      	b.n	8006f8a <_dtoa_r+0x67a>
 8006ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ff4:	2a00      	cmp	r2, #0
 8006ff6:	f000 808b 	beq.w	8007110 <_dtoa_r+0x800>
 8006ffa:	9a06      	ldr	r2, [sp, #24]
 8006ffc:	2a01      	cmp	r2, #1
 8006ffe:	dc6e      	bgt.n	80070de <_dtoa_r+0x7ce>
 8007000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007002:	2a00      	cmp	r2, #0
 8007004:	d067      	beq.n	80070d6 <_dtoa_r+0x7c6>
 8007006:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800700a:	9f07      	ldr	r7, [sp, #28]
 800700c:	9d05      	ldr	r5, [sp, #20]
 800700e:	9a05      	ldr	r2, [sp, #20]
 8007010:	2101      	movs	r1, #1
 8007012:	441a      	add	r2, r3
 8007014:	4620      	mov	r0, r4
 8007016:	9205      	str	r2, [sp, #20]
 8007018:	4498      	add	r8, r3
 800701a:	f000 ff6c 	bl	8007ef6 <__i2b>
 800701e:	4606      	mov	r6, r0
 8007020:	2d00      	cmp	r5, #0
 8007022:	dd0c      	ble.n	800703e <_dtoa_r+0x72e>
 8007024:	f1b8 0f00 	cmp.w	r8, #0
 8007028:	dd09      	ble.n	800703e <_dtoa_r+0x72e>
 800702a:	4545      	cmp	r5, r8
 800702c:	9a05      	ldr	r2, [sp, #20]
 800702e:	462b      	mov	r3, r5
 8007030:	bfa8      	it	ge
 8007032:	4643      	movge	r3, r8
 8007034:	1ad2      	subs	r2, r2, r3
 8007036:	9205      	str	r2, [sp, #20]
 8007038:	1aed      	subs	r5, r5, r3
 800703a:	eba8 0803 	sub.w	r8, r8, r3
 800703e:	9b07      	ldr	r3, [sp, #28]
 8007040:	b1eb      	cbz	r3, 800707e <_dtoa_r+0x76e>
 8007042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d067      	beq.n	8007118 <_dtoa_r+0x808>
 8007048:	b18f      	cbz	r7, 800706e <_dtoa_r+0x75e>
 800704a:	4631      	mov	r1, r6
 800704c:	463a      	mov	r2, r7
 800704e:	4620      	mov	r0, r4
 8007050:	f000 fff0 	bl	8008034 <__pow5mult>
 8007054:	9a04      	ldr	r2, [sp, #16]
 8007056:	4601      	mov	r1, r0
 8007058:	4606      	mov	r6, r0
 800705a:	4620      	mov	r0, r4
 800705c:	f000 ff54 	bl	8007f08 <__multiply>
 8007060:	9904      	ldr	r1, [sp, #16]
 8007062:	9008      	str	r0, [sp, #32]
 8007064:	4620      	mov	r0, r4
 8007066:	f000 fe68 	bl	8007d3a <_Bfree>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9b07      	ldr	r3, [sp, #28]
 8007070:	1bda      	subs	r2, r3, r7
 8007072:	d004      	beq.n	800707e <_dtoa_r+0x76e>
 8007074:	9904      	ldr	r1, [sp, #16]
 8007076:	4620      	mov	r0, r4
 8007078:	f000 ffdc 	bl	8008034 <__pow5mult>
 800707c:	9004      	str	r0, [sp, #16]
 800707e:	2101      	movs	r1, #1
 8007080:	4620      	mov	r0, r4
 8007082:	f000 ff38 	bl	8007ef6 <__i2b>
 8007086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007088:	4607      	mov	r7, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 81d0 	beq.w	8007430 <_dtoa_r+0xb20>
 8007090:	461a      	mov	r2, r3
 8007092:	4601      	mov	r1, r0
 8007094:	4620      	mov	r0, r4
 8007096:	f000 ffcd 	bl	8008034 <__pow5mult>
 800709a:	9b06      	ldr	r3, [sp, #24]
 800709c:	2b01      	cmp	r3, #1
 800709e:	4607      	mov	r7, r0
 80070a0:	dc40      	bgt.n	8007124 <_dtoa_r+0x814>
 80070a2:	9b00      	ldr	r3, [sp, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d139      	bne.n	800711c <_dtoa_r+0x80c>
 80070a8:	9b01      	ldr	r3, [sp, #4]
 80070aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d136      	bne.n	8007120 <_dtoa_r+0x810>
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070b8:	0d1b      	lsrs	r3, r3, #20
 80070ba:	051b      	lsls	r3, r3, #20
 80070bc:	b12b      	cbz	r3, 80070ca <_dtoa_r+0x7ba>
 80070be:	9b05      	ldr	r3, [sp, #20]
 80070c0:	3301      	adds	r3, #1
 80070c2:	9305      	str	r3, [sp, #20]
 80070c4:	f108 0801 	add.w	r8, r8, #1
 80070c8:	2301      	movs	r3, #1
 80070ca:	9307      	str	r3, [sp, #28]
 80070cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d12a      	bne.n	8007128 <_dtoa_r+0x818>
 80070d2:	2001      	movs	r0, #1
 80070d4:	e030      	b.n	8007138 <_dtoa_r+0x828>
 80070d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070dc:	e795      	b.n	800700a <_dtoa_r+0x6fa>
 80070de:	9b07      	ldr	r3, [sp, #28]
 80070e0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80070e4:	42bb      	cmp	r3, r7
 80070e6:	bfbf      	itttt	lt
 80070e8:	9b07      	ldrlt	r3, [sp, #28]
 80070ea:	9707      	strlt	r7, [sp, #28]
 80070ec:	1afa      	sublt	r2, r7, r3
 80070ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070f0:	bfbb      	ittet	lt
 80070f2:	189b      	addlt	r3, r3, r2
 80070f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80070f6:	1bdf      	subge	r7, r3, r7
 80070f8:	2700      	movlt	r7, #0
 80070fa:	f1b9 0f00 	cmp.w	r9, #0
 80070fe:	bfb5      	itete	lt
 8007100:	9b05      	ldrlt	r3, [sp, #20]
 8007102:	9d05      	ldrge	r5, [sp, #20]
 8007104:	eba3 0509 	sublt.w	r5, r3, r9
 8007108:	464b      	movge	r3, r9
 800710a:	bfb8      	it	lt
 800710c:	2300      	movlt	r3, #0
 800710e:	e77e      	b.n	800700e <_dtoa_r+0x6fe>
 8007110:	9f07      	ldr	r7, [sp, #28]
 8007112:	9d05      	ldr	r5, [sp, #20]
 8007114:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007116:	e783      	b.n	8007020 <_dtoa_r+0x710>
 8007118:	9a07      	ldr	r2, [sp, #28]
 800711a:	e7ab      	b.n	8007074 <_dtoa_r+0x764>
 800711c:	2300      	movs	r3, #0
 800711e:	e7d4      	b.n	80070ca <_dtoa_r+0x7ba>
 8007120:	9b00      	ldr	r3, [sp, #0]
 8007122:	e7d2      	b.n	80070ca <_dtoa_r+0x7ba>
 8007124:	2300      	movs	r3, #0
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800712e:	6918      	ldr	r0, [r3, #16]
 8007130:	f000 fe93 	bl	8007e5a <__hi0bits>
 8007134:	f1c0 0020 	rsb	r0, r0, #32
 8007138:	4440      	add	r0, r8
 800713a:	f010 001f 	ands.w	r0, r0, #31
 800713e:	d047      	beq.n	80071d0 <_dtoa_r+0x8c0>
 8007140:	f1c0 0320 	rsb	r3, r0, #32
 8007144:	2b04      	cmp	r3, #4
 8007146:	dd3b      	ble.n	80071c0 <_dtoa_r+0x8b0>
 8007148:	9b05      	ldr	r3, [sp, #20]
 800714a:	f1c0 001c 	rsb	r0, r0, #28
 800714e:	4403      	add	r3, r0
 8007150:	9305      	str	r3, [sp, #20]
 8007152:	4405      	add	r5, r0
 8007154:	4480      	add	r8, r0
 8007156:	9b05      	ldr	r3, [sp, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	dd05      	ble.n	8007168 <_dtoa_r+0x858>
 800715c:	461a      	mov	r2, r3
 800715e:	9904      	ldr	r1, [sp, #16]
 8007160:	4620      	mov	r0, r4
 8007162:	f000 ffb5 	bl	80080d0 <__lshift>
 8007166:	9004      	str	r0, [sp, #16]
 8007168:	f1b8 0f00 	cmp.w	r8, #0
 800716c:	dd05      	ble.n	800717a <_dtoa_r+0x86a>
 800716e:	4639      	mov	r1, r7
 8007170:	4642      	mov	r2, r8
 8007172:	4620      	mov	r0, r4
 8007174:	f000 ffac 	bl	80080d0 <__lshift>
 8007178:	4607      	mov	r7, r0
 800717a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800717c:	b353      	cbz	r3, 80071d4 <_dtoa_r+0x8c4>
 800717e:	4639      	mov	r1, r7
 8007180:	9804      	ldr	r0, [sp, #16]
 8007182:	f000 fff9 	bl	8008178 <__mcmp>
 8007186:	2800      	cmp	r0, #0
 8007188:	da24      	bge.n	80071d4 <_dtoa_r+0x8c4>
 800718a:	2300      	movs	r3, #0
 800718c:	220a      	movs	r2, #10
 800718e:	9904      	ldr	r1, [sp, #16]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fde9 	bl	8007d68 <__multadd>
 8007196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007198:	9004      	str	r0, [sp, #16]
 800719a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 814d 	beq.w	800743e <_dtoa_r+0xb2e>
 80071a4:	2300      	movs	r3, #0
 80071a6:	4631      	mov	r1, r6
 80071a8:	220a      	movs	r2, #10
 80071aa:	4620      	mov	r0, r4
 80071ac:	f000 fddc 	bl	8007d68 <__multadd>
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	4606      	mov	r6, r0
 80071b6:	dc4f      	bgt.n	8007258 <_dtoa_r+0x948>
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	dd4c      	ble.n	8007258 <_dtoa_r+0x948>
 80071be:	e011      	b.n	80071e4 <_dtoa_r+0x8d4>
 80071c0:	d0c9      	beq.n	8007156 <_dtoa_r+0x846>
 80071c2:	9a05      	ldr	r2, [sp, #20]
 80071c4:	331c      	adds	r3, #28
 80071c6:	441a      	add	r2, r3
 80071c8:	9205      	str	r2, [sp, #20]
 80071ca:	441d      	add	r5, r3
 80071cc:	4498      	add	r8, r3
 80071ce:	e7c2      	b.n	8007156 <_dtoa_r+0x846>
 80071d0:	4603      	mov	r3, r0
 80071d2:	e7f6      	b.n	80071c2 <_dtoa_r+0x8b2>
 80071d4:	f1b9 0f00 	cmp.w	r9, #0
 80071d8:	dc38      	bgt.n	800724c <_dtoa_r+0x93c>
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	dd35      	ble.n	800724c <_dtoa_r+0x93c>
 80071e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	b963      	cbnz	r3, 8007202 <_dtoa_r+0x8f2>
 80071e8:	4639      	mov	r1, r7
 80071ea:	2205      	movs	r2, #5
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fdbb 	bl	8007d68 <__multadd>
 80071f2:	4601      	mov	r1, r0
 80071f4:	4607      	mov	r7, r0
 80071f6:	9804      	ldr	r0, [sp, #16]
 80071f8:	f000 ffbe 	bl	8008178 <__mcmp>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	f73f adcc 	bgt.w	8006d9a <_dtoa_r+0x48a>
 8007202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007204:	465d      	mov	r5, fp
 8007206:	ea6f 0a03 	mvn.w	sl, r3
 800720a:	f04f 0900 	mov.w	r9, #0
 800720e:	4639      	mov	r1, r7
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fd92 	bl	8007d3a <_Bfree>
 8007216:	2e00      	cmp	r6, #0
 8007218:	f43f aeb7 	beq.w	8006f8a <_dtoa_r+0x67a>
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	d005      	beq.n	800722e <_dtoa_r+0x91e>
 8007222:	45b1      	cmp	r9, r6
 8007224:	d003      	beq.n	800722e <_dtoa_r+0x91e>
 8007226:	4649      	mov	r1, r9
 8007228:	4620      	mov	r0, r4
 800722a:	f000 fd86 	bl	8007d3a <_Bfree>
 800722e:	4631      	mov	r1, r6
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fd82 	bl	8007d3a <_Bfree>
 8007236:	e6a8      	b.n	8006f8a <_dtoa_r+0x67a>
 8007238:	2700      	movs	r7, #0
 800723a:	463e      	mov	r6, r7
 800723c:	e7e1      	b.n	8007202 <_dtoa_r+0x8f2>
 800723e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007242:	463e      	mov	r6, r7
 8007244:	e5a9      	b.n	8006d9a <_dtoa_r+0x48a>
 8007246:	bf00      	nop
 8007248:	40240000 	.word	0x40240000
 800724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80fa 	beq.w	800744c <_dtoa_r+0xb3c>
 8007258:	2d00      	cmp	r5, #0
 800725a:	dd05      	ble.n	8007268 <_dtoa_r+0x958>
 800725c:	4631      	mov	r1, r6
 800725e:	462a      	mov	r2, r5
 8007260:	4620      	mov	r0, r4
 8007262:	f000 ff35 	bl	80080d0 <__lshift>
 8007266:	4606      	mov	r6, r0
 8007268:	9b07      	ldr	r3, [sp, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d04c      	beq.n	8007308 <_dtoa_r+0x9f8>
 800726e:	6871      	ldr	r1, [r6, #4]
 8007270:	4620      	mov	r0, r4
 8007272:	f000 fd2e 	bl	8007cd2 <_Balloc>
 8007276:	6932      	ldr	r2, [r6, #16]
 8007278:	3202      	adds	r2, #2
 800727a:	4605      	mov	r5, r0
 800727c:	0092      	lsls	r2, r2, #2
 800727e:	f106 010c 	add.w	r1, r6, #12
 8007282:	300c      	adds	r0, #12
 8007284:	f000 fd1a 	bl	8007cbc <memcpy>
 8007288:	2201      	movs	r2, #1
 800728a:	4629      	mov	r1, r5
 800728c:	4620      	mov	r0, r4
 800728e:	f000 ff1f 	bl	80080d0 <__lshift>
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	f8cd b014 	str.w	fp, [sp, #20]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	46b1      	mov	r9, r6
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	4606      	mov	r6, r0
 80072a2:	4639      	mov	r1, r7
 80072a4:	9804      	ldr	r0, [sp, #16]
 80072a6:	f7ff faa5 	bl	80067f4 <quorem>
 80072aa:	4649      	mov	r1, r9
 80072ac:	4605      	mov	r5, r0
 80072ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80072b2:	9804      	ldr	r0, [sp, #16]
 80072b4:	f000 ff60 	bl	8008178 <__mcmp>
 80072b8:	4632      	mov	r2, r6
 80072ba:	9000      	str	r0, [sp, #0]
 80072bc:	4639      	mov	r1, r7
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 ff74 	bl	80081ac <__mdiff>
 80072c4:	68c3      	ldr	r3, [r0, #12]
 80072c6:	4602      	mov	r2, r0
 80072c8:	bb03      	cbnz	r3, 800730c <_dtoa_r+0x9fc>
 80072ca:	4601      	mov	r1, r0
 80072cc:	9008      	str	r0, [sp, #32]
 80072ce:	9804      	ldr	r0, [sp, #16]
 80072d0:	f000 ff52 	bl	8008178 <__mcmp>
 80072d4:	9a08      	ldr	r2, [sp, #32]
 80072d6:	4603      	mov	r3, r0
 80072d8:	4611      	mov	r1, r2
 80072da:	4620      	mov	r0, r4
 80072dc:	9308      	str	r3, [sp, #32]
 80072de:	f000 fd2c 	bl	8007d3a <_Bfree>
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	b9a3      	cbnz	r3, 8007310 <_dtoa_r+0xa00>
 80072e6:	9a06      	ldr	r2, [sp, #24]
 80072e8:	b992      	cbnz	r2, 8007310 <_dtoa_r+0xa00>
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	b982      	cbnz	r2, 8007310 <_dtoa_r+0xa00>
 80072ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80072f2:	d029      	beq.n	8007348 <_dtoa_r+0xa38>
 80072f4:	9b00      	ldr	r3, [sp, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dd01      	ble.n	80072fe <_dtoa_r+0x9ee>
 80072fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80072fe:	9b05      	ldr	r3, [sp, #20]
 8007300:	1c5d      	adds	r5, r3, #1
 8007302:	f883 8000 	strb.w	r8, [r3]
 8007306:	e782      	b.n	800720e <_dtoa_r+0x8fe>
 8007308:	4630      	mov	r0, r6
 800730a:	e7c2      	b.n	8007292 <_dtoa_r+0x982>
 800730c:	2301      	movs	r3, #1
 800730e:	e7e3      	b.n	80072d8 <_dtoa_r+0x9c8>
 8007310:	9a00      	ldr	r2, [sp, #0]
 8007312:	2a00      	cmp	r2, #0
 8007314:	db04      	blt.n	8007320 <_dtoa_r+0xa10>
 8007316:	d125      	bne.n	8007364 <_dtoa_r+0xa54>
 8007318:	9a06      	ldr	r2, [sp, #24]
 800731a:	bb1a      	cbnz	r2, 8007364 <_dtoa_r+0xa54>
 800731c:	9a07      	ldr	r2, [sp, #28]
 800731e:	bb0a      	cbnz	r2, 8007364 <_dtoa_r+0xa54>
 8007320:	2b00      	cmp	r3, #0
 8007322:	ddec      	ble.n	80072fe <_dtoa_r+0x9ee>
 8007324:	2201      	movs	r2, #1
 8007326:	9904      	ldr	r1, [sp, #16]
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fed1 	bl	80080d0 <__lshift>
 800732e:	4639      	mov	r1, r7
 8007330:	9004      	str	r0, [sp, #16]
 8007332:	f000 ff21 	bl	8008178 <__mcmp>
 8007336:	2800      	cmp	r0, #0
 8007338:	dc03      	bgt.n	8007342 <_dtoa_r+0xa32>
 800733a:	d1e0      	bne.n	80072fe <_dtoa_r+0x9ee>
 800733c:	f018 0f01 	tst.w	r8, #1
 8007340:	d0dd      	beq.n	80072fe <_dtoa_r+0x9ee>
 8007342:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007346:	d1d8      	bne.n	80072fa <_dtoa_r+0x9ea>
 8007348:	9b05      	ldr	r3, [sp, #20]
 800734a:	9a05      	ldr	r2, [sp, #20]
 800734c:	1c5d      	adds	r5, r3, #1
 800734e:	2339      	movs	r3, #57	; 0x39
 8007350:	7013      	strb	r3, [r2, #0]
 8007352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007356:	2b39      	cmp	r3, #57	; 0x39
 8007358:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800735c:	d04f      	beq.n	80073fe <_dtoa_r+0xaee>
 800735e:	3301      	adds	r3, #1
 8007360:	7013      	strb	r3, [r2, #0]
 8007362:	e754      	b.n	800720e <_dtoa_r+0x8fe>
 8007364:	9a05      	ldr	r2, [sp, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f102 0501 	add.w	r5, r2, #1
 800736c:	dd06      	ble.n	800737c <_dtoa_r+0xa6c>
 800736e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007372:	d0e9      	beq.n	8007348 <_dtoa_r+0xa38>
 8007374:	f108 0801 	add.w	r8, r8, #1
 8007378:	9b05      	ldr	r3, [sp, #20]
 800737a:	e7c2      	b.n	8007302 <_dtoa_r+0x9f2>
 800737c:	9a02      	ldr	r2, [sp, #8]
 800737e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007382:	eba5 030b 	sub.w	r3, r5, fp
 8007386:	4293      	cmp	r3, r2
 8007388:	d021      	beq.n	80073ce <_dtoa_r+0xabe>
 800738a:	2300      	movs	r3, #0
 800738c:	220a      	movs	r2, #10
 800738e:	9904      	ldr	r1, [sp, #16]
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fce9 	bl	8007d68 <__multadd>
 8007396:	45b1      	cmp	r9, r6
 8007398:	9004      	str	r0, [sp, #16]
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	f04f 020a 	mov.w	r2, #10
 80073a2:	4649      	mov	r1, r9
 80073a4:	4620      	mov	r0, r4
 80073a6:	d105      	bne.n	80073b4 <_dtoa_r+0xaa4>
 80073a8:	f000 fcde 	bl	8007d68 <__multadd>
 80073ac:	4681      	mov	r9, r0
 80073ae:	4606      	mov	r6, r0
 80073b0:	9505      	str	r5, [sp, #20]
 80073b2:	e776      	b.n	80072a2 <_dtoa_r+0x992>
 80073b4:	f000 fcd8 	bl	8007d68 <__multadd>
 80073b8:	4631      	mov	r1, r6
 80073ba:	4681      	mov	r9, r0
 80073bc:	2300      	movs	r3, #0
 80073be:	220a      	movs	r2, #10
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fcd1 	bl	8007d68 <__multadd>
 80073c6:	4606      	mov	r6, r0
 80073c8:	e7f2      	b.n	80073b0 <_dtoa_r+0xaa0>
 80073ca:	f04f 0900 	mov.w	r9, #0
 80073ce:	2201      	movs	r2, #1
 80073d0:	9904      	ldr	r1, [sp, #16]
 80073d2:	4620      	mov	r0, r4
 80073d4:	f000 fe7c 	bl	80080d0 <__lshift>
 80073d8:	4639      	mov	r1, r7
 80073da:	9004      	str	r0, [sp, #16]
 80073dc:	f000 fecc 	bl	8008178 <__mcmp>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	dcb6      	bgt.n	8007352 <_dtoa_r+0xa42>
 80073e4:	d102      	bne.n	80073ec <_dtoa_r+0xadc>
 80073e6:	f018 0f01 	tst.w	r8, #1
 80073ea:	d1b2      	bne.n	8007352 <_dtoa_r+0xa42>
 80073ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073f0:	2b30      	cmp	r3, #48	; 0x30
 80073f2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80073f6:	f47f af0a 	bne.w	800720e <_dtoa_r+0x8fe>
 80073fa:	4615      	mov	r5, r2
 80073fc:	e7f6      	b.n	80073ec <_dtoa_r+0xadc>
 80073fe:	4593      	cmp	fp, r2
 8007400:	d105      	bne.n	800740e <_dtoa_r+0xafe>
 8007402:	2331      	movs	r3, #49	; 0x31
 8007404:	f10a 0a01 	add.w	sl, sl, #1
 8007408:	f88b 3000 	strb.w	r3, [fp]
 800740c:	e6ff      	b.n	800720e <_dtoa_r+0x8fe>
 800740e:	4615      	mov	r5, r2
 8007410:	e79f      	b.n	8007352 <_dtoa_r+0xa42>
 8007412:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007478 <_dtoa_r+0xb68>
 8007416:	e007      	b.n	8007428 <_dtoa_r+0xb18>
 8007418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800741a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800747c <_dtoa_r+0xb6c>
 800741e:	b11b      	cbz	r3, 8007428 <_dtoa_r+0xb18>
 8007420:	f10b 0308 	add.w	r3, fp, #8
 8007424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	4658      	mov	r0, fp
 800742a:	b017      	add	sp, #92	; 0x5c
 800742c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007430:	9b06      	ldr	r3, [sp, #24]
 8007432:	2b01      	cmp	r3, #1
 8007434:	f77f ae35 	ble.w	80070a2 <_dtoa_r+0x792>
 8007438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800743a:	9307      	str	r3, [sp, #28]
 800743c:	e649      	b.n	80070d2 <_dtoa_r+0x7c2>
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	dc03      	bgt.n	800744c <_dtoa_r+0xb3c>
 8007444:	9b06      	ldr	r3, [sp, #24]
 8007446:	2b02      	cmp	r3, #2
 8007448:	f73f aecc 	bgt.w	80071e4 <_dtoa_r+0x8d4>
 800744c:	465d      	mov	r5, fp
 800744e:	4639      	mov	r1, r7
 8007450:	9804      	ldr	r0, [sp, #16]
 8007452:	f7ff f9cf 	bl	80067f4 <quorem>
 8007456:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800745a:	f805 8b01 	strb.w	r8, [r5], #1
 800745e:	9a02      	ldr	r2, [sp, #8]
 8007460:	eba5 030b 	sub.w	r3, r5, fp
 8007464:	429a      	cmp	r2, r3
 8007466:	ddb0      	ble.n	80073ca <_dtoa_r+0xaba>
 8007468:	2300      	movs	r3, #0
 800746a:	220a      	movs	r2, #10
 800746c:	9904      	ldr	r1, [sp, #16]
 800746e:	4620      	mov	r0, r4
 8007470:	f000 fc7a 	bl	8007d68 <__multadd>
 8007474:	9004      	str	r0, [sp, #16]
 8007476:	e7ea      	b.n	800744e <_dtoa_r+0xb3e>
 8007478:	080091f4 	.word	0x080091f4
 800747c:	08009270 	.word	0x08009270

08007480 <std>:
 8007480:	2300      	movs	r3, #0
 8007482:	b510      	push	{r4, lr}
 8007484:	4604      	mov	r4, r0
 8007486:	e9c0 3300 	strd	r3, r3, [r0]
 800748a:	6083      	str	r3, [r0, #8]
 800748c:	8181      	strh	r1, [r0, #12]
 800748e:	6643      	str	r3, [r0, #100]	; 0x64
 8007490:	81c2      	strh	r2, [r0, #14]
 8007492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007496:	6183      	str	r3, [r0, #24]
 8007498:	4619      	mov	r1, r3
 800749a:	2208      	movs	r2, #8
 800749c:	305c      	adds	r0, #92	; 0x5c
 800749e:	f7fd fc77 	bl	8004d90 <memset>
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <std+0x38>)
 80074a4:	6263      	str	r3, [r4, #36]	; 0x24
 80074a6:	4b05      	ldr	r3, [pc, #20]	; (80074bc <std+0x3c>)
 80074a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <std+0x40>)
 80074ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <std+0x44>)
 80074b0:	6224      	str	r4, [r4, #32]
 80074b2:	6323      	str	r3, [r4, #48]	; 0x30
 80074b4:	bd10      	pop	{r4, pc}
 80074b6:	bf00      	nop
 80074b8:	08008b81 	.word	0x08008b81
 80074bc:	08008ba3 	.word	0x08008ba3
 80074c0:	08008bdb 	.word	0x08008bdb
 80074c4:	08008bff 	.word	0x08008bff

080074c8 <_cleanup_r>:
 80074c8:	4901      	ldr	r1, [pc, #4]	; (80074d0 <_cleanup_r+0x8>)
 80074ca:	f000 b885 	b.w	80075d8 <_fwalk_reent>
 80074ce:	bf00      	nop
 80074d0:	08008f19 	.word	0x08008f19

080074d4 <__sfmoreglue>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	1e4a      	subs	r2, r1, #1
 80074d8:	2568      	movs	r5, #104	; 0x68
 80074da:	4355      	muls	r5, r2
 80074dc:	460e      	mov	r6, r1
 80074de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074e2:	f001 f851 	bl	8008588 <_malloc_r>
 80074e6:	4604      	mov	r4, r0
 80074e8:	b140      	cbz	r0, 80074fc <__sfmoreglue+0x28>
 80074ea:	2100      	movs	r1, #0
 80074ec:	e9c0 1600 	strd	r1, r6, [r0]
 80074f0:	300c      	adds	r0, #12
 80074f2:	60a0      	str	r0, [r4, #8]
 80074f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074f8:	f7fd fc4a 	bl	8004d90 <memset>
 80074fc:	4620      	mov	r0, r4
 80074fe:	bd70      	pop	{r4, r5, r6, pc}

08007500 <__sinit>:
 8007500:	6983      	ldr	r3, [r0, #24]
 8007502:	b510      	push	{r4, lr}
 8007504:	4604      	mov	r4, r0
 8007506:	bb33      	cbnz	r3, 8007556 <__sinit+0x56>
 8007508:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800750c:	6503      	str	r3, [r0, #80]	; 0x50
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <__sinit+0x58>)
 8007510:	4a12      	ldr	r2, [pc, #72]	; (800755c <__sinit+0x5c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6282      	str	r2, [r0, #40]	; 0x28
 8007516:	4298      	cmp	r0, r3
 8007518:	bf04      	itt	eq
 800751a:	2301      	moveq	r3, #1
 800751c:	6183      	streq	r3, [r0, #24]
 800751e:	f000 f81f 	bl	8007560 <__sfp>
 8007522:	6060      	str	r0, [r4, #4]
 8007524:	4620      	mov	r0, r4
 8007526:	f000 f81b 	bl	8007560 <__sfp>
 800752a:	60a0      	str	r0, [r4, #8]
 800752c:	4620      	mov	r0, r4
 800752e:	f000 f817 	bl	8007560 <__sfp>
 8007532:	2200      	movs	r2, #0
 8007534:	60e0      	str	r0, [r4, #12]
 8007536:	2104      	movs	r1, #4
 8007538:	6860      	ldr	r0, [r4, #4]
 800753a:	f7ff ffa1 	bl	8007480 <std>
 800753e:	2201      	movs	r2, #1
 8007540:	2109      	movs	r1, #9
 8007542:	68a0      	ldr	r0, [r4, #8]
 8007544:	f7ff ff9c 	bl	8007480 <std>
 8007548:	2202      	movs	r2, #2
 800754a:	2112      	movs	r1, #18
 800754c:	68e0      	ldr	r0, [r4, #12]
 800754e:	f7ff ff97 	bl	8007480 <std>
 8007552:	2301      	movs	r3, #1
 8007554:	61a3      	str	r3, [r4, #24]
 8007556:	bd10      	pop	{r4, pc}
 8007558:	080091e0 	.word	0x080091e0
 800755c:	080074c9 	.word	0x080074c9

08007560 <__sfp>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <__sfp+0x70>)
 8007564:	681e      	ldr	r6, [r3, #0]
 8007566:	69b3      	ldr	r3, [r6, #24]
 8007568:	4607      	mov	r7, r0
 800756a:	b913      	cbnz	r3, 8007572 <__sfp+0x12>
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff ffc7 	bl	8007500 <__sinit>
 8007572:	3648      	adds	r6, #72	; 0x48
 8007574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007578:	3b01      	subs	r3, #1
 800757a:	d503      	bpl.n	8007584 <__sfp+0x24>
 800757c:	6833      	ldr	r3, [r6, #0]
 800757e:	b133      	cbz	r3, 800758e <__sfp+0x2e>
 8007580:	6836      	ldr	r6, [r6, #0]
 8007582:	e7f7      	b.n	8007574 <__sfp+0x14>
 8007584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007588:	b16d      	cbz	r5, 80075a6 <__sfp+0x46>
 800758a:	3468      	adds	r4, #104	; 0x68
 800758c:	e7f4      	b.n	8007578 <__sfp+0x18>
 800758e:	2104      	movs	r1, #4
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff ff9f 	bl	80074d4 <__sfmoreglue>
 8007596:	6030      	str	r0, [r6, #0]
 8007598:	2800      	cmp	r0, #0
 800759a:	d1f1      	bne.n	8007580 <__sfp+0x20>
 800759c:	230c      	movs	r3, #12
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	4604      	mov	r4, r0
 80075a2:	4620      	mov	r0, r4
 80075a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <__sfp+0x74>)
 80075a8:	6665      	str	r5, [r4, #100]	; 0x64
 80075aa:	e9c4 5500 	strd	r5, r5, [r4]
 80075ae:	60a5      	str	r5, [r4, #8]
 80075b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80075b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80075b8:	2208      	movs	r2, #8
 80075ba:	4629      	mov	r1, r5
 80075bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075c0:	f7fd fbe6 	bl	8004d90 <memset>
 80075c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075cc:	e7e9      	b.n	80075a2 <__sfp+0x42>
 80075ce:	bf00      	nop
 80075d0:	080091e0 	.word	0x080091e0
 80075d4:	ffff0001 	.word	0xffff0001

080075d8 <_fwalk_reent>:
 80075d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075dc:	4680      	mov	r8, r0
 80075de:	4689      	mov	r9, r1
 80075e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075e4:	2600      	movs	r6, #0
 80075e6:	b914      	cbnz	r4, 80075ee <_fwalk_reent+0x16>
 80075e8:	4630      	mov	r0, r6
 80075ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80075f2:	3f01      	subs	r7, #1
 80075f4:	d501      	bpl.n	80075fa <_fwalk_reent+0x22>
 80075f6:	6824      	ldr	r4, [r4, #0]
 80075f8:	e7f5      	b.n	80075e6 <_fwalk_reent+0xe>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d907      	bls.n	8007610 <_fwalk_reent+0x38>
 8007600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007604:	3301      	adds	r3, #1
 8007606:	d003      	beq.n	8007610 <_fwalk_reent+0x38>
 8007608:	4629      	mov	r1, r5
 800760a:	4640      	mov	r0, r8
 800760c:	47c8      	blx	r9
 800760e:	4306      	orrs	r6, r0
 8007610:	3568      	adds	r5, #104	; 0x68
 8007612:	e7ee      	b.n	80075f2 <_fwalk_reent+0x1a>

08007614 <rshift>:
 8007614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007616:	6906      	ldr	r6, [r0, #16]
 8007618:	114b      	asrs	r3, r1, #5
 800761a:	429e      	cmp	r6, r3
 800761c:	f100 0414 	add.w	r4, r0, #20
 8007620:	dd30      	ble.n	8007684 <rshift+0x70>
 8007622:	f011 011f 	ands.w	r1, r1, #31
 8007626:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800762a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800762e:	d108      	bne.n	8007642 <rshift+0x2e>
 8007630:	4621      	mov	r1, r4
 8007632:	42b2      	cmp	r2, r6
 8007634:	460b      	mov	r3, r1
 8007636:	d211      	bcs.n	800765c <rshift+0x48>
 8007638:	f852 3b04 	ldr.w	r3, [r2], #4
 800763c:	f841 3b04 	str.w	r3, [r1], #4
 8007640:	e7f7      	b.n	8007632 <rshift+0x1e>
 8007642:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007646:	f1c1 0c20 	rsb	ip, r1, #32
 800764a:	40cd      	lsrs	r5, r1
 800764c:	3204      	adds	r2, #4
 800764e:	4623      	mov	r3, r4
 8007650:	42b2      	cmp	r2, r6
 8007652:	4617      	mov	r7, r2
 8007654:	d30c      	bcc.n	8007670 <rshift+0x5c>
 8007656:	601d      	str	r5, [r3, #0]
 8007658:	b105      	cbz	r5, 800765c <rshift+0x48>
 800765a:	3304      	adds	r3, #4
 800765c:	1b1a      	subs	r2, r3, r4
 800765e:	42a3      	cmp	r3, r4
 8007660:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007664:	bf08      	it	eq
 8007666:	2300      	moveq	r3, #0
 8007668:	6102      	str	r2, [r0, #16]
 800766a:	bf08      	it	eq
 800766c:	6143      	streq	r3, [r0, #20]
 800766e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007670:	683f      	ldr	r7, [r7, #0]
 8007672:	fa07 f70c 	lsl.w	r7, r7, ip
 8007676:	433d      	orrs	r5, r7
 8007678:	f843 5b04 	str.w	r5, [r3], #4
 800767c:	f852 5b04 	ldr.w	r5, [r2], #4
 8007680:	40cd      	lsrs	r5, r1
 8007682:	e7e5      	b.n	8007650 <rshift+0x3c>
 8007684:	4623      	mov	r3, r4
 8007686:	e7e9      	b.n	800765c <rshift+0x48>

08007688 <__hexdig_fun>:
 8007688:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800768c:	2b09      	cmp	r3, #9
 800768e:	d802      	bhi.n	8007696 <__hexdig_fun+0xe>
 8007690:	3820      	subs	r0, #32
 8007692:	b2c0      	uxtb	r0, r0
 8007694:	4770      	bx	lr
 8007696:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800769a:	2b05      	cmp	r3, #5
 800769c:	d801      	bhi.n	80076a2 <__hexdig_fun+0x1a>
 800769e:	3847      	subs	r0, #71	; 0x47
 80076a0:	e7f7      	b.n	8007692 <__hexdig_fun+0xa>
 80076a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	d801      	bhi.n	80076ae <__hexdig_fun+0x26>
 80076aa:	3827      	subs	r0, #39	; 0x27
 80076ac:	e7f1      	b.n	8007692 <__hexdig_fun+0xa>
 80076ae:	2000      	movs	r0, #0
 80076b0:	4770      	bx	lr

080076b2 <__gethex>:
 80076b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b6:	b08b      	sub	sp, #44	; 0x2c
 80076b8:	468a      	mov	sl, r1
 80076ba:	9002      	str	r0, [sp, #8]
 80076bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80076be:	9306      	str	r3, [sp, #24]
 80076c0:	4690      	mov	r8, r2
 80076c2:	f000 fad0 	bl	8007c66 <__localeconv_l>
 80076c6:	6803      	ldr	r3, [r0, #0]
 80076c8:	9303      	str	r3, [sp, #12]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7f8 fd80 	bl	80001d0 <strlen>
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	9001      	str	r0, [sp, #4]
 80076d4:	4403      	add	r3, r0
 80076d6:	f04f 0b00 	mov.w	fp, #0
 80076da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f8da 3000 	ldr.w	r3, [sl]
 80076e4:	3302      	adds	r3, #2
 80076e6:	461f      	mov	r7, r3
 80076e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80076ec:	2830      	cmp	r0, #48	; 0x30
 80076ee:	d06c      	beq.n	80077ca <__gethex+0x118>
 80076f0:	f7ff ffca 	bl	8007688 <__hexdig_fun>
 80076f4:	4604      	mov	r4, r0
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d16a      	bne.n	80077d0 <__gethex+0x11e>
 80076fa:	9a01      	ldr	r2, [sp, #4]
 80076fc:	9903      	ldr	r1, [sp, #12]
 80076fe:	4638      	mov	r0, r7
 8007700:	f001 fa81 	bl	8008c06 <strncmp>
 8007704:	2800      	cmp	r0, #0
 8007706:	d166      	bne.n	80077d6 <__gethex+0x124>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	5cf8      	ldrb	r0, [r7, r3]
 800770c:	18fe      	adds	r6, r7, r3
 800770e:	f7ff ffbb 	bl	8007688 <__hexdig_fun>
 8007712:	2800      	cmp	r0, #0
 8007714:	d062      	beq.n	80077dc <__gethex+0x12a>
 8007716:	4633      	mov	r3, r6
 8007718:	7818      	ldrb	r0, [r3, #0]
 800771a:	2830      	cmp	r0, #48	; 0x30
 800771c:	461f      	mov	r7, r3
 800771e:	f103 0301 	add.w	r3, r3, #1
 8007722:	d0f9      	beq.n	8007718 <__gethex+0x66>
 8007724:	f7ff ffb0 	bl	8007688 <__hexdig_fun>
 8007728:	fab0 f580 	clz	r5, r0
 800772c:	096d      	lsrs	r5, r5, #5
 800772e:	4634      	mov	r4, r6
 8007730:	f04f 0b01 	mov.w	fp, #1
 8007734:	463a      	mov	r2, r7
 8007736:	4616      	mov	r6, r2
 8007738:	3201      	adds	r2, #1
 800773a:	7830      	ldrb	r0, [r6, #0]
 800773c:	f7ff ffa4 	bl	8007688 <__hexdig_fun>
 8007740:	2800      	cmp	r0, #0
 8007742:	d1f8      	bne.n	8007736 <__gethex+0x84>
 8007744:	9a01      	ldr	r2, [sp, #4]
 8007746:	9903      	ldr	r1, [sp, #12]
 8007748:	4630      	mov	r0, r6
 800774a:	f001 fa5c 	bl	8008c06 <strncmp>
 800774e:	b950      	cbnz	r0, 8007766 <__gethex+0xb4>
 8007750:	b954      	cbnz	r4, 8007768 <__gethex+0xb6>
 8007752:	9b01      	ldr	r3, [sp, #4]
 8007754:	18f4      	adds	r4, r6, r3
 8007756:	4622      	mov	r2, r4
 8007758:	4616      	mov	r6, r2
 800775a:	3201      	adds	r2, #1
 800775c:	7830      	ldrb	r0, [r6, #0]
 800775e:	f7ff ff93 	bl	8007688 <__hexdig_fun>
 8007762:	2800      	cmp	r0, #0
 8007764:	d1f8      	bne.n	8007758 <__gethex+0xa6>
 8007766:	b10c      	cbz	r4, 800776c <__gethex+0xba>
 8007768:	1ba4      	subs	r4, r4, r6
 800776a:	00a4      	lsls	r4, r4, #2
 800776c:	7833      	ldrb	r3, [r6, #0]
 800776e:	2b50      	cmp	r3, #80	; 0x50
 8007770:	d001      	beq.n	8007776 <__gethex+0xc4>
 8007772:	2b70      	cmp	r3, #112	; 0x70
 8007774:	d140      	bne.n	80077f8 <__gethex+0x146>
 8007776:	7873      	ldrb	r3, [r6, #1]
 8007778:	2b2b      	cmp	r3, #43	; 0x2b
 800777a:	d031      	beq.n	80077e0 <__gethex+0x12e>
 800777c:	2b2d      	cmp	r3, #45	; 0x2d
 800777e:	d033      	beq.n	80077e8 <__gethex+0x136>
 8007780:	1c71      	adds	r1, r6, #1
 8007782:	f04f 0900 	mov.w	r9, #0
 8007786:	7808      	ldrb	r0, [r1, #0]
 8007788:	f7ff ff7e 	bl	8007688 <__hexdig_fun>
 800778c:	1e43      	subs	r3, r0, #1
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b18      	cmp	r3, #24
 8007792:	d831      	bhi.n	80077f8 <__gethex+0x146>
 8007794:	f1a0 0210 	sub.w	r2, r0, #16
 8007798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800779c:	f7ff ff74 	bl	8007688 <__hexdig_fun>
 80077a0:	1e43      	subs	r3, r0, #1
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b18      	cmp	r3, #24
 80077a6:	d922      	bls.n	80077ee <__gethex+0x13c>
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	d000      	beq.n	80077b0 <__gethex+0xfe>
 80077ae:	4252      	negs	r2, r2
 80077b0:	4414      	add	r4, r2
 80077b2:	f8ca 1000 	str.w	r1, [sl]
 80077b6:	b30d      	cbz	r5, 80077fc <__gethex+0x14a>
 80077b8:	f1bb 0f00 	cmp.w	fp, #0
 80077bc:	bf0c      	ite	eq
 80077be:	2706      	moveq	r7, #6
 80077c0:	2700      	movne	r7, #0
 80077c2:	4638      	mov	r0, r7
 80077c4:	b00b      	add	sp, #44	; 0x2c
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	f10b 0b01 	add.w	fp, fp, #1
 80077ce:	e78a      	b.n	80076e6 <__gethex+0x34>
 80077d0:	2500      	movs	r5, #0
 80077d2:	462c      	mov	r4, r5
 80077d4:	e7ae      	b.n	8007734 <__gethex+0x82>
 80077d6:	463e      	mov	r6, r7
 80077d8:	2501      	movs	r5, #1
 80077da:	e7c7      	b.n	800776c <__gethex+0xba>
 80077dc:	4604      	mov	r4, r0
 80077de:	e7fb      	b.n	80077d8 <__gethex+0x126>
 80077e0:	f04f 0900 	mov.w	r9, #0
 80077e4:	1cb1      	adds	r1, r6, #2
 80077e6:	e7ce      	b.n	8007786 <__gethex+0xd4>
 80077e8:	f04f 0901 	mov.w	r9, #1
 80077ec:	e7fa      	b.n	80077e4 <__gethex+0x132>
 80077ee:	230a      	movs	r3, #10
 80077f0:	fb03 0202 	mla	r2, r3, r2, r0
 80077f4:	3a10      	subs	r2, #16
 80077f6:	e7cf      	b.n	8007798 <__gethex+0xe6>
 80077f8:	4631      	mov	r1, r6
 80077fa:	e7da      	b.n	80077b2 <__gethex+0x100>
 80077fc:	1bf3      	subs	r3, r6, r7
 80077fe:	3b01      	subs	r3, #1
 8007800:	4629      	mov	r1, r5
 8007802:	2b07      	cmp	r3, #7
 8007804:	dc49      	bgt.n	800789a <__gethex+0x1e8>
 8007806:	9802      	ldr	r0, [sp, #8]
 8007808:	f000 fa63 	bl	8007cd2 <_Balloc>
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	f100 0914 	add.w	r9, r0, #20
 8007812:	f04f 0b00 	mov.w	fp, #0
 8007816:	f1c3 0301 	rsb	r3, r3, #1
 800781a:	4605      	mov	r5, r0
 800781c:	f8cd 9010 	str.w	r9, [sp, #16]
 8007820:	46da      	mov	sl, fp
 8007822:	9308      	str	r3, [sp, #32]
 8007824:	42b7      	cmp	r7, r6
 8007826:	d33b      	bcc.n	80078a0 <__gethex+0x1ee>
 8007828:	9804      	ldr	r0, [sp, #16]
 800782a:	f840 ab04 	str.w	sl, [r0], #4
 800782e:	eba0 0009 	sub.w	r0, r0, r9
 8007832:	1080      	asrs	r0, r0, #2
 8007834:	6128      	str	r0, [r5, #16]
 8007836:	0147      	lsls	r7, r0, #5
 8007838:	4650      	mov	r0, sl
 800783a:	f000 fb0e 	bl	8007e5a <__hi0bits>
 800783e:	f8d8 6000 	ldr.w	r6, [r8]
 8007842:	1a3f      	subs	r7, r7, r0
 8007844:	42b7      	cmp	r7, r6
 8007846:	dd64      	ble.n	8007912 <__gethex+0x260>
 8007848:	1bbf      	subs	r7, r7, r6
 800784a:	4639      	mov	r1, r7
 800784c:	4628      	mov	r0, r5
 800784e:	f000 fe1d 	bl	800848c <__any_on>
 8007852:	4682      	mov	sl, r0
 8007854:	b178      	cbz	r0, 8007876 <__gethex+0x1c4>
 8007856:	1e7b      	subs	r3, r7, #1
 8007858:	1159      	asrs	r1, r3, #5
 800785a:	f003 021f 	and.w	r2, r3, #31
 800785e:	f04f 0a01 	mov.w	sl, #1
 8007862:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007866:	fa0a f202 	lsl.w	r2, sl, r2
 800786a:	420a      	tst	r2, r1
 800786c:	d003      	beq.n	8007876 <__gethex+0x1c4>
 800786e:	4553      	cmp	r3, sl
 8007870:	dc46      	bgt.n	8007900 <__gethex+0x24e>
 8007872:	f04f 0a02 	mov.w	sl, #2
 8007876:	4639      	mov	r1, r7
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff fecb 	bl	8007614 <rshift>
 800787e:	443c      	add	r4, r7
 8007880:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007884:	42a3      	cmp	r3, r4
 8007886:	da52      	bge.n	800792e <__gethex+0x27c>
 8007888:	4629      	mov	r1, r5
 800788a:	9802      	ldr	r0, [sp, #8]
 800788c:	f000 fa55 	bl	8007d3a <_Bfree>
 8007890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007892:	2300      	movs	r3, #0
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	27a3      	movs	r7, #163	; 0xa3
 8007898:	e793      	b.n	80077c2 <__gethex+0x110>
 800789a:	3101      	adds	r1, #1
 800789c:	105b      	asrs	r3, r3, #1
 800789e:	e7b0      	b.n	8007802 <__gethex+0x150>
 80078a0:	1e73      	subs	r3, r6, #1
 80078a2:	9305      	str	r3, [sp, #20]
 80078a4:	9a07      	ldr	r2, [sp, #28]
 80078a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d018      	beq.n	80078e0 <__gethex+0x22e>
 80078ae:	f1bb 0f20 	cmp.w	fp, #32
 80078b2:	d107      	bne.n	80078c4 <__gethex+0x212>
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	f8c3 a000 	str.w	sl, [r3]
 80078ba:	3304      	adds	r3, #4
 80078bc:	f04f 0a00 	mov.w	sl, #0
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	46d3      	mov	fp, sl
 80078c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80078c8:	f7ff fede 	bl	8007688 <__hexdig_fun>
 80078cc:	f000 000f 	and.w	r0, r0, #15
 80078d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80078d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80078d8:	f10b 0b04 	add.w	fp, fp, #4
 80078dc:	9b05      	ldr	r3, [sp, #20]
 80078de:	e00d      	b.n	80078fc <__gethex+0x24a>
 80078e0:	9b05      	ldr	r3, [sp, #20]
 80078e2:	9a08      	ldr	r2, [sp, #32]
 80078e4:	4413      	add	r3, r2
 80078e6:	42bb      	cmp	r3, r7
 80078e8:	d3e1      	bcc.n	80078ae <__gethex+0x1fc>
 80078ea:	4618      	mov	r0, r3
 80078ec:	9a01      	ldr	r2, [sp, #4]
 80078ee:	9903      	ldr	r1, [sp, #12]
 80078f0:	9309      	str	r3, [sp, #36]	; 0x24
 80078f2:	f001 f988 	bl	8008c06 <strncmp>
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d1d8      	bne.n	80078ae <__gethex+0x1fc>
 80078fc:	461e      	mov	r6, r3
 80078fe:	e791      	b.n	8007824 <__gethex+0x172>
 8007900:	1eb9      	subs	r1, r7, #2
 8007902:	4628      	mov	r0, r5
 8007904:	f000 fdc2 	bl	800848c <__any_on>
 8007908:	2800      	cmp	r0, #0
 800790a:	d0b2      	beq.n	8007872 <__gethex+0x1c0>
 800790c:	f04f 0a03 	mov.w	sl, #3
 8007910:	e7b1      	b.n	8007876 <__gethex+0x1c4>
 8007912:	da09      	bge.n	8007928 <__gethex+0x276>
 8007914:	1bf7      	subs	r7, r6, r7
 8007916:	4629      	mov	r1, r5
 8007918:	463a      	mov	r2, r7
 800791a:	9802      	ldr	r0, [sp, #8]
 800791c:	f000 fbd8 	bl	80080d0 <__lshift>
 8007920:	1be4      	subs	r4, r4, r7
 8007922:	4605      	mov	r5, r0
 8007924:	f100 0914 	add.w	r9, r0, #20
 8007928:	f04f 0a00 	mov.w	sl, #0
 800792c:	e7a8      	b.n	8007880 <__gethex+0x1ce>
 800792e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007932:	42a0      	cmp	r0, r4
 8007934:	dd6a      	ble.n	8007a0c <__gethex+0x35a>
 8007936:	1b04      	subs	r4, r0, r4
 8007938:	42a6      	cmp	r6, r4
 800793a:	dc2e      	bgt.n	800799a <__gethex+0x2e8>
 800793c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d022      	beq.n	800798a <__gethex+0x2d8>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d024      	beq.n	8007992 <__gethex+0x2e0>
 8007948:	2b01      	cmp	r3, #1
 800794a:	d115      	bne.n	8007978 <__gethex+0x2c6>
 800794c:	42a6      	cmp	r6, r4
 800794e:	d113      	bne.n	8007978 <__gethex+0x2c6>
 8007950:	2e01      	cmp	r6, #1
 8007952:	dc0b      	bgt.n	800796c <__gethex+0x2ba>
 8007954:	9a06      	ldr	r2, [sp, #24]
 8007956:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	2301      	movs	r3, #1
 800795e:	612b      	str	r3, [r5, #16]
 8007960:	f8c9 3000 	str.w	r3, [r9]
 8007964:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007966:	2762      	movs	r7, #98	; 0x62
 8007968:	601d      	str	r5, [r3, #0]
 800796a:	e72a      	b.n	80077c2 <__gethex+0x110>
 800796c:	1e71      	subs	r1, r6, #1
 800796e:	4628      	mov	r0, r5
 8007970:	f000 fd8c 	bl	800848c <__any_on>
 8007974:	2800      	cmp	r0, #0
 8007976:	d1ed      	bne.n	8007954 <__gethex+0x2a2>
 8007978:	4629      	mov	r1, r5
 800797a:	9802      	ldr	r0, [sp, #8]
 800797c:	f000 f9dd 	bl	8007d3a <_Bfree>
 8007980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007982:	2300      	movs	r3, #0
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	2750      	movs	r7, #80	; 0x50
 8007988:	e71b      	b.n	80077c2 <__gethex+0x110>
 800798a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0e1      	beq.n	8007954 <__gethex+0x2a2>
 8007990:	e7f2      	b.n	8007978 <__gethex+0x2c6>
 8007992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1dd      	bne.n	8007954 <__gethex+0x2a2>
 8007998:	e7ee      	b.n	8007978 <__gethex+0x2c6>
 800799a:	1e67      	subs	r7, r4, #1
 800799c:	f1ba 0f00 	cmp.w	sl, #0
 80079a0:	d131      	bne.n	8007a06 <__gethex+0x354>
 80079a2:	b127      	cbz	r7, 80079ae <__gethex+0x2fc>
 80079a4:	4639      	mov	r1, r7
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 fd70 	bl	800848c <__any_on>
 80079ac:	4682      	mov	sl, r0
 80079ae:	117a      	asrs	r2, r7, #5
 80079b0:	2301      	movs	r3, #1
 80079b2:	f007 071f 	and.w	r7, r7, #31
 80079b6:	fa03 f707 	lsl.w	r7, r3, r7
 80079ba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80079be:	4621      	mov	r1, r4
 80079c0:	421f      	tst	r7, r3
 80079c2:	4628      	mov	r0, r5
 80079c4:	bf18      	it	ne
 80079c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80079ca:	1b36      	subs	r6, r6, r4
 80079cc:	f7ff fe22 	bl	8007614 <rshift>
 80079d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80079d4:	2702      	movs	r7, #2
 80079d6:	f1ba 0f00 	cmp.w	sl, #0
 80079da:	d048      	beq.n	8007a6e <__gethex+0x3bc>
 80079dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d015      	beq.n	8007a10 <__gethex+0x35e>
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d017      	beq.n	8007a18 <__gethex+0x366>
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d109      	bne.n	8007a00 <__gethex+0x34e>
 80079ec:	f01a 0f02 	tst.w	sl, #2
 80079f0:	d006      	beq.n	8007a00 <__gethex+0x34e>
 80079f2:	f8d9 3000 	ldr.w	r3, [r9]
 80079f6:	ea4a 0a03 	orr.w	sl, sl, r3
 80079fa:	f01a 0f01 	tst.w	sl, #1
 80079fe:	d10e      	bne.n	8007a1e <__gethex+0x36c>
 8007a00:	f047 0710 	orr.w	r7, r7, #16
 8007a04:	e033      	b.n	8007a6e <__gethex+0x3bc>
 8007a06:	f04f 0a01 	mov.w	sl, #1
 8007a0a:	e7d0      	b.n	80079ae <__gethex+0x2fc>
 8007a0c:	2701      	movs	r7, #1
 8007a0e:	e7e2      	b.n	80079d6 <__gethex+0x324>
 8007a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a12:	f1c3 0301 	rsb	r3, r3, #1
 8007a16:	9315      	str	r3, [sp, #84]	; 0x54
 8007a18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <__gethex+0x34e>
 8007a1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007a22:	f105 0314 	add.w	r3, r5, #20
 8007a26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007a2a:	eb03 010a 	add.w	r1, r3, sl
 8007a2e:	f04f 0c00 	mov.w	ip, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a38:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007a3c:	d01c      	beq.n	8007a78 <__gethex+0x3c6>
 8007a3e:	3201      	adds	r2, #1
 8007a40:	6002      	str	r2, [r0, #0]
 8007a42:	2f02      	cmp	r7, #2
 8007a44:	f105 0314 	add.w	r3, r5, #20
 8007a48:	d138      	bne.n	8007abc <__gethex+0x40a>
 8007a4a:	f8d8 2000 	ldr.w	r2, [r8]
 8007a4e:	3a01      	subs	r2, #1
 8007a50:	42b2      	cmp	r2, r6
 8007a52:	d10a      	bne.n	8007a6a <__gethex+0x3b8>
 8007a54:	1171      	asrs	r1, r6, #5
 8007a56:	2201      	movs	r2, #1
 8007a58:	f006 061f 	and.w	r6, r6, #31
 8007a5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a60:	fa02 f606 	lsl.w	r6, r2, r6
 8007a64:	421e      	tst	r6, r3
 8007a66:	bf18      	it	ne
 8007a68:	4617      	movne	r7, r2
 8007a6a:	f047 0720 	orr.w	r7, r7, #32
 8007a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a70:	601d      	str	r5, [r3, #0]
 8007a72:	9b06      	ldr	r3, [sp, #24]
 8007a74:	601c      	str	r4, [r3, #0]
 8007a76:	e6a4      	b.n	80077c2 <__gethex+0x110>
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	f843 cc04 	str.w	ip, [r3, #-4]
 8007a7e:	d8d8      	bhi.n	8007a32 <__gethex+0x380>
 8007a80:	68ab      	ldr	r3, [r5, #8]
 8007a82:	4599      	cmp	r9, r3
 8007a84:	db12      	blt.n	8007aac <__gethex+0x3fa>
 8007a86:	6869      	ldr	r1, [r5, #4]
 8007a88:	9802      	ldr	r0, [sp, #8]
 8007a8a:	3101      	adds	r1, #1
 8007a8c:	f000 f921 	bl	8007cd2 <_Balloc>
 8007a90:	692a      	ldr	r2, [r5, #16]
 8007a92:	3202      	adds	r2, #2
 8007a94:	f105 010c 	add.w	r1, r5, #12
 8007a98:	4683      	mov	fp, r0
 8007a9a:	0092      	lsls	r2, r2, #2
 8007a9c:	300c      	adds	r0, #12
 8007a9e:	f000 f90d 	bl	8007cbc <memcpy>
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	9802      	ldr	r0, [sp, #8]
 8007aa6:	f000 f948 	bl	8007d3a <_Bfree>
 8007aaa:	465d      	mov	r5, fp
 8007aac:	692b      	ldr	r3, [r5, #16]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007ab4:	612a      	str	r2, [r5, #16]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	615a      	str	r2, [r3, #20]
 8007aba:	e7c2      	b.n	8007a42 <__gethex+0x390>
 8007abc:	692a      	ldr	r2, [r5, #16]
 8007abe:	454a      	cmp	r2, r9
 8007ac0:	dd0b      	ble.n	8007ada <__gethex+0x428>
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f7ff fda5 	bl	8007614 <rshift>
 8007aca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ace:	3401      	adds	r4, #1
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	f6ff aed9 	blt.w	8007888 <__gethex+0x1d6>
 8007ad6:	2701      	movs	r7, #1
 8007ad8:	e7c7      	b.n	8007a6a <__gethex+0x3b8>
 8007ada:	f016 061f 	ands.w	r6, r6, #31
 8007ade:	d0fa      	beq.n	8007ad6 <__gethex+0x424>
 8007ae0:	449a      	add	sl, r3
 8007ae2:	f1c6 0620 	rsb	r6, r6, #32
 8007ae6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007aea:	f000 f9b6 	bl	8007e5a <__hi0bits>
 8007aee:	42b0      	cmp	r0, r6
 8007af0:	dbe7      	blt.n	8007ac2 <__gethex+0x410>
 8007af2:	e7f0      	b.n	8007ad6 <__gethex+0x424>

08007af4 <L_shift>:
 8007af4:	f1c2 0208 	rsb	r2, r2, #8
 8007af8:	0092      	lsls	r2, r2, #2
 8007afa:	b570      	push	{r4, r5, r6, lr}
 8007afc:	f1c2 0620 	rsb	r6, r2, #32
 8007b00:	6843      	ldr	r3, [r0, #4]
 8007b02:	6804      	ldr	r4, [r0, #0]
 8007b04:	fa03 f506 	lsl.w	r5, r3, r6
 8007b08:	432c      	orrs	r4, r5
 8007b0a:	40d3      	lsrs	r3, r2
 8007b0c:	6004      	str	r4, [r0, #0]
 8007b0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b12:	4288      	cmp	r0, r1
 8007b14:	d3f4      	bcc.n	8007b00 <L_shift+0xc>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}

08007b18 <__match>:
 8007b18:	b530      	push	{r4, r5, lr}
 8007b1a:	6803      	ldr	r3, [r0, #0]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b22:	b914      	cbnz	r4, 8007b2a <__match+0x12>
 8007b24:	6003      	str	r3, [r0, #0]
 8007b26:	2001      	movs	r0, #1
 8007b28:	bd30      	pop	{r4, r5, pc}
 8007b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007b32:	2d19      	cmp	r5, #25
 8007b34:	bf98      	it	ls
 8007b36:	3220      	addls	r2, #32
 8007b38:	42a2      	cmp	r2, r4
 8007b3a:	d0f0      	beq.n	8007b1e <__match+0x6>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e7f3      	b.n	8007b28 <__match+0x10>

08007b40 <__hexnan>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	680b      	ldr	r3, [r1, #0]
 8007b46:	6801      	ldr	r1, [r0, #0]
 8007b48:	115f      	asrs	r7, r3, #5
 8007b4a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007b4e:	f013 031f 	ands.w	r3, r3, #31
 8007b52:	b087      	sub	sp, #28
 8007b54:	bf18      	it	ne
 8007b56:	3704      	addne	r7, #4
 8007b58:	2500      	movs	r5, #0
 8007b5a:	1f3e      	subs	r6, r7, #4
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	4690      	mov	r8, r2
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	f847 5c04 	str.w	r5, [r7, #-4]
 8007b66:	46b1      	mov	r9, r6
 8007b68:	4634      	mov	r4, r6
 8007b6a:	9502      	str	r5, [sp, #8]
 8007b6c:	46ab      	mov	fp, r5
 8007b6e:	784a      	ldrb	r2, [r1, #1]
 8007b70:	1c4b      	adds	r3, r1, #1
 8007b72:	9303      	str	r3, [sp, #12]
 8007b74:	b342      	cbz	r2, 8007bc8 <__hexnan+0x88>
 8007b76:	4610      	mov	r0, r2
 8007b78:	9105      	str	r1, [sp, #20]
 8007b7a:	9204      	str	r2, [sp, #16]
 8007b7c:	f7ff fd84 	bl	8007688 <__hexdig_fun>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d143      	bne.n	8007c0c <__hexnan+0xcc>
 8007b84:	9a04      	ldr	r2, [sp, #16]
 8007b86:	9905      	ldr	r1, [sp, #20]
 8007b88:	2a20      	cmp	r2, #32
 8007b8a:	d818      	bhi.n	8007bbe <__hexnan+0x7e>
 8007b8c:	9b02      	ldr	r3, [sp, #8]
 8007b8e:	459b      	cmp	fp, r3
 8007b90:	dd13      	ble.n	8007bba <__hexnan+0x7a>
 8007b92:	454c      	cmp	r4, r9
 8007b94:	d206      	bcs.n	8007ba4 <__hexnan+0x64>
 8007b96:	2d07      	cmp	r5, #7
 8007b98:	dc04      	bgt.n	8007ba4 <__hexnan+0x64>
 8007b9a:	462a      	mov	r2, r5
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7ff ffa8 	bl	8007af4 <L_shift>
 8007ba4:	4544      	cmp	r4, r8
 8007ba6:	d944      	bls.n	8007c32 <__hexnan+0xf2>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f1a4 0904 	sub.w	r9, r4, #4
 8007bae:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bb2:	f8cd b008 	str.w	fp, [sp, #8]
 8007bb6:	464c      	mov	r4, r9
 8007bb8:	461d      	mov	r5, r3
 8007bba:	9903      	ldr	r1, [sp, #12]
 8007bbc:	e7d7      	b.n	8007b6e <__hexnan+0x2e>
 8007bbe:	2a29      	cmp	r2, #41	; 0x29
 8007bc0:	d14a      	bne.n	8007c58 <__hexnan+0x118>
 8007bc2:	3102      	adds	r1, #2
 8007bc4:	f8ca 1000 	str.w	r1, [sl]
 8007bc8:	f1bb 0f00 	cmp.w	fp, #0
 8007bcc:	d044      	beq.n	8007c58 <__hexnan+0x118>
 8007bce:	454c      	cmp	r4, r9
 8007bd0:	d206      	bcs.n	8007be0 <__hexnan+0xa0>
 8007bd2:	2d07      	cmp	r5, #7
 8007bd4:	dc04      	bgt.n	8007be0 <__hexnan+0xa0>
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4649      	mov	r1, r9
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f7ff ff8a 	bl	8007af4 <L_shift>
 8007be0:	4544      	cmp	r4, r8
 8007be2:	d928      	bls.n	8007c36 <__hexnan+0xf6>
 8007be4:	4643      	mov	r3, r8
 8007be6:	f854 2b04 	ldr.w	r2, [r4], #4
 8007bea:	f843 2b04 	str.w	r2, [r3], #4
 8007bee:	42a6      	cmp	r6, r4
 8007bf0:	d2f9      	bcs.n	8007be6 <__hexnan+0xa6>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f843 2b04 	str.w	r2, [r3], #4
 8007bf8:	429e      	cmp	r6, r3
 8007bfa:	d2fb      	bcs.n	8007bf4 <__hexnan+0xb4>
 8007bfc:	6833      	ldr	r3, [r6, #0]
 8007bfe:	b91b      	cbnz	r3, 8007c08 <__hexnan+0xc8>
 8007c00:	4546      	cmp	r6, r8
 8007c02:	d127      	bne.n	8007c54 <__hexnan+0x114>
 8007c04:	2301      	movs	r3, #1
 8007c06:	6033      	str	r3, [r6, #0]
 8007c08:	2005      	movs	r0, #5
 8007c0a:	e026      	b.n	8007c5a <__hexnan+0x11a>
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	2d08      	cmp	r5, #8
 8007c10:	f10b 0b01 	add.w	fp, fp, #1
 8007c14:	dd06      	ble.n	8007c24 <__hexnan+0xe4>
 8007c16:	4544      	cmp	r4, r8
 8007c18:	d9cf      	bls.n	8007bba <__hexnan+0x7a>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c20:	2501      	movs	r5, #1
 8007c22:	3c04      	subs	r4, #4
 8007c24:	6822      	ldr	r2, [r4, #0]
 8007c26:	f000 000f 	and.w	r0, r0, #15
 8007c2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007c2e:	6020      	str	r0, [r4, #0]
 8007c30:	e7c3      	b.n	8007bba <__hexnan+0x7a>
 8007c32:	2508      	movs	r5, #8
 8007c34:	e7c1      	b.n	8007bba <__hexnan+0x7a>
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0df      	beq.n	8007bfc <__hexnan+0xbc>
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c40:	f1c3 0320 	rsb	r3, r3, #32
 8007c44:	fa22 f303 	lsr.w	r3, r2, r3
 8007c48:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007c4c:	401a      	ands	r2, r3
 8007c4e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007c52:	e7d3      	b.n	8007bfc <__hexnan+0xbc>
 8007c54:	3e04      	subs	r6, #4
 8007c56:	e7d1      	b.n	8007bfc <__hexnan+0xbc>
 8007c58:	2004      	movs	r0, #4
 8007c5a:	b007      	add	sp, #28
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c60 <__locale_ctype_ptr_l>:
 8007c60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007c64:	4770      	bx	lr

08007c66 <__localeconv_l>:
 8007c66:	30f0      	adds	r0, #240	; 0xf0
 8007c68:	4770      	bx	lr
	...

08007c6c <_localeconv_r>:
 8007c6c:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <_localeconv_r+0x14>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6a18      	ldr	r0, [r3, #32]
 8007c72:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <_localeconv_r+0x18>)
 8007c74:	2800      	cmp	r0, #0
 8007c76:	bf08      	it	eq
 8007c78:	4618      	moveq	r0, r3
 8007c7a:	30f0      	adds	r0, #240	; 0xf0
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	2000000c 	.word	0x2000000c
 8007c84:	20000070 	.word	0x20000070

08007c88 <malloc>:
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <malloc+0xc>)
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	f000 bc7b 	b.w	8008588 <_malloc_r>
 8007c92:	bf00      	nop
 8007c94:	2000000c 	.word	0x2000000c

08007c98 <__ascii_mbtowc>:
 8007c98:	b082      	sub	sp, #8
 8007c9a:	b901      	cbnz	r1, 8007c9e <__ascii_mbtowc+0x6>
 8007c9c:	a901      	add	r1, sp, #4
 8007c9e:	b142      	cbz	r2, 8007cb2 <__ascii_mbtowc+0x1a>
 8007ca0:	b14b      	cbz	r3, 8007cb6 <__ascii_mbtowc+0x1e>
 8007ca2:	7813      	ldrb	r3, [r2, #0]
 8007ca4:	600b      	str	r3, [r1, #0]
 8007ca6:	7812      	ldrb	r2, [r2, #0]
 8007ca8:	1c10      	adds	r0, r2, #0
 8007caa:	bf18      	it	ne
 8007cac:	2001      	movne	r0, #1
 8007cae:	b002      	add	sp, #8
 8007cb0:	4770      	bx	lr
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	e7fb      	b.n	8007cae <__ascii_mbtowc+0x16>
 8007cb6:	f06f 0001 	mvn.w	r0, #1
 8007cba:	e7f8      	b.n	8007cae <__ascii_mbtowc+0x16>

08007cbc <memcpy>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	1e43      	subs	r3, r0, #1
 8007cc0:	440a      	add	r2, r1
 8007cc2:	4291      	cmp	r1, r2
 8007cc4:	d100      	bne.n	8007cc8 <memcpy+0xc>
 8007cc6:	bd10      	pop	{r4, pc}
 8007cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd0:	e7f7      	b.n	8007cc2 <memcpy+0x6>

08007cd2 <_Balloc>:
 8007cd2:	b570      	push	{r4, r5, r6, lr}
 8007cd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	460e      	mov	r6, r1
 8007cda:	b93d      	cbnz	r5, 8007cec <_Balloc+0x1a>
 8007cdc:	2010      	movs	r0, #16
 8007cde:	f7ff ffd3 	bl	8007c88 <malloc>
 8007ce2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ce4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ce8:	6005      	str	r5, [r0, #0]
 8007cea:	60c5      	str	r5, [r0, #12]
 8007cec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007cee:	68eb      	ldr	r3, [r5, #12]
 8007cf0:	b183      	cbz	r3, 8007d14 <_Balloc+0x42>
 8007cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007cfa:	b9b8      	cbnz	r0, 8007d2c <_Balloc+0x5a>
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	fa01 f506 	lsl.w	r5, r1, r6
 8007d02:	1d6a      	adds	r2, r5, #5
 8007d04:	0092      	lsls	r2, r2, #2
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 fbe1 	bl	80084ce <_calloc_r>
 8007d0c:	b160      	cbz	r0, 8007d28 <_Balloc+0x56>
 8007d0e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007d12:	e00e      	b.n	8007d32 <_Balloc+0x60>
 8007d14:	2221      	movs	r2, #33	; 0x21
 8007d16:	2104      	movs	r1, #4
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fbd8 	bl	80084ce <_calloc_r>
 8007d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d20:	60e8      	str	r0, [r5, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e4      	bne.n	8007cf2 <_Balloc+0x20>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	6802      	ldr	r2, [r0, #0]
 8007d2e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007d32:	2300      	movs	r3, #0
 8007d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d38:	e7f7      	b.n	8007d2a <_Balloc+0x58>

08007d3a <_Bfree>:
 8007d3a:	b570      	push	{r4, r5, r6, lr}
 8007d3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460d      	mov	r5, r1
 8007d42:	b93c      	cbnz	r4, 8007d54 <_Bfree+0x1a>
 8007d44:	2010      	movs	r0, #16
 8007d46:	f7ff ff9f 	bl	8007c88 <malloc>
 8007d4a:	6270      	str	r0, [r6, #36]	; 0x24
 8007d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d50:	6004      	str	r4, [r0, #0]
 8007d52:	60c4      	str	r4, [r0, #12]
 8007d54:	b13d      	cbz	r5, 8007d66 <_Bfree+0x2c>
 8007d56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d58:	686a      	ldr	r2, [r5, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d60:	6029      	str	r1, [r5, #0]
 8007d62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007d66:	bd70      	pop	{r4, r5, r6, pc}

08007d68 <__multadd>:
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	690d      	ldr	r5, [r1, #16]
 8007d6e:	461f      	mov	r7, r3
 8007d70:	4606      	mov	r6, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	f101 0c14 	add.w	ip, r1, #20
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f8dc 0000 	ldr.w	r0, [ip]
 8007d7e:	b281      	uxth	r1, r0
 8007d80:	fb02 7101 	mla	r1, r2, r1, r7
 8007d84:	0c0f      	lsrs	r7, r1, #16
 8007d86:	0c00      	lsrs	r0, r0, #16
 8007d88:	fb02 7000 	mla	r0, r2, r0, r7
 8007d8c:	b289      	uxth	r1, r1
 8007d8e:	3301      	adds	r3, #1
 8007d90:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007d94:	429d      	cmp	r5, r3
 8007d96:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007d9a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d9e:	dcec      	bgt.n	8007d7a <__multadd+0x12>
 8007da0:	b1d7      	cbz	r7, 8007dd8 <__multadd+0x70>
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dc12      	bgt.n	8007dce <__multadd+0x66>
 8007da8:	6861      	ldr	r1, [r4, #4]
 8007daa:	4630      	mov	r0, r6
 8007dac:	3101      	adds	r1, #1
 8007dae:	f7ff ff90 	bl	8007cd2 <_Balloc>
 8007db2:	6922      	ldr	r2, [r4, #16]
 8007db4:	3202      	adds	r2, #2
 8007db6:	f104 010c 	add.w	r1, r4, #12
 8007dba:	4680      	mov	r8, r0
 8007dbc:	0092      	lsls	r2, r2, #2
 8007dbe:	300c      	adds	r0, #12
 8007dc0:	f7ff ff7c 	bl	8007cbc <memcpy>
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7ff ffb7 	bl	8007d3a <_Bfree>
 8007dcc:	4644      	mov	r4, r8
 8007dce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dd2:	3501      	adds	r5, #1
 8007dd4:	615f      	str	r7, [r3, #20]
 8007dd6:	6125      	str	r5, [r4, #16]
 8007dd8:	4620      	mov	r0, r4
 8007dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007dde <__s2b>:
 8007dde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de2:	460c      	mov	r4, r1
 8007de4:	4615      	mov	r5, r2
 8007de6:	461f      	mov	r7, r3
 8007de8:	2209      	movs	r2, #9
 8007dea:	3308      	adds	r3, #8
 8007dec:	4606      	mov	r6, r0
 8007dee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007df2:	2100      	movs	r1, #0
 8007df4:	2201      	movs	r2, #1
 8007df6:	429a      	cmp	r2, r3
 8007df8:	db20      	blt.n	8007e3c <__s2b+0x5e>
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff69 	bl	8007cd2 <_Balloc>
 8007e00:	9b08      	ldr	r3, [sp, #32]
 8007e02:	6143      	str	r3, [r0, #20]
 8007e04:	2d09      	cmp	r5, #9
 8007e06:	f04f 0301 	mov.w	r3, #1
 8007e0a:	6103      	str	r3, [r0, #16]
 8007e0c:	dd19      	ble.n	8007e42 <__s2b+0x64>
 8007e0e:	f104 0809 	add.w	r8, r4, #9
 8007e12:	46c1      	mov	r9, r8
 8007e14:	442c      	add	r4, r5
 8007e16:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	3b30      	subs	r3, #48	; 0x30
 8007e1e:	220a      	movs	r2, #10
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7ff ffa1 	bl	8007d68 <__multadd>
 8007e26:	45a1      	cmp	r9, r4
 8007e28:	d1f5      	bne.n	8007e16 <__s2b+0x38>
 8007e2a:	eb08 0405 	add.w	r4, r8, r5
 8007e2e:	3c08      	subs	r4, #8
 8007e30:	1b2d      	subs	r5, r5, r4
 8007e32:	1963      	adds	r3, r4, r5
 8007e34:	42bb      	cmp	r3, r7
 8007e36:	db07      	blt.n	8007e48 <__s2b+0x6a>
 8007e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3c:	0052      	lsls	r2, r2, #1
 8007e3e:	3101      	adds	r1, #1
 8007e40:	e7d9      	b.n	8007df6 <__s2b+0x18>
 8007e42:	340a      	adds	r4, #10
 8007e44:	2509      	movs	r5, #9
 8007e46:	e7f3      	b.n	8007e30 <__s2b+0x52>
 8007e48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	3b30      	subs	r3, #48	; 0x30
 8007e50:	220a      	movs	r2, #10
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7ff ff88 	bl	8007d68 <__multadd>
 8007e58:	e7eb      	b.n	8007e32 <__s2b+0x54>

08007e5a <__hi0bits>:
 8007e5a:	0c02      	lsrs	r2, r0, #16
 8007e5c:	0412      	lsls	r2, r2, #16
 8007e5e:	4603      	mov	r3, r0
 8007e60:	b9b2      	cbnz	r2, 8007e90 <__hi0bits+0x36>
 8007e62:	0403      	lsls	r3, r0, #16
 8007e64:	2010      	movs	r0, #16
 8007e66:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e6a:	bf04      	itt	eq
 8007e6c:	021b      	lsleq	r3, r3, #8
 8007e6e:	3008      	addeq	r0, #8
 8007e70:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e74:	bf04      	itt	eq
 8007e76:	011b      	lsleq	r3, r3, #4
 8007e78:	3004      	addeq	r0, #4
 8007e7a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e7e:	bf04      	itt	eq
 8007e80:	009b      	lsleq	r3, r3, #2
 8007e82:	3002      	addeq	r0, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	db06      	blt.n	8007e96 <__hi0bits+0x3c>
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	d503      	bpl.n	8007e94 <__hi0bits+0x3a>
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	4770      	bx	lr
 8007e90:	2000      	movs	r0, #0
 8007e92:	e7e8      	b.n	8007e66 <__hi0bits+0xc>
 8007e94:	2020      	movs	r0, #32
 8007e96:	4770      	bx	lr

08007e98 <__lo0bits>:
 8007e98:	6803      	ldr	r3, [r0, #0]
 8007e9a:	f013 0207 	ands.w	r2, r3, #7
 8007e9e:	4601      	mov	r1, r0
 8007ea0:	d00b      	beq.n	8007eba <__lo0bits+0x22>
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d423      	bmi.n	8007eee <__lo0bits+0x56>
 8007ea6:	0798      	lsls	r0, r3, #30
 8007ea8:	bf49      	itett	mi
 8007eaa:	085b      	lsrmi	r3, r3, #1
 8007eac:	089b      	lsrpl	r3, r3, #2
 8007eae:	2001      	movmi	r0, #1
 8007eb0:	600b      	strmi	r3, [r1, #0]
 8007eb2:	bf5c      	itt	pl
 8007eb4:	600b      	strpl	r3, [r1, #0]
 8007eb6:	2002      	movpl	r0, #2
 8007eb8:	4770      	bx	lr
 8007eba:	b298      	uxth	r0, r3
 8007ebc:	b9a8      	cbnz	r0, 8007eea <__lo0bits+0x52>
 8007ebe:	0c1b      	lsrs	r3, r3, #16
 8007ec0:	2010      	movs	r0, #16
 8007ec2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ec6:	bf04      	itt	eq
 8007ec8:	0a1b      	lsreq	r3, r3, #8
 8007eca:	3008      	addeq	r0, #8
 8007ecc:	071a      	lsls	r2, r3, #28
 8007ece:	bf04      	itt	eq
 8007ed0:	091b      	lsreq	r3, r3, #4
 8007ed2:	3004      	addeq	r0, #4
 8007ed4:	079a      	lsls	r2, r3, #30
 8007ed6:	bf04      	itt	eq
 8007ed8:	089b      	lsreq	r3, r3, #2
 8007eda:	3002      	addeq	r0, #2
 8007edc:	07da      	lsls	r2, r3, #31
 8007ede:	d402      	bmi.n	8007ee6 <__lo0bits+0x4e>
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	d006      	beq.n	8007ef2 <__lo0bits+0x5a>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	600b      	str	r3, [r1, #0]
 8007ee8:	4770      	bx	lr
 8007eea:	4610      	mov	r0, r2
 8007eec:	e7e9      	b.n	8007ec2 <__lo0bits+0x2a>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	4770      	bx	lr
 8007ef2:	2020      	movs	r0, #32
 8007ef4:	4770      	bx	lr

08007ef6 <__i2b>:
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	460c      	mov	r4, r1
 8007efa:	2101      	movs	r1, #1
 8007efc:	f7ff fee9 	bl	8007cd2 <_Balloc>
 8007f00:	2201      	movs	r2, #1
 8007f02:	6144      	str	r4, [r0, #20]
 8007f04:	6102      	str	r2, [r0, #16]
 8007f06:	bd10      	pop	{r4, pc}

08007f08 <__multiply>:
 8007f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4614      	mov	r4, r2
 8007f0e:	690a      	ldr	r2, [r1, #16]
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	bfb8      	it	lt
 8007f16:	460b      	movlt	r3, r1
 8007f18:	4688      	mov	r8, r1
 8007f1a:	bfbc      	itt	lt
 8007f1c:	46a0      	movlt	r8, r4
 8007f1e:	461c      	movlt	r4, r3
 8007f20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f30:	eb07 0609 	add.w	r6, r7, r9
 8007f34:	42b3      	cmp	r3, r6
 8007f36:	bfb8      	it	lt
 8007f38:	3101      	addlt	r1, #1
 8007f3a:	f7ff feca 	bl	8007cd2 <_Balloc>
 8007f3e:	f100 0514 	add.w	r5, r0, #20
 8007f42:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007f46:	462b      	mov	r3, r5
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4573      	cmp	r3, lr
 8007f4c:	d316      	bcc.n	8007f7c <__multiply+0x74>
 8007f4e:	f104 0214 	add.w	r2, r4, #20
 8007f52:	f108 0114 	add.w	r1, r8, #20
 8007f56:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007f5a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	9b00      	ldr	r3, [sp, #0]
 8007f62:	9201      	str	r2, [sp, #4]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d80c      	bhi.n	8007f82 <__multiply+0x7a>
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	dd03      	ble.n	8007f74 <__multiply+0x6c>
 8007f6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d05d      	beq.n	8008030 <__multiply+0x128>
 8007f74:	6106      	str	r6, [r0, #16]
 8007f76:	b003      	add	sp, #12
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	f843 2b04 	str.w	r2, [r3], #4
 8007f80:	e7e3      	b.n	8007f4a <__multiply+0x42>
 8007f82:	f8b2 b000 	ldrh.w	fp, [r2]
 8007f86:	f1bb 0f00 	cmp.w	fp, #0
 8007f8a:	d023      	beq.n	8007fd4 <__multiply+0xcc>
 8007f8c:	4689      	mov	r9, r1
 8007f8e:	46ac      	mov	ip, r5
 8007f90:	f04f 0800 	mov.w	r8, #0
 8007f94:	f859 4b04 	ldr.w	r4, [r9], #4
 8007f98:	f8dc a000 	ldr.w	sl, [ip]
 8007f9c:	b2a3      	uxth	r3, r4
 8007f9e:	fa1f fa8a 	uxth.w	sl, sl
 8007fa2:	fb0b a303 	mla	r3, fp, r3, sl
 8007fa6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007faa:	f8dc 4000 	ldr.w	r4, [ip]
 8007fae:	4443      	add	r3, r8
 8007fb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007fb4:	fb0b 840a 	mla	r4, fp, sl, r8
 8007fb8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007fbc:	46e2      	mov	sl, ip
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007fc4:	454f      	cmp	r7, r9
 8007fc6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007fca:	f84a 3b04 	str.w	r3, [sl], #4
 8007fce:	d82b      	bhi.n	8008028 <__multiply+0x120>
 8007fd0:	f8cc 8004 	str.w	r8, [ip, #4]
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007fda:	3204      	adds	r2, #4
 8007fdc:	f1ba 0f00 	cmp.w	sl, #0
 8007fe0:	d020      	beq.n	8008024 <__multiply+0x11c>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	4689      	mov	r9, r1
 8007fe6:	46a8      	mov	r8, r5
 8007fe8:	f04f 0b00 	mov.w	fp, #0
 8007fec:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ff0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007ff4:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ff8:	445c      	add	r4, fp
 8007ffa:	46c4      	mov	ip, r8
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008002:	f84c 3b04 	str.w	r3, [ip], #4
 8008006:	f859 3b04 	ldr.w	r3, [r9], #4
 800800a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800800e:	0c1b      	lsrs	r3, r3, #16
 8008010:	fb0a b303 	mla	r3, sl, r3, fp
 8008014:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008018:	454f      	cmp	r7, r9
 800801a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800801e:	d805      	bhi.n	800802c <__multiply+0x124>
 8008020:	f8c8 3004 	str.w	r3, [r8, #4]
 8008024:	3504      	adds	r5, #4
 8008026:	e79b      	b.n	8007f60 <__multiply+0x58>
 8008028:	46d4      	mov	ip, sl
 800802a:	e7b3      	b.n	8007f94 <__multiply+0x8c>
 800802c:	46e0      	mov	r8, ip
 800802e:	e7dd      	b.n	8007fec <__multiply+0xe4>
 8008030:	3e01      	subs	r6, #1
 8008032:	e799      	b.n	8007f68 <__multiply+0x60>

08008034 <__pow5mult>:
 8008034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008038:	4615      	mov	r5, r2
 800803a:	f012 0203 	ands.w	r2, r2, #3
 800803e:	4606      	mov	r6, r0
 8008040:	460f      	mov	r7, r1
 8008042:	d007      	beq.n	8008054 <__pow5mult+0x20>
 8008044:	3a01      	subs	r2, #1
 8008046:	4c21      	ldr	r4, [pc, #132]	; (80080cc <__pow5mult+0x98>)
 8008048:	2300      	movs	r3, #0
 800804a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800804e:	f7ff fe8b 	bl	8007d68 <__multadd>
 8008052:	4607      	mov	r7, r0
 8008054:	10ad      	asrs	r5, r5, #2
 8008056:	d035      	beq.n	80080c4 <__pow5mult+0x90>
 8008058:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800805a:	b93c      	cbnz	r4, 800806c <__pow5mult+0x38>
 800805c:	2010      	movs	r0, #16
 800805e:	f7ff fe13 	bl	8007c88 <malloc>
 8008062:	6270      	str	r0, [r6, #36]	; 0x24
 8008064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008068:	6004      	str	r4, [r0, #0]
 800806a:	60c4      	str	r4, [r0, #12]
 800806c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008074:	b94c      	cbnz	r4, 800808a <__pow5mult+0x56>
 8008076:	f240 2171 	movw	r1, #625	; 0x271
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ff3b 	bl	8007ef6 <__i2b>
 8008080:	2300      	movs	r3, #0
 8008082:	f8c8 0008 	str.w	r0, [r8, #8]
 8008086:	4604      	mov	r4, r0
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	f04f 0800 	mov.w	r8, #0
 800808e:	07eb      	lsls	r3, r5, #31
 8008090:	d50a      	bpl.n	80080a8 <__pow5mult+0x74>
 8008092:	4639      	mov	r1, r7
 8008094:	4622      	mov	r2, r4
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ff36 	bl	8007f08 <__multiply>
 800809c:	4639      	mov	r1, r7
 800809e:	4681      	mov	r9, r0
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff fe4a 	bl	8007d3a <_Bfree>
 80080a6:	464f      	mov	r7, r9
 80080a8:	106d      	asrs	r5, r5, #1
 80080aa:	d00b      	beq.n	80080c4 <__pow5mult+0x90>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	b938      	cbnz	r0, 80080c0 <__pow5mult+0x8c>
 80080b0:	4622      	mov	r2, r4
 80080b2:	4621      	mov	r1, r4
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff ff27 	bl	8007f08 <__multiply>
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	f8c0 8000 	str.w	r8, [r0]
 80080c0:	4604      	mov	r4, r0
 80080c2:	e7e4      	b.n	800808e <__pow5mult+0x5a>
 80080c4:	4638      	mov	r0, r7
 80080c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ca:	bf00      	nop
 80080cc:	080093e0 	.word	0x080093e0

080080d0 <__lshift>:
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	460c      	mov	r4, r1
 80080d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080da:	6923      	ldr	r3, [r4, #16]
 80080dc:	6849      	ldr	r1, [r1, #4]
 80080de:	eb0a 0903 	add.w	r9, sl, r3
 80080e2:	68a3      	ldr	r3, [r4, #8]
 80080e4:	4607      	mov	r7, r0
 80080e6:	4616      	mov	r6, r2
 80080e8:	f109 0501 	add.w	r5, r9, #1
 80080ec:	42ab      	cmp	r3, r5
 80080ee:	db32      	blt.n	8008156 <__lshift+0x86>
 80080f0:	4638      	mov	r0, r7
 80080f2:	f7ff fdee 	bl	8007cd2 <_Balloc>
 80080f6:	2300      	movs	r3, #0
 80080f8:	4680      	mov	r8, r0
 80080fa:	f100 0114 	add.w	r1, r0, #20
 80080fe:	461a      	mov	r2, r3
 8008100:	4553      	cmp	r3, sl
 8008102:	db2b      	blt.n	800815c <__lshift+0x8c>
 8008104:	6920      	ldr	r0, [r4, #16]
 8008106:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800810a:	f104 0314 	add.w	r3, r4, #20
 800810e:	f016 021f 	ands.w	r2, r6, #31
 8008112:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008116:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800811a:	d025      	beq.n	8008168 <__lshift+0x98>
 800811c:	f1c2 0e20 	rsb	lr, r2, #32
 8008120:	2000      	movs	r0, #0
 8008122:	681e      	ldr	r6, [r3, #0]
 8008124:	468a      	mov	sl, r1
 8008126:	4096      	lsls	r6, r2
 8008128:	4330      	orrs	r0, r6
 800812a:	f84a 0b04 	str.w	r0, [sl], #4
 800812e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008132:	459c      	cmp	ip, r3
 8008134:	fa20 f00e 	lsr.w	r0, r0, lr
 8008138:	d814      	bhi.n	8008164 <__lshift+0x94>
 800813a:	6048      	str	r0, [r1, #4]
 800813c:	b108      	cbz	r0, 8008142 <__lshift+0x72>
 800813e:	f109 0502 	add.w	r5, r9, #2
 8008142:	3d01      	subs	r5, #1
 8008144:	4638      	mov	r0, r7
 8008146:	f8c8 5010 	str.w	r5, [r8, #16]
 800814a:	4621      	mov	r1, r4
 800814c:	f7ff fdf5 	bl	8007d3a <_Bfree>
 8008150:	4640      	mov	r0, r8
 8008152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008156:	3101      	adds	r1, #1
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	e7c7      	b.n	80080ec <__lshift+0x1c>
 800815c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008160:	3301      	adds	r3, #1
 8008162:	e7cd      	b.n	8008100 <__lshift+0x30>
 8008164:	4651      	mov	r1, sl
 8008166:	e7dc      	b.n	8008122 <__lshift+0x52>
 8008168:	3904      	subs	r1, #4
 800816a:	f853 2b04 	ldr.w	r2, [r3], #4
 800816e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008172:	459c      	cmp	ip, r3
 8008174:	d8f9      	bhi.n	800816a <__lshift+0x9a>
 8008176:	e7e4      	b.n	8008142 <__lshift+0x72>

08008178 <__mcmp>:
 8008178:	6903      	ldr	r3, [r0, #16]
 800817a:	690a      	ldr	r2, [r1, #16]
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	b530      	push	{r4, r5, lr}
 8008180:	d10c      	bne.n	800819c <__mcmp+0x24>
 8008182:	0092      	lsls	r2, r2, #2
 8008184:	3014      	adds	r0, #20
 8008186:	3114      	adds	r1, #20
 8008188:	1884      	adds	r4, r0, r2
 800818a:	4411      	add	r1, r2
 800818c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008194:	4295      	cmp	r5, r2
 8008196:	d003      	beq.n	80081a0 <__mcmp+0x28>
 8008198:	d305      	bcc.n	80081a6 <__mcmp+0x2e>
 800819a:	2301      	movs	r3, #1
 800819c:	4618      	mov	r0, r3
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	42a0      	cmp	r0, r4
 80081a2:	d3f3      	bcc.n	800818c <__mcmp+0x14>
 80081a4:	e7fa      	b.n	800819c <__mcmp+0x24>
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081aa:	e7f7      	b.n	800819c <__mcmp+0x24>

080081ac <__mdiff>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	460d      	mov	r5, r1
 80081b2:	4607      	mov	r7, r0
 80081b4:	4611      	mov	r1, r2
 80081b6:	4628      	mov	r0, r5
 80081b8:	4614      	mov	r4, r2
 80081ba:	f7ff ffdd 	bl	8008178 <__mcmp>
 80081be:	1e06      	subs	r6, r0, #0
 80081c0:	d108      	bne.n	80081d4 <__mdiff+0x28>
 80081c2:	4631      	mov	r1, r6
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff fd84 	bl	8007cd2 <_Balloc>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80081d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d4:	bfa4      	itt	ge
 80081d6:	4623      	movge	r3, r4
 80081d8:	462c      	movge	r4, r5
 80081da:	4638      	mov	r0, r7
 80081dc:	6861      	ldr	r1, [r4, #4]
 80081de:	bfa6      	itte	ge
 80081e0:	461d      	movge	r5, r3
 80081e2:	2600      	movge	r6, #0
 80081e4:	2601      	movlt	r6, #1
 80081e6:	f7ff fd74 	bl	8007cd2 <_Balloc>
 80081ea:	692b      	ldr	r3, [r5, #16]
 80081ec:	60c6      	str	r6, [r0, #12]
 80081ee:	6926      	ldr	r6, [r4, #16]
 80081f0:	f105 0914 	add.w	r9, r5, #20
 80081f4:	f104 0214 	add.w	r2, r4, #20
 80081f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80081fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008200:	f100 0514 	add.w	r5, r0, #20
 8008204:	f04f 0e00 	mov.w	lr, #0
 8008208:	f852 ab04 	ldr.w	sl, [r2], #4
 800820c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008210:	fa1e f18a 	uxtah	r1, lr, sl
 8008214:	b2a3      	uxth	r3, r4
 8008216:	1ac9      	subs	r1, r1, r3
 8008218:	0c23      	lsrs	r3, r4, #16
 800821a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800821e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008222:	b289      	uxth	r1, r1
 8008224:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008228:	45c8      	cmp	r8, r9
 800822a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800822e:	4694      	mov	ip, r2
 8008230:	f845 3b04 	str.w	r3, [r5], #4
 8008234:	d8e8      	bhi.n	8008208 <__mdiff+0x5c>
 8008236:	45bc      	cmp	ip, r7
 8008238:	d304      	bcc.n	8008244 <__mdiff+0x98>
 800823a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800823e:	b183      	cbz	r3, 8008262 <__mdiff+0xb6>
 8008240:	6106      	str	r6, [r0, #16]
 8008242:	e7c5      	b.n	80081d0 <__mdiff+0x24>
 8008244:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008248:	fa1e f381 	uxtah	r3, lr, r1
 800824c:	141a      	asrs	r2, r3, #16
 800824e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008252:	b29b      	uxth	r3, r3
 8008254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008258:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800825c:	f845 3b04 	str.w	r3, [r5], #4
 8008260:	e7e9      	b.n	8008236 <__mdiff+0x8a>
 8008262:	3e01      	subs	r6, #1
 8008264:	e7e9      	b.n	800823a <__mdiff+0x8e>
	...

08008268 <__ulp>:
 8008268:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <__ulp+0x4c>)
 800826a:	ee10 2a90 	vmov	r2, s1
 800826e:	401a      	ands	r2, r3
 8008270:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008274:	2b00      	cmp	r3, #0
 8008276:	dd04      	ble.n	8008282 <__ulp+0x1a>
 8008278:	2000      	movs	r0, #0
 800827a:	4619      	mov	r1, r3
 800827c:	ec41 0b10 	vmov	d0, r0, r1
 8008280:	4770      	bx	lr
 8008282:	425b      	negs	r3, r3
 8008284:	151b      	asrs	r3, r3, #20
 8008286:	2b13      	cmp	r3, #19
 8008288:	f04f 0000 	mov.w	r0, #0
 800828c:	f04f 0100 	mov.w	r1, #0
 8008290:	dc04      	bgt.n	800829c <__ulp+0x34>
 8008292:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008296:	fa42 f103 	asr.w	r1, r2, r3
 800829a:	e7ef      	b.n	800827c <__ulp+0x14>
 800829c:	3b14      	subs	r3, #20
 800829e:	2b1e      	cmp	r3, #30
 80082a0:	f04f 0201 	mov.w	r2, #1
 80082a4:	bfda      	itte	le
 80082a6:	f1c3 031f 	rsble	r3, r3, #31
 80082aa:	fa02 f303 	lslle.w	r3, r2, r3
 80082ae:	4613      	movgt	r3, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	e7e3      	b.n	800827c <__ulp+0x14>
 80082b4:	7ff00000 	.word	0x7ff00000

080082b8 <__b2d>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	6905      	ldr	r5, [r0, #16]
 80082bc:	f100 0714 	add.w	r7, r0, #20
 80082c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80082c4:	1f2e      	subs	r6, r5, #4
 80082c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7ff fdc5 	bl	8007e5a <__hi0bits>
 80082d0:	f1c0 0320 	rsb	r3, r0, #32
 80082d4:	280a      	cmp	r0, #10
 80082d6:	600b      	str	r3, [r1, #0]
 80082d8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008350 <__b2d+0x98>
 80082dc:	dc14      	bgt.n	8008308 <__b2d+0x50>
 80082de:	f1c0 0e0b 	rsb	lr, r0, #11
 80082e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80082e6:	42b7      	cmp	r7, r6
 80082e8:	ea41 030c 	orr.w	r3, r1, ip
 80082ec:	bf34      	ite	cc
 80082ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80082f2:	2100      	movcs	r1, #0
 80082f4:	3015      	adds	r0, #21
 80082f6:	fa04 f000 	lsl.w	r0, r4, r0
 80082fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80082fe:	ea40 0201 	orr.w	r2, r0, r1
 8008302:	ec43 2b10 	vmov	d0, r2, r3
 8008306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008308:	42b7      	cmp	r7, r6
 800830a:	bf3a      	itte	cc
 800830c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008310:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008314:	2100      	movcs	r1, #0
 8008316:	380b      	subs	r0, #11
 8008318:	d015      	beq.n	8008346 <__b2d+0x8e>
 800831a:	4084      	lsls	r4, r0
 800831c:	f1c0 0520 	rsb	r5, r0, #32
 8008320:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008324:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008328:	42be      	cmp	r6, r7
 800832a:	fa21 fc05 	lsr.w	ip, r1, r5
 800832e:	ea44 030c 	orr.w	r3, r4, ip
 8008332:	bf8c      	ite	hi
 8008334:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008338:	2400      	movls	r4, #0
 800833a:	fa01 f000 	lsl.w	r0, r1, r0
 800833e:	40ec      	lsrs	r4, r5
 8008340:	ea40 0204 	orr.w	r2, r0, r4
 8008344:	e7dd      	b.n	8008302 <__b2d+0x4a>
 8008346:	ea44 030c 	orr.w	r3, r4, ip
 800834a:	460a      	mov	r2, r1
 800834c:	e7d9      	b.n	8008302 <__b2d+0x4a>
 800834e:	bf00      	nop
 8008350:	3ff00000 	.word	0x3ff00000

08008354 <__d2b>:
 8008354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008358:	460e      	mov	r6, r1
 800835a:	2101      	movs	r1, #1
 800835c:	ec59 8b10 	vmov	r8, r9, d0
 8008360:	4615      	mov	r5, r2
 8008362:	f7ff fcb6 	bl	8007cd2 <_Balloc>
 8008366:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800836a:	4607      	mov	r7, r0
 800836c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008370:	bb34      	cbnz	r4, 80083c0 <__d2b+0x6c>
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	f1b8 0300 	subs.w	r3, r8, #0
 8008378:	d027      	beq.n	80083ca <__d2b+0x76>
 800837a:	a802      	add	r0, sp, #8
 800837c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008380:	f7ff fd8a 	bl	8007e98 <__lo0bits>
 8008384:	9900      	ldr	r1, [sp, #0]
 8008386:	b1f0      	cbz	r0, 80083c6 <__d2b+0x72>
 8008388:	9a01      	ldr	r2, [sp, #4]
 800838a:	f1c0 0320 	rsb	r3, r0, #32
 800838e:	fa02 f303 	lsl.w	r3, r2, r3
 8008392:	430b      	orrs	r3, r1
 8008394:	40c2      	lsrs	r2, r0
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	9201      	str	r2, [sp, #4]
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bf14      	ite	ne
 80083a2:	2102      	movne	r1, #2
 80083a4:	2101      	moveq	r1, #1
 80083a6:	6139      	str	r1, [r7, #16]
 80083a8:	b1c4      	cbz	r4, 80083dc <__d2b+0x88>
 80083aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083ae:	4404      	add	r4, r0
 80083b0:	6034      	str	r4, [r6, #0]
 80083b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083b6:	6028      	str	r0, [r5, #0]
 80083b8:	4638      	mov	r0, r7
 80083ba:	b003      	add	sp, #12
 80083bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083c4:	e7d5      	b.n	8008372 <__d2b+0x1e>
 80083c6:	6179      	str	r1, [r7, #20]
 80083c8:	e7e7      	b.n	800839a <__d2b+0x46>
 80083ca:	a801      	add	r0, sp, #4
 80083cc:	f7ff fd64 	bl	8007e98 <__lo0bits>
 80083d0:	9b01      	ldr	r3, [sp, #4]
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	2101      	movs	r1, #1
 80083d6:	6139      	str	r1, [r7, #16]
 80083d8:	3020      	adds	r0, #32
 80083da:	e7e5      	b.n	80083a8 <__d2b+0x54>
 80083dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80083e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083e4:	6030      	str	r0, [r6, #0]
 80083e6:	6918      	ldr	r0, [r3, #16]
 80083e8:	f7ff fd37 	bl	8007e5a <__hi0bits>
 80083ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80083f0:	e7e1      	b.n	80083b6 <__d2b+0x62>

080083f2 <__ratio>:
 80083f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f6:	4688      	mov	r8, r1
 80083f8:	4669      	mov	r1, sp
 80083fa:	4681      	mov	r9, r0
 80083fc:	f7ff ff5c 	bl	80082b8 <__b2d>
 8008400:	a901      	add	r1, sp, #4
 8008402:	4640      	mov	r0, r8
 8008404:	ec57 6b10 	vmov	r6, r7, d0
 8008408:	f7ff ff56 	bl	80082b8 <__b2d>
 800840c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008410:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008414:	eba3 0c02 	sub.w	ip, r3, r2
 8008418:	e9dd 3200 	ldrd	r3, r2, [sp]
 800841c:	1a9b      	subs	r3, r3, r2
 800841e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008422:	ec5b ab10 	vmov	sl, fp, d0
 8008426:	2b00      	cmp	r3, #0
 8008428:	bfce      	itee	gt
 800842a:	463a      	movgt	r2, r7
 800842c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008430:	465a      	movle	r2, fp
 8008432:	4659      	mov	r1, fp
 8008434:	463d      	mov	r5, r7
 8008436:	bfd4      	ite	le
 8008438:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800843c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008440:	4630      	mov	r0, r6
 8008442:	ee10 2a10 	vmov	r2, s0
 8008446:	460b      	mov	r3, r1
 8008448:	4629      	mov	r1, r5
 800844a:	f7f8 f9ff 	bl	800084c <__aeabi_ddiv>
 800844e:	ec41 0b10 	vmov	d0, r0, r1
 8008452:	b003      	add	sp, #12
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008458 <__copybits>:
 8008458:	3901      	subs	r1, #1
 800845a:	b510      	push	{r4, lr}
 800845c:	1149      	asrs	r1, r1, #5
 800845e:	6914      	ldr	r4, [r2, #16]
 8008460:	3101      	adds	r1, #1
 8008462:	f102 0314 	add.w	r3, r2, #20
 8008466:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800846a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800846e:	42a3      	cmp	r3, r4
 8008470:	4602      	mov	r2, r0
 8008472:	d303      	bcc.n	800847c <__copybits+0x24>
 8008474:	2300      	movs	r3, #0
 8008476:	428a      	cmp	r2, r1
 8008478:	d305      	bcc.n	8008486 <__copybits+0x2e>
 800847a:	bd10      	pop	{r4, pc}
 800847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008480:	f840 2b04 	str.w	r2, [r0], #4
 8008484:	e7f3      	b.n	800846e <__copybits+0x16>
 8008486:	f842 3b04 	str.w	r3, [r2], #4
 800848a:	e7f4      	b.n	8008476 <__copybits+0x1e>

0800848c <__any_on>:
 800848c:	f100 0214 	add.w	r2, r0, #20
 8008490:	6900      	ldr	r0, [r0, #16]
 8008492:	114b      	asrs	r3, r1, #5
 8008494:	4298      	cmp	r0, r3
 8008496:	b510      	push	{r4, lr}
 8008498:	db11      	blt.n	80084be <__any_on+0x32>
 800849a:	dd0a      	ble.n	80084b2 <__any_on+0x26>
 800849c:	f011 011f 	ands.w	r1, r1, #31
 80084a0:	d007      	beq.n	80084b2 <__any_on+0x26>
 80084a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084a6:	fa24 f001 	lsr.w	r0, r4, r1
 80084aa:	fa00 f101 	lsl.w	r1, r0, r1
 80084ae:	428c      	cmp	r4, r1
 80084b0:	d10b      	bne.n	80084ca <__any_on+0x3e>
 80084b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d803      	bhi.n	80084c2 <__any_on+0x36>
 80084ba:	2000      	movs	r0, #0
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	4603      	mov	r3, r0
 80084c0:	e7f7      	b.n	80084b2 <__any_on+0x26>
 80084c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084c6:	2900      	cmp	r1, #0
 80084c8:	d0f5      	beq.n	80084b6 <__any_on+0x2a>
 80084ca:	2001      	movs	r0, #1
 80084cc:	e7f6      	b.n	80084bc <__any_on+0x30>

080084ce <_calloc_r>:
 80084ce:	b538      	push	{r3, r4, r5, lr}
 80084d0:	fb02 f401 	mul.w	r4, r2, r1
 80084d4:	4621      	mov	r1, r4
 80084d6:	f000 f857 	bl	8008588 <_malloc_r>
 80084da:	4605      	mov	r5, r0
 80084dc:	b118      	cbz	r0, 80084e6 <_calloc_r+0x18>
 80084de:	4622      	mov	r2, r4
 80084e0:	2100      	movs	r1, #0
 80084e2:	f7fc fc55 	bl	8004d90 <memset>
 80084e6:	4628      	mov	r0, r5
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080084ec <_free_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4605      	mov	r5, r0
 80084f0:	2900      	cmp	r1, #0
 80084f2:	d045      	beq.n	8008580 <_free_r+0x94>
 80084f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f8:	1f0c      	subs	r4, r1, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bfb8      	it	lt
 80084fe:	18e4      	addlt	r4, r4, r3
 8008500:	f000 fdc3 	bl	800908a <__malloc_lock>
 8008504:	4a1f      	ldr	r2, [pc, #124]	; (8008584 <_free_r+0x98>)
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	4610      	mov	r0, r2
 800850a:	b933      	cbnz	r3, 800851a <_free_r+0x2e>
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	6014      	str	r4, [r2, #0]
 8008510:	4628      	mov	r0, r5
 8008512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008516:	f000 bdb9 	b.w	800908c <__malloc_unlock>
 800851a:	42a3      	cmp	r3, r4
 800851c:	d90c      	bls.n	8008538 <_free_r+0x4c>
 800851e:	6821      	ldr	r1, [r4, #0]
 8008520:	1862      	adds	r2, r4, r1
 8008522:	4293      	cmp	r3, r2
 8008524:	bf04      	itt	eq
 8008526:	681a      	ldreq	r2, [r3, #0]
 8008528:	685b      	ldreq	r3, [r3, #4]
 800852a:	6063      	str	r3, [r4, #4]
 800852c:	bf04      	itt	eq
 800852e:	1852      	addeq	r2, r2, r1
 8008530:	6022      	streq	r2, [r4, #0]
 8008532:	6004      	str	r4, [r0, #0]
 8008534:	e7ec      	b.n	8008510 <_free_r+0x24>
 8008536:	4613      	mov	r3, r2
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	b10a      	cbz	r2, 8008540 <_free_r+0x54>
 800853c:	42a2      	cmp	r2, r4
 800853e:	d9fa      	bls.n	8008536 <_free_r+0x4a>
 8008540:	6819      	ldr	r1, [r3, #0]
 8008542:	1858      	adds	r0, r3, r1
 8008544:	42a0      	cmp	r0, r4
 8008546:	d10b      	bne.n	8008560 <_free_r+0x74>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	4401      	add	r1, r0
 800854c:	1858      	adds	r0, r3, r1
 800854e:	4282      	cmp	r2, r0
 8008550:	6019      	str	r1, [r3, #0]
 8008552:	d1dd      	bne.n	8008510 <_free_r+0x24>
 8008554:	6810      	ldr	r0, [r2, #0]
 8008556:	6852      	ldr	r2, [r2, #4]
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	4401      	add	r1, r0
 800855c:	6019      	str	r1, [r3, #0]
 800855e:	e7d7      	b.n	8008510 <_free_r+0x24>
 8008560:	d902      	bls.n	8008568 <_free_r+0x7c>
 8008562:	230c      	movs	r3, #12
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	e7d3      	b.n	8008510 <_free_r+0x24>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	1821      	adds	r1, r4, r0
 800856c:	428a      	cmp	r2, r1
 800856e:	bf04      	itt	eq
 8008570:	6811      	ldreq	r1, [r2, #0]
 8008572:	6852      	ldreq	r2, [r2, #4]
 8008574:	6062      	str	r2, [r4, #4]
 8008576:	bf04      	itt	eq
 8008578:	1809      	addeq	r1, r1, r0
 800857a:	6021      	streq	r1, [r4, #0]
 800857c:	605c      	str	r4, [r3, #4]
 800857e:	e7c7      	b.n	8008510 <_free_r+0x24>
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	bf00      	nop
 8008584:	2000020c 	.word	0x2000020c

08008588 <_malloc_r>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	1ccd      	adds	r5, r1, #3
 800858c:	f025 0503 	bic.w	r5, r5, #3
 8008590:	3508      	adds	r5, #8
 8008592:	2d0c      	cmp	r5, #12
 8008594:	bf38      	it	cc
 8008596:	250c      	movcc	r5, #12
 8008598:	2d00      	cmp	r5, #0
 800859a:	4606      	mov	r6, r0
 800859c:	db01      	blt.n	80085a2 <_malloc_r+0x1a>
 800859e:	42a9      	cmp	r1, r5
 80085a0:	d903      	bls.n	80085aa <_malloc_r+0x22>
 80085a2:	230c      	movs	r3, #12
 80085a4:	6033      	str	r3, [r6, #0]
 80085a6:	2000      	movs	r0, #0
 80085a8:	bd70      	pop	{r4, r5, r6, pc}
 80085aa:	f000 fd6e 	bl	800908a <__malloc_lock>
 80085ae:	4a21      	ldr	r2, [pc, #132]	; (8008634 <_malloc_r+0xac>)
 80085b0:	6814      	ldr	r4, [r2, #0]
 80085b2:	4621      	mov	r1, r4
 80085b4:	b991      	cbnz	r1, 80085dc <_malloc_r+0x54>
 80085b6:	4c20      	ldr	r4, [pc, #128]	; (8008638 <_malloc_r+0xb0>)
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	b91b      	cbnz	r3, 80085c4 <_malloc_r+0x3c>
 80085bc:	4630      	mov	r0, r6
 80085be:	f000 facf 	bl	8008b60 <_sbrk_r>
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	4629      	mov	r1, r5
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 faca 	bl	8008b60 <_sbrk_r>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d124      	bne.n	800861a <_malloc_r+0x92>
 80085d0:	230c      	movs	r3, #12
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	4630      	mov	r0, r6
 80085d6:	f000 fd59 	bl	800908c <__malloc_unlock>
 80085da:	e7e4      	b.n	80085a6 <_malloc_r+0x1e>
 80085dc:	680b      	ldr	r3, [r1, #0]
 80085de:	1b5b      	subs	r3, r3, r5
 80085e0:	d418      	bmi.n	8008614 <_malloc_r+0x8c>
 80085e2:	2b0b      	cmp	r3, #11
 80085e4:	d90f      	bls.n	8008606 <_malloc_r+0x7e>
 80085e6:	600b      	str	r3, [r1, #0]
 80085e8:	50cd      	str	r5, [r1, r3]
 80085ea:	18cc      	adds	r4, r1, r3
 80085ec:	4630      	mov	r0, r6
 80085ee:	f000 fd4d 	bl	800908c <__malloc_unlock>
 80085f2:	f104 000b 	add.w	r0, r4, #11
 80085f6:	1d23      	adds	r3, r4, #4
 80085f8:	f020 0007 	bic.w	r0, r0, #7
 80085fc:	1ac3      	subs	r3, r0, r3
 80085fe:	d0d3      	beq.n	80085a8 <_malloc_r+0x20>
 8008600:	425a      	negs	r2, r3
 8008602:	50e2      	str	r2, [r4, r3]
 8008604:	e7d0      	b.n	80085a8 <_malloc_r+0x20>
 8008606:	428c      	cmp	r4, r1
 8008608:	684b      	ldr	r3, [r1, #4]
 800860a:	bf16      	itet	ne
 800860c:	6063      	strne	r3, [r4, #4]
 800860e:	6013      	streq	r3, [r2, #0]
 8008610:	460c      	movne	r4, r1
 8008612:	e7eb      	b.n	80085ec <_malloc_r+0x64>
 8008614:	460c      	mov	r4, r1
 8008616:	6849      	ldr	r1, [r1, #4]
 8008618:	e7cc      	b.n	80085b4 <_malloc_r+0x2c>
 800861a:	1cc4      	adds	r4, r0, #3
 800861c:	f024 0403 	bic.w	r4, r4, #3
 8008620:	42a0      	cmp	r0, r4
 8008622:	d005      	beq.n	8008630 <_malloc_r+0xa8>
 8008624:	1a21      	subs	r1, r4, r0
 8008626:	4630      	mov	r0, r6
 8008628:	f000 fa9a 	bl	8008b60 <_sbrk_r>
 800862c:	3001      	adds	r0, #1
 800862e:	d0cf      	beq.n	80085d0 <_malloc_r+0x48>
 8008630:	6025      	str	r5, [r4, #0]
 8008632:	e7db      	b.n	80085ec <_malloc_r+0x64>
 8008634:	2000020c 	.word	0x2000020c
 8008638:	20000210 	.word	0x20000210

0800863c <__ssputs_r>:
 800863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	688e      	ldr	r6, [r1, #8]
 8008642:	429e      	cmp	r6, r3
 8008644:	4682      	mov	sl, r0
 8008646:	460c      	mov	r4, r1
 8008648:	4690      	mov	r8, r2
 800864a:	4699      	mov	r9, r3
 800864c:	d837      	bhi.n	80086be <__ssputs_r+0x82>
 800864e:	898a      	ldrh	r2, [r1, #12]
 8008650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008654:	d031      	beq.n	80086ba <__ssputs_r+0x7e>
 8008656:	6825      	ldr	r5, [r4, #0]
 8008658:	6909      	ldr	r1, [r1, #16]
 800865a:	1a6f      	subs	r7, r5, r1
 800865c:	6965      	ldr	r5, [r4, #20]
 800865e:	2302      	movs	r3, #2
 8008660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008664:	fb95 f5f3 	sdiv	r5, r5, r3
 8008668:	f109 0301 	add.w	r3, r9, #1
 800866c:	443b      	add	r3, r7
 800866e:	429d      	cmp	r5, r3
 8008670:	bf38      	it	cc
 8008672:	461d      	movcc	r5, r3
 8008674:	0553      	lsls	r3, r2, #21
 8008676:	d530      	bpl.n	80086da <__ssputs_r+0x9e>
 8008678:	4629      	mov	r1, r5
 800867a:	f7ff ff85 	bl	8008588 <_malloc_r>
 800867e:	4606      	mov	r6, r0
 8008680:	b950      	cbnz	r0, 8008698 <__ssputs_r+0x5c>
 8008682:	230c      	movs	r3, #12
 8008684:	f8ca 3000 	str.w	r3, [sl]
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008698:	463a      	mov	r2, r7
 800869a:	6921      	ldr	r1, [r4, #16]
 800869c:	f7ff fb0e 	bl	8007cbc <memcpy>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	6126      	str	r6, [r4, #16]
 80086ae:	6165      	str	r5, [r4, #20]
 80086b0:	443e      	add	r6, r7
 80086b2:	1bed      	subs	r5, r5, r7
 80086b4:	6026      	str	r6, [r4, #0]
 80086b6:	60a5      	str	r5, [r4, #8]
 80086b8:	464e      	mov	r6, r9
 80086ba:	454e      	cmp	r6, r9
 80086bc:	d900      	bls.n	80086c0 <__ssputs_r+0x84>
 80086be:	464e      	mov	r6, r9
 80086c0:	4632      	mov	r2, r6
 80086c2:	4641      	mov	r1, r8
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	f000 fcc7 	bl	8009058 <memmove>
 80086ca:	68a3      	ldr	r3, [r4, #8]
 80086cc:	1b9b      	subs	r3, r3, r6
 80086ce:	60a3      	str	r3, [r4, #8]
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	441e      	add	r6, r3
 80086d4:	6026      	str	r6, [r4, #0]
 80086d6:	2000      	movs	r0, #0
 80086d8:	e7dc      	b.n	8008694 <__ssputs_r+0x58>
 80086da:	462a      	mov	r2, r5
 80086dc:	f000 fcd7 	bl	800908e <_realloc_r>
 80086e0:	4606      	mov	r6, r0
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d1e2      	bne.n	80086ac <__ssputs_r+0x70>
 80086e6:	6921      	ldr	r1, [r4, #16]
 80086e8:	4650      	mov	r0, sl
 80086ea:	f7ff feff 	bl	80084ec <_free_r>
 80086ee:	e7c8      	b.n	8008682 <__ssputs_r+0x46>

080086f0 <_svfiprintf_r>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	461d      	mov	r5, r3
 80086f6:	898b      	ldrh	r3, [r1, #12]
 80086f8:	061f      	lsls	r7, r3, #24
 80086fa:	b09d      	sub	sp, #116	; 0x74
 80086fc:	4680      	mov	r8, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	4616      	mov	r6, r2
 8008702:	d50f      	bpl.n	8008724 <_svfiprintf_r+0x34>
 8008704:	690b      	ldr	r3, [r1, #16]
 8008706:	b96b      	cbnz	r3, 8008724 <_svfiprintf_r+0x34>
 8008708:	2140      	movs	r1, #64	; 0x40
 800870a:	f7ff ff3d 	bl	8008588 <_malloc_r>
 800870e:	6020      	str	r0, [r4, #0]
 8008710:	6120      	str	r0, [r4, #16]
 8008712:	b928      	cbnz	r0, 8008720 <_svfiprintf_r+0x30>
 8008714:	230c      	movs	r3, #12
 8008716:	f8c8 3000 	str.w	r3, [r8]
 800871a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800871e:	e0c8      	b.n	80088b2 <_svfiprintf_r+0x1c2>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	2300      	movs	r3, #0
 8008726:	9309      	str	r3, [sp, #36]	; 0x24
 8008728:	2320      	movs	r3, #32
 800872a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800872e:	2330      	movs	r3, #48	; 0x30
 8008730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008734:	9503      	str	r5, [sp, #12]
 8008736:	f04f 0b01 	mov.w	fp, #1
 800873a:	4637      	mov	r7, r6
 800873c:	463d      	mov	r5, r7
 800873e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008742:	b10b      	cbz	r3, 8008748 <_svfiprintf_r+0x58>
 8008744:	2b25      	cmp	r3, #37	; 0x25
 8008746:	d13e      	bne.n	80087c6 <_svfiprintf_r+0xd6>
 8008748:	ebb7 0a06 	subs.w	sl, r7, r6
 800874c:	d00b      	beq.n	8008766 <_svfiprintf_r+0x76>
 800874e:	4653      	mov	r3, sl
 8008750:	4632      	mov	r2, r6
 8008752:	4621      	mov	r1, r4
 8008754:	4640      	mov	r0, r8
 8008756:	f7ff ff71 	bl	800863c <__ssputs_r>
 800875a:	3001      	adds	r0, #1
 800875c:	f000 80a4 	beq.w	80088a8 <_svfiprintf_r+0x1b8>
 8008760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008762:	4453      	add	r3, sl
 8008764:	9309      	str	r3, [sp, #36]	; 0x24
 8008766:	783b      	ldrb	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 809d 	beq.w	80088a8 <_svfiprintf_r+0x1b8>
 800876e:	2300      	movs	r3, #0
 8008770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008780:	931a      	str	r3, [sp, #104]	; 0x68
 8008782:	462f      	mov	r7, r5
 8008784:	2205      	movs	r2, #5
 8008786:	f817 1b01 	ldrb.w	r1, [r7], #1
 800878a:	4850      	ldr	r0, [pc, #320]	; (80088cc <_svfiprintf_r+0x1dc>)
 800878c:	f7f7 fd28 	bl	80001e0 <memchr>
 8008790:	9b04      	ldr	r3, [sp, #16]
 8008792:	b9d0      	cbnz	r0, 80087ca <_svfiprintf_r+0xda>
 8008794:	06d9      	lsls	r1, r3, #27
 8008796:	bf44      	itt	mi
 8008798:	2220      	movmi	r2, #32
 800879a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800879e:	071a      	lsls	r2, r3, #28
 80087a0:	bf44      	itt	mi
 80087a2:	222b      	movmi	r2, #43	; 0x2b
 80087a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087a8:	782a      	ldrb	r2, [r5, #0]
 80087aa:	2a2a      	cmp	r2, #42	; 0x2a
 80087ac:	d015      	beq.n	80087da <_svfiprintf_r+0xea>
 80087ae:	9a07      	ldr	r2, [sp, #28]
 80087b0:	462f      	mov	r7, r5
 80087b2:	2000      	movs	r0, #0
 80087b4:	250a      	movs	r5, #10
 80087b6:	4639      	mov	r1, r7
 80087b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087bc:	3b30      	subs	r3, #48	; 0x30
 80087be:	2b09      	cmp	r3, #9
 80087c0:	d94d      	bls.n	800885e <_svfiprintf_r+0x16e>
 80087c2:	b1b8      	cbz	r0, 80087f4 <_svfiprintf_r+0x104>
 80087c4:	e00f      	b.n	80087e6 <_svfiprintf_r+0xf6>
 80087c6:	462f      	mov	r7, r5
 80087c8:	e7b8      	b.n	800873c <_svfiprintf_r+0x4c>
 80087ca:	4a40      	ldr	r2, [pc, #256]	; (80088cc <_svfiprintf_r+0x1dc>)
 80087cc:	1a80      	subs	r0, r0, r2
 80087ce:	fa0b f000 	lsl.w	r0, fp, r0
 80087d2:	4318      	orrs	r0, r3
 80087d4:	9004      	str	r0, [sp, #16]
 80087d6:	463d      	mov	r5, r7
 80087d8:	e7d3      	b.n	8008782 <_svfiprintf_r+0x92>
 80087da:	9a03      	ldr	r2, [sp, #12]
 80087dc:	1d11      	adds	r1, r2, #4
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	9103      	str	r1, [sp, #12]
 80087e2:	2a00      	cmp	r2, #0
 80087e4:	db01      	blt.n	80087ea <_svfiprintf_r+0xfa>
 80087e6:	9207      	str	r2, [sp, #28]
 80087e8:	e004      	b.n	80087f4 <_svfiprintf_r+0x104>
 80087ea:	4252      	negs	r2, r2
 80087ec:	f043 0302 	orr.w	r3, r3, #2
 80087f0:	9207      	str	r2, [sp, #28]
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	783b      	ldrb	r3, [r7, #0]
 80087f6:	2b2e      	cmp	r3, #46	; 0x2e
 80087f8:	d10c      	bne.n	8008814 <_svfiprintf_r+0x124>
 80087fa:	787b      	ldrb	r3, [r7, #1]
 80087fc:	2b2a      	cmp	r3, #42	; 0x2a
 80087fe:	d133      	bne.n	8008868 <_svfiprintf_r+0x178>
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	1d1a      	adds	r2, r3, #4
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	9203      	str	r2, [sp, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfb8      	it	lt
 800880c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008810:	3702      	adds	r7, #2
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	4d2e      	ldr	r5, [pc, #184]	; (80088d0 <_svfiprintf_r+0x1e0>)
 8008816:	7839      	ldrb	r1, [r7, #0]
 8008818:	2203      	movs	r2, #3
 800881a:	4628      	mov	r0, r5
 800881c:	f7f7 fce0 	bl	80001e0 <memchr>
 8008820:	b138      	cbz	r0, 8008832 <_svfiprintf_r+0x142>
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	1b40      	subs	r0, r0, r5
 8008826:	fa03 f000 	lsl.w	r0, r3, r0
 800882a:	9b04      	ldr	r3, [sp, #16]
 800882c:	4303      	orrs	r3, r0
 800882e:	3701      	adds	r7, #1
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	7839      	ldrb	r1, [r7, #0]
 8008834:	4827      	ldr	r0, [pc, #156]	; (80088d4 <_svfiprintf_r+0x1e4>)
 8008836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800883a:	2206      	movs	r2, #6
 800883c:	1c7e      	adds	r6, r7, #1
 800883e:	f7f7 fccf 	bl	80001e0 <memchr>
 8008842:	2800      	cmp	r0, #0
 8008844:	d038      	beq.n	80088b8 <_svfiprintf_r+0x1c8>
 8008846:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <_svfiprintf_r+0x1e8>)
 8008848:	bb13      	cbnz	r3, 8008890 <_svfiprintf_r+0x1a0>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	3307      	adds	r3, #7
 800884e:	f023 0307 	bic.w	r3, r3, #7
 8008852:	3308      	adds	r3, #8
 8008854:	9303      	str	r3, [sp, #12]
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	444b      	add	r3, r9
 800885a:	9309      	str	r3, [sp, #36]	; 0x24
 800885c:	e76d      	b.n	800873a <_svfiprintf_r+0x4a>
 800885e:	fb05 3202 	mla	r2, r5, r2, r3
 8008862:	2001      	movs	r0, #1
 8008864:	460f      	mov	r7, r1
 8008866:	e7a6      	b.n	80087b6 <_svfiprintf_r+0xc6>
 8008868:	2300      	movs	r3, #0
 800886a:	3701      	adds	r7, #1
 800886c:	9305      	str	r3, [sp, #20]
 800886e:	4619      	mov	r1, r3
 8008870:	250a      	movs	r5, #10
 8008872:	4638      	mov	r0, r7
 8008874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008878:	3a30      	subs	r2, #48	; 0x30
 800887a:	2a09      	cmp	r2, #9
 800887c:	d903      	bls.n	8008886 <_svfiprintf_r+0x196>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0c8      	beq.n	8008814 <_svfiprintf_r+0x124>
 8008882:	9105      	str	r1, [sp, #20]
 8008884:	e7c6      	b.n	8008814 <_svfiprintf_r+0x124>
 8008886:	fb05 2101 	mla	r1, r5, r1, r2
 800888a:	2301      	movs	r3, #1
 800888c:	4607      	mov	r7, r0
 800888e:	e7f0      	b.n	8008872 <_svfiprintf_r+0x182>
 8008890:	ab03      	add	r3, sp, #12
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	4622      	mov	r2, r4
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <_svfiprintf_r+0x1ec>)
 8008898:	a904      	add	r1, sp, #16
 800889a:	4640      	mov	r0, r8
 800889c:	f7fc fb14 	bl	8004ec8 <_printf_float>
 80088a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80088a4:	4681      	mov	r9, r0
 80088a6:	d1d6      	bne.n	8008856 <_svfiprintf_r+0x166>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	065b      	lsls	r3, r3, #25
 80088ac:	f53f af35 	bmi.w	800871a <_svfiprintf_r+0x2a>
 80088b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b2:	b01d      	add	sp, #116	; 0x74
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	ab03      	add	r3, sp, #12
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	4622      	mov	r2, r4
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <_svfiprintf_r+0x1ec>)
 80088c0:	a904      	add	r1, sp, #16
 80088c2:	4640      	mov	r0, r8
 80088c4:	f7fc fdb6 	bl	8005434 <_printf_i>
 80088c8:	e7ea      	b.n	80088a0 <_svfiprintf_r+0x1b0>
 80088ca:	bf00      	nop
 80088cc:	080093ec 	.word	0x080093ec
 80088d0:	080093f2 	.word	0x080093f2
 80088d4:	080093f6 	.word	0x080093f6
 80088d8:	08004ec9 	.word	0x08004ec9
 80088dc:	0800863d 	.word	0x0800863d

080088e0 <__sfputc_r>:
 80088e0:	6893      	ldr	r3, [r2, #8]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	b410      	push	{r4}
 80088e8:	6093      	str	r3, [r2, #8]
 80088ea:	da08      	bge.n	80088fe <__sfputc_r+0x1e>
 80088ec:	6994      	ldr	r4, [r2, #24]
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	db01      	blt.n	80088f6 <__sfputc_r+0x16>
 80088f2:	290a      	cmp	r1, #10
 80088f4:	d103      	bne.n	80088fe <__sfputc_r+0x1e>
 80088f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088fa:	f000 b997 	b.w	8008c2c <__swbuf_r>
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	1c58      	adds	r0, r3, #1
 8008902:	6010      	str	r0, [r2, #0]
 8008904:	7019      	strb	r1, [r3, #0]
 8008906:	4608      	mov	r0, r1
 8008908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800890c:	4770      	bx	lr

0800890e <__sfputs_r>:
 800890e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008910:	4606      	mov	r6, r0
 8008912:	460f      	mov	r7, r1
 8008914:	4614      	mov	r4, r2
 8008916:	18d5      	adds	r5, r2, r3
 8008918:	42ac      	cmp	r4, r5
 800891a:	d101      	bne.n	8008920 <__sfputs_r+0x12>
 800891c:	2000      	movs	r0, #0
 800891e:	e007      	b.n	8008930 <__sfputs_r+0x22>
 8008920:	463a      	mov	r2, r7
 8008922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff ffda 	bl	80088e0 <__sfputc_r>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d1f3      	bne.n	8008918 <__sfputs_r+0xa>
 8008930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008934 <_vfiprintf_r>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	460c      	mov	r4, r1
 800893a:	b09d      	sub	sp, #116	; 0x74
 800893c:	4617      	mov	r7, r2
 800893e:	461d      	mov	r5, r3
 8008940:	4606      	mov	r6, r0
 8008942:	b118      	cbz	r0, 800894c <_vfiprintf_r+0x18>
 8008944:	6983      	ldr	r3, [r0, #24]
 8008946:	b90b      	cbnz	r3, 800894c <_vfiprintf_r+0x18>
 8008948:	f7fe fdda 	bl	8007500 <__sinit>
 800894c:	4b7c      	ldr	r3, [pc, #496]	; (8008b40 <_vfiprintf_r+0x20c>)
 800894e:	429c      	cmp	r4, r3
 8008950:	d158      	bne.n	8008a04 <_vfiprintf_r+0xd0>
 8008952:	6874      	ldr	r4, [r6, #4]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	0718      	lsls	r0, r3, #28
 8008958:	d55e      	bpl.n	8008a18 <_vfiprintf_r+0xe4>
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d05b      	beq.n	8008a18 <_vfiprintf_r+0xe4>
 8008960:	2300      	movs	r3, #0
 8008962:	9309      	str	r3, [sp, #36]	; 0x24
 8008964:	2320      	movs	r3, #32
 8008966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800896a:	2330      	movs	r3, #48	; 0x30
 800896c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008970:	9503      	str	r5, [sp, #12]
 8008972:	f04f 0b01 	mov.w	fp, #1
 8008976:	46b8      	mov	r8, r7
 8008978:	4645      	mov	r5, r8
 800897a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800897e:	b10b      	cbz	r3, 8008984 <_vfiprintf_r+0x50>
 8008980:	2b25      	cmp	r3, #37	; 0x25
 8008982:	d154      	bne.n	8008a2e <_vfiprintf_r+0xfa>
 8008984:	ebb8 0a07 	subs.w	sl, r8, r7
 8008988:	d00b      	beq.n	80089a2 <_vfiprintf_r+0x6e>
 800898a:	4653      	mov	r3, sl
 800898c:	463a      	mov	r2, r7
 800898e:	4621      	mov	r1, r4
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff ffbc 	bl	800890e <__sfputs_r>
 8008996:	3001      	adds	r0, #1
 8008998:	f000 80c2 	beq.w	8008b20 <_vfiprintf_r+0x1ec>
 800899c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899e:	4453      	add	r3, sl
 80089a0:	9309      	str	r3, [sp, #36]	; 0x24
 80089a2:	f898 3000 	ldrb.w	r3, [r8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 80ba 	beq.w	8008b20 <_vfiprintf_r+0x1ec>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b6:	9304      	str	r3, [sp, #16]
 80089b8:	9307      	str	r3, [sp, #28]
 80089ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089be:	931a      	str	r3, [sp, #104]	; 0x68
 80089c0:	46a8      	mov	r8, r5
 80089c2:	2205      	movs	r2, #5
 80089c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80089c8:	485e      	ldr	r0, [pc, #376]	; (8008b44 <_vfiprintf_r+0x210>)
 80089ca:	f7f7 fc09 	bl	80001e0 <memchr>
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	bb78      	cbnz	r0, 8008a32 <_vfiprintf_r+0xfe>
 80089d2:	06d9      	lsls	r1, r3, #27
 80089d4:	bf44      	itt	mi
 80089d6:	2220      	movmi	r2, #32
 80089d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089dc:	071a      	lsls	r2, r3, #28
 80089de:	bf44      	itt	mi
 80089e0:	222b      	movmi	r2, #43	; 0x2b
 80089e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089e6:	782a      	ldrb	r2, [r5, #0]
 80089e8:	2a2a      	cmp	r2, #42	; 0x2a
 80089ea:	d02a      	beq.n	8008a42 <_vfiprintf_r+0x10e>
 80089ec:	9a07      	ldr	r2, [sp, #28]
 80089ee:	46a8      	mov	r8, r5
 80089f0:	2000      	movs	r0, #0
 80089f2:	250a      	movs	r5, #10
 80089f4:	4641      	mov	r1, r8
 80089f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089fa:	3b30      	subs	r3, #48	; 0x30
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	d969      	bls.n	8008ad4 <_vfiprintf_r+0x1a0>
 8008a00:	b360      	cbz	r0, 8008a5c <_vfiprintf_r+0x128>
 8008a02:	e024      	b.n	8008a4e <_vfiprintf_r+0x11a>
 8008a04:	4b50      	ldr	r3, [pc, #320]	; (8008b48 <_vfiprintf_r+0x214>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	d101      	bne.n	8008a0e <_vfiprintf_r+0xda>
 8008a0a:	68b4      	ldr	r4, [r6, #8]
 8008a0c:	e7a2      	b.n	8008954 <_vfiprintf_r+0x20>
 8008a0e:	4b4f      	ldr	r3, [pc, #316]	; (8008b4c <_vfiprintf_r+0x218>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	bf08      	it	eq
 8008a14:	68f4      	ldreq	r4, [r6, #12]
 8008a16:	e79d      	b.n	8008954 <_vfiprintf_r+0x20>
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 f978 	bl	8008d10 <__swsetup_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d09d      	beq.n	8008960 <_vfiprintf_r+0x2c>
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a28:	b01d      	add	sp, #116	; 0x74
 8008a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2e:	46a8      	mov	r8, r5
 8008a30:	e7a2      	b.n	8008978 <_vfiprintf_r+0x44>
 8008a32:	4a44      	ldr	r2, [pc, #272]	; (8008b44 <_vfiprintf_r+0x210>)
 8008a34:	1a80      	subs	r0, r0, r2
 8008a36:	fa0b f000 	lsl.w	r0, fp, r0
 8008a3a:	4318      	orrs	r0, r3
 8008a3c:	9004      	str	r0, [sp, #16]
 8008a3e:	4645      	mov	r5, r8
 8008a40:	e7be      	b.n	80089c0 <_vfiprintf_r+0x8c>
 8008a42:	9a03      	ldr	r2, [sp, #12]
 8008a44:	1d11      	adds	r1, r2, #4
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	9103      	str	r1, [sp, #12]
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	db01      	blt.n	8008a52 <_vfiprintf_r+0x11e>
 8008a4e:	9207      	str	r2, [sp, #28]
 8008a50:	e004      	b.n	8008a5c <_vfiprintf_r+0x128>
 8008a52:	4252      	negs	r2, r2
 8008a54:	f043 0302 	orr.w	r3, r3, #2
 8008a58:	9207      	str	r2, [sp, #28]
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	f898 3000 	ldrb.w	r3, [r8]
 8008a60:	2b2e      	cmp	r3, #46	; 0x2e
 8008a62:	d10e      	bne.n	8008a82 <_vfiprintf_r+0x14e>
 8008a64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008a68:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6a:	d138      	bne.n	8008ade <_vfiprintf_r+0x1aa>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	1d1a      	adds	r2, r3, #4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	9203      	str	r2, [sp, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfb8      	it	lt
 8008a78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a7c:	f108 0802 	add.w	r8, r8, #2
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	4d33      	ldr	r5, [pc, #204]	; (8008b50 <_vfiprintf_r+0x21c>)
 8008a84:	f898 1000 	ldrb.w	r1, [r8]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7f7 fba8 	bl	80001e0 <memchr>
 8008a90:	b140      	cbz	r0, 8008aa4 <_vfiprintf_r+0x170>
 8008a92:	2340      	movs	r3, #64	; 0x40
 8008a94:	1b40      	subs	r0, r0, r5
 8008a96:	fa03 f000 	lsl.w	r0, r3, r0
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	4303      	orrs	r3, r0
 8008a9e:	f108 0801 	add.w	r8, r8, #1
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	f898 1000 	ldrb.w	r1, [r8]
 8008aa8:	482a      	ldr	r0, [pc, #168]	; (8008b54 <_vfiprintf_r+0x220>)
 8008aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aae:	2206      	movs	r2, #6
 8008ab0:	f108 0701 	add.w	r7, r8, #1
 8008ab4:	f7f7 fb94 	bl	80001e0 <memchr>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d037      	beq.n	8008b2c <_vfiprintf_r+0x1f8>
 8008abc:	4b26      	ldr	r3, [pc, #152]	; (8008b58 <_vfiprintf_r+0x224>)
 8008abe:	bb1b      	cbnz	r3, 8008b08 <_vfiprintf_r+0x1d4>
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	3307      	adds	r3, #7
 8008ac4:	f023 0307 	bic.w	r3, r3, #7
 8008ac8:	3308      	adds	r3, #8
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ace:	444b      	add	r3, r9
 8008ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad2:	e750      	b.n	8008976 <_vfiprintf_r+0x42>
 8008ad4:	fb05 3202 	mla	r2, r5, r2, r3
 8008ad8:	2001      	movs	r0, #1
 8008ada:	4688      	mov	r8, r1
 8008adc:	e78a      	b.n	80089f4 <_vfiprintf_r+0xc0>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f108 0801 	add.w	r8, r8, #1
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	250a      	movs	r5, #10
 8008aea:	4640      	mov	r0, r8
 8008aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af0:	3a30      	subs	r2, #48	; 0x30
 8008af2:	2a09      	cmp	r2, #9
 8008af4:	d903      	bls.n	8008afe <_vfiprintf_r+0x1ca>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0c3      	beq.n	8008a82 <_vfiprintf_r+0x14e>
 8008afa:	9105      	str	r1, [sp, #20]
 8008afc:	e7c1      	b.n	8008a82 <_vfiprintf_r+0x14e>
 8008afe:	fb05 2101 	mla	r1, r5, r1, r2
 8008b02:	2301      	movs	r3, #1
 8008b04:	4680      	mov	r8, r0
 8008b06:	e7f0      	b.n	8008aea <_vfiprintf_r+0x1b6>
 8008b08:	ab03      	add	r3, sp, #12
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	4b13      	ldr	r3, [pc, #76]	; (8008b5c <_vfiprintf_r+0x228>)
 8008b10:	a904      	add	r1, sp, #16
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7fc f9d8 	bl	8004ec8 <_printf_float>
 8008b18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008b1c:	4681      	mov	r9, r0
 8008b1e:	d1d5      	bne.n	8008acc <_vfiprintf_r+0x198>
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	065b      	lsls	r3, r3, #25
 8008b24:	f53f af7e 	bmi.w	8008a24 <_vfiprintf_r+0xf0>
 8008b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b2a:	e77d      	b.n	8008a28 <_vfiprintf_r+0xf4>
 8008b2c:	ab03      	add	r3, sp, #12
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4622      	mov	r2, r4
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <_vfiprintf_r+0x228>)
 8008b34:	a904      	add	r1, sp, #16
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7fc fc7c 	bl	8005434 <_printf_i>
 8008b3c:	e7ec      	b.n	8008b18 <_vfiprintf_r+0x1e4>
 8008b3e:	bf00      	nop
 8008b40:	080092a0 	.word	0x080092a0
 8008b44:	080093ec 	.word	0x080093ec
 8008b48:	080092c0 	.word	0x080092c0
 8008b4c:	08009280 	.word	0x08009280
 8008b50:	080093f2 	.word	0x080093f2
 8008b54:	080093f6 	.word	0x080093f6
 8008b58:	08004ec9 	.word	0x08004ec9
 8008b5c:	0800890f 	.word	0x0800890f

08008b60 <_sbrk_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4c06      	ldr	r4, [pc, #24]	; (8008b7c <_sbrk_r+0x1c>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4605      	mov	r5, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	f7f9 f8ea 	bl	8001d44 <_sbrk>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_sbrk_r+0x1a>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_sbrk_r+0x1a>
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	20000364 	.word	0x20000364

08008b80 <__sread>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	f000 faa8 	bl	80090dc <_read_r>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	bfab      	itete	ge
 8008b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b92:	89a3      	ldrhlt	r3, [r4, #12]
 8008b94:	181b      	addge	r3, r3, r0
 8008b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b9a:	bfac      	ite	ge
 8008b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b9e:	81a3      	strhlt	r3, [r4, #12]
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <__swrite>:
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	461f      	mov	r7, r3
 8008ba8:	898b      	ldrh	r3, [r1, #12]
 8008baa:	05db      	lsls	r3, r3, #23
 8008bac:	4605      	mov	r5, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	d505      	bpl.n	8008bc0 <__swrite+0x1e>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	f000 f9d6 	bl	8008f6c <_lseek_r>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	4632      	mov	r2, r6
 8008bce:	463b      	mov	r3, r7
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd6:	f000 b889 	b.w	8008cec <_write_r>

08008bda <__sseek>:
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	460c      	mov	r4, r1
 8008bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be2:	f000 f9c3 	bl	8008f6c <_lseek_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	bf15      	itete	ne
 8008bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bf6:	81a3      	strheq	r3, [r4, #12]
 8008bf8:	bf18      	it	ne
 8008bfa:	81a3      	strhne	r3, [r4, #12]
 8008bfc:	bd10      	pop	{r4, pc}

08008bfe <__sclose>:
 8008bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c02:	f000 b8f3 	b.w	8008dec <_close_r>

08008c06 <strncmp>:
 8008c06:	b510      	push	{r4, lr}
 8008c08:	b16a      	cbz	r2, 8008c26 <strncmp+0x20>
 8008c0a:	3901      	subs	r1, #1
 8008c0c:	1884      	adds	r4, r0, r2
 8008c0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d103      	bne.n	8008c22 <strncmp+0x1c>
 8008c1a:	42a0      	cmp	r0, r4
 8008c1c:	d001      	beq.n	8008c22 <strncmp+0x1c>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f5      	bne.n	8008c0e <strncmp+0x8>
 8008c22:	1a98      	subs	r0, r3, r2
 8008c24:	bd10      	pop	{r4, pc}
 8008c26:	4610      	mov	r0, r2
 8008c28:	e7fc      	b.n	8008c24 <strncmp+0x1e>
	...

08008c2c <__swbuf_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	460e      	mov	r6, r1
 8008c30:	4614      	mov	r4, r2
 8008c32:	4605      	mov	r5, r0
 8008c34:	b118      	cbz	r0, 8008c3e <__swbuf_r+0x12>
 8008c36:	6983      	ldr	r3, [r0, #24]
 8008c38:	b90b      	cbnz	r3, 8008c3e <__swbuf_r+0x12>
 8008c3a:	f7fe fc61 	bl	8007500 <__sinit>
 8008c3e:	4b21      	ldr	r3, [pc, #132]	; (8008cc4 <__swbuf_r+0x98>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	d12a      	bne.n	8008c9a <__swbuf_r+0x6e>
 8008c44:	686c      	ldr	r4, [r5, #4]
 8008c46:	69a3      	ldr	r3, [r4, #24]
 8008c48:	60a3      	str	r3, [r4, #8]
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	071a      	lsls	r2, r3, #28
 8008c4e:	d52e      	bpl.n	8008cae <__swbuf_r+0x82>
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	b363      	cbz	r3, 8008cae <__swbuf_r+0x82>
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	6820      	ldr	r0, [r4, #0]
 8008c58:	1ac0      	subs	r0, r0, r3
 8008c5a:	6963      	ldr	r3, [r4, #20]
 8008c5c:	b2f6      	uxtb	r6, r6
 8008c5e:	4283      	cmp	r3, r0
 8008c60:	4637      	mov	r7, r6
 8008c62:	dc04      	bgt.n	8008c6e <__swbuf_r+0x42>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 f956 	bl	8008f18 <_fflush_r>
 8008c6c:	bb28      	cbnz	r0, 8008cba <__swbuf_r+0x8e>
 8008c6e:	68a3      	ldr	r3, [r4, #8]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	6022      	str	r2, [r4, #0]
 8008c7a:	701e      	strb	r6, [r3, #0]
 8008c7c:	6963      	ldr	r3, [r4, #20]
 8008c7e:	3001      	adds	r0, #1
 8008c80:	4283      	cmp	r3, r0
 8008c82:	d004      	beq.n	8008c8e <__swbuf_r+0x62>
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	07db      	lsls	r3, r3, #31
 8008c88:	d519      	bpl.n	8008cbe <__swbuf_r+0x92>
 8008c8a:	2e0a      	cmp	r6, #10
 8008c8c:	d117      	bne.n	8008cbe <__swbuf_r+0x92>
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	f000 f941 	bl	8008f18 <_fflush_r>
 8008c96:	b190      	cbz	r0, 8008cbe <__swbuf_r+0x92>
 8008c98:	e00f      	b.n	8008cba <__swbuf_r+0x8e>
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <__swbuf_r+0x9c>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d101      	bne.n	8008ca4 <__swbuf_r+0x78>
 8008ca0:	68ac      	ldr	r4, [r5, #8]
 8008ca2:	e7d0      	b.n	8008c46 <__swbuf_r+0x1a>
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <__swbuf_r+0xa0>)
 8008ca6:	429c      	cmp	r4, r3
 8008ca8:	bf08      	it	eq
 8008caa:	68ec      	ldreq	r4, [r5, #12]
 8008cac:	e7cb      	b.n	8008c46 <__swbuf_r+0x1a>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 f82d 	bl	8008d10 <__swsetup_r>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0cc      	beq.n	8008c54 <__swbuf_r+0x28>
 8008cba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	080092a0 	.word	0x080092a0
 8008cc8:	080092c0 	.word	0x080092c0
 8008ccc:	08009280 	.word	0x08009280

08008cd0 <__ascii_wctomb>:
 8008cd0:	b149      	cbz	r1, 8008ce6 <__ascii_wctomb+0x16>
 8008cd2:	2aff      	cmp	r2, #255	; 0xff
 8008cd4:	bf85      	ittet	hi
 8008cd6:	238a      	movhi	r3, #138	; 0x8a
 8008cd8:	6003      	strhi	r3, [r0, #0]
 8008cda:	700a      	strbls	r2, [r1, #0]
 8008cdc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008ce0:	bf98      	it	ls
 8008ce2:	2001      	movls	r0, #1
 8008ce4:	4770      	bx	lr
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4770      	bx	lr
	...

08008cec <_write_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4c07      	ldr	r4, [pc, #28]	; (8008d0c <_write_r+0x20>)
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6022      	str	r2, [r4, #0]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f7f8 ffd1 	bl	8001ca2 <_write>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_write_r+0x1e>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_write_r+0x1e>
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	20000364 	.word	0x20000364

08008d10 <__swsetup_r>:
 8008d10:	4b32      	ldr	r3, [pc, #200]	; (8008ddc <__swsetup_r+0xcc>)
 8008d12:	b570      	push	{r4, r5, r6, lr}
 8008d14:	681d      	ldr	r5, [r3, #0]
 8008d16:	4606      	mov	r6, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	b125      	cbz	r5, 8008d26 <__swsetup_r+0x16>
 8008d1c:	69ab      	ldr	r3, [r5, #24]
 8008d1e:	b913      	cbnz	r3, 8008d26 <__swsetup_r+0x16>
 8008d20:	4628      	mov	r0, r5
 8008d22:	f7fe fbed 	bl	8007500 <__sinit>
 8008d26:	4b2e      	ldr	r3, [pc, #184]	; (8008de0 <__swsetup_r+0xd0>)
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	d10f      	bne.n	8008d4c <__swsetup_r+0x3c>
 8008d2c:	686c      	ldr	r4, [r5, #4]
 8008d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	0715      	lsls	r5, r2, #28
 8008d36:	d42c      	bmi.n	8008d92 <__swsetup_r+0x82>
 8008d38:	06d0      	lsls	r0, r2, #27
 8008d3a:	d411      	bmi.n	8008d60 <__swsetup_r+0x50>
 8008d3c:	2209      	movs	r2, #9
 8008d3e:	6032      	str	r2, [r6, #0]
 8008d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d44:	81a3      	strh	r3, [r4, #12]
 8008d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d4a:	e03e      	b.n	8008dca <__swsetup_r+0xba>
 8008d4c:	4b25      	ldr	r3, [pc, #148]	; (8008de4 <__swsetup_r+0xd4>)
 8008d4e:	429c      	cmp	r4, r3
 8008d50:	d101      	bne.n	8008d56 <__swsetup_r+0x46>
 8008d52:	68ac      	ldr	r4, [r5, #8]
 8008d54:	e7eb      	b.n	8008d2e <__swsetup_r+0x1e>
 8008d56:	4b24      	ldr	r3, [pc, #144]	; (8008de8 <__swsetup_r+0xd8>)
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	bf08      	it	eq
 8008d5c:	68ec      	ldreq	r4, [r5, #12]
 8008d5e:	e7e6      	b.n	8008d2e <__swsetup_r+0x1e>
 8008d60:	0751      	lsls	r1, r2, #29
 8008d62:	d512      	bpl.n	8008d8a <__swsetup_r+0x7a>
 8008d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d66:	b141      	cbz	r1, 8008d7a <__swsetup_r+0x6a>
 8008d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d6c:	4299      	cmp	r1, r3
 8008d6e:	d002      	beq.n	8008d76 <__swsetup_r+0x66>
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff fbbb 	bl	80084ec <_free_r>
 8008d76:	2300      	movs	r3, #0
 8008d78:	6363      	str	r3, [r4, #52]	; 0x34
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d80:	81a3      	strh	r3, [r4, #12]
 8008d82:	2300      	movs	r3, #0
 8008d84:	6063      	str	r3, [r4, #4]
 8008d86:	6923      	ldr	r3, [r4, #16]
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	f043 0308 	orr.w	r3, r3, #8
 8008d90:	81a3      	strh	r3, [r4, #12]
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	b94b      	cbnz	r3, 8008daa <__swsetup_r+0x9a>
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008da0:	d003      	beq.n	8008daa <__swsetup_r+0x9a>
 8008da2:	4621      	mov	r1, r4
 8008da4:	4630      	mov	r0, r6
 8008da6:	f000 f917 	bl	8008fd8 <__smakebuf_r>
 8008daa:	89a2      	ldrh	r2, [r4, #12]
 8008dac:	f012 0301 	ands.w	r3, r2, #1
 8008db0:	d00c      	beq.n	8008dcc <__swsetup_r+0xbc>
 8008db2:	2300      	movs	r3, #0
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	6963      	ldr	r3, [r4, #20]
 8008db8:	425b      	negs	r3, r3
 8008dba:	61a3      	str	r3, [r4, #24]
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	b953      	cbnz	r3, 8008dd6 <__swsetup_r+0xc6>
 8008dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008dc8:	d1ba      	bne.n	8008d40 <__swsetup_r+0x30>
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	0792      	lsls	r2, r2, #30
 8008dce:	bf58      	it	pl
 8008dd0:	6963      	ldrpl	r3, [r4, #20]
 8008dd2:	60a3      	str	r3, [r4, #8]
 8008dd4:	e7f2      	b.n	8008dbc <__swsetup_r+0xac>
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	e7f7      	b.n	8008dca <__swsetup_r+0xba>
 8008dda:	bf00      	nop
 8008ddc:	2000000c 	.word	0x2000000c
 8008de0:	080092a0 	.word	0x080092a0
 8008de4:	080092c0 	.word	0x080092c0
 8008de8:	08009280 	.word	0x08009280

08008dec <_close_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4c06      	ldr	r4, [pc, #24]	; (8008e08 <_close_r+0x1c>)
 8008df0:	2300      	movs	r3, #0
 8008df2:	4605      	mov	r5, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	f7f8 ff6f 	bl	8001cda <_close>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_close_r+0x1a>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_close_r+0x1a>
 8008e04:	602b      	str	r3, [r5, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	20000364 	.word	0x20000364

08008e0c <__sflush_r>:
 8008e0c:	898a      	ldrh	r2, [r1, #12]
 8008e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e12:	4605      	mov	r5, r0
 8008e14:	0710      	lsls	r0, r2, #28
 8008e16:	460c      	mov	r4, r1
 8008e18:	d458      	bmi.n	8008ecc <__sflush_r+0xc0>
 8008e1a:	684b      	ldr	r3, [r1, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dc05      	bgt.n	8008e2c <__sflush_r+0x20>
 8008e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	dc02      	bgt.n	8008e2c <__sflush_r+0x20>
 8008e26:	2000      	movs	r0, #0
 8008e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e2e:	2e00      	cmp	r6, #0
 8008e30:	d0f9      	beq.n	8008e26 <__sflush_r+0x1a>
 8008e32:	2300      	movs	r3, #0
 8008e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e38:	682f      	ldr	r7, [r5, #0]
 8008e3a:	6a21      	ldr	r1, [r4, #32]
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	d032      	beq.n	8008ea6 <__sflush_r+0x9a>
 8008e40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	075a      	lsls	r2, r3, #29
 8008e46:	d505      	bpl.n	8008e54 <__sflush_r+0x48>
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	1ac0      	subs	r0, r0, r3
 8008e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e4e:	b10b      	cbz	r3, 8008e54 <__sflush_r+0x48>
 8008e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e52:	1ac0      	subs	r0, r0, r3
 8008e54:	2300      	movs	r3, #0
 8008e56:	4602      	mov	r2, r0
 8008e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5a:	6a21      	ldr	r1, [r4, #32]
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b0      	blx	r6
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	d106      	bne.n	8008e74 <__sflush_r+0x68>
 8008e66:	6829      	ldr	r1, [r5, #0]
 8008e68:	291d      	cmp	r1, #29
 8008e6a:	d848      	bhi.n	8008efe <__sflush_r+0xf2>
 8008e6c:	4a29      	ldr	r2, [pc, #164]	; (8008f14 <__sflush_r+0x108>)
 8008e6e:	40ca      	lsrs	r2, r1
 8008e70:	07d6      	lsls	r6, r2, #31
 8008e72:	d544      	bpl.n	8008efe <__sflush_r+0xf2>
 8008e74:	2200      	movs	r2, #0
 8008e76:	6062      	str	r2, [r4, #4]
 8008e78:	04d9      	lsls	r1, r3, #19
 8008e7a:	6922      	ldr	r2, [r4, #16]
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	d504      	bpl.n	8008e8a <__sflush_r+0x7e>
 8008e80:	1c42      	adds	r2, r0, #1
 8008e82:	d101      	bne.n	8008e88 <__sflush_r+0x7c>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b903      	cbnz	r3, 8008e8a <__sflush_r+0x7e>
 8008e88:	6560      	str	r0, [r4, #84]	; 0x54
 8008e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8c:	602f      	str	r7, [r5, #0]
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d0c9      	beq.n	8008e26 <__sflush_r+0x1a>
 8008e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e96:	4299      	cmp	r1, r3
 8008e98:	d002      	beq.n	8008ea0 <__sflush_r+0x94>
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7ff fb26 	bl	80084ec <_free_r>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ea4:	e7c0      	b.n	8008e28 <__sflush_r+0x1c>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b0      	blx	r6
 8008eac:	1c41      	adds	r1, r0, #1
 8008eae:	d1c8      	bne.n	8008e42 <__sflush_r+0x36>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0c5      	beq.n	8008e42 <__sflush_r+0x36>
 8008eb6:	2b1d      	cmp	r3, #29
 8008eb8:	d001      	beq.n	8008ebe <__sflush_r+0xb2>
 8008eba:	2b16      	cmp	r3, #22
 8008ebc:	d101      	bne.n	8008ec2 <__sflush_r+0xb6>
 8008ebe:	602f      	str	r7, [r5, #0]
 8008ec0:	e7b1      	b.n	8008e26 <__sflush_r+0x1a>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	e7ad      	b.n	8008e28 <__sflush_r+0x1c>
 8008ecc:	690f      	ldr	r7, [r1, #16]
 8008ece:	2f00      	cmp	r7, #0
 8008ed0:	d0a9      	beq.n	8008e26 <__sflush_r+0x1a>
 8008ed2:	0793      	lsls	r3, r2, #30
 8008ed4:	680e      	ldr	r6, [r1, #0]
 8008ed6:	bf08      	it	eq
 8008ed8:	694b      	ldreq	r3, [r1, #20]
 8008eda:	600f      	str	r7, [r1, #0]
 8008edc:	bf18      	it	ne
 8008ede:	2300      	movne	r3, #0
 8008ee0:	eba6 0807 	sub.w	r8, r6, r7
 8008ee4:	608b      	str	r3, [r1, #8]
 8008ee6:	f1b8 0f00 	cmp.w	r8, #0
 8008eea:	dd9c      	ble.n	8008e26 <__sflush_r+0x1a>
 8008eec:	4643      	mov	r3, r8
 8008eee:	463a      	mov	r2, r7
 8008ef0:	6a21      	ldr	r1, [r4, #32]
 8008ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b0      	blx	r6
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	dc06      	bgt.n	8008f0a <__sflush_r+0xfe>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f02:	81a3      	strh	r3, [r4, #12]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f08:	e78e      	b.n	8008e28 <__sflush_r+0x1c>
 8008f0a:	4407      	add	r7, r0
 8008f0c:	eba8 0800 	sub.w	r8, r8, r0
 8008f10:	e7e9      	b.n	8008ee6 <__sflush_r+0xda>
 8008f12:	bf00      	nop
 8008f14:	20400001 	.word	0x20400001

08008f18 <_fflush_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	690b      	ldr	r3, [r1, #16]
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	b1db      	cbz	r3, 8008f5a <_fflush_r+0x42>
 8008f22:	b118      	cbz	r0, 8008f2c <_fflush_r+0x14>
 8008f24:	6983      	ldr	r3, [r0, #24]
 8008f26:	b90b      	cbnz	r3, 8008f2c <_fflush_r+0x14>
 8008f28:	f7fe faea 	bl	8007500 <__sinit>
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <_fflush_r+0x48>)
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	d109      	bne.n	8008f46 <_fflush_r+0x2e>
 8008f32:	686c      	ldr	r4, [r5, #4]
 8008f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f38:	b17b      	cbz	r3, 8008f5a <_fflush_r+0x42>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f42:	f7ff bf63 	b.w	8008e0c <__sflush_r>
 8008f46:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <_fflush_r+0x4c>)
 8008f48:	429c      	cmp	r4, r3
 8008f4a:	d101      	bne.n	8008f50 <_fflush_r+0x38>
 8008f4c:	68ac      	ldr	r4, [r5, #8]
 8008f4e:	e7f1      	b.n	8008f34 <_fflush_r+0x1c>
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <_fflush_r+0x50>)
 8008f52:	429c      	cmp	r4, r3
 8008f54:	bf08      	it	eq
 8008f56:	68ec      	ldreq	r4, [r5, #12]
 8008f58:	e7ec      	b.n	8008f34 <_fflush_r+0x1c>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	bd38      	pop	{r3, r4, r5, pc}
 8008f5e:	bf00      	nop
 8008f60:	080092a0 	.word	0x080092a0
 8008f64:	080092c0 	.word	0x080092c0
 8008f68:	08009280 	.word	0x08009280

08008f6c <_lseek_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4c07      	ldr	r4, [pc, #28]	; (8008f8c <_lseek_r+0x20>)
 8008f70:	4605      	mov	r5, r0
 8008f72:	4608      	mov	r0, r1
 8008f74:	4611      	mov	r1, r2
 8008f76:	2200      	movs	r2, #0
 8008f78:	6022      	str	r2, [r4, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f7f8 fed4 	bl	8001d28 <_lseek>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_lseek_r+0x1e>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_lseek_r+0x1e>
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20000364 	.word	0x20000364

08008f90 <__swhatbuf_r>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	460e      	mov	r6, r1
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	b096      	sub	sp, #88	; 0x58
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	461d      	mov	r5, r3
 8008fa0:	da07      	bge.n	8008fb2 <__swhatbuf_r+0x22>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	602b      	str	r3, [r5, #0]
 8008fa6:	89b3      	ldrh	r3, [r6, #12]
 8008fa8:	061a      	lsls	r2, r3, #24
 8008faa:	d410      	bmi.n	8008fce <__swhatbuf_r+0x3e>
 8008fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb0:	e00e      	b.n	8008fd0 <__swhatbuf_r+0x40>
 8008fb2:	466a      	mov	r2, sp
 8008fb4:	f000 f8a4 	bl	8009100 <_fstat_r>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	dbf2      	blt.n	8008fa2 <__swhatbuf_r+0x12>
 8008fbc:	9a01      	ldr	r2, [sp, #4]
 8008fbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fc6:	425a      	negs	r2, r3
 8008fc8:	415a      	adcs	r2, r3
 8008fca:	602a      	str	r2, [r5, #0]
 8008fcc:	e7ee      	b.n	8008fac <__swhatbuf_r+0x1c>
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	b016      	add	sp, #88	; 0x58
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <__smakebuf_r>:
 8008fd8:	898b      	ldrh	r3, [r1, #12]
 8008fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fdc:	079d      	lsls	r5, r3, #30
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	d507      	bpl.n	8008ff4 <__smakebuf_r+0x1c>
 8008fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	2301      	movs	r3, #1
 8008fee:	6163      	str	r3, [r4, #20]
 8008ff0:	b002      	add	sp, #8
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	ab01      	add	r3, sp, #4
 8008ff6:	466a      	mov	r2, sp
 8008ff8:	f7ff ffca 	bl	8008f90 <__swhatbuf_r>
 8008ffc:	9900      	ldr	r1, [sp, #0]
 8008ffe:	4605      	mov	r5, r0
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff fac1 	bl	8008588 <_malloc_r>
 8009006:	b948      	cbnz	r0, 800901c <__smakebuf_r+0x44>
 8009008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d4ef      	bmi.n	8008ff0 <__smakebuf_r+0x18>
 8009010:	f023 0303 	bic.w	r3, r3, #3
 8009014:	f043 0302 	orr.w	r3, r3, #2
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	e7e3      	b.n	8008fe4 <__smakebuf_r+0xc>
 800901c:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <__smakebuf_r+0x7c>)
 800901e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	6020      	str	r0, [r4, #0]
 8009024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	9b00      	ldr	r3, [sp, #0]
 800902c:	6163      	str	r3, [r4, #20]
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	6120      	str	r0, [r4, #16]
 8009032:	b15b      	cbz	r3, 800904c <__smakebuf_r+0x74>
 8009034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f873 	bl	8009124 <_isatty_r>
 800903e:	b128      	cbz	r0, 800904c <__smakebuf_r+0x74>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	431d      	orrs	r5, r3
 8009050:	81a5      	strh	r5, [r4, #12]
 8009052:	e7cd      	b.n	8008ff0 <__smakebuf_r+0x18>
 8009054:	080074c9 	.word	0x080074c9

08009058 <memmove>:
 8009058:	4288      	cmp	r0, r1
 800905a:	b510      	push	{r4, lr}
 800905c:	eb01 0302 	add.w	r3, r1, r2
 8009060:	d807      	bhi.n	8009072 <memmove+0x1a>
 8009062:	1e42      	subs	r2, r0, #1
 8009064:	4299      	cmp	r1, r3
 8009066:	d00a      	beq.n	800907e <memmove+0x26>
 8009068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800906c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009070:	e7f8      	b.n	8009064 <memmove+0xc>
 8009072:	4283      	cmp	r3, r0
 8009074:	d9f5      	bls.n	8009062 <memmove+0xa>
 8009076:	1881      	adds	r1, r0, r2
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	42d3      	cmn	r3, r2
 800907c:	d100      	bne.n	8009080 <memmove+0x28>
 800907e:	bd10      	pop	{r4, pc}
 8009080:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009084:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009088:	e7f7      	b.n	800907a <memmove+0x22>

0800908a <__malloc_lock>:
 800908a:	4770      	bx	lr

0800908c <__malloc_unlock>:
 800908c:	4770      	bx	lr

0800908e <_realloc_r>:
 800908e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009090:	4607      	mov	r7, r0
 8009092:	4614      	mov	r4, r2
 8009094:	460e      	mov	r6, r1
 8009096:	b921      	cbnz	r1, 80090a2 <_realloc_r+0x14>
 8009098:	4611      	mov	r1, r2
 800909a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800909e:	f7ff ba73 	b.w	8008588 <_malloc_r>
 80090a2:	b922      	cbnz	r2, 80090ae <_realloc_r+0x20>
 80090a4:	f7ff fa22 	bl	80084ec <_free_r>
 80090a8:	4625      	mov	r5, r4
 80090aa:	4628      	mov	r0, r5
 80090ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ae:	f000 f849 	bl	8009144 <_malloc_usable_size_r>
 80090b2:	42a0      	cmp	r0, r4
 80090b4:	d20f      	bcs.n	80090d6 <_realloc_r+0x48>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff fa65 	bl	8008588 <_malloc_r>
 80090be:	4605      	mov	r5, r0
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d0f2      	beq.n	80090aa <_realloc_r+0x1c>
 80090c4:	4631      	mov	r1, r6
 80090c6:	4622      	mov	r2, r4
 80090c8:	f7fe fdf8 	bl	8007cbc <memcpy>
 80090cc:	4631      	mov	r1, r6
 80090ce:	4638      	mov	r0, r7
 80090d0:	f7ff fa0c 	bl	80084ec <_free_r>
 80090d4:	e7e9      	b.n	80090aa <_realloc_r+0x1c>
 80090d6:	4635      	mov	r5, r6
 80090d8:	e7e7      	b.n	80090aa <_realloc_r+0x1c>
	...

080090dc <_read_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4c07      	ldr	r4, [pc, #28]	; (80090fc <_read_r+0x20>)
 80090e0:	4605      	mov	r5, r0
 80090e2:	4608      	mov	r0, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	6022      	str	r2, [r4, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f7f8 fdbc 	bl	8001c68 <_read>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_read_r+0x1e>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_read_r+0x1e>
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	20000364 	.word	0x20000364

08009100 <_fstat_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4c07      	ldr	r4, [pc, #28]	; (8009120 <_fstat_r+0x20>)
 8009104:	2300      	movs	r3, #0
 8009106:	4605      	mov	r5, r0
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	f7f8 fdf0 	bl	8001cf2 <_fstat>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d102      	bne.n	800911c <_fstat_r+0x1c>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	b103      	cbz	r3, 800911c <_fstat_r+0x1c>
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	bf00      	nop
 8009120:	20000364 	.word	0x20000364

08009124 <_isatty_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4c06      	ldr	r4, [pc, #24]	; (8009140 <_isatty_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4605      	mov	r5, r0
 800912c:	4608      	mov	r0, r1
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	f7f8 fdef 	bl	8001d12 <_isatty>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_isatty_r+0x1a>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	b103      	cbz	r3, 800913e <_isatty_r+0x1a>
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20000364 	.word	0x20000364

08009144 <_malloc_usable_size_r>:
 8009144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009148:	1f18      	subs	r0, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	bfbc      	itt	lt
 800914e:	580b      	ldrlt	r3, [r1, r0]
 8009150:	18c0      	addlt	r0, r0, r3
 8009152:	4770      	bx	lr

08009154 <_init>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr

08009160 <_fini>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	bf00      	nop
 8009164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009166:	bc08      	pop	{r3}
 8009168:	469e      	mov	lr, r3
 800916a:	4770      	bx	lr
