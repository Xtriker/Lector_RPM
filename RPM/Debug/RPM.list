
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d8  080045d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e0  080045e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080045f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080045f4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c99  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000249b  00000000  00000000  00031cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00034170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00035058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bfe3  00000000  00000000  00035e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca29  00000000  00000000  00051dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa18a  00000000  00000000  0005e824  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001089ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  00108a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004574 	.word	0x08004574

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004574 	.word	0x08004574

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <app_LecturaBoton>:

Presionado_boton estado = NO_PRESIONADO;

uint8_t boton = 0,contador = 0;
void app_LecturaBoton(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
		HAL_Delay(5);
 80004d0:	2005      	movs	r0, #5
 80004d2:	f001 fc07 	bl	8001ce4 <HAL_Delay>
		boton = HAL_GPIO_ReadPin(Detener_GPIO_Port, Detener_Pin);
 80004d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004da:	4810      	ldr	r0, [pc, #64]	; (800051c <app_LecturaBoton+0x50>)
 80004dc:	f001 fea8 	bl	8002230 <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <app_LecturaBoton+0x54>)
 80004e6:	701a      	strb	r2, [r3, #0]
		if(boton == 0)
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <app_LecturaBoton+0x54>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d105      	bne.n	80004fc <app_LecturaBoton+0x30>
		{
			contador = contador + 1;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <app_LecturaBoton+0x58>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <app_LecturaBoton+0x58>)
 80004fa:	701a      	strb	r2, [r3, #0]
		}
		if(contador == 20)
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <app_LecturaBoton+0x58>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b14      	cmp	r3, #20
 8000502:	d106      	bne.n	8000512 <app_LecturaBoton+0x46>
		{
			contador = 0;
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <app_LecturaBoton+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
			estado = PRESIONADO;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <app_LecturaBoton+0x5c>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			estado = NO_PRESIONADO;
		}
}
 8000510:	e002      	b.n	8000518 <app_LecturaBoton+0x4c>
			estado = NO_PRESIONADO;
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <app_LecturaBoton+0x5c>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000800 	.word	0x48000800
 8000520:	20000029 	.word	0x20000029
 8000524:	2000002a 	.word	0x2000002a
 8000528:	20000028 	.word	0x20000028

0800052c <app_Debounce>:

uint8_t app_Debounce(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	volatile uint8_t Presionado = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71fb      	strb	r3, [r7, #7]
	app_LecturaBoton();
 8000536:	f7ff ffc9 	bl	80004cc <app_LecturaBoton>
	switch(estado)
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <app_Debounce+0x34>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <app_Debounce+0x1c>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d003      	beq.n	800054e <app_Debounce+0x22>
 8000546:	e005      	b.n	8000554 <app_Debounce+0x28>
	{
		case NO_PRESIONADO:
		{
			/* No realiza nada */
			Presionado = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	71fb      	strb	r3, [r7, #7]
		}break;
 800054c:	e002      	b.n	8000554 <app_Debounce+0x28>
		case PRESIONADO:
		{
			Presionado = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	71fb      	strb	r3, [r7, #7]
		}break;
 8000552:	bf00      	nop
		default:
		{

		}
	}
	return Presionado;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	b2db      	uxtb	r3, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028

08000564 <app_NumeroA7Segmentos>:
/* Variables globales */
uint8_t Bandera[]={0,0,0};

/* Conversion del valor numerico para 7 segmentos */
void app_NumeroA7Segmentos(uint8_t Numero)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	switch(Numero)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b09      	cmp	r3, #9
 8000572:	f200 819d 	bhi.w	80008b0 <app_NumeroA7Segmentos+0x34c>
 8000576:	a201      	add	r2, pc, #4	; (adr r2, 800057c <app_NumeroA7Segmentos+0x18>)
 8000578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057c:	080005a5 	.word	0x080005a5
 8000580:	080005f3 	.word	0x080005f3
 8000584:	08000641 	.word	0x08000641
 8000588:	0800068f 	.word	0x0800068f
 800058c:	080006dd 	.word	0x080006dd
 8000590:	0800072b 	.word	0x0800072b
 8000594:	08000779 	.word	0x08000779
 8000598:	080007c7 	.word	0x080007c7
 800059c:	08000815 	.word	0x08000815
 80005a0:	08000863 	.word	0x08000863
	{
		case 0:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f001 fe57 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2102      	movs	r1, #2
 80005b6:	48c0      	ldr	r0, [pc, #768]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80005b8:	f001 fe52 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	2104      	movs	r1, #4
 80005c0:	48bd      	ldr	r0, [pc, #756]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80005c2:	f001 fe4d 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f001 fe47 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2110      	movs	r1, #16
 80005d6:	48b8      	ldr	r0, [pc, #736]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80005d8:	f001 fe42 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	48b5      	ldr	r0, [pc, #724]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80005e2:	f001 fe3d 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	48b3      	ldr	r0, [pc, #716]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80005ec:	f001 fe38 	bl	8002260 <HAL_GPIO_WritePin>

		}break;
 80005f0:	e15e      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 1:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 fe30 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2102      	movs	r1, #2
 8000604:	48ac      	ldr	r0, [pc, #688]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000606:	f001 fe2b 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	2104      	movs	r1, #4
 800060e:	48aa      	ldr	r0, [pc, #680]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000610:	f001 fe26 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f001 fe20 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	48a4      	ldr	r0, [pc, #656]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000626:	f001 fe1b 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	48a2      	ldr	r0, [pc, #648]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000630:	f001 fe16 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	489f      	ldr	r0, [pc, #636]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800063a:	f001 fe11 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 800063e:	e137      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 2:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f001 fe09 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	2102      	movs	r1, #2
 8000652:	4899      	ldr	r0, [pc, #612]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000654:	f001 fe04 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2104      	movs	r1, #4
 800065c:	4896      	ldr	r0, [pc, #600]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800065e:	f001 fdff 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2101      	movs	r1, #1
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f001 fdf9 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	4891      	ldr	r0, [pc, #580]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000674:	f001 fdf4 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	488e      	ldr	r0, [pc, #568]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800067e:	f001 fdef 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	488c      	ldr	r0, [pc, #560]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000688:	f001 fdea 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 800068c:	e110      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 3:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f001 fde2 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2102      	movs	r1, #2
 80006a0:	4885      	ldr	r0, [pc, #532]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80006a2:	f001 fddd 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2104      	movs	r1, #4
 80006aa:	4883      	ldr	r0, [pc, #524]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80006ac:	f001 fdd8 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f001 fdd2 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	487d      	ldr	r0, [pc, #500]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80006c2:	f001 fdcd 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	487b      	ldr	r0, [pc, #492]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80006cc:	f001 fdc8 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4878      	ldr	r0, [pc, #480]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80006d6:	f001 fdc3 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 80006da:	e0e9      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 4:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f001 fdbb 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2102      	movs	r1, #2
 80006ee:	4872      	ldr	r0, [pc, #456]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80006f0:	f001 fdb6 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2104      	movs	r1, #4
 80006f8:	486f      	ldr	r0, [pc, #444]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80006fa:	f001 fdb1 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f001 fdab 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2110      	movs	r1, #16
 800070e:	486a      	ldr	r0, [pc, #424]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000710:	f001 fda6 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4867      	ldr	r0, [pc, #412]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800071a:	f001 fda1 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4865      	ldr	r0, [pc, #404]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000724:	f001 fd9c 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 8000728:	e0c2      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 5:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f001 fd94 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2102      	movs	r1, #2
 800073c:	485e      	ldr	r0, [pc, #376]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800073e:	f001 fd8f 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	2104      	movs	r1, #4
 8000746:	485c      	ldr	r0, [pc, #368]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000748:	f001 fd8a 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2101      	movs	r1, #1
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f001 fd84 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4856      	ldr	r0, [pc, #344]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800075e:	f001 fd7f 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	4854      	ldr	r0, [pc, #336]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000768:	f001 fd7a 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4851      	ldr	r0, [pc, #324]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000772:	f001 fd75 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 8000776:	e09b      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 6:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f001 fd6d 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	484b      	ldr	r0, [pc, #300]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800078c:	f001 fd68 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2104      	movs	r1, #4
 8000794:	4848      	ldr	r0, [pc, #288]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000796:	f001 fd63 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f001 fd5d 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2110      	movs	r1, #16
 80007aa:	4843      	ldr	r0, [pc, #268]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80007ac:	f001 fd58 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	4840      	ldr	r0, [pc, #256]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80007b6:	f001 fd53 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	483e      	ldr	r0, [pc, #248]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80007c0:	f001 fd4e 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 80007c4:	e074      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 7:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f001 fd46 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2102      	movs	r1, #2
 80007d8:	4837      	ldr	r0, [pc, #220]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80007da:	f001 fd41 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	2104      	movs	r1, #4
 80007e2:	4835      	ldr	r0, [pc, #212]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80007e4:	f001 fd3c 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2101      	movs	r1, #1
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f001 fd36 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	482f      	ldr	r0, [pc, #188]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80007fa:	f001 fd31 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	482d      	ldr	r0, [pc, #180]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000804:	f001 fd2c 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	482a      	ldr	r0, [pc, #168]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800080e:	f001 fd27 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 8000812:	e04d      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 8:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f001 fd1f 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	2102      	movs	r1, #2
 8000826:	4824      	ldr	r0, [pc, #144]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000828:	f001 fd1a 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2104      	movs	r1, #4
 8000830:	4821      	ldr	r0, [pc, #132]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000832:	f001 fd15 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	2101      	movs	r1, #1
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f001 fd0f 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	2110      	movs	r1, #16
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000848:	f001 fd0a 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	4819      	ldr	r0, [pc, #100]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000852:	f001 fd05 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 800085c:	f001 fd00 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 8000860:	e026      	b.n	80008b0 <app_NumeroA7Segmentos+0x34c>
		case 9:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f001 fcf8 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	2102      	movs	r1, #2
 8000874:	4810      	ldr	r0, [pc, #64]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000876:	f001 fcf3 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800087a:	2201      	movs	r2, #1
 800087c:	2104      	movs	r1, #4
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000880:	f001 fcee 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 fce8 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2110      	movs	r1, #16
 8000894:	4808      	ldr	r0, [pc, #32]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 8000896:	f001 fce3 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800089a:	2201      	movs	r2, #1
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80008a0:	f001 fcde 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <app_NumeroA7Segmentos+0x354>)
 80008aa:	f001 fcd9 	bl	8002260 <HAL_GPIO_WritePin>
		}break;
 80008ae:	bf00      	nop
		{

			/*No hace nada */
		}
	}
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	48000800 	.word	0x48000800

080008bc <app_SeleccionDisplay>:

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d86f      	bhi.n	80009ac <app_SeleccionDisplay+0xf0>
 80008cc:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <app_SeleccionDisplay+0x18>)
 80008ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d2:	bf00      	nop
 80008d4:	080008e5 	.word	0x080008e5
 80008d8:	08000917 	.word	0x08000917
 80008dc:	08000949 	.word	0x08000949
 80008e0:	0800097b 	.word	0x0800097b
	{
		case 0:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f001 fcb7 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f001 fcb0 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2120      	movs	r1, #32
 8000904:	4837      	ldr	r0, [pc, #220]	; (80009e4 <app_SeleccionDisplay+0x128>)
 8000906:	f001 fcab 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2110      	movs	r1, #16
 800090e:	4835      	ldr	r0, [pc, #212]	; (80009e4 <app_SeleccionDisplay+0x128>)
 8000910:	f001 fca6 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000914:	e062      	b.n	80009dc <app_SeleccionDisplay+0x120>
		case 1:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f001 fc9e 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f001 fc97 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2120      	movs	r1, #32
 8000936:	482b      	ldr	r0, [pc, #172]	; (80009e4 <app_SeleccionDisplay+0x128>)
 8000938:	f001 fc92 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2110      	movs	r1, #16
 8000940:	4828      	ldr	r0, [pc, #160]	; (80009e4 <app_SeleccionDisplay+0x128>)
 8000942:	f001 fc8d 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000946:	e049      	b.n	80009dc <app_SeleccionDisplay+0x120>
		case 2:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000952:	f001 fc85 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f001 fc7e 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	2120      	movs	r1, #32
 8000968:	481e      	ldr	r0, [pc, #120]	; (80009e4 <app_SeleccionDisplay+0x128>)
 800096a:	f001 fc79 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2110      	movs	r1, #16
 8000972:	481c      	ldr	r0, [pc, #112]	; (80009e4 <app_SeleccionDisplay+0x128>)
 8000974:	f001 fc74 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000978:	e030      	b.n	80009dc <app_SeleccionDisplay+0x120>
		case 3:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f001 fc6c 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f001 fc65 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <app_SeleccionDisplay+0x128>)
 800099c:	f001 fc60 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2110      	movs	r1, #16
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <app_SeleccionDisplay+0x128>)
 80009a6:	f001 fc5b 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 80009aa:	e017      	b.n	80009dc <app_SeleccionDisplay+0x120>
		default:
		{
			/* Envia todos los displays a 1 logicos */
			HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f001 fc53 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f001 fc4c 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2120      	movs	r1, #32
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <app_SeleccionDisplay+0x128>)
 80009ce:	f001 fc47 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <app_SeleccionDisplay+0x128>)
 80009d8:	f001 fc42 	bl	8002260 <HAL_GPIO_WritePin>
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	48000400 	.word	0x48000400

080009e8 <app_Despliegue>:

/* Separacion de numero en unidades, decenas, centenas ... */
void app_Despliegue(uint16_t Numero)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	80fb      	strh	r3, [r7, #6]
	uint8_t Primero  =  Numero % 10;
 80009f2:	88fa      	ldrh	r2, [r7, #6]
 80009f4:	4b8d      	ldr	r3, [pc, #564]	; (8000c2c <app_Despliegue+0x244>)
 80009f6:	fba3 1302 	umull	r1, r3, r3, r2
 80009fa:	08d9      	lsrs	r1, r3, #3
 80009fc:	460b      	mov	r3, r1
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	73fb      	strb	r3, [r7, #15]
	uint8_t Segundo =  ( Numero - Primero ) % 100 / 10;
 8000a0a:	88fa      	ldrh	r2, [r7, #6]
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	1ad2      	subs	r2, r2, r3
 8000a10:	4b87      	ldr	r3, [pc, #540]	; (8000c30 <app_Despliegue+0x248>)
 8000a12:	fb83 1302 	smull	r1, r3, r3, r2
 8000a16:	1159      	asrs	r1, r3, #5
 8000a18:	17d3      	asrs	r3, r2, #31
 8000a1a:	1acb      	subs	r3, r1, r3
 8000a1c:	2164      	movs	r1, #100	; 0x64
 8000a1e:	fb01 f303 	mul.w	r3, r1, r3
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	4a83      	ldr	r2, [pc, #524]	; (8000c34 <app_Despliegue+0x24c>)
 8000a26:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2a:	1092      	asrs	r2, r2, #2
 8000a2c:	17db      	asrs	r3, r3, #31
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	73bb      	strb	r3, [r7, #14]
	uint8_t Tercero  =  ( Numero - Primero - Segundo ) % 1000 / 100;
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	1ad2      	subs	r2, r2, r3
 8000a38:	7bbb      	ldrb	r3, [r7, #14]
 8000a3a:	1ad2      	subs	r2, r2, r3
 8000a3c:	4b7e      	ldr	r3, [pc, #504]	; (8000c38 <app_Despliegue+0x250>)
 8000a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a42:	1199      	asrs	r1, r3, #6
 8000a44:	17d3      	asrs	r3, r2, #31
 8000a46:	1acb      	subs	r3, r1, r3
 8000a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a4c:	fb01 f303 	mul.w	r3, r1, r3
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	4a77      	ldr	r2, [pc, #476]	; (8000c30 <app_Despliegue+0x248>)
 8000a54:	fb82 1203 	smull	r1, r2, r2, r3
 8000a58:	1152      	asrs	r2, r2, #5
 8000a5a:	17db      	asrs	r3, r3, #31
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	737b      	strb	r3, [r7, #13]
	uint8_t Cuarto =  ( Numero - Primero - Segundo - Tercero ) % 10000 / 1000;
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	1ad2      	subs	r2, r2, r3
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	1ad2      	subs	r2, r2, r3
 8000a6a:	7b7b      	ldrb	r3, [r7, #13]
 8000a6c:	1ad2      	subs	r2, r2, r3
 8000a6e:	4b73      	ldr	r3, [pc, #460]	; (8000c3c <app_Despliegue+0x254>)
 8000a70:	fb83 1302 	smull	r1, r3, r3, r2
 8000a74:	1319      	asrs	r1, r3, #12
 8000a76:	17d3      	asrs	r3, r2, #31
 8000a78:	1acb      	subs	r3, r1, r3
 8000a7a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a7e:	fb01 f303 	mul.w	r3, r1, r3
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	4a6c      	ldr	r2, [pc, #432]	; (8000c38 <app_Despliegue+0x250>)
 8000a86:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8a:	1192      	asrs	r2, r2, #6
 8000a8c:	17db      	asrs	r3, r3, #31
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	733b      	strb	r3, [r7, #12]
	uint8_t Quinto = (Numero - Primero - Segundo - Tercero - Cuarto) % 100000 / 10000;
 8000a92:	88fa      	ldrh	r2, [r7, #6]
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	1ad2      	subs	r2, r2, r3
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	7b7b      	ldrb	r3, [r7, #13]
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	7b3b      	ldrb	r3, [r7, #12]
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <app_Despliegue+0x258>)
 8000aa6:	fb83 1302 	smull	r1, r3, r3, r2
 8000aaa:	1359      	asrs	r1, r3, #13
 8000aac:	17d3      	asrs	r3, r2, #31
 8000aae:	1acb      	subs	r3, r1, r3
 8000ab0:	4964      	ldr	r1, [pc, #400]	; (8000c44 <app_Despliegue+0x25c>)
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	4a60      	ldr	r2, [pc, #384]	; (8000c3c <app_Despliegue+0x254>)
 8000aba:	fb82 1203 	smull	r1, r2, r2, r3
 8000abe:	1312      	asrs	r2, r2, #12
 8000ac0:	17db      	asrs	r3, r3, #31
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	72fb      	strb	r3, [r7, #11]
	if (Numero > 9999)
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d939      	bls.n	8000b44 <app_Despliegue+0x15c>
	{
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad6:	485c      	ldr	r0, [pc, #368]	; (8000c48 <app_Despliegue+0x260>)
 8000ad8:	f001 fbc2 	bl	8002260 <HAL_GPIO_WritePin>
		app_SeleccionDisplay(0);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff feed 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Quinto);
 8000ae2:	7afb      	ldrb	r3, [r7, #11]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd3d 	bl	8000564 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000aea:	2003      	movs	r0, #3
 8000aec:	f001 f8fa 	bl	8001ce4 <HAL_Delay>

		app_SeleccionDisplay(1);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fee3 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Cuarto);
 8000af6:	7b3b      	ldrb	r3, [r7, #12]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd33 	bl	8000564 <app_NumeroA7Segmentos>

		HAL_Delay(3);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f001 f8f0 	bl	8001ce4 <HAL_Delay>
		app_SeleccionDisplay(2);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff fed9 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Tercero);
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd29 	bl	8000564 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b12:	2003      	movs	r0, #3
 8000b14:	f001 f8e6 	bl	8001ce4 <HAL_Delay>
		app_SeleccionDisplay(3);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f7ff fecf 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Segundo);
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd1f 	bl	8000564 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f001 f8dc 	bl	8001ce4 <HAL_Delay>
		app_SeleccionDisplay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fec5 	bl	80008bc <app_SeleccionDisplay>
		//app_NumeroA7Segmentos(Cuarto);
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b38:	4843      	ldr	r0, [pc, #268]	; (8000c48 <app_Despliegue+0x260>)
 8000b3a:	f001 fb91 	bl	8002260 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f001 f8d0 	bl	8001ce4 <HAL_Delay>

	}
	if(Numero < 9999)
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	f242 720e 	movw	r2, #9998	; 0x270e
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d869      	bhi.n	8000c22 <app_Despliegue+0x23a>
	{


		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	483c      	ldr	r0, [pc, #240]	; (8000c48 <app_Despliegue+0x260>)
 8000b56:	f001 fb83 	bl	8002260 <HAL_GPIO_WritePin>
		app_SeleccionDisplay(0);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff feae 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Cuarto);
 8000b60:	7b3b      	ldrb	r3, [r7, #12]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fcfe 	bl	8000564 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f001 f8bb 	bl	8001ce4 <HAL_Delay>
		app_SeleccionDisplay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff fea4 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Tercero);
 8000b74:	7b7b      	ldrb	r3, [r7, #13]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fcf4 	bl	8000564 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f001 f8b1 	bl	8001ce4 <HAL_Delay>
		app_SeleccionDisplay(2);
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fe9a 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Segundo);
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fcea 	bl	8000564 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f001 f8a7 	bl	8001ce4 <HAL_Delay>
		app_SeleccionDisplay(3);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f7ff fe90 	bl	80008bc <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Primero);
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fce0 	bl	8000564 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f001 f89d 	bl	8001ce4 <HAL_Delay>
		if(Bandera[0] == 1)
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <app_Despliegue+0x264>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10f      	bne.n	8000bd2 <app_Despliegue+0x1ea>
		{
			app_SeleccionDisplay(0);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff fe82 	bl	80008bc <app_SeleccionDisplay>
			app_NumeroA7Segmentos(Cuarto);
 8000bb8:	7b3b      	ldrb	r3, [r7, #12]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fcd2 	bl	8000564 <app_NumeroA7Segmentos>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc6:	4820      	ldr	r0, [pc, #128]	; (8000c48 <app_Despliegue+0x260>)
 8000bc8:	f001 fb4a 	bl	8002260 <HAL_GPIO_WritePin>
			HAL_Delay(3);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f001 f889 	bl	8001ce4 <HAL_Delay>
		}
		if(Bandera[1] == 1)
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <app_Despliegue+0x264>)
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10f      	bne.n	8000bfa <app_Despliegue+0x212>
		{
			app_SeleccionDisplay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fe6e 	bl	80008bc <app_SeleccionDisplay>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <app_Despliegue+0x260>)
 8000be8:	f001 fb3a 	bl	8002260 <HAL_GPIO_WritePin>
			app_NumeroA7Segmentos(Tercero);
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcb8 	bl	8000564 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f001 f875 	bl	8001ce4 <HAL_Delay>
		}
		if(Bandera[2] == 1)
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <app_Despliegue+0x264>)
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d10f      	bne.n	8000c22 <app_Despliegue+0x23a>
		{
			app_SeleccionDisplay(2);
 8000c02:	2002      	movs	r0, #2
 8000c04:	f7ff fe5a 	bl	80008bc <app_SeleccionDisplay>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <app_Despliegue+0x260>)
 8000c10:	f001 fb26 	bl	8002260 <HAL_GPIO_WritePin>
			app_NumeroA7Segmentos(Segundo);
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fca4 	bl	8000564 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f001 f861 	bl	8001ce4 <HAL_Delay>
		}
	}

}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	51eb851f 	.word	0x51eb851f
 8000c34:	66666667 	.word	0x66666667
 8000c38:	10624dd3 	.word	0x10624dd3
 8000c3c:	68db8bad 	.word	0x68db8bad
 8000c40:	14f8b589 	.word	0x14f8b589
 8000c44:	000186a0 	.word	0x000186a0
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	2000002c 	.word	0x2000002c

08000c50 <app_LetrasADisplay>:

}

/* Impresion de letras en display de 7 segmentos */
void app_LetrasADisplay(char Letras)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	//volatile uint8_t i=0;
	switch(Letras)
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	3b61      	subs	r3, #97	; 0x61
 8000c5e:	2b18      	cmp	r3, #24
 8000c60:	f200 82f7 	bhi.w	8001252 <app_LetrasADisplay+0x602>
 8000c64:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <app_LetrasADisplay+0x1c>)
 8000c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6a:	bf00      	nop
 8000c6c:	08000cd1 	.word	0x08000cd1
 8000c70:	08000d1f 	.word	0x08000d1f
 8000c74:	08000d6d 	.word	0x08000d6d
 8000c78:	08000dbb 	.word	0x08000dbb
 8000c7c:	08000e09 	.word	0x08000e09
 8000c80:	08000e57 	.word	0x08000e57
 8000c84:	08000ea5 	.word	0x08000ea5
 8000c88:	08000ef3 	.word	0x08000ef3
 8000c8c:	08000f41 	.word	0x08000f41
 8000c90:	08000f8f 	.word	0x08000f8f
 8000c94:	08001253 	.word	0x08001253
 8000c98:	08000fdd 	.word	0x08000fdd
 8000c9c:	08001253 	.word	0x08001253
 8000ca0:	08001031 	.word	0x08001031
 8000ca4:	0800107f 	.word	0x0800107f
 8000ca8:	08001253 	.word	0x08001253
 8000cac:	08001253 	.word	0x08001253
 8000cb0:	080010cd 	.word	0x080010cd
 8000cb4:	0800111b 	.word	0x0800111b
 8000cb8:	08001253 	.word	0x08001253
 8000cbc:	080011b7 	.word	0x080011b7
 8000cc0:	08001169 	.word	0x08001169
 8000cc4:	08001253 	.word	0x08001253
 8000cc8:	08001253 	.word	0x08001253
 8000ccc:	08001205 	.word	0x08001205
		{
			case 'A' | 'a':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f001 fac1 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	48d2      	ldr	r0, [pc, #840]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000ce4:	f001 fabc 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2104      	movs	r1, #4
 8000cec:	48cf      	ldr	r0, [pc, #828]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000cee:	f001 fab7 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f001 fab1 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	48ca      	ldr	r0, [pc, #808]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d04:	f001 faac 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	48c7      	ldr	r0, [pc, #796]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d0e:	f001 faa7 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	48c5      	ldr	r0, [pc, #788]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d18:	f001 faa2 	bl	8002260 <HAL_GPIO_WritePin>

			}break;
 8000d1c:	e299      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'B' | 'b':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f001 fa9a 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2102      	movs	r1, #2
 8000d30:	48be      	ldr	r0, [pc, #760]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d32:	f001 fa95 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2104      	movs	r1, #4
 8000d3a:	48bc      	ldr	r0, [pc, #752]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d3c:	f001 fa90 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2101      	movs	r1, #1
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f001 fa8a 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2110      	movs	r1, #16
 8000d50:	48b6      	ldr	r0, [pc, #728]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d52:	f001 fa85 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	48b4      	ldr	r0, [pc, #720]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d5c:	f001 fa80 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	48b1      	ldr	r0, [pc, #708]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d66:	f001 fa7b 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000d6a:	e272      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'C' | 'c':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f001 fa73 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	48ab      	ldr	r0, [pc, #684]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d80:	f001 fa6e 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2104      	movs	r1, #4
 8000d88:	48a8      	ldr	r0, [pc, #672]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000d8a:	f001 fa69 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2101      	movs	r1, #1
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f001 fa63 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	48a3      	ldr	r0, [pc, #652]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000da0:	f001 fa5e 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	48a0      	ldr	r0, [pc, #640]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000daa:	f001 fa59 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	489e      	ldr	r0, [pc, #632]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000db4:	f001 fa54 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000db8:	e24b      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'D' | 'd':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc4:	f001 fa4c 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4897      	ldr	r0, [pc, #604]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000dce:	f001 fa47 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4895      	ldr	r0, [pc, #596]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000dd8:	f001 fa42 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2101      	movs	r1, #1
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f001 fa3c 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2110      	movs	r1, #16
 8000dec:	488f      	ldr	r0, [pc, #572]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000dee:	f001 fa37 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	488d      	ldr	r0, [pc, #564]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000df8:	f001 fa32 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	488a      	ldr	r0, [pc, #552]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e02:	f001 fa2d 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000e06:	e224      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'E' | 'e':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f001 fa25 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4884      	ldr	r0, [pc, #528]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e1c:	f001 fa20 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2104      	movs	r1, #4
 8000e24:	4881      	ldr	r0, [pc, #516]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e26:	f001 fa1b 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f001 fa15 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2110      	movs	r1, #16
 8000e3a:	487c      	ldr	r0, [pc, #496]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e3c:	f001 fa10 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	4879      	ldr	r0, [pc, #484]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e46:	f001 fa0b 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4877      	ldr	r0, [pc, #476]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e50:	f001 fa06 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000e54:	e1fd      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'F' | 'f':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f001 f9fe 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	4870      	ldr	r0, [pc, #448]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e6a:	f001 f9f9 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2104      	movs	r1, #4
 8000e72:	486e      	ldr	r0, [pc, #440]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e74:	f001 f9f4 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f001 f9ee 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2110      	movs	r1, #16
 8000e88:	4868      	ldr	r0, [pc, #416]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e8a:	f001 f9e9 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	4866      	ldr	r0, [pc, #408]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e94:	f001 f9e4 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	4863      	ldr	r0, [pc, #396]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000e9e:	f001 f9df 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000ea2:	e1d6      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'G' | 'g':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f001 f9d7 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	485d      	ldr	r0, [pc, #372]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000eb8:	f001 f9d2 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	485a      	ldr	r0, [pc, #360]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000ec2:	f001 f9cd 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2101      	movs	r1, #1
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f001 f9c7 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	4855      	ldr	r0, [pc, #340]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000ed8:	f001 f9c2 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	4852      	ldr	r0, [pc, #328]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000ee2:	f001 f9bd 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	4850      	ldr	r0, [pc, #320]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000eec:	f001 f9b8 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000ef0:	e1af      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'H' | 'h':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f001 f9b0 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2102      	movs	r1, #2
 8000f04:	4849      	ldr	r0, [pc, #292]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f06:	f001 f9ab 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4847      	ldr	r0, [pc, #284]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f10:	f001 f9a6 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f001 f9a0 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2110      	movs	r1, #16
 8000f24:	4841      	ldr	r0, [pc, #260]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f26:	f001 f99b 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	483f      	ldr	r0, [pc, #252]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f30:	f001 f996 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	483c      	ldr	r0, [pc, #240]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f3a:	f001 f991 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000f3e:	e188      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'I' | 'i':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f001 f989 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	4836      	ldr	r0, [pc, #216]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f54:	f001 f984 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4833      	ldr	r0, [pc, #204]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f5e:	f001 f97f 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2101      	movs	r1, #1
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f001 f979 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2110      	movs	r1, #16
 8000f72:	482e      	ldr	r0, [pc, #184]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f74:	f001 f974 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	482b      	ldr	r0, [pc, #172]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f7e:	f001 f96f 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	4829      	ldr	r0, [pc, #164]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000f88:	f001 f96a 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000f8c:	e161      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'J' | 'j':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f001 f962 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4822      	ldr	r0, [pc, #136]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000fa2:	f001 f95d 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4820      	ldr	r0, [pc, #128]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000fac:	f001 f958 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f001 f952 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	481a      	ldr	r0, [pc, #104]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000fc2:	f001 f94d 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000fcc:	f001 f948 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4815      	ldr	r0, [pc, #84]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000fd6:	f001 f943 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8000fda:	e13a      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'L' | 'l':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f001 f93b 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2102      	movs	r1, #2
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000ff0:	f001 f936 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <app_LetrasADisplay+0x3dc>)
 8000ffa:	f001 f931 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2101      	movs	r1, #1
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f001 f92b 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800100a:	2201      	movs	r2, #1
 800100c:	2110      	movs	r1, #16
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <app_LetrasADisplay+0x3dc>)
 8001010:	f001 f926 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	2140      	movs	r1, #64	; 0x40
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <app_LetrasADisplay+0x3dc>)
 800101a:	f001 f921 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	4802      	ldr	r0, [pc, #8]	; (800102c <app_LetrasADisplay+0x3dc>)
 8001024:	f001 f91c 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8001028:	e113      	b.n	8001252 <app_LetrasADisplay+0x602>
 800102a:	bf00      	nop
 800102c:	48000800 	.word	0x48000800
			case 'N' | 'n':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f001 f911 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4886      	ldr	r0, [pc, #536]	; (800125c <app_LetrasADisplay+0x60c>)
 8001044:	f001 f90c 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	2104      	movs	r1, #4
 800104c:	4883      	ldr	r0, [pc, #524]	; (800125c <app_LetrasADisplay+0x60c>)
 800104e:	f001 f907 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2101      	movs	r1, #1
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f001 f901 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2110      	movs	r1, #16
 8001062:	487e      	ldr	r0, [pc, #504]	; (800125c <app_LetrasADisplay+0x60c>)
 8001064:	f001 f8fc 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	487b      	ldr	r0, [pc, #492]	; (800125c <app_LetrasADisplay+0x60c>)
 800106e:	f001 f8f7 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001072:	2201      	movs	r2, #1
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	4879      	ldr	r0, [pc, #484]	; (800125c <app_LetrasADisplay+0x60c>)
 8001078:	f001 f8f2 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 800107c:	e0e9      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'O' | 'o':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f001 f8ea 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	4872      	ldr	r0, [pc, #456]	; (800125c <app_LetrasADisplay+0x60c>)
 8001092:	f001 f8e5 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	2104      	movs	r1, #4
 800109a:	4870      	ldr	r0, [pc, #448]	; (800125c <app_LetrasADisplay+0x60c>)
 800109c:	f001 f8e0 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2101      	movs	r1, #1
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f001 f8da 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2110      	movs	r1, #16
 80010b0:	486a      	ldr	r0, [pc, #424]	; (800125c <app_LetrasADisplay+0x60c>)
 80010b2:	f001 f8d5 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	4868      	ldr	r0, [pc, #416]	; (800125c <app_LetrasADisplay+0x60c>)
 80010bc:	f001 f8d0 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	4865      	ldr	r0, [pc, #404]	; (800125c <app_LetrasADisplay+0x60c>)
 80010c6:	f001 f8cb 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 80010ca:	e0c2      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'R' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f001 f8c3 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2102      	movs	r1, #2
 80010de:	485f      	ldr	r0, [pc, #380]	; (800125c <app_LetrasADisplay+0x60c>)
 80010e0:	f001 f8be 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2104      	movs	r1, #4
 80010e8:	485c      	ldr	r0, [pc, #368]	; (800125c <app_LetrasADisplay+0x60c>)
 80010ea:	f001 f8b9 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2101      	movs	r1, #1
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f001 f8b3 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4857      	ldr	r0, [pc, #348]	; (800125c <app_LetrasADisplay+0x60c>)
 8001100:	f001 f8ae 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2140      	movs	r1, #64	; 0x40
 8001108:	4854      	ldr	r0, [pc, #336]	; (800125c <app_LetrasADisplay+0x60c>)
 800110a:	f001 f8a9 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800110e:	2201      	movs	r2, #1
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4852      	ldr	r0, [pc, #328]	; (800125c <app_LetrasADisplay+0x60c>)
 8001114:	f001 f8a4 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8001118:	e09b      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'S' | 's':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f001 f89c 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	484b      	ldr	r0, [pc, #300]	; (800125c <app_LetrasADisplay+0x60c>)
 800112e:	f001 f897 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001132:	2201      	movs	r2, #1
 8001134:	2104      	movs	r1, #4
 8001136:	4849      	ldr	r0, [pc, #292]	; (800125c <app_LetrasADisplay+0x60c>)
 8001138:	f001 f892 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800113c:	2201      	movs	r2, #1
 800113e:	2101      	movs	r1, #1
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f001 f88c 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	4843      	ldr	r0, [pc, #268]	; (800125c <app_LetrasADisplay+0x60c>)
 800114e:	f001 f887 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2140      	movs	r1, #64	; 0x40
 8001156:	4841      	ldr	r0, [pc, #260]	; (800125c <app_LetrasADisplay+0x60c>)
 8001158:	f001 f882 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800115c:	2201      	movs	r2, #1
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	483e      	ldr	r0, [pc, #248]	; (800125c <app_LetrasADisplay+0x60c>)
 8001162:	f001 f87d 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8001166:	e074      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'T' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f001 f875 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2102      	movs	r1, #2
 800117a:	4838      	ldr	r0, [pc, #224]	; (800125c <app_LetrasADisplay+0x60c>)
 800117c:	f001 f870 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2104      	movs	r1, #4
 8001184:	4835      	ldr	r0, [pc, #212]	; (800125c <app_LetrasADisplay+0x60c>)
 8001186:	f001 f86b 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	2101      	movs	r1, #1
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f001 f865 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	2110      	movs	r1, #16
 800119a:	4830      	ldr	r0, [pc, #192]	; (800125c <app_LetrasADisplay+0x60c>)
 800119c:	f001 f860 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	482d      	ldr	r0, [pc, #180]	; (800125c <app_LetrasADisplay+0x60c>)
 80011a6:	f001 f85b 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	482b      	ldr	r0, [pc, #172]	; (800125c <app_LetrasADisplay+0x60c>)
 80011b0:	f001 f856 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 80011b4:	e04d      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'U' | 'u':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f001 f84e 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2102      	movs	r1, #2
 80011c8:	4824      	ldr	r0, [pc, #144]	; (800125c <app_LetrasADisplay+0x60c>)
 80011ca:	f001 f849 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2104      	movs	r1, #4
 80011d2:	4822      	ldr	r0, [pc, #136]	; (800125c <app_LetrasADisplay+0x60c>)
 80011d4:	f001 f844 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	2101      	movs	r1, #1
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f001 f83e 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2110      	movs	r1, #16
 80011e8:	481c      	ldr	r0, [pc, #112]	; (800125c <app_LetrasADisplay+0x60c>)
 80011ea:	f001 f839 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	481a      	ldr	r0, [pc, #104]	; (800125c <app_LetrasADisplay+0x60c>)
 80011f4:	f001 f834 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	4817      	ldr	r0, [pc, #92]	; (800125c <app_LetrasADisplay+0x60c>)
 80011fe:	f001 f82f 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8001202:	e026      	b.n	8001252 <app_LetrasADisplay+0x602>
			case 'Y' | 'y':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f001 f827 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	2102      	movs	r1, #2
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <app_LetrasADisplay+0x60c>)
 8001218:	f001 f822 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	2104      	movs	r1, #4
 8001220:	480e      	ldr	r0, [pc, #56]	; (800125c <app_LetrasADisplay+0x60c>)
 8001222:	f001 f81d 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	2101      	movs	r1, #1
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f001 f817 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	4809      	ldr	r0, [pc, #36]	; (800125c <app_LetrasADisplay+0x60c>)
 8001238:	f001 f812 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <app_LetrasADisplay+0x60c>)
 8001242:	f001 f80d 	bl	8002260 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <app_LetrasADisplay+0x60c>)
 800124c:	f001 f808 	bl	8002260 <HAL_GPIO_WritePin>
			}break;
 8001250:	bf00      	nop
			default:
			{
				/*No hace nada */
			}
		}
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	48000800 	.word	0x48000800

08001260 <app_ConteoFrecuencia>:

Estados seleccion = Inicio;

uint16_t incremento = 0,frecuencia = 0;
uint16_t app_ConteoFrecuencia(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

	htim2.Instance->CNT = 0;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <app_ConteoFrecuencia+0x58>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim2.Instance->CNT < 1000)
 800126c:	e015      	b.n	800129a <app_ConteoFrecuencia+0x3a>
	{
		/* Espera el estado de flanco de subida */
		while(!(HAL_GPIO_ReadPin(Entrada_GPIO_Port, Entrada_Pin)));
 800126e:	bf00      	nop
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <app_ConteoFrecuencia+0x5c>)
 8001274:	f000 ffdc 	bl	8002230 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f8      	beq.n	8001270 <app_ConteoFrecuencia+0x10>
		/* Espera el estado de flanco de bajada */
		while((HAL_GPIO_ReadPin(Entrada_GPIO_Port, Entrada_Pin)));
 800127e:	bf00      	nop
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <app_ConteoFrecuencia+0x5c>)
 8001284:	f000 ffd4 	bl	8002230 <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f8      	bne.n	8001280 <app_ConteoFrecuencia+0x20>
		incremento = incremento + 1;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <app_ConteoFrecuencia+0x60>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <app_ConteoFrecuencia+0x60>)
 8001298:	801a      	strh	r2, [r3, #0]
	while(htim2.Instance->CNT < 1000)
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <app_ConteoFrecuencia+0x58>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a4:	d3e3      	bcc.n	800126e <app_ConteoFrecuencia+0xe>
	}
	return frecuencia = incremento;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <app_ConteoFrecuencia+0x60>)
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <app_ConteoFrecuencia+0x64>)
 80012ac:	801a      	strh	r2, [r3, #0]
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <app_ConteoFrecuencia+0x64>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
	incremento = 0;

}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000003c 	.word	0x2000003c
 80012bc:	48000400 	.word	0x48000400
 80012c0:	20000036 	.word	0x20000036
 80012c4:	20000038 	.word	0x20000038

080012c8 <app_PromedioFrecuencia>:

uint16_t app_PromedioFrecuencia(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
	volatile uint16_t promedio = 0, suma = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	2300      	movs	r3, #0
 80012d4:	80bb      	strh	r3, [r7, #4]
	volatile uint8_t contador =0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	70fb      	strb	r3, [r7, #3]
	while(contador < N_muestras)
 80012da:	e00f      	b.n	80012fc <app_PromedioFrecuencia+0x34>
	{
		suma = suma + Frecuencia[contador];
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <app_PromedioFrecuencia+0x5c>)
 80012e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	80bb      	strh	r3, [r7, #4]
		contador = contador + 1;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	70fb      	strb	r3, [r7, #3]
	while(contador < N_muestras)
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b09      	cmp	r3, #9
 8001302:	d9eb      	bls.n	80012dc <app_PromedioFrecuencia+0x14>
	}
	promedio = suma/N_muestras;
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <app_PromedioFrecuencia+0x60>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	b29b      	uxth	r3, r3
 8001312:	80fb      	strh	r3, [r7, #6]
	return promedio;
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	b29b      	uxth	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	2000007c 	.word	0x2000007c
 8001328:	cccccccd 	.word	0xcccccccd

0800132c <app_CalculoRPM>:

uint16_t app_CalculoRPM(uint16_t promedio)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t RPM = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	81fb      	strh	r3, [r7, #14]
	RPM = promedio*60;
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	461a      	mov	r2, r3
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	b29b      	uxth	r3, r3
 8001346:	81fb      	strh	r3, [r7, #14]
	return RPM;
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	b29b      	uxth	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <app_Tacometro>:

void app_Tacometro(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
	volatile uint8_t boton_evento,division = 1;
 800135e:	2301      	movs	r3, #1
 8001360:	73bb      	strb	r3, [r7, #14]
	volatile uint32_t time = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
	volatile uint16_t output = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	80fb      	strh	r3, [r7, #6]
	boton_evento = app_Debounce();
 800136a:	f7ff f8df 	bl	800052c <app_Debounce>
 800136e:	4603      	mov	r3, r0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	73fb      	strb	r3, [r7, #15]
	switch(seleccion)
 8001374:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <app_Tacometro+0x190>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b04      	cmp	r3, #4
 800137a:	f200 80b1 	bhi.w	80014e0 <app_Tacometro+0x188>
 800137e:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <app_Tacometro+0x2c>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	08001399 	.word	0x08001399
 8001388:	080013e1 	.word	0x080013e1
 800138c:	0800143d 	.word	0x0800143d
 8001390:	08001473 	.word	0x08001473
 8001394:	080014b9 	.word	0x080014b9
	{
		case Inicio:
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8001398:	4854      	ldr	r0, [pc, #336]	; (80014ec <app_Tacometro+0x194>)
 800139a:	f002 f843 	bl	8003424 <HAL_TIM_Base_Stop_IT>
			while(n < N_muestras)
 800139e:	e00c      	b.n	80013ba <app_Tacometro+0x62>
			{
				Frecuencia[n]= 0;
 80013a0:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <app_Tacometro+0x198>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <app_Tacometro+0x19c>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				n = n + 1;
 80013ae:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <app_Tacometro+0x198>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <app_Tacometro+0x198>)
 80013b8:	701a      	strb	r2, [r3, #0]
			while(n < N_muestras)
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <app_Tacometro+0x198>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b09      	cmp	r3, #9
 80013c0:	d9ee      	bls.n	80013a0 <app_Tacometro+0x48>
			}
			n = 0;
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <app_Tacometro+0x198>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
			division = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73bb      	strb	r3, [r7, #14]
			Frec_prom = 0;
 80013cc:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <app_Tacometro+0x1a0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	801a      	strh	r2, [r3, #0]
			RPM = 0;
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <app_Tacometro+0x1a4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	801a      	strh	r2, [r3, #0]
			seleccion = Cuenta;
 80013d8:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <app_Tacometro+0x190>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
		}break;
 80013de:	e07f      	b.n	80014e0 <app_Tacometro+0x188>
		case Cuenta:
		{
			if(boton_evento == 1)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d103      	bne.n	80013f0 <app_Tacometro+0x98>
			{
				seleccion = Inicio;
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <app_Tacometro+0x190>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
				n = n + 1;
				division = division + 1;
				}
				seleccion = Calculo;
			}
		}break;
 80013ee:	e077      	b.n	80014e0 <app_Tacometro+0x188>
				HAL_TIM_Base_Start_IT(&htim2);
 80013f0:	483e      	ldr	r0, [pc, #248]	; (80014ec <app_Tacometro+0x194>)
 80013f2:	f001 ffed 	bl	80033d0 <HAL_TIM_Base_Start_IT>
				while(n < N_muestras)
 80013f6:	e019      	b.n	800142c <app_Tacometro+0xd4>
				Frecuencia[n] = app_ConteoFrecuencia()/division;
 80013f8:	f7ff ff32 	bl	8001260 <app_ConteoFrecuencia>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	fb92 f1f3 	sdiv	r1, r2, r3
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <app_Tacometro+0x198>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	b289      	uxth	r1, r1
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <app_Tacometro+0x19c>)
 8001412:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				n = n + 1;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <app_Tacometro+0x198>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <app_Tacometro+0x198>)
 8001420:	701a      	strb	r2, [r3, #0]
				division = division + 1;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3301      	adds	r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	73bb      	strb	r3, [r7, #14]
				while(n < N_muestras)
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <app_Tacometro+0x198>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d9e1      	bls.n	80013f8 <app_Tacometro+0xa0>
				seleccion = Calculo;
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <app_Tacometro+0x190>)
 8001436:	2202      	movs	r2, #2
 8001438:	701a      	strb	r2, [r3, #0]
		}break;
 800143a:	e051      	b.n	80014e0 <app_Tacometro+0x188>
		case Calculo:
		{
			if(boton_evento == 1)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d103      	bne.n	800144c <app_Tacometro+0xf4>
			{
				seleccion = Inicio;
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <app_Tacometro+0x190>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
				Frec_prom = app_PromedioFrecuencia();
				RPM = app_CalculoRPM(Frec_prom);
				seleccion = Despliegue;
			}

		}break;
 800144a:	e049      	b.n	80014e0 <app_Tacometro+0x188>
				Frec_prom = app_PromedioFrecuencia();
 800144c:	f7ff ff3c 	bl	80012c8 <app_PromedioFrecuencia>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <app_Tacometro+0x1a0>)
 8001456:	801a      	strh	r2, [r3, #0]
				RPM = app_CalculoRPM(Frec_prom);
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <app_Tacometro+0x1a0>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff65 	bl	800132c <app_CalculoRPM>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <app_Tacometro+0x1a4>)
 8001468:	801a      	strh	r2, [r3, #0]
				seleccion = Despliegue;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <app_Tacometro+0x190>)
 800146c:	2204      	movs	r2, #4
 800146e:	701a      	strb	r2, [r3, #0]
		}break;
 8001470:	e036      	b.n	80014e0 <app_Tacometro+0x188>
		case PID:
		{
			if(boton_evento == 1)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d103      	bne.n	8001482 <app_Tacometro+0x12a>
			{
				seleccion = Inicio;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <app_Tacometro+0x190>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
				time = __HAL_TIM_GET_COUNTER(&htim2);
				output = app_PID(800, 100, 1, 1, RPM, time);
				seleccion = Despliegue;
			}
		}
		break;
 8001480:	e02e      	b.n	80014e0 <app_Tacometro+0x188>
				time = __HAL_TIM_GET_COUNTER(&htim2);
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <app_Tacometro+0x194>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	60bb      	str	r3, [r7, #8]
				output = app_PID(800, 100, 1, 1, RPM, time);
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <app_Tacometro+0x1a4>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	b292      	uxth	r2, r2
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800149a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800149e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001500 <app_Tacometro+0x1a8>
 80014a2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001504 <app_Tacometro+0x1ac>
 80014a6:	f000 f82f 	bl	8001508 <app_PID>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	80fb      	strh	r3, [r7, #6]
				seleccion = Despliegue;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <app_Tacometro+0x190>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	701a      	strb	r2, [r3, #0]
		break;
 80014b6:	e013      	b.n	80014e0 <app_Tacometro+0x188>
		case Despliegue:
		{
			if(boton_evento == 1)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d103      	bne.n	80014c8 <app_Tacometro+0x170>
			{
				seleccion = Inicio;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <app_Tacometro+0x190>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
			{
				app_Despliegue(output);
				HAL_TIM_Base_Stop_IT(&htim2);
				seleccion = Cuenta;
			}
		}break;
 80014c6:	e00a      	b.n	80014de <app_Tacometro+0x186>
				app_Despliegue(output);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fa8b 	bl	80009e8 <app_Despliegue>
				HAL_TIM_Base_Stop_IT(&htim2);
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <app_Tacometro+0x194>)
 80014d4:	f001 ffa6 	bl	8003424 <HAL_TIM_Base_Stop_IT>
				seleccion = Cuenta;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <app_Tacometro+0x190>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
		}break;
 80014de:	bf00      	nop
		default:
			{

			}
	}
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000034 	.word	0x20000034
 80014ec:	2000003c 	.word	0x2000003c
 80014f0:	2000002f 	.word	0x2000002f
 80014f4:	2000007c 	.word	0x2000007c
 80014f8:	20000030 	.word	0x20000030
 80014fc:	20000032 	.word	0x20000032
 8001500:	42c80000 	.word	0x42c80000
 8001504:	44480000 	.word	0x44480000

08001508 <app_PID>:

/* Libreria PID */
#include "app_PID.h"

uint8_t app_PID(float ref,float Kp, float Ki,float Kd, uint16_t input, uint16_t time)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001512:	edc7 0a04 	vstr	s1, [r7, #16]
 8001516:	ed87 1a03 	vstr	s2, [r7, #12]
 800151a:	edc7 1a02 	vstr	s3, [r7, #8]
 800151e:	4603      	mov	r3, r0
 8001520:	460a      	mov	r2, r1
 8001522:	80fb      	strh	r3, [r7, #6]
 8001524:	4613      	mov	r3, r2
 8001526:	80bb      	strh	r3, [r7, #4]
	volatile float current_error = 0, previous_error = 0, integration_sum = 0;
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
	volatile uint16_t output = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	837b      	strh	r3, [r7, #26]

	current_error = ref - input;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	ee07 3a90 	vmov	s15, r3
 8001544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001548:	ed97 7a05 	vldr	s14, [r7, #20]
 800154c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001550:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	integration_sum = integration_sum + (current_error + time);
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	edd7 7a07 	vldr	s15, [r7, #28]
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	edc7 7a07 	vstr	s15, [r7, #28]
	previous_error = current_error;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	623b      	str	r3, [r7, #32]
	output = Kp * current_error + Ki * integration_sum + Kd + 1000 * (current_error - previous_error)/time;
 8001576:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800157a:	edd7 7a04 	vldr	s15, [r7, #16]
 800157e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001582:	edd7 6a07 	vldr	s13, [r7, #28]
 8001586:	edd7 7a03 	vldr	s15, [r7, #12]
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001592:	edd7 7a02 	vldr	s15, [r7, #8]
 8001596:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800159e:	edd7 7a08 	vldr	s15, [r7, #32]
 80015a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015a6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80015e0 <app_PID+0xd8>
 80015aa:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015b8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c4:	ee17 3a90 	vmov	r3, s15
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	837b      	strh	r3, [r7, #26]

	return output;
 80015cc:	8b7b      	ldrh	r3, [r7, #26]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	372c      	adds	r7, #44	; 0x2c
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	447a0000 	.word	0x447a0000

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fb0b 	bl	8001c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f80e 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f000 f904 	bl	80017fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015f4:	f000 f8d2 	bl	800179c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015f8:	f000 f882 	bl	8001700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <main+0x24>)
 80015fe:	f001 fee7 	bl	80033d0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_Tacometro();
 8001602:	f7ff fea9 	bl	8001358 <app_Tacometro>
 8001606:	e7fc      	b.n	8001602 <main+0x1e>
 8001608:	2000003c 	.word	0x2000003c

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0a4      	sub	sp, #144	; 0x90
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001616:	2244      	movs	r2, #68	; 0x44
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f002 ffa2 	bl	8004564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2234      	movs	r2, #52	; 0x34
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f002 ff94 	bl	8004564 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800163c:	f000 fe28 	bl	8002290 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <SystemClock_Config+0xf0>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <SystemClock_Config+0xf0>)
 8001648:	f023 0318 	bic.w	r3, r3, #24
 800164c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001650:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001654:	f000 fe3a 	bl	80022cc <HAL_PWREx_ControlVoltageScaling>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800165e:	f000 f97b 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001662:	2314      	movs	r3, #20
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001666:	2301      	movs	r3, #1
 8001668:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800166a:	2301      	movs	r3, #1
 800166c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001672:	2360      	movs	r3, #96	; 0x60
 8001674:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800167a:	2301      	movs	r3, #1
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 45;
 8001684:	232d      	movs	r3, #45	; 0x2d
 8001686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001690:	2304      	movs	r3, #4
 8001692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fe6c 	bl	8002378 <HAL_RCC_OscConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016a6:	f000 f957 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2303      	movs	r3, #3
 80016b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 fabc 	bl	8002c44 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80016d2:	f000 f941 	bl	8001958 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 fcb3 	bl	800304c <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80016ec:	f000 f934 	bl	8001958 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016f0:	f001 fe32 	bl	8003358 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016f4:	bf00      	nop
 80016f6:	3790      	adds	r7, #144	; 0x90
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000

08001700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_TIM2_Init+0x98>)
 8001720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_TIM2_Init+0x98>)
 8001728:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800172c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_TIM2_Init+0x98>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_TIM2_Init+0x98>)
 8001736:	f04f 32ff 	mov.w	r2, #4294967295
 800173a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_TIM2_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_TIM2_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_TIM2_Init+0x98>)
 800174a:	f001 fe15 	bl	8003378 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001754:	f000 f900 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_TIM2_Init+0x98>)
 8001766:	f001 ffa7 	bl	80036b8 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001770:	f000 f8f2 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM2_Init+0x98>)
 8001782:	f002 f983 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800178c:	f000 f8e4 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000003c 	.word	0x2000003c

0800179c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <MX_USART2_UART_Init+0x5c>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017e0:	f002 f9d8 	bl	8003b94 <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ea:	f000 f8b5 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000090 	.word	0x20000090
 80017f8:	40004400 	.word	0x40004400

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <MX_GPIO_Init+0x14c>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a40      	ldr	r2, [pc, #256]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <MX_GPIO_Init+0x14c>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a3a      	ldr	r2, [pc, #232]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <MX_GPIO_Init+0x14c>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001878:	4834      	ldr	r0, [pc, #208]	; (800194c <MX_GPIO_Init+0x150>)
 800187a:	f000 fcf1 	bl	8002260 <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 800187e:	2200      	movs	r2, #0
 8001880:	f241 5131 	movw	r1, #5425	; 0x1531
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f000 fcea 	bl	8002260 <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Display_3_Pin|Display_2_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f242 0130 	movw	r1, #8240	; 0x2030
 8001892:	482f      	ldr	r0, [pc, #188]	; (8001950 <MX_GPIO_Init+0x154>)
 8001894:	f000 fce4 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <MX_GPIO_Init+0x158>)
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4827      	ldr	r0, [pc, #156]	; (800194c <MX_GPIO_Init+0x150>)
 80018ae:	f000 fb4d 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 80018b2:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80018b6:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4820      	ldr	r0, [pc, #128]	; (800194c <MX_GPIO_Init+0x150>)
 80018cc:	f000 fb3e 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 80018d0:	f241 5331 	movw	r3, #5425	; 0x1531
 80018d4:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f000 fb2e 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Display_3_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Display_3_Pin|Display_2_Pin;
 80018f0:	f242 0330 	movw	r3, #8240	; 0x2030
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_GPIO_Init+0x154>)
 800190a:	f000 fb1f 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <MX_GPIO_Init+0x150>)
 8001924:	f000 fb12 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 8001928:	2340      	movs	r3, #64	; 0x40
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_GPIO_Init+0x154>)
 800193c:	f000 fb06 	bl	8001f4c <HAL_GPIO_Init>

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	48000800 	.word	0x48000800
 8001950:	48000400 	.word	0x48000400
 8001954:	10210000 	.word	0x10210000

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_MspInit+0x44>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_MspInit+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6613      	str	r3, [r2, #96]	; 0x60
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_MspInit+0x44>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_MspInit+0x44>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_MspInit+0x44>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_MspInit+0x44>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c0:	d113      	bne.n	80019ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_TIM_Base_MspInit+0x44>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_TIM_Base_MspInit+0x44>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6593      	str	r3, [r2, #88]	; 0x58
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_TIM_Base_MspInit+0x44>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	201c      	movs	r0, #28
 80019e0:	f000 fa7d 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019e4:	201c      	movs	r0, #28
 80019e6:	f000 fa96 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_UART_MspInit+0x7c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d128      	bne.n	8001a6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_UART_MspInit+0x80>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_UART_MspInit+0x80>)
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_UART_MspInit+0x80>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_UART_MspInit+0x80>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_UART_MspInit+0x80>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_UART_MspInit+0x80>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f000 fa70 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40004400 	.word	0x40004400
 8001a78:	40021000 	.word	0x40021000

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  char mensaje[]= {'e','r','r','o'};
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HardFault_Handler+0x58>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	607b      	str	r3, [r7, #4]
	  app_SeleccionDisplay(0);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7fe ff0f 	bl	80008bc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[0]);
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f8d5 	bl	8000c50 <app_LetrasADisplay>
	  HAL_Delay(3);
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	f000 f91c 	bl	8001ce4 <HAL_Delay>
	  app_SeleccionDisplay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7fe ff05 	bl	80008bc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[1]);
 8001ab2:	797b      	ldrb	r3, [r7, #5]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f8cb 	bl	8000c50 <app_LetrasADisplay>
	  HAL_Delay(3);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f000 f912 	bl	8001ce4 <HAL_Delay>
	  app_SeleccionDisplay(2);
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f7fe fefb 	bl	80008bc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[2]);
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f8c1 	bl	8000c50 <app_LetrasADisplay>
	  HAL_Delay(3);
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f000 f908 	bl	8001ce4 <HAL_Delay>
	  app_SeleccionDisplay(3);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f7fe fef1 	bl	80008bc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[3]);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f8b7 	bl	8000c50 <app_LetrasADisplay>
  {
 8001ae2:	e7d6      	b.n	8001a92 <HardFault_Handler+0x6>
 8001ae4:	0800458c 	.word	0x0800458c

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 f8be 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <TIM2_IRQHandler+0x10>)
 8001b36:	f001 fca0 	bl	800347a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000003c 	.word	0x2000003c

08001b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <SystemInit+0x64>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <SystemInit+0x64>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <SystemInit+0x68>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <SystemInit+0x68>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <SystemInit+0x68>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <SystemInit+0x68>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <SystemInit+0x68>)
 8001b70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <SystemInit+0x68>)
 8001b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <SystemInit+0x68>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <SystemInit+0x68>)
 8001b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <SystemInit+0x68>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SystemInit+0x64>)
 8001b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	40021000 	.word	0x40021000

08001bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bb6:	e003      	b.n	8001bc0 <LoopCopyDataInit>

08001bb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bbe:	3104      	adds	r1, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bc8:	d3f6      	bcc.n	8001bb8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bcc:	e002      	b.n	8001bd4 <LoopFillZerobss>

08001bce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bd0:	f842 3b04 	str.w	r3, [r2], #4

08001bd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <LoopForever+0x16>)
	cmp	r2, r3
 8001bd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bd8:	d3f9      	bcc.n	8001bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bda:	f7ff ffb3 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f002 fc9d 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be2:	f7ff fcff 	bl	80015e4 <main>

08001be6 <LoopForever>:

LoopForever:
    b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001bec:	080045e8 	.word	0x080045e8
	ldr	r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bf4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001bf8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001bfc:	20000114 	.word	0x20000114

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>

08001c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f95b 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f80e 	bl	8001c34 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	e001      	b.n	8001c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c24:	f7ff fea0 	bl	8001968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_InitTick+0x68>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d022      	beq.n	8001c8e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_InitTick+0x6c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_InitTick+0x68>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f968 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10f      	bne.n	8001c88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	d809      	bhi.n	8001c82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	f04f 30ff 	mov.w	r0, #4294967295
 8001c76:	f000 f932 	bl	8001ede <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_InitTick+0x70>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e007      	b.n	8001c92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e004      	b.n	8001c92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000110 	.word	0x20000110
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000110 	.word	0x20000110

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d004      	beq.n	8001d08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_Delay+0x40>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d08:	bf00      	nop
 8001d0a:	f7ff ffdf 	bl	8001ccc <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d8f7      	bhi.n	8001d0a <HAL_Delay+0x26>
  {
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff29 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff3e 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff8e 	bl	8001e1c <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5d 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff31 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa2 	bl	8001e84 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e14e      	b.n	80021fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8140 	beq.w	80021f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d00b      	beq.n	8001f94 <HAL_GPIO_Init+0x48>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d130      	bne.n	8001ff6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0xea>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d123      	bne.n	800207e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 809a 	beq.w	80021f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	4b55      	ldr	r3, [pc, #340]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	4a54      	ldr	r2, [pc, #336]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6613      	str	r3, [r2, #96]	; 0x60
 80020cc:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002102:	d013      	beq.n	800212c <HAL_GPIO_Init+0x1e0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a46      	ldr	r2, [pc, #280]	; (8002220 <HAL_GPIO_Init+0x2d4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_GPIO_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a45      	ldr	r2, [pc, #276]	; (8002224 <HAL_GPIO_Init+0x2d8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <HAL_GPIO_Init+0x1d8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a44      	ldr	r2, [pc, #272]	; (8002228 <HAL_GPIO_Init+0x2dc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_GPIO_Init+0x1d4>
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002120:	2307      	movs	r3, #7
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <HAL_GPIO_Init+0x2e0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002170:	4a2e      	ldr	r2, [pc, #184]	; (800222c <HAL_GPIO_Init+0x2e0>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_GPIO_Init+0x2e0>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800219a:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_GPIO_Init+0x2e0>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f aea9 	bne.w	8001f5c <HAL_GPIO_Init+0x10>
  }
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800227c:	e002      	b.n	8002284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007000 	.word	0x40007000

080022b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40007000 	.word	0x40007000

080022cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022da:	d130      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e8:	d038      	beq.n	800235c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022f2:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2232      	movs	r2, #50	; 0x32
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0c9b      	lsrs	r3, r3, #18
 800230c:	3301      	adds	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002310:	e002      	b.n	8002318 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3b01      	subs	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002324:	d102      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f2      	bne.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002338:	d110      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e00f      	b.n	800235e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234a:	d007      	beq.n	800235c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40007000 	.word	0x40007000
 8002370:	20000000 	.word	0x20000000
 8002374:	431bde83 	.word	0x431bde83

08002378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	f000 bc56 	b.w	8002c38 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238c:	4ba1      	ldr	r3, [pc, #644]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002396:	4b9f      	ldr	r3, [pc, #636]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80e6 	beq.w	800257a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4c>
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	f040 808d 	bne.w	80024d6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	f040 8089 	bne.w	80024d6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c4:	4b93      	ldr	r3, [pc, #588]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <HAL_RCC_OscConfig+0x66>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f000 bc2d 	b.w	8002c38 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e2:	4b8c      	ldr	r3, [pc, #560]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_RCC_OscConfig+0x80>
 80023ee:	4b89      	ldr	r3, [pc, #548]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f6:	e005      	b.n	8002404 <HAL_RCC_OscConfig+0x8c>
 80023f8:	4b86      	ldr	r3, [pc, #536]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002404:	4293      	cmp	r3, r2
 8002406:	d224      	bcs.n	8002452 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fdbd 	bl	8002f8c <RCC_SetFlashLatencyFromMSIRange>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f000 bc0d 	b.w	8002c38 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241e:	4b7d      	ldr	r3, [pc, #500]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7c      	ldr	r2, [pc, #496]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b7a      	ldr	r3, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	4977      	ldr	r1, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243c:	4b75      	ldr	r3, [pc, #468]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	4972      	ldr	r1, [pc, #456]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e025      	b.n	800249e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002452:	4b70      	ldr	r3, [pc, #448]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6f      	ldr	r2, [pc, #444]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	496a      	ldr	r1, [pc, #424]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4965      	ldr	r1, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fd7c 	bl	8002f8c <RCC_SetFlashLatencyFromMSIRange>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e3cc      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249e:	f000 fcb3 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 80024a2:	4601      	mov	r1, r0
 80024a4:	4b5b      	ldr	r3, [pc, #364]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <HAL_RCC_OscConfig+0x2a0>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	fa21 f303 	lsr.w	r3, r1, r3
 80024ba:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_RCC_OscConfig+0x2a4>)
 80024bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024be:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_RCC_OscConfig+0x2a8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fbb6 	bl	8001c34 <HAL_InitTick>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d052      	beq.n	8002578 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	e3b0      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d032      	beq.n	8002544 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024de:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a4c      	ldr	r2, [pc, #304]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ea:	f7ff fbef 	bl	8001ccc <HAL_GetTick>
 80024ee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f2:	f7ff fbeb 	bl	8001ccc <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e399      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002504:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002510:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002516:	f043 0308 	orr.w	r3, r3, #8
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	493a      	ldr	r1, [pc, #232]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4935      	ldr	r1, [pc, #212]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
 8002542:	e01a      	b.n	800257a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a32      	ldr	r2, [pc, #200]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002550:	f7ff fbbc 	bl	8001ccc <HAL_GetTick>
 8002554:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002558:	f7ff fbb8 	bl	8001ccc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e366      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x1e0>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d073      	beq.n	800266e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d005      	beq.n	8002598 <HAL_RCC_OscConfig+0x220>
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d10e      	bne.n	80025b0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d10b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d063      	beq.n	800266c <HAL_RCC_OscConfig+0x2f4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d15f      	bne.n	800266c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e343      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_OscConfig+0x250>
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e01d      	b.n	8002604 <HAL_RCC_OscConfig+0x28c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x274>
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x28c>
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a05      	ldr	r2, [pc, #20]	; (8002614 <HAL_RCC_OscConfig+0x29c>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01b      	beq.n	8002644 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fb5e 	bl	8001ccc <HAL_GetTick>
 8002610:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	e010      	b.n	8002636 <HAL_RCC_OscConfig+0x2be>
 8002614:	40021000 	.word	0x40021000
 8002618:	08004590 	.word	0x08004590
 800261c:	20000000 	.word	0x20000000
 8002620:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fb52 	bl	8001ccc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e300      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002636:	4ba0      	ldr	r3, [pc, #640]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x2ac>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7ff fb42 	bl	8001ccc <HAL_GetTick>
 8002648:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff fb3e 	bl	8001ccc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e2ec      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800265e:	4b96      	ldr	r3, [pc, #600]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x2d4>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d060      	beq.n	800273c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x314>
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d119      	bne.n	80026ba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d116      	bne.n	80026ba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268c:	4b8a      	ldr	r3, [pc, #552]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_OscConfig+0x32c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e2c9      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b84      	ldr	r3, [pc, #528]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	4981      	ldr	r1, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b8:	e040      	b.n	800273c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d023      	beq.n	800270a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c2:	4b7d      	ldr	r3, [pc, #500]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7c      	ldr	r2, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7ff fafd 	bl	8001ccc <HAL_GetTick>
 80026d2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d6:	f7ff faf9 	bl	8001ccc <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e2a7      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	496d      	ldr	r1, [pc, #436]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
 8002708:	e018      	b.n	800273c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6a      	ldr	r2, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7ff fad9 	bl	8001ccc <HAL_GetTick>
 800271a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271e:	f7ff fad5 	bl	8001ccc <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e283      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d07f      	beq.n	8002848 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d05f      	beq.n	8002810 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002756:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	429a      	cmp	r2, r3
 8002764:	d037      	beq.n	80027d6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e25c      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278e:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002798:	f7ff fa98 	bl	8001ccc <HAL_GetTick>
 800279c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7ff fa94 	bl	8001ccc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b11      	cmp	r3, #17
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e242      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80027b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ef      	bne.n	80027a0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	f023 0210 	bic.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	493a      	ldr	r1, [pc, #232]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027dc:	4a36      	ldr	r2, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7ff fa71 	bl	8001ccc <HAL_GetTick>
 80027ea:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ee:	f7ff fa6d 	bl	8001ccc <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b11      	cmp	r3, #17
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e21b      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ef      	beq.n	80027ee <HAL_RCC_OscConfig+0x476>
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002816:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7ff fa54 	bl	8001ccc <HAL_GetTick>
 8002824:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7ff fa50 	bl	8001ccc <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b11      	cmp	r3, #17
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1fe      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ef      	bne.n	8002828 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80c1 	beq.w	80029d8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10e      	bne.n	8002886 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002872:	6593      	str	r3, [r2, #88]	; 0x58
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_OscConfig+0x540>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_RCC_OscConfig+0x544>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_OscConfig+0x544>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0x544>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7ff fa15 	bl	8001ccc <HAL_GetTick>
 80028a2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a4:	e00c      	b.n	80028c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7ff fa11 	bl	8001ccc <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d905      	bls.n	80028c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1bf      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c0:	4bb1      	ldr	r3, [pc, #708]	; (8002b88 <HAL_RCC_OscConfig+0x810>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ec      	beq.n	80028a6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d02c      	beq.n	8002932 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80028d8:	4bac      	ldr	r3, [pc, #688]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	49a8      	ldr	r1, [pc, #672]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028fe:	4ba3      	ldr	r3, [pc, #652]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	4aa1      	ldr	r2, [pc, #644]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800290e:	4b9f      	ldr	r3, [pc, #636]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	4a9d      	ldr	r2, [pc, #628]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291e:	e018      	b.n	8002952 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002920:	4b9a      	ldr	r3, [pc, #616]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	4a99      	ldr	r2, [pc, #612]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002930:	e00f      	b.n	8002952 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002932:	4b96      	ldr	r3, [pc, #600]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	4a94      	ldr	r2, [pc, #592]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002942:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	4a90      	ldr	r2, [pc, #576]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7ff f9b7 	bl	8001ccc <HAL_GetTick>
 800295e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7ff f9b3 	bl	8001ccc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e15f      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002978:	4b84      	ldr	r3, [pc, #528]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0ed      	beq.n	8002962 <HAL_RCC_OscConfig+0x5ea>
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7ff f9a0 	bl	8001ccc <HAL_GetTick>
 800298c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7ff f99c 	bl	8001ccc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e148      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a6:	4b79      	ldr	r3, [pc, #484]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ed      	bne.n	8002990 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80029b4:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a74      	ldr	r2, [pc, #464]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80029bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	4a6e      	ldr	r2, [pc, #440]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80029d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ec:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80029ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029f2:	4a66      	ldr	r2, [pc, #408]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7ff f966 	bl	8001ccc <HAL_GetTick>
 8002a00:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a04:	f7ff f962 	bl	8001ccc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e110      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a16:	4b5d      	ldr	r3, [pc, #372]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ef      	beq.n	8002a04 <HAL_RCC_OscConfig+0x68c>
 8002a24:	e01b      	b.n	8002a5e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a26:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a2c:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7ff f949 	bl	8001ccc <HAL_GetTick>
 8002a3a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3e:	f7ff f945 	bl	8001ccc <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0f3      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a50:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ef      	bne.n	8002a3e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80e7 	beq.w	8002c36 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f040 80b7 	bne.w	8002be0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a72:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0203 	and.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d124      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	3b01      	subs	r3, #1
 8002a92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d11b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d113      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d109      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d061      	beq.n	8002b94 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d056      	beq.n	8002b84 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae2:	f7ff f8f3 	bl	8001ccc <HAL_GetTick>
 8002ae6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff f8ef 	bl	8001ccc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e09d      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <HAL_RCC_OscConfig+0x818>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b22:	0212      	lsls	r2, r2, #8
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b2a:	0852      	lsrs	r2, r2, #1
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0552      	lsls	r2, r2, #21
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4913      	ldr	r1, [pc, #76]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b5c:	f7ff f8b6 	bl	8001ccc <HAL_GetTick>
 8002b60:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7ff f8b2 	bl	8001ccc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e060      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_OscConfig+0x814>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b82:	e058      	b.n	8002c36 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e057      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d14a      	bne.n	8002c36 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a26      	ldr	r2, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb8:	f7ff f888 	bl	8001ccc <HAL_GetTick>
 8002bbc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7ff f884 	bl	8001ccc <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e032      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x848>
 8002bde:	e02a      	b.n	8002c36 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d025      	beq.n	8002c32 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002bf8:	f023 0303 	bic.w	r3, r3, #3
 8002bfc:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002c04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7ff f85f 	bl	8001ccc <HAL_GetTick>
 8002c0e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c12:	f7ff f85b 	bl	8001ccc <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e009      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x8c8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x89a>
 8002c30:	e001      	b.n	8002c36 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0c8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d910      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0207 	bic.w	r2, r3, #7
 8002c6e:	4961      	ldr	r1, [pc, #388]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0b0      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d04c      	beq.n	8002d2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9c:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d121      	bne.n	8002cec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e09e      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d115      	bne.n	8002cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e092      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e086      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cdc:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e07e      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cec:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 0203 	bic.w	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	493f      	ldr	r1, [pc, #252]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfe:	f7fe ffe5 	bl	8001ccc <HAL_GetTick>
 8002d02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d06:	f7fe ffe1 	bl	8001ccc <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e066      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 020c 	and.w	r2, r3, #12
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d1eb      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3a:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	492c      	ldr	r1, [pc, #176]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d210      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4924      	ldr	r1, [pc, #144]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e036      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4918      	ldr	r1, [pc, #96]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4910      	ldr	r1, [pc, #64]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dba:	f000 f825 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ff28 	bl	8001c34 <HAL_InitTick>
 8002de4:	4603      	mov	r3, r0
 8002de6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002de8:	7afb      	ldrb	r3, [r7, #11]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08004590 	.word	0x08004590
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e20:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x34>
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d11e      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e3c:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e48:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e005      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d102      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e004      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e8c:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d133      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0xa4>
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xaa>
 8002eaa:	e005      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eae:	617b      	str	r3, [r7, #20]
      break;
 8002eb0:	e005      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb4:	617b      	str	r3, [r7, #20]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	617b      	str	r3, [r7, #20]
      break;
 8002ebc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	3301      	adds	r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	fb02 f203 	mul.w	r2, r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0e5b      	lsrs	r3, r3, #25
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002efe:	69bb      	ldr	r3, [r7, #24]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3724      	adds	r7, #36	; 0x24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	080045a8 	.word	0x080045a8
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	007a1200 	.word	0x007a1200

08002f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3c:	4601      	mov	r1, r0
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	080045a0 	.word	0x080045a0

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f64:	f7ff ffda 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0adb      	lsrs	r3, r3, #11
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000
 8002f88:	080045a0 	.word	0x080045a0

08002f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fa4:	f7ff f984 	bl	80022b0 <HAL_PWREx_GetVoltageRange>
 8002fa8:	6178      	str	r0, [r7, #20]
 8002faa:	e014      	b.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fc4:	f7ff f974 	bl	80022b0 <HAL_PWREx_GetVoltageRange>
 8002fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fdc:	d10b      	bne.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d919      	bls.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fe8:	d902      	bls.n	8002ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fea:	2302      	movs	r3, #2
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e013      	b.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	e010      	b.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d902      	bls.n	8003002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	e00a      	b.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d102      	bne.n	800300e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003008:	2302      	movs	r3, #2
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	e004      	b.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b70      	cmp	r3, #112	; 0x70
 8003012:	d101      	bne.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003014:	2301      	movs	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 0207 	bic.w	r2, r3, #7
 8003020:	4909      	ldr	r1, [pc, #36]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	d001      	beq.n	800303a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40022000 	.word	0x40022000

0800304c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003054:	2300      	movs	r3, #0
 8003056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003058:	2300      	movs	r3, #0
 800305a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 809e 	beq.w	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800306e:	4b46      	ldr	r3, [pc, #280]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b40      	ldr	r3, [pc, #256]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	; 0x58
 8003090:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a39      	ldr	r2, [pc, #228]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fe0e 	bl	8001ccc <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b2:	e009      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7fe fe0a 	bl	8001ccc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	74fb      	strb	r3, [r7, #19]
        break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ef      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d15a      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01e      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d019      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003100:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003122:	4a19      	ldr	r2, [pc, #100]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d016      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fdca 	bl	8001ccc <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313a:	e00b      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7fe fdc6 	bl	8001ccc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d902      	bls.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	74fb      	strb	r3, [r7, #19]
            break;
 8003152:	e006      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ec      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4904      	ldr	r1, [pc, #16]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
 8003184:	e006      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003194:	7c7b      	ldrb	r3, [r7, #17]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	4a6d      	ldr	r2, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b2:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f023 0203 	bic.w	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4964      	ldr	r1, [pc, #400]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d4:	4b5f      	ldr	r3, [pc, #380]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 020c 	bic.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	495c      	ldr	r1, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031f6:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4953      	ldr	r1, [pc, #332]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003218:	4b4e      	ldr	r3, [pc, #312]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	494b      	ldr	r1, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800323a:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4942      	ldr	r1, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800325c:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	493a      	ldr	r1, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327e:	4b35      	ldr	r3, [pc, #212]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	4931      	ldr	r1, [pc, #196]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	4929      	ldr	r1, [pc, #164]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	4920      	ldr	r1, [pc, #128]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	4918      	ldr	r1, [pc, #96]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003302:	d105      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800330a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800330e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333a:	d105      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003346:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003348:	7cbb      	ldrb	r3, [r7, #18]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e01d      	b.n	80033c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fb06 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 fa6a 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_TIM_Base_Start_IT+0x50>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d00b      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x42>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d007      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	00010007 	.word	0x00010007

08003424 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a1a      	ldr	r2, [r3, #32]
 8003442:	f241 1311 	movw	r3, #4369	; 0x1111
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10f      	bne.n	800346c <HAL_TIM_Base_Stop_IT+0x48>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a1a      	ldr	r2, [r3, #32]
 8003452:	f240 4344 	movw	r3, #1092	; 0x444
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_TIM_Base_Stop_IT+0x48>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d122      	bne.n	80034d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d11b      	bne.n	80034d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0202 	mvn.w	r2, #2
 80034a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f9c8 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 80034c2:	e005      	b.n	80034d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f9ba 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f9cb 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d122      	bne.n	800352a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d11b      	bne.n	800352a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f06f 0204 	mvn.w	r2, #4
 80034fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f99e 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 8003516:	e005      	b.n	8003524 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f990 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9a1 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d122      	bne.n	800357e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d11b      	bne.n	800357e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f06f 0208 	mvn.w	r2, #8
 800354e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2204      	movs	r2, #4
 8003554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f974 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 800356a:	e005      	b.n	8003578 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f966 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f977 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d122      	bne.n	80035d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b10      	cmp	r3, #16
 8003598:	d11b      	bne.n	80035d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f06f 0210 	mvn.w	r2, #16
 80035a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2208      	movs	r2, #8
 80035a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f94a 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 80035be:	e005      	b.n	80035cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f93c 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f94d 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10e      	bne.n	80035fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f06f 0201 	mvn.w	r2, #1
 80035f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f916 	bl	800382a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d10e      	bne.n	800362a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d107      	bne.n	800362a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 faa1 	bl	8003b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d107      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa94 	bl	8003b80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8fb 	bl	800387a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b20      	cmp	r3, #32
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0220 	mvn.w	r2, #32
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa54 	bl	8003b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_ConfigClockSource+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0a8      	b.n	8003822 <HAL_TIM_ConfigClockSource+0x16a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d067      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x124>
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d80b      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x70>
 8003710:	2b10      	cmp	r3, #16
 8003712:	d073      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x144>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d802      	bhi.n	800371e <HAL_TIM_ConfigClockSource+0x66>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d06f      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800371c:	e078      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800371e:	2b20      	cmp	r3, #32
 8003720:	d06c      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x144>
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d06a      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003726:	e073      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d00d      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0x90>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d804      	bhi.n	800373a <HAL_TIM_ConfigClockSource+0x82>
 8003730:	2b50      	cmp	r3, #80	; 0x50
 8003732:	d033      	beq.n	800379c <HAL_TIM_ConfigClockSource+0xe4>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d041      	beq.n	80037bc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003738:	e06a      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	d066      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x156>
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d017      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003746:	e063      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f000 f978 	bl	8003a4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800376a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
      break;
 8003774:	e04c      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f000 f961 	bl	8003a4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003798:	609a      	str	r2, [r3, #8]
      break;
 800379a:	e039      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	461a      	mov	r2, r3
 80037aa:	f000 f8d5 	bl	8003958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2150      	movs	r1, #80	; 0x50
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f92e 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 80037ba:	e029      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f000 f8f4 	bl	80039b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2160      	movs	r1, #96	; 0x60
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f91e 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 80037da:	e019      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	461a      	mov	r2, r3
 80037ea:	f000 f8b5 	bl	8003958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f90e 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 80037fa:	e009      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f000 f905 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 800380c:	e000      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800380e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x20>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a21      	ldr	r2, [pc, #132]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0x52>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0x52>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0x52>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <TIM_Base_SetConfig+0xc4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <TIM_Base_SetConfig+0xbc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_Base_SetConfig+0xa0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_Base_SetConfig+0xa0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <TIM_Base_SetConfig+0xc4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400

08003958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f023 0201 	bic.w	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f023 030a 	bic.w	r3, r3, #10
 8003994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0210 	bic.w	r2, r3, #16
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f043 0307 	orr.w	r3, r3, #7
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e04f      	b.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ad4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d004      	beq.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a10      	ldr	r2, [pc, #64]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10c      	bne.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40014000 	.word	0x40014000

08003b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e040      	b.n	8003c28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd ff1e 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f82c 	bl	8003c30 <UART_SetConfig>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e022      	b.n	8003c28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fb34 	bl	8004258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fbbb 	bl	800439c <UART_CheckIdleState>
 8003c26:	4603      	mov	r3, r0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003c34:	b08a      	sub	sp, #40	; 0x28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4bbc      	ldr	r3, [pc, #752]	; (8003f58 <UART_SetConfig+0x328>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4ab2      	ldr	r2, [pc, #712]	; (8003f5c <UART_SetConfig+0x32c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4aa9      	ldr	r2, [pc, #676]	; (8003f60 <UART_SetConfig+0x330>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d126      	bne.n	8003d0e <UART_SetConfig+0xde>
 8003cc0:	4ba8      	ldr	r3, [pc, #672]	; (8003f64 <UART_SetConfig+0x334>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d81a      	bhi.n	8003d04 <UART_SetConfig+0xd4>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <UART_SetConfig+0xa4>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf5 	.word	0x08003cf5
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cfd 	.word	0x08003cfd
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	e0ab      	b.n	8003e44 <UART_SetConfig+0x214>
 8003cec:	2302      	movs	r3, #2
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf2:	e0a7      	b.n	8003e44 <UART_SetConfig+0x214>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e0a3      	b.n	8003e44 <UART_SetConfig+0x214>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e09f      	b.n	8003e44 <UART_SetConfig+0x214>
 8003d04:	2310      	movs	r3, #16
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	bf00      	nop
 8003d0c:	e09a      	b.n	8003e44 <UART_SetConfig+0x214>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a95      	ldr	r2, [pc, #596]	; (8003f68 <UART_SetConfig+0x338>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d138      	bne.n	8003d8a <UART_SetConfig+0x15a>
 8003d18:	4b92      	ldr	r3, [pc, #584]	; (8003f64 <UART_SetConfig+0x334>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b0c      	cmp	r3, #12
 8003d24:	d82c      	bhi.n	8003d80 <UART_SetConfig+0x150>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0xfc>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003d81 	.word	0x08003d81
 8003d34:	08003d81 	.word	0x08003d81
 8003d38:	08003d81 	.word	0x08003d81
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003d81 	.word	0x08003d81
 8003d44:	08003d81 	.word	0x08003d81
 8003d48:	08003d81 	.word	0x08003d81
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	08003d81 	.word	0x08003d81
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d79 	.word	0x08003d79
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e06d      	b.n	8003e44 <UART_SetConfig+0x214>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e069      	b.n	8003e44 <UART_SetConfig+0x214>
 8003d70:	2304      	movs	r3, #4
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e065      	b.n	8003e44 <UART_SetConfig+0x214>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e061      	b.n	8003e44 <UART_SetConfig+0x214>
 8003d80:	2310      	movs	r3, #16
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	bf00      	nop
 8003d88:	e05c      	b.n	8003e44 <UART_SetConfig+0x214>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <UART_SetConfig+0x33c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d125      	bne.n	8003de0 <UART_SetConfig+0x1b0>
 8003d94:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <UART_SetConfig+0x334>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d011      	beq.n	8003dc6 <UART_SetConfig+0x196>
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d802      	bhi.n	8003dac <UART_SetConfig+0x17c>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <UART_SetConfig+0x186>
 8003daa:	e014      	b.n	8003dd6 <UART_SetConfig+0x1a6>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d006      	beq.n	8003dbe <UART_SetConfig+0x18e>
 8003db0:	2b30      	cmp	r3, #48	; 0x30
 8003db2:	d00c      	beq.n	8003dce <UART_SetConfig+0x19e>
 8003db4:	e00f      	b.n	8003dd6 <UART_SetConfig+0x1a6>
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbc:	e042      	b.n	8003e44 <UART_SetConfig+0x214>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc4:	e03e      	b.n	8003e44 <UART_SetConfig+0x214>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dcc:	e03a      	b.n	8003e44 <UART_SetConfig+0x214>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd4:	e036      	b.n	8003e44 <UART_SetConfig+0x214>
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ddc:	bf00      	nop
 8003dde:	e031      	b.n	8003e44 <UART_SetConfig+0x214>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5d      	ldr	r2, [pc, #372]	; (8003f5c <UART_SetConfig+0x32c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d129      	bne.n	8003e3e <UART_SetConfig+0x20e>
 8003dea:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <UART_SetConfig+0x334>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d014      	beq.n	8003e24 <UART_SetConfig+0x1f4>
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d802      	bhi.n	8003e06 <UART_SetConfig+0x1d6>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <UART_SetConfig+0x1e4>
 8003e04:	e016      	b.n	8003e34 <UART_SetConfig+0x204>
 8003e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0a:	d007      	beq.n	8003e1c <UART_SetConfig+0x1ec>
 8003e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e10:	d00c      	beq.n	8003e2c <UART_SetConfig+0x1fc>
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x204>
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1a:	e013      	b.n	8003e44 <UART_SetConfig+0x214>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x214>
 8003e24:	2304      	movs	r3, #4
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2a:	e00b      	b.n	8003e44 <UART_SetConfig+0x214>
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e007      	b.n	8003e44 <UART_SetConfig+0x214>
 8003e34:	2310      	movs	r3, #16
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <UART_SetConfig+0x214>
 8003e3e:	2310      	movs	r3, #16
 8003e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a44      	ldr	r2, [pc, #272]	; (8003f5c <UART_SetConfig+0x32c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f040 80fb 	bne.w	8004046 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d824      	bhi.n	8003ea2 <UART_SetConfig+0x272>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <UART_SetConfig+0x230>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003ea3 	.word	0x08003ea3
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003e93 	.word	0x08003e93
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	08003ea3 	.word	0x08003ea3
 8003e7c:	08003ea3 	.word	0x08003ea3
 8003e80:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003e84:	f7ff f856 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8003e88:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e8a:	e00d      	b.n	8003ea8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003e8c:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <UART_SetConfig+0x340>)
 8003e8e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e90:	e00a      	b.n	8003ea8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003e92:	f7fe ffb9 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8003e96:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e98:	e006      	b.n	8003ea8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ea0:	e002      	b.n	8003ea8 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	76fb      	strb	r3, [r7, #27]
        break;
 8003ea6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 81c8 	beq.w	8004240 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d305      	bcc.n	8003ecc <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d902      	bls.n	8003ed2 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e1b6      	b.n	8004240 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8003ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	f200 80a2 	bhi.w	8004020 <UART_SetConfig+0x3f0>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x2b4>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08004021 	.word	0x08004021
 8003eec:	08003f75 	.word	0x08003f75
 8003ef0:	08004021 	.word	0x08004021
 8003ef4:	08003fa9 	.word	0x08003fa9
 8003ef8:	08004021 	.word	0x08004021
 8003efc:	08004021 	.word	0x08004021
 8003f00:	08004021 	.word	0x08004021
 8003f04:	08003ff7 	.word	0x08003ff7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7ff f814 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8003f0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4619      	mov	r1, r3
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	f04f 0400 	mov.w	r4, #0
 8003f1e:	0214      	lsls	r4, r2, #8
 8003f20:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003f24:	020b      	lsls	r3, r1, #8
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6852      	ldr	r2, [r2, #4]
 8003f2a:	0852      	lsrs	r2, r2, #1
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	eb13 0b01 	adds.w	fp, r3, r1
 8003f36:	eb44 0c02 	adc.w	ip, r4, r2
 8003f3a:	4658      	mov	r0, fp
 8003f3c:	4661      	mov	r1, ip
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f04f 0400 	mov.w	r4, #0
 8003f46:	461a      	mov	r2, r3
 8003f48:	4623      	mov	r3, r4
 8003f4a:	f7fc f93f 	bl	80001cc <__aeabi_uldivmod>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	460c      	mov	r4, r1
 8003f52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003f54:	e067      	b.n	8004026 <UART_SetConfig+0x3f6>
 8003f56:	bf00      	nop
 8003f58:	efff69f3 	.word	0xefff69f3
 8003f5c:	40008000 	.word	0x40008000
 8003f60:	40013800 	.word	0x40013800
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40004400 	.word	0x40004400
 8003f6c:	40004800 	.word	0x40004800
 8003f70:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	f04f 0400 	mov.w	r4, #0
 8003f7e:	49ae      	ldr	r1, [pc, #696]	; (8004238 <UART_SetConfig+0x608>)
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	eb13 0b01 	adds.w	fp, r3, r1
 8003f88:	eb44 0c02 	adc.w	ip, r4, r2
 8003f8c:	4658      	mov	r0, fp
 8003f8e:	4661      	mov	r1, ip
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f04f 0400 	mov.w	r4, #0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	f7fc f916 	bl	80001cc <__aeabi_uldivmod>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003fa6:	e03e      	b.n	8004026 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003fa8:	f7fe ff2e 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8003fac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	f04f 0400 	mov.w	r4, #0
 8003fbe:	0214      	lsls	r4, r2, #8
 8003fc0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003fc4:	020b      	lsls	r3, r1, #8
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6852      	ldr	r2, [r2, #4]
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	4611      	mov	r1, r2
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	eb13 0b01 	adds.w	fp, r3, r1
 8003fd6:	eb44 0c02 	adc.w	ip, r4, r2
 8003fda:	4658      	mov	r0, fp
 8003fdc:	4661      	mov	r1, ip
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f04f 0400 	mov.w	r4, #0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4623      	mov	r3, r4
 8003fea:	f7fc f8ef 	bl	80001cc <__aeabi_uldivmod>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ff4:	e017      	b.n	8004026 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	f04f 0400 	mov.w	r4, #0
 8004000:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004004:	f144 0100 	adc.w	r1, r4, #0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f04f 0400 	mov.w	r4, #0
 8004010:	461a      	mov	r2, r3
 8004012:	4623      	mov	r3, r4
 8004014:	f7fc f8da 	bl	80001cc <__aeabi_uldivmod>
 8004018:	4603      	mov	r3, r0
 800401a:	460c      	mov	r4, r1
 800401c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800401e:	e002      	b.n	8004026 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	76fb      	strb	r3, [r7, #27]
            break;
 8004024:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402c:	d308      	bcc.n	8004040 <UART_SetConfig+0x410>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004034:	d204      	bcs.n	8004040 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	e0ff      	b.n	8004240 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	e0fc      	b.n	8004240 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404e:	f040 8083 	bne.w	8004158 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8004052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004056:	2b08      	cmp	r3, #8
 8004058:	d85e      	bhi.n	8004118 <UART_SetConfig+0x4e8>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x430>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004085 	.word	0x08004085
 8004064:	080040a5 	.word	0x080040a5
 8004068:	080040c5 	.word	0x080040c5
 800406c:	08004119 	.word	0x08004119
 8004070:	080040e1 	.word	0x080040e1
 8004074:	08004119 	.word	0x08004119
 8004078:	08004119 	.word	0x08004119
 800407c:	08004119 	.word	0x08004119
 8004080:	08004101 	.word	0x08004101
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004084:	f7fe ff56 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8004088:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	005a      	lsls	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	b29b      	uxth	r3, r3
 80040a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040a2:	e03c      	b.n	800411e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe ff5c 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 80040a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	005a      	lsls	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	441a      	add	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040c2:	e02c      	b.n	800411e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80040ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6852      	ldr	r2, [r2, #4]
 80040d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040da:	b29b      	uxth	r3, r3
 80040dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040de:	e01e      	b.n	800411e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e0:	f7fe fe92 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 80040e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	005a      	lsls	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	441a      	add	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040fe:	e00e      	b.n	800411e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004116:	e002      	b.n	800411e <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	76fb      	strb	r3, [r7, #27]
        break;
 800411c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2b0f      	cmp	r3, #15
 8004122:	d916      	bls.n	8004152 <UART_SetConfig+0x522>
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412a:	d212      	bcs.n	8004152 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	b29b      	uxth	r3, r3
 8004130:	f023 030f 	bic.w	r3, r3, #15
 8004134:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	b29b      	uxth	r3, r3
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	b29a      	uxth	r2, r3
 8004142:	89fb      	ldrh	r3, [r7, #14]
 8004144:	4313      	orrs	r3, r2
 8004146:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	89fa      	ldrh	r2, [r7, #14]
 800414e:	60da      	str	r2, [r3, #12]
 8004150:	e076      	b.n	8004240 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e073      	b.n	8004240 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8004158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800415c:	2b08      	cmp	r3, #8
 800415e:	d85c      	bhi.n	800421a <UART_SetConfig+0x5ea>
 8004160:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0x538>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	0800418d 	.word	0x0800418d
 800416c:	080041ab 	.word	0x080041ab
 8004170:	080041c9 	.word	0x080041c9
 8004174:	0800421b 	.word	0x0800421b
 8004178:	080041e5 	.word	0x080041e5
 800417c:	0800421b 	.word	0x0800421b
 8004180:	0800421b 	.word	0x0800421b
 8004184:	0800421b 	.word	0x0800421b
 8004188:	08004203 	.word	0x08004203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800418c:	f7fe fed2 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8004190:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	085a      	lsrs	r2, r3, #1
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	441a      	add	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041a8:	e03a      	b.n	8004220 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041aa:	f7fe fed9 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 80041ae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	085a      	lsrs	r2, r3, #1
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041c6:	e02b      	b.n	8004220 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80041d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6852      	ldr	r2, [r2, #4]
 80041da:	fbb3 f3f2 	udiv	r3, r3, r2
 80041de:	b29b      	uxth	r3, r3
 80041e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041e2:	e01d      	b.n	8004220 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e4:	f7fe fe10 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 80041e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	085a      	lsrs	r2, r3, #1
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	441a      	add	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004200:	e00e      	b.n	8004220 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	b29b      	uxth	r3, r3
 8004216:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004218:	e002      	b.n	8004220 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	76fb      	strb	r3, [r7, #27]
        break;
 800421e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d90a      	bls.n	800423c <UART_SetConfig+0x60c>
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d206      	bcs.n	800423c <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	e003      	b.n	8004240 <UART_SetConfig+0x610>
 8004238:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800424c:	7efb      	ldrb	r3, [r7, #27]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3728      	adds	r7, #40	; 0x28
 8004252:	46bd      	mov	sp, r7
 8004254:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01a      	beq.n	800436e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004356:	d10a      	bne.n	800436e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043aa:	f7fd fc8f 	bl	8001ccc <HAL_GetTick>
 80043ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d10e      	bne.n	80043dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f82a 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e020      	b.n	800441e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d10e      	bne.n	8004408 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f814 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e00a      	b.n	800441e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	e05d      	b.n	80044f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d059      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fd fc44 	bl	8001ccc <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <UART_WaitOnFlagUntilTimeout+0x30>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11b      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004464:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e042      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02b      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d123      	bne.n	80044f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e00f      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d092      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	4e0d      	ldr	r6, [pc, #52]	; (8004554 <__libc_init_array+0x38>)
 8004520:	4c0d      	ldr	r4, [pc, #52]	; (8004558 <__libc_init_array+0x3c>)
 8004522:	1ba4      	subs	r4, r4, r6
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	2500      	movs	r5, #0
 8004528:	42a5      	cmp	r5, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	4e0b      	ldr	r6, [pc, #44]	; (800455c <__libc_init_array+0x40>)
 800452e:	4c0c      	ldr	r4, [pc, #48]	; (8004560 <__libc_init_array+0x44>)
 8004530:	f000 f820 	bl	8004574 <_init>
 8004534:	1ba4      	subs	r4, r4, r6
 8004536:	10a4      	asrs	r4, r4, #2
 8004538:	2500      	movs	r5, #0
 800453a:	42a5      	cmp	r5, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004544:	4798      	blx	r3
 8004546:	3501      	adds	r5, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800454e:	4798      	blx	r3
 8004550:	3501      	adds	r5, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	080045e0 	.word	0x080045e0
 8004558:	080045e0 	.word	0x080045e0
 800455c:	080045e0 	.word	0x080045e0
 8004560:	080045e4 	.word	0x080045e4

08004564 <memset>:
 8004564:	4402      	add	r2, r0
 8004566:	4603      	mov	r3, r0
 8004568:	4293      	cmp	r3, r2
 800456a:	d100      	bne.n	800456e <memset+0xa>
 800456c:	4770      	bx	lr
 800456e:	f803 1b01 	strb.w	r1, [r3], #1
 8004572:	e7f9      	b.n	8004568 <memset+0x4>

08004574 <_init>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr

08004580 <_fini>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr
