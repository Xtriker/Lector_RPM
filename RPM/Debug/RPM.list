
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000911c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  080092b0  080092b0  000192b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009628  08009628  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e4  08009814  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08009814  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014765  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000282f  00000000  00000000  00034979  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  000371a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004227  00000000  00000000  00039280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8d4  00000000  00000000  0003d4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000adb40  00000000  00000000  0004ad7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f88bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  000f8938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009294 	.word	0x08009294

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009294 	.word	0x08009294

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <app_Dimmer>:
#include "app_DigitalDimmer.h"

TIM_HandleTypeDef htim2;

void app_Dimmer(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
	 /* Variables locales en donde se guardara el tiempo */
	 static float Tiempo = 0, Angulo = 2;
	 uint16_t Lectura = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	80fb      	strh	r3, [r7, #6]

	 switch(opcion)
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <app_Dimmer+0xa8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <app_Dimmer+0x18>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d025      	beq.n	8000fea <app_Dimmer+0x62>
 8000f9e:	e037      	b.n	8001010 <app_Dimmer+0x88>
			  {
				  /* Linea de tendencia determinadad mediante los dato capturados */
				  /* Convierte angulo de fase en tiempo, este tiempo es necesario para
				   * la correcta activacion del SCR */

				  Tiempo = (4.62962962e-5*Angulo)*1000;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <app_Dimmer+0xac>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff facf 	bl	8000548 <__aeabi_f2d>
 8000faa:	a31f      	add	r3, pc, #124	; (adr r3, 8001028 <app_Dimmer+0xa0>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fb22 	bl	80005f8 <__aeabi_dmul>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	4621      	mov	r1, r4
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <app_Dimmer+0xb0>)
 8000fc2:	f7ff fb19 	bl	80005f8 <__aeabi_dmul>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f7ff fe0b 	bl	8000be8 <__aeabi_d2f>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <app_Dimmer+0xb4>)
 8000fd6:	601a      	str	r2, [r3, #0]

				  /* Imprime la variable flotante Tiempo en el display de 7 segmentos */
				  //app_FloatADisplay(Tiempo, Catodo);
				  /* Pasa al siguiente estado */

				  printf("%d\n\r",Lectura);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <app_Dimmer+0xb8>)
 8000fde:	f004 fdbb 	bl	8005b58 <iprintf>
				  opcion = Dimmer;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <app_Dimmer+0xa8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000fe8:	e017      	b.n	800101a <app_Dimmer+0x92>
			  case Dimmer:
			  {

				  /* Envia la variable Tiempo a la funcion cruce por cero */
				  app_CruceCero(Tiempo);
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <app_Dimmer+0xb4>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff4:	ee17 3a90 	vmov	r3, s15
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f86a 	bl	80010d4 <app_CruceCero>
				  /* Vuelve al estado inicial de la maquina de estados */
				  if(Flag == 0)
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <app_Dimmer+0xbc>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <app_Dimmer+0x90>
				  {
					  opcion = Ecuacion;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <app_Dimmer+0xa8>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
				  }
			  }break;
 800100e:	e003      	b.n	8001018 <app_Dimmer+0x90>
			  default:
			  {
				  /* Declaracion del primer estado del dimmer */
				  opcion = Ecuacion;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <app_Dimmer+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
			  }
		  }
}
 8001016:	e000      	b.n	800101a <app_Dimmer+0x92>
			  }break;
 8001018:	bf00      	nop
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	9ff57a20 	.word	0x9ff57a20
 800102c:	3f0845c8 	.word	0x3f0845c8
 8001030:	2000021c 	.word	0x2000021c
 8001034:	20000000 	.word	0x20000000
 8001038:	408f4000 	.word	0x408f4000
 800103c:	20000200 	.word	0x20000200
 8001040:	080092b0 	.word	0x080092b0
 8001044:	20000204 	.word	0x20000204

08001048 <delay_us>:
//	while(__HAL_TIM_GET_COUNTER(&htim2) < conversion)
//	{}
//}

void delay_us(uint16_t us)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]

	/* Selecciona el valor del Timer en 0, antes de iniciar */
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <delay_us+0x2c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24


	while(__HAL_TIM_GET_COUNTER(&htim2) < us)
 800105a:	bf00      	nop
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <delay_us+0x2c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	429a      	cmp	r2, r3
 8001066:	d3f9      	bcc.n	800105c <delay_us+0x14>
	{}
	/* Saldra del ciclo hasta que se complete el tiempo de la funcion antes mandada */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	2000025c 	.word	0x2000025c

08001078 <HAL_GPIO_EXTI_Callback>:
uint16_t Valor1 = 0,Valor2 = 0;
uint8_t Diferencia = 0;
uint16_t Frecuencia = 0;
uint8_t Bandera_capturado = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == Boton_encoder_Pin)
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001088:	d112      	bne.n	80010b0 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if(Aumento >= 6)
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x50>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d903      	bls.n	800109a <HAL_GPIO_EXTI_Callback+0x22>
		{
			Aumento = 0;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_EXTI_Callback+0x38>
		}
		else
		{
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800109a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <HAL_GPIO_EXTI_Callback+0x54>)
 80010a0:	f001 f84c 	bl	800213c <HAL_GPIO_TogglePin>
			Aumento++;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x50>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x50>)
 80010ae:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_pin == DetectorCero_Pin)
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010b6:	d102      	bne.n	80010be <HAL_GPIO_EXTI_Callback+0x46>
	{
		Bandera_DetectorCero = 0;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000205 	.word	0x20000205
 80010cc:	48000400 	.word	0x48000400
 80010d0:	20000004 	.word	0x20000004

080010d4 <app_CruceCero>:

void app_CruceCero(uint16_t Tiempo)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
	if(Bandera_DetectorCero == 0)
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <app_CruceCero+0x48>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d115      	bne.n	8001112 <app_CruceCero+0x3e>
	{

				delay_us(Tiempo);
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ffad 	bl	8001048 <delay_us>
				HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 1);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <app_CruceCero+0x4c>)
 80010f6:	f001 f809 	bl	800210c <HAL_GPIO_WritePin>
				delay_us(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff ffa4 	bl	8001048 <delay_us>
				HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <app_CruceCero+0x4c>)
 8001108:	f001 f800 	bl	800210c <HAL_GPIO_WritePin>
				Bandera_DetectorCero = 1;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <app_CruceCero+0x48>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
	}
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000004 	.word	0x20000004
 8001120:	48000800 	.word	0x48000800

08001124 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7f1b      	ldrb	r3, [r3, #28]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d14c      	bne.n	80011ce <HAL_TIM_IC_CaptureCallback+0xaa>
	{
		if(Bandera_capturado == 0)
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10b      	bne.n	8001154 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			Valor1= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800113c:	2104      	movs	r1, #4
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f002 fe22 	bl	8003d88 <HAL_TIM_ReadCapturedValue>
 8001144:	4603      	mov	r3, r0
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 800114a:	801a      	strh	r2, [r3, #0]
			Bandera_capturado = 1;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
			}
			Frecuencia = HAL_RCC_GetPCLK1Freq()/Diferencia;
			Bandera_capturado = 0;
		}
	}
}
 8001152:	e03c      	b.n	80011ce <HAL_TIM_IC_CaptureCallback+0xaa>
		else if(Bandera_capturado)
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d038      	beq.n	80011ce <HAL_TIM_IC_CaptureCallback+0xaa>
			Valor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800115c:	2104      	movs	r1, #4
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f002 fe12 	bl	8003d88 <HAL_TIM_ReadCapturedValue>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800116a:	801a      	strh	r2, [r3, #0]
			if(Valor2 > Valor1)
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800116e:	881a      	ldrh	r2, [r3, #0]
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d90a      	bls.n	800118e <HAL_TIM_IC_CaptureCallback+0x6a>
				Diferencia = Valor2 - Valor1;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e012      	b.n	80011b4 <HAL_TIM_IC_CaptureCallback+0x90>
			else if(Valor2 < Valor1)
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d20a      	bcs.n	80011b0 <HAL_TIM_IC_CaptureCallback+0x8c>
				Diferencia = ((Periodo_contador-Valor1)+Valor2)+1;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e001      	b.n	80011b4 <HAL_TIM_IC_CaptureCallback+0x90>
				Error_Handler();
 80011b0:	f000 fa62 	bl	8001678 <Error_Handler>
			Frecuencia = HAL_RCC_GetPCLK1Freq()/Diferencia;
 80011b4:	f002 f858 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80011c6:	801a      	strh	r2, [r3, #0]
			Bandera_capturado = 0;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000020e 	.word	0x2000020e
 80011dc:	20000206 	.word	0x20000206
 80011e0:	20000208 	.word	0x20000208
 80011e4:	2000020a 	.word	0x2000020a
 80011e8:	2000020c 	.word	0x2000020c

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f000 fc97 	bl	8001b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f814 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 f966 	bl	80014c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011fc:	f000 f934 	bl	8001468 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001200:	f000 f8c0 	bl	8001384 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8001204:	f000 f888 	bl	8001318 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <main+0x30>)
 800120a:	f002 fa7b 	bl	8003704 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800120e:	2104      	movs	r1, #4
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <main+0x30>)
 8001212:	f002 fad7 	bl	80037c4 <HAL_TIM_IC_Start_IT>



  while (1)
  {
	  app_Dimmer();
 8001216:	f7ff feb7 	bl	8000f88 <app_Dimmer>
 800121a:	e7fc      	b.n	8001216 <main+0x2a>
 800121c:	2000025c 	.word	0x2000025c

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0a4      	sub	sp, #144	; 0x90
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800122a:	2244      	movs	r2, #68	; 0x44
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fe4c 	bl	8004ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2234      	movs	r2, #52	; 0x34
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fe3e 	bl	8004ecc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001250:	f001 f9b8 	bl	80025c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <SystemClock_Config+0xf4>)
 8001256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125a:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <SystemClock_Config+0xf4>)
 800125c:	f023 0318 	bic.w	r3, r3, #24
 8001260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001268:	f001 f9ca 	bl	8002600 <HAL_PWREx_ControlVoltageScaling>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001272:	f000 fa01 	bl	8001678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001276:	2314      	movs	r3, #20
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800127a:	2301      	movs	r3, #1
 800127c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001286:	2360      	movs	r3, #96	; 0x60
 8001288:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800128e:	2301      	movs	r3, #1
 8001290:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001298:	2328      	movs	r3, #40	; 0x28
 800129a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 f9fc 	bl	80026ac <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012ba:	f000 f9dd 	bl	8001678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2303      	movs	r3, #3
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d6:	2104      	movs	r1, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fe4d 	bl	8002f78 <HAL_RCC_ClockConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012e4:	f000 f9c8 	bl	8001678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 80012e8:	f240 2302 	movw	r3, #514	; 0x202
 80012ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 f841 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001304:	f000 f9b8 	bl	8001678 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001308:	f002 f9c0 	bl	800368c <HAL_RCCEx_EnableMSIPLLMode>
}
 800130c:	bf00      	nop
 800130e:	3790      	adds	r7, #144	; 0x90
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000

08001318 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_LPTIM1_Init+0x64>)
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <MX_LPTIM1_Init+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_LPTIM1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_LPTIM1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_LPTIM1_Init+0x64>)
 8001330:	2204      	movs	r2, #4
 8001332:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_LPTIM1_Init+0x64>)
 8001336:	2208      	movs	r2, #8
 8001338:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_LPTIM1_Init+0x64>)
 800133c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001340:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_LPTIM1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_LPTIM1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_LPTIM1_Init+0x64>)
 8001350:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_LPTIM1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_LPTIM1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 200;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_LPTIM1_Init+0x64>)
 8001364:	22c8      	movs	r2, #200	; 0xc8
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_LPTIM1_Init+0x64>)
 800136a:	f000 ff19 	bl	80021a0 <HAL_LPTIM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_LPTIM1_Init+0x60>
  {
    Error_Handler();
 8001374:	f000 f980 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000220 	.word	0x20000220
 8001380:	40007c00 	.word	0x40007c00

08001384 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65000-1;
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013ba:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80013be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999999;
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <MX_TIM2_Init+0xe0>)
 80013ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d8:	4821      	ldr	r0, [pc, #132]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013da:	f002 f967 	bl	80036ac <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80013e4:	f000 f948 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4619      	mov	r1, r3
 80013f4:	481a      	ldr	r0, [pc, #104]	; (8001460 <MX_TIM2_Init+0xdc>)
 80013f6:	f002 fc0e 	bl	8003c16 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001400:	f000 f93a 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_TIM2_Init+0xdc>)
 8001406:	f002 f9a7 	bl	8003758 <HAL_TIM_IC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001410:	f000 f932 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <MX_TIM2_Init+0xdc>)
 8001424:	f002 ff4c 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800142e:	f000 f923 	bl	8001678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001436:	2301      	movs	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2204      	movs	r2, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_TIM2_Init+0xdc>)
 800144a:	f002 fb48 	bl	8003ade <HAL_TIM_IC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001454:	f000 f910 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3730      	adds	r7, #48	; 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000025c 	.word	0x2000025c
 8001464:	3b9ac9ff 	.word	0x3b9ac9ff

08001468 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <MX_USART2_UART_Init+0x5c>)
 8001470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 80014ac:	f002 ff8c 	bl	80043c8 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014b6:	f000 f8df 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000029c 	.word	0x2000029c
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <MX_GPIO_Init+0x178>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a57      	ldr	r2, [pc, #348]	; (8001640 <MX_GPIO_Init+0x178>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b55      	ldr	r3, [pc, #340]	; (8001640 <MX_GPIO_Init+0x178>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f6:	4b52      	ldr	r3, [pc, #328]	; (8001640 <MX_GPIO_Init+0x178>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a51      	ldr	r2, [pc, #324]	; (8001640 <MX_GPIO_Init+0x178>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <MX_GPIO_Init+0x178>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <MX_GPIO_Init+0x178>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <MX_GPIO_Init+0x178>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <MX_GPIO_Init+0x178>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <MX_GPIO_Init+0x178>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a45      	ldr	r2, [pc, #276]	; (8001640 <MX_GPIO_Init+0x178>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <MX_GPIO_Init+0x178>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 800153e:	2200      	movs	r2, #0
 8001540:	f640 11d6 	movw	r1, #2518	; 0x9d6
 8001544:	483f      	ldr	r0, [pc, #252]	; (8001644 <MX_GPIO_Init+0x17c>)
 8001546:	f000 fde1 	bl	800210c <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin|Tiempo_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 800154a:	2200      	movs	r2, #0
 800154c:	f249 1131 	movw	r1, #37169	; 0x9131
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f000 fdda 	bl	800210c <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_3_Pin|LD4_Pin|Display_4_Pin|Display_1_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f24a 4120 	movw	r1, #42016	; 0xa420
 800155e:	483a      	ldr	r0, [pc, #232]	; (8001648 <MX_GPIO_Init+0x180>)
 8001560:	f000 fdd4 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin Tiempo_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8001564:	f640 13d6 	movw	r3, #2518	; 0x9d6
 8001568:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin|Tiempo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <MX_GPIO_Init+0x17c>)
 800157e:	f000 fc53 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8001582:	f249 1331 	movw	r3, #37169	; 0x9131
 8001586:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159e:	f000 fc43 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_3_Pin LD4_Pin Display_4_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Display_3_Pin|LD4_Pin|Display_4_Pin|Display_1_Pin;
 80015a2:	f24a 4320 	movw	r3, #42016	; 0xa420
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4823      	ldr	r0, [pc, #140]	; (8001648 <MX_GPIO_Init+0x180>)
 80015bc:	f000 fc34 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DetectorCero_Pin */
  GPIO_InitStruct.Pin = DetectorCero_Pin;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_GPIO_Init+0x184>)
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DetectorCero_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	481b      	ldr	r0, [pc, #108]	; (8001644 <MX_GPIO_Init+0x17c>)
 80015d6:	f000 fc27 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <MX_GPIO_Init+0x17c>)
 80015f0:	f000 fc1a 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_GPIO_Init+0x180>)
 8001608:	f000 fc0e 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_encoder_Pin */
  GPIO_InitStruct.Pin = Boton_encoder_Pin;
 800160c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_GPIO_Init+0x188>)
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_encoder_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_GPIO_Init+0x180>)
 8001622:	f000 fc01 	bl	8001e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2017      	movs	r0, #23
 800162c:	f000 fbc5 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001630:	2017      	movs	r0, #23
 8001632:	f000 fbde 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	48000800 	.word	0x48000800
 8001648:	48000400 	.word	0x48000400
 800164c:	10210000 	.word	0x10210000
 8001650:	10110000 	.word	0x10110000

08001654 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <__io_putchar+0x20>)
 8001666:	f002 fefd 	bl	8004464 <HAL_UART_Transmit>

return ch;
 800166a:	687b      	ldr	r3, [r7, #4]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000029c 	.word	0x2000029c

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x44>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x44>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6613      	str	r3, [r2, #96]	; 0x60
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x44>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x44>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a25      	ldr	r2, [pc, #148]	; (8001784 <HAL_LPTIM_MspInit+0xb4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d143      	bne.n	800177a <HAL_LPTIM_MspInit+0xaa>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	4a24      	ldr	r2, [pc, #144]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 80016f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016fc:	6593      	str	r3, [r2, #88]	; 0x58
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_LPTIM_MspInit+0xb8>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration    
    PC0     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800173a:	2301      	movs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001742:	2301      	movs	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800174a:	2301      	movs	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <HAL_LPTIM_MspInit+0xbc>)
 8001756:	f000 fb67 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001762:	2301      	movs	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800176a:	2301      	movs	r3, #1
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <HAL_LPTIM_MspInit+0xc0>)
 8001776:	f000 fb57 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40007c00 	.word	0x40007c00
 8001788:	40021000 	.word	0x40021000
 800178c:	48000800 	.word	0x48000800
 8001790:	48000400 	.word	0x48000400

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b4:	d130      	bne.n	8001818 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_TIM_Base_MspInit+0x8c>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_TIM_Base_MspInit+0x8c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_TIM_Base_MspInit+0x8c>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_TIM_Base_MspInit+0x8c>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <HAL_TIM_Base_MspInit+0x8c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_TIM_Base_MspInit+0x8c>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017e6:	2302      	movs	r3, #2
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f000 fb10 	bl	8001e28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	201c      	movs	r0, #28
 800180e:	f000 fad4 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001812:	201c      	movs	r0, #28
 8001814:	f000 faed 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_UART_MspInit+0x7c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d128      	bne.n	8001898 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_UART_MspInit+0x80>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <HAL_UART_MspInit+0x80>)
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	6593      	str	r3, [r2, #88]	; 0x58
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_UART_MspInit+0x80>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_UART_MspInit+0x80>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_UART_MspInit+0x80>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_UART_MspInit+0x80>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001876:	230c      	movs	r3, #12
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001886:	2307      	movs	r3, #7
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f000 fac8 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40004400 	.word	0x40004400
 80018a4:	40021000 	.word	0x40021000

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 f964 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001908:	f44f 7080 	mov.w	r0, #256	; 0x100
 800190c:	f000 fc30 	bl	8002170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001910:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001914:	f000 fc2c 	bl	8002170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM2_IRQHandler+0x10>)
 8001922:	f001 ffbd 	bl	80038a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000025c 	.word	0x2000025c

08001930 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e00a      	b.n	8001958 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001942:	f3af 8000 	nop.w
 8001946:	4601      	mov	r1, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf0      	blt.n	8001942 <_read+0x12>
	}

return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fe65 	bl	8001654 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf1      	blt.n	800197c <_write+0x12>
	}
	return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	605a      	str	r2, [r3, #4]
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x50>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x16>
		heap_end = &end;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <_sbrk+0x50>)
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <_sbrk+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <_sbrk+0x50>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <_sbrk+0x50>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	466a      	mov	r2, sp
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d907      	bls.n	8001a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a36:	f003 fa1f 	bl	8004e78 <__errno>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a44:	e006      	b.n	8001a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <_sbrk+0x50>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <_sbrk+0x50>)
 8001a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000210 	.word	0x20000210
 8001a60:	20000328 	.word	0x20000328

08001a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <SystemInit+0x64>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <SystemInit+0x64>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <SystemInit+0x68>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <SystemInit+0x68>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <SystemInit+0x68>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <SystemInit+0x68>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <SystemInit+0x68>)
 8001a90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <SystemInit+0x68>)
 8001a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <SystemInit+0x68>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <SystemInit+0x68>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <SystemInit+0x68>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SystemInit+0x64>)
 8001ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aba:	609a      	str	r2, [r3, #8]
#endif
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	40021000 	.word	0x40021000

08001ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ad4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ad6:	e003      	b.n	8001ae0 <LoopCopyDataInit>

08001ad8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ada:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001adc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ade:	3104      	adds	r1, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ae0:	480b      	ldr	r0, [pc, #44]	; (8001b10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ae4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ae6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ae8:	d3f6      	bcc.n	8001ad8 <CopyDataInit>
	ldr	r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001aec:	e002      	b.n	8001af4 <LoopFillZerobss>

08001aee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001af0:	f842 3b04 	str.w	r3, [r2], #4

08001af4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <LoopForever+0x16>)
	cmp	r2, r3
 8001af6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001af8:	d3f9      	bcc.n	8001aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001afa:	f7ff ffb3 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f003 f9c1 	bl	8004e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b02:	f7ff fb73 	bl	80011ec <main>

08001b06 <LoopForever>:

LoopForever:
    b LoopForever
 8001b06:	e7fe      	b.n	8001b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b08:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001b0c:	08009630 	.word	0x08009630
	ldr	r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b14:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001b18:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001b1c:	20000328 	.word	0x20000328

08001b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_2_IRQHandler>

08001b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f939 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f80e 	bl	8001b54 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	e001      	b.n	8001b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b44:	f7ff fda0 	bl	8001688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b48:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_InitTick+0x68>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d022      	beq.n	8001bae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_InitTick+0x6c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_InitTick+0x68>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f946 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10f      	bne.n	8001ba8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d809      	bhi.n	8001ba2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b96:	f000 f910 	bl	8001dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_InitTick+0x70>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e007      	b.n	8001bb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e004      	b.n	8001bb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000010 	.word	0x20000010
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	2000000c 	.word	0x2000000c

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x20>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bd8:	6013      	str	r3, [r2, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000320 	.word	0x20000320
 8001be8:	20000010 	.word	0x20000010

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000320 	.word	0x20000320

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	e14e      	b.n	80020d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8140 	beq.w	80020d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d00b      	beq.n	8001e70 <HAL_GPIO_Init+0x48>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d007      	beq.n	8001e70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e64:	2b11      	cmp	r3, #17
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b12      	cmp	r3, #18
 8001e6e:	d130      	bne.n	8001ed2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 0201 	and.w	r2, r3, #1
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0xea>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d123      	bne.n	8001f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	6939      	ldr	r1, [r7, #16]
 8001f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0203 	and.w	r2, r3, #3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 809a 	beq.w	80020d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9c:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_GPIO_Init+0x2cc>)
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_GPIO_Init+0x2cc>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_GPIO_Init+0x2cc>)
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fb4:	4a50      	ldr	r2, [pc, #320]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fde:	d013      	beq.n	8002008 <HAL_GPIO_Init+0x1e0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a46      	ldr	r2, [pc, #280]	; (80020fc <HAL_GPIO_Init+0x2d4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00d      	beq.n	8002004 <HAL_GPIO_Init+0x1dc>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a45      	ldr	r2, [pc, #276]	; (8002100 <HAL_GPIO_Init+0x2d8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <HAL_GPIO_Init+0x1d8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a44      	ldr	r2, [pc, #272]	; (8002104 <HAL_GPIO_Init+0x2dc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_GPIO_Init+0x1d4>
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e006      	b.n	800200a <HAL_GPIO_Init+0x1e2>
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	e004      	b.n	800200a <HAL_GPIO_Init+0x1e2>
 8002000:	2302      	movs	r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_Init+0x1e2>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_GPIO_Init+0x1e2>
 8002008:	2300      	movs	r3, #0
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4093      	lsls	r3, r2
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800201a:	4937      	ldr	r1, [pc, #220]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002028:	4b37      	ldr	r3, [pc, #220]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800204c:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_GPIO_Init+0x2e0>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f47f aea9 	bne.w	8001e38 <HAL_GPIO_Init+0x10>
  }
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	48000400 	.word	0x48000400
 8002100:	48000800 	.word	0x48000800
 8002104:	48000c00 	.word	0x48000c00
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002128:	e002      	b.n	8002130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002154:	887a      	ldrh	r2, [r7, #2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800215a:	e002      	b.n	8002162 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215c:	887a      	ldrh	r2, [r7, #2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe ff72 	bl	8001078 <HAL_GPIO_EXTI_Callback>
  }
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0a7      	b.n	8002302 <HAL_LPTIM_Init+0x162>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff fa82 	bl	80016d0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ec:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80021f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f897 	bl	8002330 <LPTIM_WaitForFlag>
 8002202:	4603      	mov	r3, r0
 8002204:	2b03      	cmp	r3, #3
 8002206:	d101      	bne.n	800220c <HAL_LPTIM_Init+0x6c>
  {
    return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e07a      	b.n	8002302 <HAL_LPTIM_Init+0x162>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f8bf 	bl	8002390 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f87e 	bl	8002314 <HAL_LPTIM_GetState>
 8002218:	4603      	mov	r3, r0
 800221a:	2b03      	cmp	r3, #3
 800221c:	d101      	bne.n	8002222 <HAL_LPTIM_Init+0x82>
  {
    return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e06f      	b.n	8002302 <HAL_LPTIM_Init+0x162>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d004      	beq.n	800223c <HAL_LPTIM_Init+0x9c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800223a:	d103      	bne.n	8002244 <HAL_LPTIM_Init+0xa4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 031e 	bic.w	r3, r3, #30
 8002242:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224c:	4293      	cmp	r3, r2
 800224e:	d005      	beq.n	800225c <HAL_LPTIM_Init+0xbc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002256:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_LPTIM_Init+0x16c>)
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800226c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002272:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002278:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800227e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d004      	beq.n	8002298 <HAL_LPTIM_Init+0xf8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002296:	d107      	bne.n	80022a8 <HAL_LPTIM_Init+0x108>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00a      	beq.n	80022ca <HAL_LPTIM_Init+0x12a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80022bc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80022c2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_LPTIM_Init+0x170>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <HAL_LPTIM_Init+0x14e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	621a      	str	r2, [r3, #32]
 80022ec:	e004      	b.n	80022f8 <HAL_LPTIM_Init+0x158>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022f6:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	ff19f1f8 	.word	0xff19f1f8
 8002310:	40007c00 	.word	0x40007c00

08002314 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002322:	b2db      	uxtb	r3, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <LPTIM_WaitForFlag+0x58>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <LPTIM_WaitForFlag+0x5c>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	0b9b      	lsrs	r3, r3, #14
 800234a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	60bb      	str	r3, [r7, #8]
    do
    {
      count--;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <LPTIM_WaitForFlag+0x34>
      {
        result = HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	73fb      	strb	r3, [r7, #15]
      }
    }
    while((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4013      	ands	r3, r2
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d002      	beq.n	800237a <LPTIM_WaitForFlag+0x4a>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ec      	bne.n	8002354 <LPTIM_WaitForFlag+0x24>

    return result;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	20000008 	.word	0x20000008
 800238c:	d1b71759 	.word	0xd1b71759

08002390 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a85      	ldr	r2, [pc, #532]	; (80025b8 <LPTIM_Disable+0x228>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <LPTIM_Disable+0x20>
 80023a8:	4a84      	ldr	r2, [pc, #528]	; (80025bc <LPTIM_Disable+0x22c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <LPTIM_Disable+0x2e>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 80023ae:	e00d      	b.n	80023cc <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80023b0:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <LPTIM_Disable+0x230>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 80023bc:	e006      	b.n	80023cc <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80023be:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <LPTIM_Disable+0x230>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 80023ca:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6d      	ldr	r2, [pc, #436]	; (80025b8 <LPTIM_Disable+0x228>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <LPTIM_Disable+0x7e>
 8002406:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <LPTIM_Disable+0x22c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <LPTIM_Disable+0x98>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 800240c:	e019      	b.n	8002442 <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 800240e:	4b6c      	ldr	r3, [pc, #432]	; (80025c0 <LPTIM_Disable+0x230>)
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	4a6b      	ldr	r2, [pc, #428]	; (80025c0 <LPTIM_Disable+0x230>)
 8002414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002418:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 800241a:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <LPTIM_Disable+0x230>)
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	4a68      	ldr	r2, [pc, #416]	; (80025c0 <LPTIM_Disable+0x230>)
 8002420:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002424:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 8002426:	e00c      	b.n	8002442 <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM2_FORCE_RESET();
 8002428:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <LPTIM_Disable+0x230>)
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	4a64      	ldr	r2, [pc, #400]	; (80025c0 <LPTIM_Disable+0x230>)
 800242e:	f043 0320 	orr.w	r3, r3, #32
 8002432:	63d3      	str	r3, [r2, #60]	; 0x3c
       __HAL_RCC_LPTIM2_RELEASE_RESET();
 8002434:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <LPTIM_Disable+0x230>)
 8002436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002438:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <LPTIM_Disable+0x230>)
 800243a:	f023 0320 	bic.w	r3, r3, #32
 800243e:	63d3      	str	r3, [r2, #60]	; 0x3c
       break;
 8002440:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <LPTIM_Disable+0xc6>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <LPTIM_Disable+0xc6>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8096 	beq.w	8002582 <LPTIM_Disable+0x1f2>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <LPTIM_Disable+0x228>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d003      	beq.n	8002468 <LPTIM_Disable+0xd8>
 8002460:	4a56      	ldr	r2, [pc, #344]	; (80025bc <LPTIM_Disable+0x22c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <LPTIM_Disable+0xea>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8002466:	e011      	b.n	800248c <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002468:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <LPTIM_Disable+0x230>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	4a54      	ldr	r2, [pc, #336]	; (80025c0 <LPTIM_Disable+0x230>)
 8002470:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8002478:	e008      	b.n	800248c <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <LPTIM_Disable+0x230>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	4a4f      	ldr	r2, [pc, #316]	; (80025c0 <LPTIM_Disable+0x230>)
 8002482:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002486:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 800248a:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01a      	beq.n	80024c8 <LPTIM_Disable+0x138>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80024aa:	2108      	movs	r1, #8
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff3f 	bl	8002330 <LPTIM_WaitForFlag>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d103      	bne.n	80024c0 <LPTIM_Disable+0x130>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2203      	movs	r2, #3
 80024bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2208      	movs	r2, #8
 80024c6:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01a      	beq.n	8002504 <LPTIM_Disable+0x174>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80024e6:	2110      	movs	r1, #16
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff21 	bl	8002330 <LPTIM_WaitForFlag>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d103      	bne.n	80024fc <LPTIM_Disable+0x16c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2210      	movs	r2, #16
 8002502:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01c      	beq.n	8002544 <LPTIM_Disable+0x1b4>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8002522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff02 	bl	8002330 <LPTIM_WaitForFlag>
 800252c:	4603      	mov	r3, r0
 800252e:	2b03      	cmp	r3, #3
 8002530:	d103      	bne.n	800253a <LPTIM_Disable+0x1aa>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002542:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <LPTIM_Disable+0x228>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <LPTIM_Disable+0x1c6>
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <LPTIM_Disable+0x22c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00b      	beq.n	800256c <LPTIM_Disable+0x1dc>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8002554:	e016      	b.n	8002584 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <LPTIM_Disable+0x230>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002560:	4917      	ldr	r1, [pc, #92]	; (80025c0 <LPTIM_Disable+0x230>)
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 800256a:	e00b      	b.n	8002584 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <LPTIM_Disable+0x230>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002576:	4912      	ldr	r1, [pc, #72]	; (80025c0 <LPTIM_Disable+0x230>)
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 8002580:	e000      	b.n	8002584 <LPTIM_Disable+0x1f4>
    }
  }
 8002582:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80025ac:	b662      	cpsie	i

  __enable_irq();
}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40007c00 	.word	0x40007c00
 80025bc:	40009400 	.word	0x40009400
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000

080025e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_PWREx_GetVoltageRange+0x18>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40007000 	.word	0x40007000

08002600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800260e:	d130      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261c:	d038      	beq.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2232      	movs	r2, #50	; 0x32
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9b      	lsrs	r3, r3, #18
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002644:	e002      	b.n	800264c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3b01      	subs	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002658:	d102      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x60>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f2      	bne.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266c:	d110      	bne.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e00f      	b.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267e:	d007      	beq.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002688:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40007000 	.word	0x40007000
 80026a4:	20000008 	.word	0x20000008
 80026a8:	431bde83 	.word	0x431bde83

080026ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f000 bc56 	b.w	8002f6c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c0:	4ba1      	ldr	r3, [pc, #644]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ca:	4b9f      	ldr	r3, [pc, #636]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80e6 	beq.w	80028ae <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4c>
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	f040 808d 	bne.w	800280a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f040 8089 	bne.w	800280a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026f8:	4b93      	ldr	r3, [pc, #588]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <HAL_RCC_OscConfig+0x66>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	f000 bc2d 	b.w	8002f6c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002716:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_RCC_OscConfig+0x80>
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272a:	e005      	b.n	8002738 <HAL_RCC_OscConfig+0x8c>
 800272c:	4b86      	ldr	r3, [pc, #536]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002738:	4293      	cmp	r3, r2
 800273a:	d224      	bcs.n	8002786 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fdbd 	bl	80032c0 <RCC_SetFlashLatencyFromMSIRange>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f000 bc0d 	b.w	8002f6c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002752:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7c      	ldr	r2, [pc, #496]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b7a      	ldr	r3, [pc, #488]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	4977      	ldr	r1, [pc, #476]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002770:	4b75      	ldr	r3, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	4972      	ldr	r1, [pc, #456]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e025      	b.n	80027d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002786:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6f      	ldr	r2, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	496a      	ldr	r1, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4965      	ldr	r1, [pc, #404]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fd7c 	bl	80032c0 <RCC_SetFlashLatencyFromMSIRange>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e3cc      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027d2:	f000 fcb3 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80027d6:	4601      	mov	r1, r0
 80027d8:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	4a5a      	ldr	r2, [pc, #360]	; (800294c <HAL_RCC_OscConfig+0x2a0>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	fa21 f303 	lsr.w	r3, r1, r3
 80027ee:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_OscConfig+0x2a4>)
 80027f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027f2:	4b58      	ldr	r3, [pc, #352]	; (8002954 <HAL_RCC_OscConfig+0x2a8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f9ac 	bl	8001b54 <HAL_InitTick>
 80027fc:	4603      	mov	r3, r0
 80027fe:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d052      	beq.n	80028ac <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	e3b0      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d032      	beq.n	8002878 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002812:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800281e:	f7ff f9e5 	bl	8001bec <HAL_GetTick>
 8002822:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002826:	f7ff f9e1 	bl	8001bec <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e399      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002838:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3f      	ldr	r2, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	493a      	ldr	r1, [pc, #232]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	4935      	ldr	r1, [pc, #212]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e01a      	b.n	80028ae <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a32      	ldr	r2, [pc, #200]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002884:	f7ff f9b2 	bl	8001bec <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800288c:	f7ff f9ae 	bl	8001bec <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e366      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1e0>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d073      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x220>
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d10e      	bne.n	80028e4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d063      	beq.n	80029a0 <HAL_RCC_OscConfig+0x2f4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d15f      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e343      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d106      	bne.n	80028fc <HAL_RCC_OscConfig+0x250>
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e01d      	b.n	8002938 <HAL_RCC_OscConfig+0x28c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x274>
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0x28c>
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a08      	ldr	r2, [pc, #32]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 8002932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7ff f954 	bl	8001bec <HAL_GetTick>
 8002944:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002946:	e010      	b.n	800296a <HAL_RCC_OscConfig+0x2be>
 8002948:	40021000 	.word	0x40021000
 800294c:	080092b8 	.word	0x080092b8
 8002950:	20000008 	.word	0x20000008
 8002954:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff f948 	bl	8001bec <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e300      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296a:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x2ac>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff f938 	bl	8001bec <HAL_GetTick>
 800297c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff f934 	bl	8001bec <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e2ec      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002992:	4b96      	ldr	r3, [pc, #600]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x2d4>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d060      	beq.n	8002a70 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x314>
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d119      	bne.n	80029ee <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d116      	bne.n	80029ee <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c0:	4b8a      	ldr	r3, [pc, #552]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_OscConfig+0x32c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e2c9      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b84      	ldr	r3, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4981      	ldr	r1, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ec:	e040      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d023      	beq.n	8002a3e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f6:	4b7d      	ldr	r3, [pc, #500]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a7c      	ldr	r2, [pc, #496]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7ff f8f3 	bl	8001bec <HAL_GetTick>
 8002a06:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f8ef 	bl	8001bec <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e2a7      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1c:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b70      	ldr	r3, [pc, #448]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	496d      	ldr	r1, [pc, #436]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e018      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6a      	ldr	r2, [pc, #424]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7ff f8cf 	bl	8001bec <HAL_GetTick>
 8002a4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7ff f8cb 	bl	8001bec <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e283      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a64:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d07f      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05f      	beq.n	8002b44 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002a84:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d037      	beq.n	8002b0a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e25c      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac2:	4a4a      	ldr	r2, [pc, #296]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002acc:	f7ff f88e 	bl	8001bec <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7ff f88a 	bl	8001bec <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b11      	cmp	r3, #17
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e242      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ef      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002af4:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afa:	f023 0210 	bic.w	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	493a      	ldr	r1, [pc, #232]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b10:	4a36      	ldr	r2, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f867 	bl	8001bec <HAL_GetTick>
 8002b1e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7ff f863 	bl	8001bec <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b11      	cmp	r3, #17
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e21b      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ef      	beq.n	8002b22 <HAL_RCC_OscConfig+0x476>
 8002b42:	e01b      	b.n	8002b7c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4a:	4a28      	ldr	r2, [pc, #160]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7ff f84a 	bl	8001bec <HAL_GetTick>
 8002b58:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5c:	f7ff f846 	bl	8001bec <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b11      	cmp	r3, #17
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1fe      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ef      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80c1 	beq.w	8002d0c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10e      	bne.n	8002bba <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a12      	ldr	r2, [pc, #72]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_RCC_OscConfig+0x540>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_RCC_OscConfig+0x544>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_OscConfig+0x544>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x544>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd2:	f7ff f80b 	bl	8001bec <HAL_GetTick>
 8002bd6:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd8:	e00c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7ff f807 	bl	8001bec <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d905      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1bf      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf4:	4bb1      	ldr	r3, [pc, #708]	; (8002ebc <HAL_RCC_OscConfig+0x810>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ec      	beq.n	8002bda <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d02c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002c0c:	4bac      	ldr	r3, [pc, #688]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	49a8      	ldr	r1, [pc, #672]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d010      	beq.n	8002c54 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c32:	4ba3      	ldr	r3, [pc, #652]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	4aa1      	ldr	r2, [pc, #644]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c42:	4b9f      	ldr	r3, [pc, #636]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	4a9d      	ldr	r2, [pc, #628]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c52:	e018      	b.n	8002c86 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c54:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	4a99      	ldr	r2, [pc, #612]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c64:	e00f      	b.n	8002c86 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c66:	4b96      	ldr	r3, [pc, #600]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	4a94      	ldr	r2, [pc, #592]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c76:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	4a90      	ldr	r2, [pc, #576]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe ffad 	bl	8001bec <HAL_GetTick>
 8002c92:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe ffa9 	bl	8001bec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e15f      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cac:	4b84      	ldr	r3, [pc, #528]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ed      	beq.n	8002c96 <HAL_RCC_OscConfig+0x5ea>
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe ff96 	bl	8001bec <HAL_GetTick>
 8002cc0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe ff92 	bl	8001bec <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e148      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cda:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ed      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002ce8:	4b75      	ldr	r3, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	4a74      	ldr	r2, [pc, #464]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a6e      	ldr	r2, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d03c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01c      	beq.n	8002d5a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d20:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d26:	4a66      	ldr	r2, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe ff5c 	bl	8001bec <HAL_GetTick>
 8002d34:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d38:	f7fe ff58 	bl	8001bec <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e110      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ef      	beq.n	8002d38 <HAL_RCC_OscConfig+0x68c>
 8002d58:	e01b      	b.n	8002d92 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d5a:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe ff3f 	bl	8001bec <HAL_GetTick>
 8002d6e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d72:	f7fe ff3b 	bl	8001bec <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0f3      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d84:	4b4e      	ldr	r3, [pc, #312]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ef      	bne.n	8002d72 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80e7 	beq.w	8002f6a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f040 80b7 	bne.w	8002f14 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0203 	and.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d124      	bne.n	8002e04 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d11b      	bne.n	8002e04 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d113      	bne.n	8002e04 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	3b01      	subs	r3, #1
 8002dea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d061      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d056      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e16:	f7fe fee9 	bl	8001bec <HAL_GetTick>
 8002e1a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe fee5 	bl	8001bec <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e09d      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_RCC_OscConfig+0x818>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e56:	0212      	lsls	r2, r2, #8
 8002e58:	4311      	orrs	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e5e:	0852      	lsrs	r2, r2, #1
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0552      	lsls	r2, r2, #21
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e6a:	0852      	lsrs	r2, r2, #1
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	0652      	lsls	r2, r2, #25
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4913      	ldr	r1, [pc, #76]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e90:	f7fe feac 	bl	8001bec <HAL_GetTick>
 8002e94:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe fea8 	bl	8001bec <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e060      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_OscConfig+0x814>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb6:	e058      	b.n	8002f6a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e057      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d14a      	bne.n	8002f6a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eec:	f7fe fe7e 	bl	8001bec <HAL_GetTick>
 8002ef0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fe7a 	bl	8001bec <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e032      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x848>
 8002f12:	e02a      	b.n	8002f6a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d025      	beq.n	8002f66 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f24:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f2c:	f023 0303 	bic.w	r3, r3, #3
 8002f30:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fe55 	bl	8001bec <HAL_GetTick>
 8002f42:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe fe51 	bl	8001bec <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e009      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_OscConfig+0x8c8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x89a>
 8002f64:	e001      	b.n	8002f6a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3728      	adds	r7, #40	; 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0c8      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4961      	ldr	r1, [pc, #388]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b0      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d04c      	beq.n	8003062 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd0:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d121      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e09e      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d115      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e092      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003000:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e086      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b46      	ldr	r3, [pc, #280]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e07e      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 0203 	bic.w	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	493f      	ldr	r1, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003032:	f7fe fddb 	bl	8001bec <HAL_GetTick>
 8003036:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003038:	e00a      	b.n	8003050 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303a:	f7fe fdd7 	bl	8001bec <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e066      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 020c 	and.w	r2, r3, #12
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	429a      	cmp	r2, r3
 8003060:	d1eb      	bne.n	800303a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	492c      	ldr	r1, [pc, #176]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d210      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	4924      	ldr	r1, [pc, #144]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e036      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4918      	ldr	r1, [pc, #96]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4910      	ldr	r1, [pc, #64]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ee:	f000 f825 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030f2:	4601      	mov	r1, r0
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	fa21 f303 	lsr.w	r3, r1, r3
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fd1e 	bl	8001b54 <HAL_InitTick>
 8003118:	4603      	mov	r3, r0
 800311a:	72fb      	strb	r3, [r7, #11]

  return status;
 800311c:	7afb      	ldrb	r3, [r7, #11]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	080092b8 	.word	0x080092b8
 8003134:	20000008 	.word	0x20000008
 8003138:	2000000c 	.word	0x2000000c

0800313c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003154:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x34>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d121      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d11e      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003170:	4b33      	ldr	r3, [pc, #204]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800317c:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e005      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800318c:	4b2c      	ldr	r3, [pc, #176]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e004      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031c0:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_GetSysClockFreq+0x110>)
 80031c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d133      	bne.n	8003232 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d002      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80031de:	e005      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031e2:	617b      	str	r3, [r7, #20]
      break;
 80031e4:	e005      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_GetSysClockFreq+0x110>)
 80031e8:	617b      	str	r3, [r7, #20]
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	617b      	str	r3, [r7, #20]
      break;
 80031f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	3301      	adds	r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	fb02 f203 	mul.w	r2, r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0e5b      	lsrs	r3, r3, #25
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	3301      	adds	r3, #1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003232:	69bb      	ldr	r3, [r7, #24]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3724      	adds	r7, #36	; 0x24
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40021000 	.word	0x40021000
 8003244:	080092d0 	.word	0x080092d0
 8003248:	00f42400 	.word	0x00f42400
 800324c:	007a1200 	.word	0x007a1200

08003250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000008 	.word	0x20000008

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4601      	mov	r1, r0
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	080092c8 	.word	0x080092c8

08003294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003298:	f7ff ffda 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 800329c:	4601      	mov	r1, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0adb      	lsrs	r3, r3, #11
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	080092c8 	.word	0x080092c8

080032c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032d8:	f7ff f984 	bl	80025e4 <HAL_PWREx_GetVoltageRange>
 80032dc:	6178      	str	r0, [r7, #20]
 80032de:	e014      	b.n	800330a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b22      	ldr	r3, [pc, #136]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032f8:	f7ff f974 	bl	80025e4 <HAL_PWREx_GetVoltageRange>
 80032fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003310:	d10b      	bne.n	800332a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d919      	bls.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2ba0      	cmp	r3, #160	; 0xa0
 800331c:	d902      	bls.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800331e:	2302      	movs	r3, #2
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e013      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003324:	2301      	movs	r3, #1
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e010      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d902      	bls.n	8003336 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003330:	2303      	movs	r3, #3
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	e00a      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d102      	bne.n	8003342 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800333c:	2302      	movs	r3, #2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	e004      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d101      	bne.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 0207 	bic.w	r2, r3, #7
 8003354:	4909      	ldr	r1, [pc, #36]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	40022000 	.word	0x40022000

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338c:	2300      	movs	r3, #0
 800338e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 809e 	beq.w	80034da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a2:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	4a3f      	ldr	r2, [pc, #252]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	; 0x58
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d0:	2301      	movs	r3, #1
 80033d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d4:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a39      	ldr	r2, [pc, #228]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80033da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e0:	f7fe fc04 	bl	8001bec <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e8:	f7fe fc00 	bl	8001bec <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d902      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	74fb      	strb	r3, [r7, #19]
        break;
 80033fa:	e005      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0ef      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d15a      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003418:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01e      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	429a      	cmp	r2, r3
 8003428:	d019      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800342a:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003456:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fbc0 	bl	8001bec <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	e00b      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe fbbc 	bl	8001bec <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d902      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	74fb      	strb	r3, [r7, #19]
            break;
 8003486:	e006      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ec      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034b2:	e009      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	74bb      	strb	r3, [r7, #18]
 80034b8:	e006      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c8:	7c7b      	ldrb	r3, [r7, #17]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ce:	4b6e      	ldr	r3, [pc, #440]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	4a6d      	ldr	r2, [pc, #436]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e6:	4b68      	ldr	r3, [pc, #416]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f023 0203 	bic.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4964      	ldr	r1, [pc, #400]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003508:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 020c 	bic.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	495c      	ldr	r1, [pc, #368]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800352a:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4953      	ldr	r1, [pc, #332]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800354c:	4b4e      	ldr	r3, [pc, #312]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	494b      	ldr	r1, [pc, #300]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800356e:	4b46      	ldr	r3, [pc, #280]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4942      	ldr	r1, [pc, #264]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003590:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	493a      	ldr	r1, [pc, #232]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b2:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4931      	ldr	r1, [pc, #196]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	4929      	ldr	r1, [pc, #164]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4920      	ldr	r1, [pc, #128]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	4918      	ldr	r1, [pc, #96]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003642:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003650:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	490a      	ldr	r1, [pc, #40]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800367c:	7cbb      	ldrb	r3, [r7, #18]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000

080036ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e01d      	b.n	80036fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fe f85e 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f000 fbb8 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_TIM_Base_Start_IT+0x50>)
 8003724:	4013      	ands	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d00b      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x42>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003734:	d007      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	00010007 	.word	0x00010007

08003758 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e01d      	b.n	80037a6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f815 	bl	80037ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 fb62 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d841      	bhi.n	8003858 <HAL_TIM_IC_Start_IT+0x94>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <HAL_TIM_IC_Start_IT+0x18>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	08003811 	.word	0x08003811
 80037e0:	08003859 	.word	0x08003859
 80037e4:	08003859 	.word	0x08003859
 80037e8:	08003859 	.word	0x08003859
 80037ec:	08003823 	.word	0x08003823
 80037f0:	08003859 	.word	0x08003859
 80037f4:	08003859 	.word	0x08003859
 80037f8:	08003859 	.word	0x08003859
 80037fc:	08003835 	.word	0x08003835
 8003800:	08003859 	.word	0x08003859
 8003804:	08003859 	.word	0x08003859
 8003808:	08003859 	.word	0x08003859
 800380c:	08003847 	.word	0x08003847
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0202 	orr.w	r2, r2, #2
 800381e:	60da      	str	r2, [r3, #12]
      break;
 8003820:	e01b      	b.n	800385a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0204 	orr.w	r2, r2, #4
 8003830:	60da      	str	r2, [r3, #12]
      break;
 8003832:	e012      	b.n	800385a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0208 	orr.w	r2, r2, #8
 8003842:	60da      	str	r2, [r3, #12]
      break;
 8003844:	e009      	b.n	800385a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0210 	orr.w	r2, r2, #16
 8003854:	60da      	str	r2, [r3, #12]
      break;
 8003856:	e000      	b.n	800385a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003858:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fd06 	bl	8004274 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_TIM_IC_Start_IT+0xd8>)
 8003870:	4013      	ands	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b06      	cmp	r3, #6
 8003878:	d00b      	beq.n	8003892 <HAL_TIM_IC_Start_IT+0xce>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d007      	beq.n	8003892 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	00010007 	.word	0x00010007

080038a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0202 	mvn.w	r2, #2
 80038cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fc1e 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fa9a 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 faa1 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0204 	mvn.w	r2, #4
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fbf4 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa70 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fa77 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b08      	cmp	r3, #8
 800395c:	d122      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b08      	cmp	r3, #8
 800396a:	d11b      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0208 	mvn.w	r2, #8
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2204      	movs	r2, #4
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fbca 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa46 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fa4d 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d122      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d11b      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0210 	mvn.w	r2, #16
 80039c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2208      	movs	r2, #8
 80039ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fba0 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 80039e4:	e005      	b.n	80039f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa1c 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fa23 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0201 	mvn.w	r2, #1
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9f6 	bl	8003e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3c:	2b80      	cmp	r3, #128	; 0x80
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fca8 	bl	80043a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5e:	d10e      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fc9b 	bl	80043b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d10e      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d107      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f9d1 	bl	8003e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d107      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0220 	mvn.w	r2, #32
 8003ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fc5b 	bl	800438c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e08a      	b.n	8003c0e <HAL_TIM_IC_ConfigChannel+0x130>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f000 fa03 	bl	8003f28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020c 	bic.w	r2, r2, #12
 8003b30:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6999      	ldr	r1, [r3, #24]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	e05a      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11c      	bne.n	8003b86 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f000 fa69 	bl	8004032 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b6e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
 8003b84:	e03a      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f000 fab6 	bl	800410c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 020c 	bic.w	r2, r2, #12
 8003bae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69d9      	ldr	r1, [r3, #28]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e01b      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f000 fad6 	bl	8004184 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003be6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69d9      	ldr	r1, [r3, #28]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_ConfigClockSource+0x18>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e0a8      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c58:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d067      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x124>
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d80b      	bhi.n	8003c86 <HAL_TIM_ConfigClockSource+0x70>
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d073      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x144>
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d802      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x66>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d06f      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c7a:	e078      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d06c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x144>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d06a      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003c84:	e073      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c86:	2b70      	cmp	r3, #112	; 0x70
 8003c88:	d00d      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x90>
 8003c8a:	2b70      	cmp	r3, #112	; 0x70
 8003c8c:	d804      	bhi.n	8003c98 <HAL_TIM_ConfigClockSource+0x82>
 8003c8e:	2b50      	cmp	r3, #80	; 0x50
 8003c90:	d033      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xe4>
 8003c92:	2b60      	cmp	r3, #96	; 0x60
 8003c94:	d041      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003c96:	e06a      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d066      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0x156>
 8003c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca2:	d017      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003ca4:	e063      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f000 fabd 	bl	8004234 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	609a      	str	r2, [r3, #8]
      break;
 8003cd2:	e04c      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f000 faa6 	bl	8004234 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e039      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f000 f964 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2150      	movs	r1, #80	; 0x50
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fa73 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003d18:	e029      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 f9c0 	bl	80040ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2160      	movs	r1, #96	; 0x60
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fa63 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003d38:	e019      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 f944 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2140      	movs	r1, #64	; 0x40
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa53 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003d58:	e009      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fa4a 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e000      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003d6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	d831      	bhi.n	8003e00 <HAL_TIM_ReadCapturedValue+0x78>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003de3 	.word	0x08003de3
 8003db8:	08003e01 	.word	0x08003e01
 8003dbc:	08003e01 	.word	0x08003e01
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003e01 	.word	0x08003e01
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e01 	.word	0x08003e01
 8003dd4:	08003df7 	.word	0x08003df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	60fb      	str	r3, [r7, #12]

      break;
 8003de0:	e00f      	b.n	8003e02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	60fb      	str	r3, [r7, #12]

      break;
 8003dea:	e00a      	b.n	8003e02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	60fb      	str	r3, [r7, #12]

      break;
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	60fb      	str	r3, [r7, #12]

      break;
 8003dfe:	e000      	b.n	8003e02 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e00:	bf00      	nop
  }

  return tmpreg;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <TIM_Base_SetConfig+0xbc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x20>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <TIM_Base_SetConfig+0xbc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <TIM_Base_SetConfig+0x52>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d007      	beq.n	8003eb2 <TIM_Base_SetConfig+0x52>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_Base_SetConfig+0x52>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <TIM_Base_SetConfig+0xc4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d108      	bne.n	8003ec4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <TIM_Base_SetConfig+0xbc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_Base_SetConfig+0xa0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0xa0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <TIM_Base_SetConfig+0xc4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d103      	bne.n	8003f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400

08003f28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0201 	bic.w	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a1e      	ldr	r2, [pc, #120]	; (8003fcc <TIM_TI1_SetConfig+0xa4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_TI1_SetConfig+0x3e>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5c:	d003      	beq.n	8003f66 <TIM_TI1_SetConfig+0x3e>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <TIM_TI1_SetConfig+0xa8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <TIM_TI1_SetConfig+0x42>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <TIM_TI1_SetConfig+0x44>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e003      	b.n	8003f8a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f003 030a 	and.w	r3, r3, #10
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40014000 	.word	0x40014000

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f023 0210 	bic.w	r2, r3, #16
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	b29b      	uxth	r3, r3
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004084:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 0210 	bic.w	r2, r3, #16
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	031b      	lsls	r3, r3, #12
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004148:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	b2db      	uxtb	r3, r3
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800415c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	031b      	lsls	r3, r3, #12
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	031b      	lsls	r3, r3, #12
 80041dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	f043 0307 	orr.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	021a      	lsls	r2, r3, #8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	431a      	orrs	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2201      	movs	r2, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e04f      	b.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a21      	ldr	r2, [pc, #132]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004308:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a14      	ldr	r2, [pc, #80]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d004      	beq.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10c      	bne.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004352:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	4313      	orrs	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40014000 	.word	0x40014000

0800438c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e040      	b.n	800445c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fa1a 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8c0 	bl	800458c <UART_SetConfig>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e022      	b.n	800445c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fbc8 	bl	8004bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fc4f 	bl	8004cf8 <UART_CheckIdleState>
 800445a:	4603      	mov	r3, r0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	2b20      	cmp	r3, #32
 800447a:	f040 8081 	bne.w	8004580 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Transmit+0x26>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e079      	b.n	8004582 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UART_Transmit+0x38>
 8004498:	2302      	movs	r3, #2
 800449a:	e072      	b.n	8004582 <HAL_UART_Transmit+0x11e>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2221      	movs	r2, #33	; 0x21
 80044ae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80044b0:	f7fd fb9c 	bl	8001bec <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d108      	bne.n	80044e2 <HAL_UART_Transmit+0x7e>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e003      	b.n	80044ea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80044f2:	e02d      	b.n	8004550 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2200      	movs	r2, #0
 80044fc:	2180      	movs	r1, #128	; 0x80
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fc3f 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e039      	b.n	8004582 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	881a      	ldrh	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004520:	b292      	uxth	r2, r2
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	3302      	adds	r3, #2
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	e008      	b.n	800453e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	781a      	ldrb	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b292      	uxth	r2, r2
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3301      	adds	r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1cb      	bne.n	80044f4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2200      	movs	r2, #0
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fc0b 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e005      	b.n	8004582 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800458c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004590:	b08a      	sub	sp, #40	; 0x28
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4bbc      	ldr	r3, [pc, #752]	; (80048b4 <UART_SetConfig+0x328>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ca:	430b      	orrs	r3, r1
 80045cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4ab2      	ldr	r2, [pc, #712]	; (80048b8 <UART_SetConfig+0x32c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	4313      	orrs	r3, r2
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4aa9      	ldr	r2, [pc, #676]	; (80048bc <UART_SetConfig+0x330>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d126      	bne.n	800466a <UART_SetConfig+0xde>
 800461c:	4ba8      	ldr	r3, [pc, #672]	; (80048c0 <UART_SetConfig+0x334>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d81a      	bhi.n	8004660 <UART_SetConfig+0xd4>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0xa4>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004641 	.word	0x08004641
 8004634:	08004651 	.word	0x08004651
 8004638:	08004649 	.word	0x08004649
 800463c:	08004659 	.word	0x08004659
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004646:	e0ab      	b.n	80047a0 <UART_SetConfig+0x214>
 8004648:	2302      	movs	r3, #2
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464e:	e0a7      	b.n	80047a0 <UART_SetConfig+0x214>
 8004650:	2304      	movs	r3, #4
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004656:	e0a3      	b.n	80047a0 <UART_SetConfig+0x214>
 8004658:	2308      	movs	r3, #8
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e09f      	b.n	80047a0 <UART_SetConfig+0x214>
 8004660:	2310      	movs	r3, #16
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	bf00      	nop
 8004668:	e09a      	b.n	80047a0 <UART_SetConfig+0x214>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a95      	ldr	r2, [pc, #596]	; (80048c4 <UART_SetConfig+0x338>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d138      	bne.n	80046e6 <UART_SetConfig+0x15a>
 8004674:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <UART_SetConfig+0x334>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d82c      	bhi.n	80046dc <UART_SetConfig+0x150>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <UART_SetConfig+0xfc>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046dd 	.word	0x080046dd
 8004690:	080046dd 	.word	0x080046dd
 8004694:	080046dd 	.word	0x080046dd
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080046dd 	.word	0x080046dd
 80046a0:	080046dd 	.word	0x080046dd
 80046a4:	080046dd 	.word	0x080046dd
 80046a8:	080046c5 	.word	0x080046c5
 80046ac:	080046dd 	.word	0x080046dd
 80046b0:	080046dd 	.word	0x080046dd
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c2:	e06d      	b.n	80047a0 <UART_SetConfig+0x214>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ca:	e069      	b.n	80047a0 <UART_SetConfig+0x214>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d2:	e065      	b.n	80047a0 <UART_SetConfig+0x214>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046da:	e061      	b.n	80047a0 <UART_SetConfig+0x214>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e2:	bf00      	nop
 80046e4:	e05c      	b.n	80047a0 <UART_SetConfig+0x214>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a77      	ldr	r2, [pc, #476]	; (80048c8 <UART_SetConfig+0x33c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d125      	bne.n	800473c <UART_SetConfig+0x1b0>
 80046f0:	4b73      	ldr	r3, [pc, #460]	; (80048c0 <UART_SetConfig+0x334>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d011      	beq.n	8004722 <UART_SetConfig+0x196>
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d802      	bhi.n	8004708 <UART_SetConfig+0x17c>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <UART_SetConfig+0x186>
 8004706:	e014      	b.n	8004732 <UART_SetConfig+0x1a6>
 8004708:	2b20      	cmp	r3, #32
 800470a:	d006      	beq.n	800471a <UART_SetConfig+0x18e>
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d00c      	beq.n	800472a <UART_SetConfig+0x19e>
 8004710:	e00f      	b.n	8004732 <UART_SetConfig+0x1a6>
 8004712:	2300      	movs	r3, #0
 8004714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004718:	e042      	b.n	80047a0 <UART_SetConfig+0x214>
 800471a:	2302      	movs	r3, #2
 800471c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004720:	e03e      	b.n	80047a0 <UART_SetConfig+0x214>
 8004722:	2304      	movs	r3, #4
 8004724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004728:	e03a      	b.n	80047a0 <UART_SetConfig+0x214>
 800472a:	2308      	movs	r3, #8
 800472c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004730:	e036      	b.n	80047a0 <UART_SetConfig+0x214>
 8004732:	2310      	movs	r3, #16
 8004734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004738:	bf00      	nop
 800473a:	e031      	b.n	80047a0 <UART_SetConfig+0x214>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a5d      	ldr	r2, [pc, #372]	; (80048b8 <UART_SetConfig+0x32c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d129      	bne.n	800479a <UART_SetConfig+0x20e>
 8004746:	4b5e      	ldr	r3, [pc, #376]	; (80048c0 <UART_SetConfig+0x334>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d014      	beq.n	8004780 <UART_SetConfig+0x1f4>
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d802      	bhi.n	8004762 <UART_SetConfig+0x1d6>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <UART_SetConfig+0x1e4>
 8004760:	e016      	b.n	8004790 <UART_SetConfig+0x204>
 8004762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004766:	d007      	beq.n	8004778 <UART_SetConfig+0x1ec>
 8004768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476c:	d00c      	beq.n	8004788 <UART_SetConfig+0x1fc>
 800476e:	e00f      	b.n	8004790 <UART_SetConfig+0x204>
 8004770:	2300      	movs	r3, #0
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e013      	b.n	80047a0 <UART_SetConfig+0x214>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e00f      	b.n	80047a0 <UART_SetConfig+0x214>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e00b      	b.n	80047a0 <UART_SetConfig+0x214>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e007      	b.n	80047a0 <UART_SetConfig+0x214>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <UART_SetConfig+0x214>
 800479a:	2310      	movs	r3, #16
 800479c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a44      	ldr	r2, [pc, #272]	; (80048b8 <UART_SetConfig+0x32c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	f040 80fb 	bne.w	80049a2 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d824      	bhi.n	80047fe <UART_SetConfig+0x272>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <UART_SetConfig+0x230>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047ff 	.word	0x080047ff
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	080047ef 	.word	0x080047ef
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	080047ff 	.word	0x080047ff
 80047dc:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fd42 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80047e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047e6:	e00d      	b.n	8004804 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80047e8:	4b38      	ldr	r3, [pc, #224]	; (80048cc <UART_SetConfig+0x340>)
 80047ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047ec:	e00a      	b.n	8004804 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe fca5 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80047f2:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047f4:	e006      	b.n	8004804 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047fc:	e002      	b.n	8004804 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	76fb      	strb	r3, [r7, #27]
        break;
 8004802:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 81c8 	beq.w	8004b9c <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	d305      	bcc.n	8004828 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	429a      	cmp	r2, r3
 8004826:	d902      	bls.n	800482e <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	76fb      	strb	r3, [r7, #27]
 800482c:	e1b6      	b.n	8004b9c <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800482e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004832:	2b08      	cmp	r3, #8
 8004834:	f200 80a2 	bhi.w	800497c <UART_SetConfig+0x3f0>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x2b4>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004865 	.word	0x08004865
 8004844:	0800497d 	.word	0x0800497d
 8004848:	080048d1 	.word	0x080048d1
 800484c:	0800497d 	.word	0x0800497d
 8004850:	08004905 	.word	0x08004905
 8004854:	0800497d 	.word	0x0800497d
 8004858:	0800497d 	.word	0x0800497d
 800485c:	0800497d 	.word	0x0800497d
 8004860:	08004953 	.word	0x08004953
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004864:	f7fe fd00 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004868:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4619      	mov	r1, r3
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	f04f 0400 	mov.w	r4, #0
 800487a:	0214      	lsls	r4, r2, #8
 800487c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004880:	020b      	lsls	r3, r1, #8
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6852      	ldr	r2, [r2, #4]
 8004886:	0852      	lsrs	r2, r2, #1
 8004888:	4611      	mov	r1, r2
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	eb13 0b01 	adds.w	fp, r3, r1
 8004892:	eb44 0c02 	adc.w	ip, r4, r2
 8004896:	4658      	mov	r0, fp
 8004898:	4661      	mov	r1, ip
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f04f 0400 	mov.w	r4, #0
 80048a2:	461a      	mov	r2, r3
 80048a4:	4623      	mov	r3, r4
 80048a6:	f7fc f9ef 	bl	8000c88 <__aeabi_uldivmod>
 80048aa:	4603      	mov	r3, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80048b0:	e067      	b.n	8004982 <UART_SetConfig+0x3f6>
 80048b2:	bf00      	nop
 80048b4:	efff69f3 	.word	0xefff69f3
 80048b8:	40008000 	.word	0x40008000
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40004400 	.word	0x40004400
 80048c8:	40004800 	.word	0x40004800
 80048cc:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	f04f 0400 	mov.w	r4, #0
 80048da:	49ae      	ldr	r1, [pc, #696]	; (8004b94 <UART_SetConfig+0x608>)
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	eb13 0b01 	adds.w	fp, r3, r1
 80048e4:	eb44 0c02 	adc.w	ip, r4, r2
 80048e8:	4658      	mov	r0, fp
 80048ea:	4661      	mov	r1, ip
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f04f 0400 	mov.w	r4, #0
 80048f4:	461a      	mov	r2, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	f7fc f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80048fc:	4603      	mov	r3, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004902:	e03e      	b.n	8004982 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004904:	f7fe fc1a 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004908:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	0214      	lsls	r4, r2, #8
 800491c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004920:	020b      	lsls	r3, r1, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6852      	ldr	r2, [r2, #4]
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	4611      	mov	r1, r2
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	eb13 0b01 	adds.w	fp, r3, r1
 8004932:	eb44 0c02 	adc.w	ip, r4, r2
 8004936:	4658      	mov	r0, fp
 8004938:	4661      	mov	r1, ip
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	f7fc f99f 	bl	8000c88 <__aeabi_uldivmod>
 800494a:	4603      	mov	r3, r0
 800494c:	460c      	mov	r4, r1
 800494e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004950:	e017      	b.n	8004982 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004960:	f144 0100 	adc.w	r1, r4, #0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f04f 0400 	mov.w	r4, #0
 800496c:	461a      	mov	r2, r3
 800496e:	4623      	mov	r3, r4
 8004970:	f7fc f98a 	bl	8000c88 <__aeabi_uldivmod>
 8004974:	4603      	mov	r3, r0
 8004976:	460c      	mov	r4, r1
 8004978:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800497a:	e002      	b.n	8004982 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	76fb      	strb	r3, [r7, #27]
            break;
 8004980:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004988:	d308      	bcc.n	800499c <UART_SetConfig+0x410>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004990:	d204      	bcs.n	800499c <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	e0ff      	b.n	8004b9c <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	76fb      	strb	r3, [r7, #27]
 80049a0:	e0fc      	b.n	8004b9c <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049aa:	f040 8083 	bne.w	8004ab4 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80049ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d85e      	bhi.n	8004a74 <UART_SetConfig+0x4e8>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x430>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	08004a01 	.word	0x08004a01
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004a75 	.word	0x08004a75
 80049cc:	08004a3d 	.word	0x08004a3d
 80049d0:	08004a75 	.word	0x08004a75
 80049d4:	08004a75 	.word	0x08004a75
 80049d8:	08004a75 	.word	0x08004a75
 80049dc:	08004a5d 	.word	0x08004a5d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fe fc42 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80049e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	005a      	lsls	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	441a      	add	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049fe:	e03c      	b.n	8004a7a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7fe fc48 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8004a04:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	005a      	lsls	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	441a      	add	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a1e:	e02c      	b.n	8004a7a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004a2a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6852      	ldr	r2, [r2, #4]
 8004a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a3a:	e01e      	b.n	8004a7a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3c:	f7fe fb7e 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004a40:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	005a      	lsls	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	441a      	add	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a5a:	e00e      	b.n	8004a7a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a72:	e002      	b.n	8004a7a <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	76fb      	strb	r3, [r7, #27]
        break;
 8004a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2b0f      	cmp	r3, #15
 8004a7e:	d916      	bls.n	8004aae <UART_SetConfig+0x522>
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d212      	bcs.n	8004aae <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f023 030f 	bic.w	r3, r3, #15
 8004a90:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	89fb      	ldrh	r3, [r7, #14]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	89fa      	ldrh	r2, [r7, #14]
 8004aaa:	60da      	str	r2, [r3, #12]
 8004aac:	e076      	b.n	8004b9c <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	76fb      	strb	r3, [r7, #27]
 8004ab2:	e073      	b.n	8004b9c <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8004ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d85c      	bhi.n	8004b76 <UART_SetConfig+0x5ea>
 8004abc:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <UART_SetConfig+0x538>)
 8004abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac2:	bf00      	nop
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004b07 	.word	0x08004b07
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b77 	.word	0x08004b77
 8004ad4:	08004b41 	.word	0x08004b41
 8004ad8:	08004b77 	.word	0x08004b77
 8004adc:	08004b77 	.word	0x08004b77
 8004ae0:	08004b77 	.word	0x08004b77
 8004ae4:	08004b5f 	.word	0x08004b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f7fe fbbe 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004aec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	085a      	lsrs	r2, r3, #1
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	441a      	add	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b04:	e03a      	b.n	8004b7c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b06:	f7fe fbc5 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8004b0a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	085a      	lsrs	r2, r3, #1
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	441a      	add	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b22:	e02b      	b.n	8004b7c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b2e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6852      	ldr	r2, [r2, #4]
 8004b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b3e:	e01d      	b.n	8004b7c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b40:	f7fe fafc 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004b44:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	085a      	lsrs	r2, r3, #1
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	441a      	add	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b5c:	e00e      	b.n	8004b7c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b74:	e002      	b.n	8004b7c <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	76fb      	strb	r3, [r7, #27]
        break;
 8004b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d90a      	bls.n	8004b98 <UART_SetConfig+0x60c>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d206      	bcs.n	8004b98 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e003      	b.n	8004b9c <UART_SetConfig+0x610>
 8004b94:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004ba8:	7efb      	ldrb	r3, [r7, #27]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3728      	adds	r7, #40	; 0x28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01a      	beq.n	8004cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb2:	d10a      	bne.n	8004cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d06:	f7fc ff71 	bl	8001bec <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d10e      	bne.n	8004d38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f82a 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e020      	b.n	8004d7a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d10e      	bne.n	8004d64 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f814 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e00a      	b.n	8004d7a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d92:	e05d      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9a:	d059      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9c:	f7fc ff26 	bl	8001bec <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d302      	bcc.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11b      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e042      	b.n	8004e70 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d02b      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e06:	d123      	bne.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e10:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e20:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e00f      	b.n	8004e70 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69da      	ldr	r2, [r3, #28]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d092      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <__errno>:
 8004e78:	4b01      	ldr	r3, [pc, #4]	; (8004e80 <__errno+0x8>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000014 	.word	0x20000014

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4e0d      	ldr	r6, [pc, #52]	; (8004ebc <__libc_init_array+0x38>)
 8004e88:	4c0d      	ldr	r4, [pc, #52]	; (8004ec0 <__libc_init_array+0x3c>)
 8004e8a:	1ba4      	subs	r4, r4, r6
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	2500      	movs	r5, #0
 8004e90:	42a5      	cmp	r5, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	4e0b      	ldr	r6, [pc, #44]	; (8004ec4 <__libc_init_array+0x40>)
 8004e96:	4c0c      	ldr	r4, [pc, #48]	; (8004ec8 <__libc_init_array+0x44>)
 8004e98:	f004 f9fc 	bl	8009294 <_init>
 8004e9c:	1ba4      	subs	r4, r4, r6
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	2500      	movs	r5, #0
 8004ea2:	42a5      	cmp	r5, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eac:	4798      	blx	r3
 8004eae:	3501      	adds	r5, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eb6:	4798      	blx	r3
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	08009628 	.word	0x08009628
 8004ec0:	08009628 	.word	0x08009628
 8004ec4:	08009628 	.word	0x08009628
 8004ec8:	0800962c 	.word	0x0800962c

08004ecc <memset>:
 8004ecc:	4402      	add	r2, r0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d100      	bne.n	8004ed6 <memset+0xa>
 8004ed4:	4770      	bx	lr
 8004ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eda:	e7f9      	b.n	8004ed0 <memset+0x4>

08004edc <__cvt>:
 8004edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	ec55 4b10 	vmov	r4, r5, d0
 8004ee4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004ee6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	460e      	mov	r6, r1
 8004eee:	4691      	mov	r9, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	bfb8      	it	lt
 8004ef4:	4622      	movlt	r2, r4
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	f027 0720 	bic.w	r7, r7, #32
 8004efc:	bfbb      	ittet	lt
 8004efe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f02:	461d      	movlt	r5, r3
 8004f04:	2300      	movge	r3, #0
 8004f06:	232d      	movlt	r3, #45	; 0x2d
 8004f08:	bfb8      	it	lt
 8004f0a:	4614      	movlt	r4, r2
 8004f0c:	2f46      	cmp	r7, #70	; 0x46
 8004f0e:	700b      	strb	r3, [r1, #0]
 8004f10:	d004      	beq.n	8004f1c <__cvt+0x40>
 8004f12:	2f45      	cmp	r7, #69	; 0x45
 8004f14:	d100      	bne.n	8004f18 <__cvt+0x3c>
 8004f16:	3601      	adds	r6, #1
 8004f18:	2102      	movs	r1, #2
 8004f1a:	e000      	b.n	8004f1e <__cvt+0x42>
 8004f1c:	2103      	movs	r1, #3
 8004f1e:	ab03      	add	r3, sp, #12
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	ab02      	add	r3, sp, #8
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	4632      	mov	r2, r6
 8004f28:	4653      	mov	r3, sl
 8004f2a:	ec45 4b10 	vmov	d0, r4, r5
 8004f2e:	f001 fd8f 	bl	8006a50 <_dtoa_r>
 8004f32:	2f47      	cmp	r7, #71	; 0x47
 8004f34:	4680      	mov	r8, r0
 8004f36:	d102      	bne.n	8004f3e <__cvt+0x62>
 8004f38:	f019 0f01 	tst.w	r9, #1
 8004f3c:	d026      	beq.n	8004f8c <__cvt+0xb0>
 8004f3e:	2f46      	cmp	r7, #70	; 0x46
 8004f40:	eb08 0906 	add.w	r9, r8, r6
 8004f44:	d111      	bne.n	8004f6a <__cvt+0x8e>
 8004f46:	f898 3000 	ldrb.w	r3, [r8]
 8004f4a:	2b30      	cmp	r3, #48	; 0x30
 8004f4c:	d10a      	bne.n	8004f64 <__cvt+0x88>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7fb fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f5a:	b918      	cbnz	r0, 8004f64 <__cvt+0x88>
 8004f5c:	f1c6 0601 	rsb	r6, r6, #1
 8004f60:	f8ca 6000 	str.w	r6, [sl]
 8004f64:	f8da 3000 	ldr.w	r3, [sl]
 8004f68:	4499      	add	r9, r3
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7fb fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f76:	b938      	cbnz	r0, 8004f88 <__cvt+0xac>
 8004f78:	2230      	movs	r2, #48	; 0x30
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	454b      	cmp	r3, r9
 8004f7e:	d205      	bcs.n	8004f8c <__cvt+0xb0>
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	9103      	str	r1, [sp, #12]
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e7f8      	b.n	8004f7a <__cvt+0x9e>
 8004f88:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f90:	eba3 0308 	sub.w	r3, r3, r8
 8004f94:	4640      	mov	r0, r8
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	b004      	add	sp, #16
 8004f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004f9e <__exponent>:
 8004f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	bfba      	itte	lt
 8004fa6:	4249      	neglt	r1, r1
 8004fa8:	232d      	movlt	r3, #45	; 0x2d
 8004faa:	232b      	movge	r3, #43	; 0x2b
 8004fac:	2909      	cmp	r1, #9
 8004fae:	f804 2b02 	strb.w	r2, [r4], #2
 8004fb2:	7043      	strb	r3, [r0, #1]
 8004fb4:	dd20      	ble.n	8004ff8 <__exponent+0x5a>
 8004fb6:	f10d 0307 	add.w	r3, sp, #7
 8004fba:	461f      	mov	r7, r3
 8004fbc:	260a      	movs	r6, #10
 8004fbe:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fc2:	fb06 1115 	mls	r1, r6, r5, r1
 8004fc6:	3130      	adds	r1, #48	; 0x30
 8004fc8:	2d09      	cmp	r5, #9
 8004fca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fce:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	dc09      	bgt.n	8004fea <__exponent+0x4c>
 8004fd6:	3130      	adds	r1, #48	; 0x30
 8004fd8:	3b02      	subs	r3, #2
 8004fda:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004fde:	42bb      	cmp	r3, r7
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	d304      	bcc.n	8004fee <__exponent+0x50>
 8004fe4:	1a10      	subs	r0, r2, r0
 8004fe6:	b003      	add	sp, #12
 8004fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fea:	4613      	mov	r3, r2
 8004fec:	e7e7      	b.n	8004fbe <__exponent+0x20>
 8004fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ff2:	f804 2b01 	strb.w	r2, [r4], #1
 8004ff6:	e7f2      	b.n	8004fde <__exponent+0x40>
 8004ff8:	2330      	movs	r3, #48	; 0x30
 8004ffa:	4419      	add	r1, r3
 8004ffc:	7083      	strb	r3, [r0, #2]
 8004ffe:	1d02      	adds	r2, r0, #4
 8005000:	70c1      	strb	r1, [r0, #3]
 8005002:	e7ef      	b.n	8004fe4 <__exponent+0x46>

08005004 <_printf_float>:
 8005004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005008:	b08d      	sub	sp, #52	; 0x34
 800500a:	460c      	mov	r4, r1
 800500c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005010:	4616      	mov	r6, r2
 8005012:	461f      	mov	r7, r3
 8005014:	4605      	mov	r5, r0
 8005016:	f002 fec9 	bl	8007dac <_localeconv_r>
 800501a:	6803      	ldr	r3, [r0, #0]
 800501c:	9304      	str	r3, [sp, #16]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb f8d6 	bl	80001d0 <strlen>
 8005024:	2300      	movs	r3, #0
 8005026:	930a      	str	r3, [sp, #40]	; 0x28
 8005028:	f8d8 3000 	ldr.w	r3, [r8]
 800502c:	9005      	str	r0, [sp, #20]
 800502e:	3307      	adds	r3, #7
 8005030:	f023 0307 	bic.w	r3, r3, #7
 8005034:	f103 0208 	add.w	r2, r3, #8
 8005038:	f894 a018 	ldrb.w	sl, [r4, #24]
 800503c:	f8d4 b000 	ldr.w	fp, [r4]
 8005040:	f8c8 2000 	str.w	r2, [r8]
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800504c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005050:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005054:	9307      	str	r3, [sp, #28]
 8005056:	f8cd 8018 	str.w	r8, [sp, #24]
 800505a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800505e:	4ba7      	ldr	r3, [pc, #668]	; (80052fc <_printf_float+0x2f8>)
 8005060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005064:	f7fb fd62 	bl	8000b2c <__aeabi_dcmpun>
 8005068:	bb70      	cbnz	r0, 80050c8 <_printf_float+0xc4>
 800506a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800506e:	4ba3      	ldr	r3, [pc, #652]	; (80052fc <_printf_float+0x2f8>)
 8005070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005074:	f7fb fd3c 	bl	8000af0 <__aeabi_dcmple>
 8005078:	bb30      	cbnz	r0, 80050c8 <_printf_float+0xc4>
 800507a:	2200      	movs	r2, #0
 800507c:	2300      	movs	r3, #0
 800507e:	4640      	mov	r0, r8
 8005080:	4649      	mov	r1, r9
 8005082:	f7fb fd2b 	bl	8000adc <__aeabi_dcmplt>
 8005086:	b110      	cbz	r0, 800508e <_printf_float+0x8a>
 8005088:	232d      	movs	r3, #45	; 0x2d
 800508a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508e:	4a9c      	ldr	r2, [pc, #624]	; (8005300 <_printf_float+0x2fc>)
 8005090:	4b9c      	ldr	r3, [pc, #624]	; (8005304 <_printf_float+0x300>)
 8005092:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005096:	bf8c      	ite	hi
 8005098:	4690      	movhi	r8, r2
 800509a:	4698      	movls	r8, r3
 800509c:	2303      	movs	r3, #3
 800509e:	f02b 0204 	bic.w	r2, fp, #4
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	6022      	str	r2, [r4, #0]
 80050a6:	f04f 0900 	mov.w	r9, #0
 80050aa:	9700      	str	r7, [sp, #0]
 80050ac:	4633      	mov	r3, r6
 80050ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80050b0:	4621      	mov	r1, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f9e6 	bl	8005484 <_printf_common>
 80050b8:	3001      	adds	r0, #1
 80050ba:	f040 808d 	bne.w	80051d8 <_printf_float+0x1d4>
 80050be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050c2:	b00d      	add	sp, #52	; 0x34
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c8:	4642      	mov	r2, r8
 80050ca:	464b      	mov	r3, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	4649      	mov	r1, r9
 80050d0:	f7fb fd2c 	bl	8000b2c <__aeabi_dcmpun>
 80050d4:	b110      	cbz	r0, 80050dc <_printf_float+0xd8>
 80050d6:	4a8c      	ldr	r2, [pc, #560]	; (8005308 <_printf_float+0x304>)
 80050d8:	4b8c      	ldr	r3, [pc, #560]	; (800530c <_printf_float+0x308>)
 80050da:	e7da      	b.n	8005092 <_printf_float+0x8e>
 80050dc:	6861      	ldr	r1, [r4, #4]
 80050de:	1c4b      	adds	r3, r1, #1
 80050e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80050e4:	a80a      	add	r0, sp, #40	; 0x28
 80050e6:	d13e      	bne.n	8005166 <_printf_float+0x162>
 80050e8:	2306      	movs	r3, #6
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	2300      	movs	r3, #0
 80050ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80050f2:	ab09      	add	r3, sp, #36	; 0x24
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	ec49 8b10 	vmov	d0, r8, r9
 80050fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050fe:	6022      	str	r2, [r4, #0]
 8005100:	f8cd a004 	str.w	sl, [sp, #4]
 8005104:	6861      	ldr	r1, [r4, #4]
 8005106:	4628      	mov	r0, r5
 8005108:	f7ff fee8 	bl	8004edc <__cvt>
 800510c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005110:	2b47      	cmp	r3, #71	; 0x47
 8005112:	4680      	mov	r8, r0
 8005114:	d109      	bne.n	800512a <_printf_float+0x126>
 8005116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005118:	1cd8      	adds	r0, r3, #3
 800511a:	db02      	blt.n	8005122 <_printf_float+0x11e>
 800511c:	6862      	ldr	r2, [r4, #4]
 800511e:	4293      	cmp	r3, r2
 8005120:	dd47      	ble.n	80051b2 <_printf_float+0x1ae>
 8005122:	f1aa 0a02 	sub.w	sl, sl, #2
 8005126:	fa5f fa8a 	uxtb.w	sl, sl
 800512a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800512e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005130:	d824      	bhi.n	800517c <_printf_float+0x178>
 8005132:	3901      	subs	r1, #1
 8005134:	4652      	mov	r2, sl
 8005136:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800513a:	9109      	str	r1, [sp, #36]	; 0x24
 800513c:	f7ff ff2f 	bl	8004f9e <__exponent>
 8005140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005142:	1813      	adds	r3, r2, r0
 8005144:	2a01      	cmp	r2, #1
 8005146:	4681      	mov	r9, r0
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	dc02      	bgt.n	8005152 <_printf_float+0x14e>
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	07d1      	lsls	r1, r2, #31
 8005150:	d501      	bpl.n	8005156 <_printf_float+0x152>
 8005152:	3301      	adds	r3, #1
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0a5      	beq.n	80050aa <_printf_float+0xa6>
 800515e:	232d      	movs	r3, #45	; 0x2d
 8005160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005164:	e7a1      	b.n	80050aa <_printf_float+0xa6>
 8005166:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800516a:	f000 8177 	beq.w	800545c <_printf_float+0x458>
 800516e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005172:	d1bb      	bne.n	80050ec <_printf_float+0xe8>
 8005174:	2900      	cmp	r1, #0
 8005176:	d1b9      	bne.n	80050ec <_printf_float+0xe8>
 8005178:	2301      	movs	r3, #1
 800517a:	e7b6      	b.n	80050ea <_printf_float+0xe6>
 800517c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005180:	d119      	bne.n	80051b6 <_printf_float+0x1b2>
 8005182:	2900      	cmp	r1, #0
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	dd0c      	ble.n	80051a2 <_printf_float+0x19e>
 8005188:	6121      	str	r1, [r4, #16]
 800518a:	b913      	cbnz	r3, 8005192 <_printf_float+0x18e>
 800518c:	6822      	ldr	r2, [r4, #0]
 800518e:	07d2      	lsls	r2, r2, #31
 8005190:	d502      	bpl.n	8005198 <_printf_float+0x194>
 8005192:	3301      	adds	r3, #1
 8005194:	440b      	add	r3, r1
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519a:	65a3      	str	r3, [r4, #88]	; 0x58
 800519c:	f04f 0900 	mov.w	r9, #0
 80051a0:	e7d9      	b.n	8005156 <_printf_float+0x152>
 80051a2:	b913      	cbnz	r3, 80051aa <_printf_float+0x1a6>
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	07d0      	lsls	r0, r2, #31
 80051a8:	d501      	bpl.n	80051ae <_printf_float+0x1aa>
 80051aa:	3302      	adds	r3, #2
 80051ac:	e7f3      	b.n	8005196 <_printf_float+0x192>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e7f1      	b.n	8005196 <_printf_float+0x192>
 80051b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80051b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051ba:	4293      	cmp	r3, r2
 80051bc:	db05      	blt.n	80051ca <_printf_float+0x1c6>
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	07d1      	lsls	r1, r2, #31
 80051c4:	d5e8      	bpl.n	8005198 <_printf_float+0x194>
 80051c6:	3301      	adds	r3, #1
 80051c8:	e7e5      	b.n	8005196 <_printf_float+0x192>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfd4      	ite	le
 80051ce:	f1c3 0302 	rsble	r3, r3, #2
 80051d2:	2301      	movgt	r3, #1
 80051d4:	4413      	add	r3, r2
 80051d6:	e7de      	b.n	8005196 <_printf_float+0x192>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	055a      	lsls	r2, r3, #21
 80051dc:	d407      	bmi.n	80051ee <_printf_float+0x1ea>
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	4642      	mov	r2, r8
 80051e2:	4631      	mov	r1, r6
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b8      	blx	r7
 80051e8:	3001      	adds	r0, #1
 80051ea:	d12b      	bne.n	8005244 <_printf_float+0x240>
 80051ec:	e767      	b.n	80050be <_printf_float+0xba>
 80051ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80051f2:	f240 80dc 	bls.w	80053ae <_printf_float+0x3aa>
 80051f6:	2200      	movs	r2, #0
 80051f8:	2300      	movs	r3, #0
 80051fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051fe:	f7fb fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8005202:	2800      	cmp	r0, #0
 8005204:	d033      	beq.n	800526e <_printf_float+0x26a>
 8005206:	2301      	movs	r3, #1
 8005208:	4a41      	ldr	r2, [pc, #260]	; (8005310 <_printf_float+0x30c>)
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f af54 	beq.w	80050be <_printf_float+0xba>
 8005216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800521a:	429a      	cmp	r2, r3
 800521c:	db02      	blt.n	8005224 <_printf_float+0x220>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	07d8      	lsls	r0, r3, #31
 8005222:	d50f      	bpl.n	8005244 <_printf_float+0x240>
 8005224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	f43f af45 	beq.w	80050be <_printf_float+0xba>
 8005234:	f04f 0800 	mov.w	r8, #0
 8005238:	f104 091a 	add.w	r9, r4, #26
 800523c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	4543      	cmp	r3, r8
 8005242:	dc09      	bgt.n	8005258 <_printf_float+0x254>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	079b      	lsls	r3, r3, #30
 8005248:	f100 8103 	bmi.w	8005452 <_printf_float+0x44e>
 800524c:	68e0      	ldr	r0, [r4, #12]
 800524e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005250:	4298      	cmp	r0, r3
 8005252:	bfb8      	it	lt
 8005254:	4618      	movlt	r0, r3
 8005256:	e734      	b.n	80050c2 <_printf_float+0xbe>
 8005258:	2301      	movs	r3, #1
 800525a:	464a      	mov	r2, r9
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f af2b 	beq.w	80050be <_printf_float+0xba>
 8005268:	f108 0801 	add.w	r8, r8, #1
 800526c:	e7e6      	b.n	800523c <_printf_float+0x238>
 800526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005270:	2b00      	cmp	r3, #0
 8005272:	dc2b      	bgt.n	80052cc <_printf_float+0x2c8>
 8005274:	2301      	movs	r3, #1
 8005276:	4a26      	ldr	r2, [pc, #152]	; (8005310 <_printf_float+0x30c>)
 8005278:	4631      	mov	r1, r6
 800527a:	4628      	mov	r0, r5
 800527c:	47b8      	blx	r7
 800527e:	3001      	adds	r0, #1
 8005280:	f43f af1d 	beq.w	80050be <_printf_float+0xba>
 8005284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005286:	b923      	cbnz	r3, 8005292 <_printf_float+0x28e>
 8005288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528a:	b913      	cbnz	r3, 8005292 <_printf_float+0x28e>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	07d9      	lsls	r1, r3, #31
 8005290:	d5d8      	bpl.n	8005244 <_printf_float+0x240>
 8005292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f af0e 	beq.w	80050be <_printf_float+0xba>
 80052a2:	f04f 0900 	mov.w	r9, #0
 80052a6:	f104 0a1a 	add.w	sl, r4, #26
 80052aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ac:	425b      	negs	r3, r3
 80052ae:	454b      	cmp	r3, r9
 80052b0:	dc01      	bgt.n	80052b6 <_printf_float+0x2b2>
 80052b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b4:	e794      	b.n	80051e0 <_printf_float+0x1dc>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4652      	mov	r2, sl
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f aefc 	beq.w	80050be <_printf_float+0xba>
 80052c6:	f109 0901 	add.w	r9, r9, #1
 80052ca:	e7ee      	b.n	80052aa <_printf_float+0x2a6>
 80052cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052d0:	429a      	cmp	r2, r3
 80052d2:	bfa8      	it	ge
 80052d4:	461a      	movge	r2, r3
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	4691      	mov	r9, r2
 80052da:	dd07      	ble.n	80052ec <_printf_float+0x2e8>
 80052dc:	4613      	mov	r3, r2
 80052de:	4631      	mov	r1, r6
 80052e0:	4642      	mov	r2, r8
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f aee9 	beq.w	80050be <_printf_float+0xba>
 80052ec:	f104 031a 	add.w	r3, r4, #26
 80052f0:	f04f 0b00 	mov.w	fp, #0
 80052f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052f8:	9306      	str	r3, [sp, #24]
 80052fa:	e015      	b.n	8005328 <_printf_float+0x324>
 80052fc:	7fefffff 	.word	0x7fefffff
 8005300:	08009308 	.word	0x08009308
 8005304:	08009304 	.word	0x08009304
 8005308:	08009310 	.word	0x08009310
 800530c:	0800930c 	.word	0x0800930c
 8005310:	08009314 	.word	0x08009314
 8005314:	2301      	movs	r3, #1
 8005316:	9a06      	ldr	r2, [sp, #24]
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f aecd 	beq.w	80050be <_printf_float+0xba>
 8005324:	f10b 0b01 	add.w	fp, fp, #1
 8005328:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800532c:	ebaa 0309 	sub.w	r3, sl, r9
 8005330:	455b      	cmp	r3, fp
 8005332:	dcef      	bgt.n	8005314 <_printf_float+0x310>
 8005334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005338:	429a      	cmp	r2, r3
 800533a:	44d0      	add	r8, sl
 800533c:	db15      	blt.n	800536a <_printf_float+0x366>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	07da      	lsls	r2, r3, #31
 8005342:	d412      	bmi.n	800536a <_printf_float+0x366>
 8005344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005348:	eba3 020a 	sub.w	r2, r3, sl
 800534c:	eba3 0a01 	sub.w	sl, r3, r1
 8005350:	4592      	cmp	sl, r2
 8005352:	bfa8      	it	ge
 8005354:	4692      	movge	sl, r2
 8005356:	f1ba 0f00 	cmp.w	sl, #0
 800535a:	dc0e      	bgt.n	800537a <_printf_float+0x376>
 800535c:	f04f 0800 	mov.w	r8, #0
 8005360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005364:	f104 091a 	add.w	r9, r4, #26
 8005368:	e019      	b.n	800539e <_printf_float+0x39a>
 800536a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	d1e5      	bne.n	8005344 <_printf_float+0x340>
 8005378:	e6a1      	b.n	80050be <_printf_float+0xba>
 800537a:	4653      	mov	r3, sl
 800537c:	4642      	mov	r2, r8
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	d1e9      	bne.n	800535c <_printf_float+0x358>
 8005388:	e699      	b.n	80050be <_printf_float+0xba>
 800538a:	2301      	movs	r3, #1
 800538c:	464a      	mov	r2, r9
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	f43f ae92 	beq.w	80050be <_printf_float+0xba>
 800539a:	f108 0801 	add.w	r8, r8, #1
 800539e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	eba3 030a 	sub.w	r3, r3, sl
 80053a8:	4543      	cmp	r3, r8
 80053aa:	dcee      	bgt.n	800538a <_printf_float+0x386>
 80053ac:	e74a      	b.n	8005244 <_printf_float+0x240>
 80053ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053b0:	2a01      	cmp	r2, #1
 80053b2:	dc01      	bgt.n	80053b8 <_printf_float+0x3b4>
 80053b4:	07db      	lsls	r3, r3, #31
 80053b6:	d53a      	bpl.n	800542e <_printf_float+0x42a>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4642      	mov	r2, r8
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f ae7b 	beq.w	80050be <_printf_float+0xba>
 80053c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053cc:	4631      	mov	r1, r6
 80053ce:	4628      	mov	r0, r5
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	f108 0801 	add.w	r8, r8, #1
 80053d8:	f43f ae71 	beq.w	80050be <_printf_float+0xba>
 80053dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053de:	2200      	movs	r2, #0
 80053e0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80053e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053e8:	2300      	movs	r3, #0
 80053ea:	f7fb fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80053ee:	b9c8      	cbnz	r0, 8005424 <_printf_float+0x420>
 80053f0:	4653      	mov	r3, sl
 80053f2:	4642      	mov	r2, r8
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	d10e      	bne.n	800541c <_printf_float+0x418>
 80053fe:	e65e      	b.n	80050be <_printf_float+0xba>
 8005400:	2301      	movs	r3, #1
 8005402:	4652      	mov	r2, sl
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	f43f ae57 	beq.w	80050be <_printf_float+0xba>
 8005410:	f108 0801 	add.w	r8, r8, #1
 8005414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	4543      	cmp	r3, r8
 800541a:	dcf1      	bgt.n	8005400 <_printf_float+0x3fc>
 800541c:	464b      	mov	r3, r9
 800541e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005422:	e6de      	b.n	80051e2 <_printf_float+0x1de>
 8005424:	f04f 0800 	mov.w	r8, #0
 8005428:	f104 0a1a 	add.w	sl, r4, #26
 800542c:	e7f2      	b.n	8005414 <_printf_float+0x410>
 800542e:	2301      	movs	r3, #1
 8005430:	e7df      	b.n	80053f2 <_printf_float+0x3ee>
 8005432:	2301      	movs	r3, #1
 8005434:	464a      	mov	r2, r9
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f ae3e 	beq.w	80050be <_printf_float+0xba>
 8005442:	f108 0801 	add.w	r8, r8, #1
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	4543      	cmp	r3, r8
 800544e:	dcf0      	bgt.n	8005432 <_printf_float+0x42e>
 8005450:	e6fc      	b.n	800524c <_printf_float+0x248>
 8005452:	f04f 0800 	mov.w	r8, #0
 8005456:	f104 0919 	add.w	r9, r4, #25
 800545a:	e7f4      	b.n	8005446 <_printf_float+0x442>
 800545c:	2900      	cmp	r1, #0
 800545e:	f43f ae8b 	beq.w	8005178 <_printf_float+0x174>
 8005462:	2300      	movs	r3, #0
 8005464:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005468:	ab09      	add	r3, sp, #36	; 0x24
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	ec49 8b10 	vmov	d0, r8, r9
 8005470:	6022      	str	r2, [r4, #0]
 8005472:	f8cd a004 	str.w	sl, [sp, #4]
 8005476:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800547a:	4628      	mov	r0, r5
 800547c:	f7ff fd2e 	bl	8004edc <__cvt>
 8005480:	4680      	mov	r8, r0
 8005482:	e648      	b.n	8005116 <_printf_float+0x112>

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4691      	mov	r9, r2
 800548a:	461f      	mov	r7, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005494:	4293      	cmp	r3, r2
 8005496:	bfb8      	it	lt
 8005498:	4613      	movlt	r3, r2
 800549a:	f8c9 3000 	str.w	r3, [r9]
 800549e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054a2:	4606      	mov	r6, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	b112      	cbz	r2, 80054ae <_printf_common+0x2a>
 80054a8:	3301      	adds	r3, #1
 80054aa:	f8c9 3000 	str.w	r3, [r9]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	0699      	lsls	r1, r3, #26
 80054b2:	bf42      	ittt	mi
 80054b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054b8:	3302      	addmi	r3, #2
 80054ba:	f8c9 3000 	strmi.w	r3, [r9]
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	f015 0506 	ands.w	r5, r5, #6
 80054c4:	d107      	bne.n	80054d6 <_printf_common+0x52>
 80054c6:	f104 0a19 	add.w	sl, r4, #25
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	f8d9 2000 	ldr.w	r2, [r9]
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	42ab      	cmp	r3, r5
 80054d4:	dc28      	bgt.n	8005528 <_printf_common+0xa4>
 80054d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	3300      	adds	r3, #0
 80054de:	bf18      	it	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	0692      	lsls	r2, r2, #26
 80054e4:	d42d      	bmi.n	8005542 <_printf_common+0xbe>
 80054e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054ea:	4639      	mov	r1, r7
 80054ec:	4630      	mov	r0, r6
 80054ee:	47c0      	blx	r8
 80054f0:	3001      	adds	r0, #1
 80054f2:	d020      	beq.n	8005536 <_printf_common+0xb2>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	68e5      	ldr	r5, [r4, #12]
 80054f8:	f8d9 2000 	ldr.w	r2, [r9]
 80054fc:	f003 0306 	and.w	r3, r3, #6
 8005500:	2b04      	cmp	r3, #4
 8005502:	bf08      	it	eq
 8005504:	1aad      	subeq	r5, r5, r2
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	bf0c      	ite	eq
 800550c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005510:	2500      	movne	r5, #0
 8005512:	4293      	cmp	r3, r2
 8005514:	bfc4      	itt	gt
 8005516:	1a9b      	subgt	r3, r3, r2
 8005518:	18ed      	addgt	r5, r5, r3
 800551a:	f04f 0900 	mov.w	r9, #0
 800551e:	341a      	adds	r4, #26
 8005520:	454d      	cmp	r5, r9
 8005522:	d11a      	bne.n	800555a <_printf_common+0xd6>
 8005524:	2000      	movs	r0, #0
 8005526:	e008      	b.n	800553a <_printf_common+0xb6>
 8005528:	2301      	movs	r3, #1
 800552a:	4652      	mov	r2, sl
 800552c:	4639      	mov	r1, r7
 800552e:	4630      	mov	r0, r6
 8005530:	47c0      	blx	r8
 8005532:	3001      	adds	r0, #1
 8005534:	d103      	bne.n	800553e <_printf_common+0xba>
 8005536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553e:	3501      	adds	r5, #1
 8005540:	e7c3      	b.n	80054ca <_printf_common+0x46>
 8005542:	18e1      	adds	r1, r4, r3
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	2030      	movs	r0, #48	; 0x30
 8005548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800554c:	4422      	add	r2, r4
 800554e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005556:	3302      	adds	r3, #2
 8005558:	e7c5      	b.n	80054e6 <_printf_common+0x62>
 800555a:	2301      	movs	r3, #1
 800555c:	4622      	mov	r2, r4
 800555e:	4639      	mov	r1, r7
 8005560:	4630      	mov	r0, r6
 8005562:	47c0      	blx	r8
 8005564:	3001      	adds	r0, #1
 8005566:	d0e6      	beq.n	8005536 <_printf_common+0xb2>
 8005568:	f109 0901 	add.w	r9, r9, #1
 800556c:	e7d8      	b.n	8005520 <_printf_common+0x9c>
	...

08005570 <_printf_i>:
 8005570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005578:	460c      	mov	r4, r1
 800557a:	7e09      	ldrb	r1, [r1, #24]
 800557c:	b085      	sub	sp, #20
 800557e:	296e      	cmp	r1, #110	; 0x6e
 8005580:	4617      	mov	r7, r2
 8005582:	4606      	mov	r6, r0
 8005584:	4698      	mov	r8, r3
 8005586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005588:	f000 80b3 	beq.w	80056f2 <_printf_i+0x182>
 800558c:	d822      	bhi.n	80055d4 <_printf_i+0x64>
 800558e:	2963      	cmp	r1, #99	; 0x63
 8005590:	d036      	beq.n	8005600 <_printf_i+0x90>
 8005592:	d80a      	bhi.n	80055aa <_printf_i+0x3a>
 8005594:	2900      	cmp	r1, #0
 8005596:	f000 80b9 	beq.w	800570c <_printf_i+0x19c>
 800559a:	2958      	cmp	r1, #88	; 0x58
 800559c:	f000 8083 	beq.w	80056a6 <_printf_i+0x136>
 80055a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055a8:	e032      	b.n	8005610 <_printf_i+0xa0>
 80055aa:	2964      	cmp	r1, #100	; 0x64
 80055ac:	d001      	beq.n	80055b2 <_printf_i+0x42>
 80055ae:	2969      	cmp	r1, #105	; 0x69
 80055b0:	d1f6      	bne.n	80055a0 <_printf_i+0x30>
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	0605      	lsls	r5, r0, #24
 80055b8:	f103 0104 	add.w	r1, r3, #4
 80055bc:	d52a      	bpl.n	8005614 <_printf_i+0xa4>
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da03      	bge.n	80055ce <_printf_i+0x5e>
 80055c6:	222d      	movs	r2, #45	; 0x2d
 80055c8:	425b      	negs	r3, r3
 80055ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055ce:	486f      	ldr	r0, [pc, #444]	; (800578c <_printf_i+0x21c>)
 80055d0:	220a      	movs	r2, #10
 80055d2:	e039      	b.n	8005648 <_printf_i+0xd8>
 80055d4:	2973      	cmp	r1, #115	; 0x73
 80055d6:	f000 809d 	beq.w	8005714 <_printf_i+0x1a4>
 80055da:	d808      	bhi.n	80055ee <_printf_i+0x7e>
 80055dc:	296f      	cmp	r1, #111	; 0x6f
 80055de:	d020      	beq.n	8005622 <_printf_i+0xb2>
 80055e0:	2970      	cmp	r1, #112	; 0x70
 80055e2:	d1dd      	bne.n	80055a0 <_printf_i+0x30>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f043 0320 	orr.w	r3, r3, #32
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	e003      	b.n	80055f6 <_printf_i+0x86>
 80055ee:	2975      	cmp	r1, #117	; 0x75
 80055f0:	d017      	beq.n	8005622 <_printf_i+0xb2>
 80055f2:	2978      	cmp	r1, #120	; 0x78
 80055f4:	d1d4      	bne.n	80055a0 <_printf_i+0x30>
 80055f6:	2378      	movs	r3, #120	; 0x78
 80055f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055fc:	4864      	ldr	r0, [pc, #400]	; (8005790 <_printf_i+0x220>)
 80055fe:	e055      	b.n	80056ac <_printf_i+0x13c>
 8005600:	6813      	ldr	r3, [r2, #0]
 8005602:	1d19      	adds	r1, r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6011      	str	r1, [r2, #0]
 8005608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800560c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005610:	2301      	movs	r3, #1
 8005612:	e08c      	b.n	800572e <_printf_i+0x1be>
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6011      	str	r1, [r2, #0]
 8005618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800561c:	bf18      	it	ne
 800561e:	b21b      	sxthne	r3, r3
 8005620:	e7cf      	b.n	80055c2 <_printf_i+0x52>
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	1d18      	adds	r0, r3, #4
 8005628:	6010      	str	r0, [r2, #0]
 800562a:	0628      	lsls	r0, r5, #24
 800562c:	d501      	bpl.n	8005632 <_printf_i+0xc2>
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	e002      	b.n	8005638 <_printf_i+0xc8>
 8005632:	0668      	lsls	r0, r5, #25
 8005634:	d5fb      	bpl.n	800562e <_printf_i+0xbe>
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	4854      	ldr	r0, [pc, #336]	; (800578c <_printf_i+0x21c>)
 800563a:	296f      	cmp	r1, #111	; 0x6f
 800563c:	bf14      	ite	ne
 800563e:	220a      	movne	r2, #10
 8005640:	2208      	moveq	r2, #8
 8005642:	2100      	movs	r1, #0
 8005644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005648:	6865      	ldr	r5, [r4, #4]
 800564a:	60a5      	str	r5, [r4, #8]
 800564c:	2d00      	cmp	r5, #0
 800564e:	f2c0 8095 	blt.w	800577c <_printf_i+0x20c>
 8005652:	6821      	ldr	r1, [r4, #0]
 8005654:	f021 0104 	bic.w	r1, r1, #4
 8005658:	6021      	str	r1, [r4, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d13d      	bne.n	80056da <_printf_i+0x16a>
 800565e:	2d00      	cmp	r5, #0
 8005660:	f040 808e 	bne.w	8005780 <_printf_i+0x210>
 8005664:	4665      	mov	r5, ip
 8005666:	2a08      	cmp	r2, #8
 8005668:	d10b      	bne.n	8005682 <_printf_i+0x112>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	07db      	lsls	r3, r3, #31
 800566e:	d508      	bpl.n	8005682 <_printf_i+0x112>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	6862      	ldr	r2, [r4, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	bfde      	ittt	le
 8005678:	2330      	movle	r3, #48	; 0x30
 800567a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800567e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005682:	ebac 0305 	sub.w	r3, ip, r5
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	f8cd 8000 	str.w	r8, [sp]
 800568c:	463b      	mov	r3, r7
 800568e:	aa03      	add	r2, sp, #12
 8005690:	4621      	mov	r1, r4
 8005692:	4630      	mov	r0, r6
 8005694:	f7ff fef6 	bl	8005484 <_printf_common>
 8005698:	3001      	adds	r0, #1
 800569a:	d14d      	bne.n	8005738 <_printf_i+0x1c8>
 800569c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056a0:	b005      	add	sp, #20
 80056a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056a6:	4839      	ldr	r0, [pc, #228]	; (800578c <_printf_i+0x21c>)
 80056a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	6821      	ldr	r1, [r4, #0]
 80056b0:	1d1d      	adds	r5, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6015      	str	r5, [r2, #0]
 80056b6:	060a      	lsls	r2, r1, #24
 80056b8:	d50b      	bpl.n	80056d2 <_printf_i+0x162>
 80056ba:	07ca      	lsls	r2, r1, #31
 80056bc:	bf44      	itt	mi
 80056be:	f041 0120 	orrmi.w	r1, r1, #32
 80056c2:	6021      	strmi	r1, [r4, #0]
 80056c4:	b91b      	cbnz	r3, 80056ce <_printf_i+0x15e>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	f022 0220 	bic.w	r2, r2, #32
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	2210      	movs	r2, #16
 80056d0:	e7b7      	b.n	8005642 <_printf_i+0xd2>
 80056d2:	064d      	lsls	r5, r1, #25
 80056d4:	bf48      	it	mi
 80056d6:	b29b      	uxthmi	r3, r3
 80056d8:	e7ef      	b.n	80056ba <_printf_i+0x14a>
 80056da:	4665      	mov	r5, ip
 80056dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e0:	fb02 3311 	mls	r3, r2, r1, r3
 80056e4:	5cc3      	ldrb	r3, [r0, r3]
 80056e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056ea:	460b      	mov	r3, r1
 80056ec:	2900      	cmp	r1, #0
 80056ee:	d1f5      	bne.n	80056dc <_printf_i+0x16c>
 80056f0:	e7b9      	b.n	8005666 <_printf_i+0xf6>
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	6961      	ldr	r1, [r4, #20]
 80056f8:	1d18      	adds	r0, r3, #4
 80056fa:	6010      	str	r0, [r2, #0]
 80056fc:	0628      	lsls	r0, r5, #24
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	d501      	bpl.n	8005706 <_printf_i+0x196>
 8005702:	6019      	str	r1, [r3, #0]
 8005704:	e002      	b.n	800570c <_printf_i+0x19c>
 8005706:	066a      	lsls	r2, r5, #25
 8005708:	d5fb      	bpl.n	8005702 <_printf_i+0x192>
 800570a:	8019      	strh	r1, [r3, #0]
 800570c:	2300      	movs	r3, #0
 800570e:	6123      	str	r3, [r4, #16]
 8005710:	4665      	mov	r5, ip
 8005712:	e7b9      	b.n	8005688 <_printf_i+0x118>
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	1d19      	adds	r1, r3, #4
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	681d      	ldr	r5, [r3, #0]
 800571c:	6862      	ldr	r2, [r4, #4]
 800571e:	2100      	movs	r1, #0
 8005720:	4628      	mov	r0, r5
 8005722:	f7fa fd5d 	bl	80001e0 <memchr>
 8005726:	b108      	cbz	r0, 800572c <_printf_i+0x1bc>
 8005728:	1b40      	subs	r0, r0, r5
 800572a:	6060      	str	r0, [r4, #4]
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	2300      	movs	r3, #0
 8005732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005736:	e7a7      	b.n	8005688 <_printf_i+0x118>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	462a      	mov	r2, r5
 800573c:	4639      	mov	r1, r7
 800573e:	4630      	mov	r0, r6
 8005740:	47c0      	blx	r8
 8005742:	3001      	adds	r0, #1
 8005744:	d0aa      	beq.n	800569c <_printf_i+0x12c>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	079b      	lsls	r3, r3, #30
 800574a:	d413      	bmi.n	8005774 <_printf_i+0x204>
 800574c:	68e0      	ldr	r0, [r4, #12]
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	4298      	cmp	r0, r3
 8005752:	bfb8      	it	lt
 8005754:	4618      	movlt	r0, r3
 8005756:	e7a3      	b.n	80056a0 <_printf_i+0x130>
 8005758:	2301      	movs	r3, #1
 800575a:	464a      	mov	r2, r9
 800575c:	4639      	mov	r1, r7
 800575e:	4630      	mov	r0, r6
 8005760:	47c0      	blx	r8
 8005762:	3001      	adds	r0, #1
 8005764:	d09a      	beq.n	800569c <_printf_i+0x12c>
 8005766:	3501      	adds	r5, #1
 8005768:	68e3      	ldr	r3, [r4, #12]
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	42ab      	cmp	r3, r5
 8005770:	dcf2      	bgt.n	8005758 <_printf_i+0x1e8>
 8005772:	e7eb      	b.n	800574c <_printf_i+0x1dc>
 8005774:	2500      	movs	r5, #0
 8005776:	f104 0919 	add.w	r9, r4, #25
 800577a:	e7f5      	b.n	8005768 <_printf_i+0x1f8>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ac      	bne.n	80056da <_printf_i+0x16a>
 8005780:	7803      	ldrb	r3, [r0, #0]
 8005782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005786:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800578a:	e76c      	b.n	8005666 <_printf_i+0xf6>
 800578c:	08009316 	.word	0x08009316
 8005790:	08009327 	.word	0x08009327

08005794 <_scanf_float>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	469a      	mov	sl, r3
 800579a:	688b      	ldr	r3, [r1, #8]
 800579c:	4616      	mov	r6, r2
 800579e:	1e5a      	subs	r2, r3, #1
 80057a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80057a4:	b087      	sub	sp, #28
 80057a6:	bf83      	ittte	hi
 80057a8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80057ac:	189b      	addhi	r3, r3, r2
 80057ae:	9301      	strhi	r3, [sp, #4]
 80057b0:	2300      	movls	r3, #0
 80057b2:	bf86      	itte	hi
 80057b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80057b8:	608b      	strhi	r3, [r1, #8]
 80057ba:	9301      	strls	r3, [sp, #4]
 80057bc:	680b      	ldr	r3, [r1, #0]
 80057be:	4688      	mov	r8, r1
 80057c0:	f04f 0b00 	mov.w	fp, #0
 80057c4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80057c8:	f848 3b1c 	str.w	r3, [r8], #28
 80057cc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80057d0:	4607      	mov	r7, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4645      	mov	r5, r8
 80057d6:	465a      	mov	r2, fp
 80057d8:	46d9      	mov	r9, fp
 80057da:	f8cd b008 	str.w	fp, [sp, #8]
 80057de:	68a1      	ldr	r1, [r4, #8]
 80057e0:	b181      	cbz	r1, 8005804 <_scanf_float+0x70>
 80057e2:	6833      	ldr	r3, [r6, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b49      	cmp	r3, #73	; 0x49
 80057e8:	d071      	beq.n	80058ce <_scanf_float+0x13a>
 80057ea:	d84d      	bhi.n	8005888 <_scanf_float+0xf4>
 80057ec:	2b39      	cmp	r3, #57	; 0x39
 80057ee:	d840      	bhi.n	8005872 <_scanf_float+0xde>
 80057f0:	2b31      	cmp	r3, #49	; 0x31
 80057f2:	f080 8088 	bcs.w	8005906 <_scanf_float+0x172>
 80057f6:	2b2d      	cmp	r3, #45	; 0x2d
 80057f8:	f000 8090 	beq.w	800591c <_scanf_float+0x188>
 80057fc:	d815      	bhi.n	800582a <_scanf_float+0x96>
 80057fe:	2b2b      	cmp	r3, #43	; 0x2b
 8005800:	f000 808c 	beq.w	800591c <_scanf_float+0x188>
 8005804:	f1b9 0f00 	cmp.w	r9, #0
 8005808:	d003      	beq.n	8005812 <_scanf_float+0x7e>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	3a01      	subs	r2, #1
 8005814:	2a01      	cmp	r2, #1
 8005816:	f200 80ea 	bhi.w	80059ee <_scanf_float+0x25a>
 800581a:	4545      	cmp	r5, r8
 800581c:	f200 80dc 	bhi.w	80059d8 <_scanf_float+0x244>
 8005820:	2601      	movs	r6, #1
 8005822:	4630      	mov	r0, r6
 8005824:	b007      	add	sp, #28
 8005826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	2b2e      	cmp	r3, #46	; 0x2e
 800582c:	f000 809f 	beq.w	800596e <_scanf_float+0x1da>
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d1e7      	bne.n	8005804 <_scanf_float+0x70>
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	f410 7f80 	tst.w	r0, #256	; 0x100
 800583a:	d064      	beq.n	8005906 <_scanf_float+0x172>
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005842:	6020      	str	r0, [r4, #0]
 8005844:	f109 0901 	add.w	r9, r9, #1
 8005848:	b11b      	cbz	r3, 8005852 <_scanf_float+0xbe>
 800584a:	3b01      	subs	r3, #1
 800584c:	3101      	adds	r1, #1
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	60a1      	str	r1, [r4, #8]
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	3b01      	subs	r3, #1
 8005856:	60a3      	str	r3, [r4, #8]
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	3301      	adds	r3, #1
 800585c:	6123      	str	r3, [r4, #16]
 800585e:	6873      	ldr	r3, [r6, #4]
 8005860:	3b01      	subs	r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	6073      	str	r3, [r6, #4]
 8005866:	f340 80ac 	ble.w	80059c2 <_scanf_float+0x22e>
 800586a:	6833      	ldr	r3, [r6, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	6033      	str	r3, [r6, #0]
 8005870:	e7b5      	b.n	80057de <_scanf_float+0x4a>
 8005872:	2b45      	cmp	r3, #69	; 0x45
 8005874:	f000 8085 	beq.w	8005982 <_scanf_float+0x1ee>
 8005878:	2b46      	cmp	r3, #70	; 0x46
 800587a:	d06a      	beq.n	8005952 <_scanf_float+0x1be>
 800587c:	2b41      	cmp	r3, #65	; 0x41
 800587e:	d1c1      	bne.n	8005804 <_scanf_float+0x70>
 8005880:	2a01      	cmp	r2, #1
 8005882:	d1bf      	bne.n	8005804 <_scanf_float+0x70>
 8005884:	2202      	movs	r2, #2
 8005886:	e046      	b.n	8005916 <_scanf_float+0x182>
 8005888:	2b65      	cmp	r3, #101	; 0x65
 800588a:	d07a      	beq.n	8005982 <_scanf_float+0x1ee>
 800588c:	d818      	bhi.n	80058c0 <_scanf_float+0x12c>
 800588e:	2b54      	cmp	r3, #84	; 0x54
 8005890:	d066      	beq.n	8005960 <_scanf_float+0x1cc>
 8005892:	d811      	bhi.n	80058b8 <_scanf_float+0x124>
 8005894:	2b4e      	cmp	r3, #78	; 0x4e
 8005896:	d1b5      	bne.n	8005804 <_scanf_float+0x70>
 8005898:	2a00      	cmp	r2, #0
 800589a:	d146      	bne.n	800592a <_scanf_float+0x196>
 800589c:	f1b9 0f00 	cmp.w	r9, #0
 80058a0:	d145      	bne.n	800592e <_scanf_float+0x19a>
 80058a2:	6821      	ldr	r1, [r4, #0]
 80058a4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80058a8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80058ac:	d13f      	bne.n	800592e <_scanf_float+0x19a>
 80058ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80058b2:	6021      	str	r1, [r4, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	e02e      	b.n	8005916 <_scanf_float+0x182>
 80058b8:	2b59      	cmp	r3, #89	; 0x59
 80058ba:	d01e      	beq.n	80058fa <_scanf_float+0x166>
 80058bc:	2b61      	cmp	r3, #97	; 0x61
 80058be:	e7de      	b.n	800587e <_scanf_float+0xea>
 80058c0:	2b6e      	cmp	r3, #110	; 0x6e
 80058c2:	d0e9      	beq.n	8005898 <_scanf_float+0x104>
 80058c4:	d815      	bhi.n	80058f2 <_scanf_float+0x15e>
 80058c6:	2b66      	cmp	r3, #102	; 0x66
 80058c8:	d043      	beq.n	8005952 <_scanf_float+0x1be>
 80058ca:	2b69      	cmp	r3, #105	; 0x69
 80058cc:	d19a      	bne.n	8005804 <_scanf_float+0x70>
 80058ce:	f1bb 0f00 	cmp.w	fp, #0
 80058d2:	d138      	bne.n	8005946 <_scanf_float+0x1b2>
 80058d4:	f1b9 0f00 	cmp.w	r9, #0
 80058d8:	d197      	bne.n	800580a <_scanf_float+0x76>
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80058e0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80058e4:	d195      	bne.n	8005812 <_scanf_float+0x7e>
 80058e6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80058ea:	6021      	str	r1, [r4, #0]
 80058ec:	f04f 0b01 	mov.w	fp, #1
 80058f0:	e011      	b.n	8005916 <_scanf_float+0x182>
 80058f2:	2b74      	cmp	r3, #116	; 0x74
 80058f4:	d034      	beq.n	8005960 <_scanf_float+0x1cc>
 80058f6:	2b79      	cmp	r3, #121	; 0x79
 80058f8:	d184      	bne.n	8005804 <_scanf_float+0x70>
 80058fa:	f1bb 0f07 	cmp.w	fp, #7
 80058fe:	d181      	bne.n	8005804 <_scanf_float+0x70>
 8005900:	f04f 0b08 	mov.w	fp, #8
 8005904:	e007      	b.n	8005916 <_scanf_float+0x182>
 8005906:	eb12 0f0b 	cmn.w	r2, fp
 800590a:	f47f af7b 	bne.w	8005804 <_scanf_float+0x70>
 800590e:	6821      	ldr	r1, [r4, #0]
 8005910:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005914:	6021      	str	r1, [r4, #0]
 8005916:	702b      	strb	r3, [r5, #0]
 8005918:	3501      	adds	r5, #1
 800591a:	e79a      	b.n	8005852 <_scanf_float+0xbe>
 800591c:	6821      	ldr	r1, [r4, #0]
 800591e:	0608      	lsls	r0, r1, #24
 8005920:	f57f af70 	bpl.w	8005804 <_scanf_float+0x70>
 8005924:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005928:	e7f4      	b.n	8005914 <_scanf_float+0x180>
 800592a:	2a02      	cmp	r2, #2
 800592c:	d047      	beq.n	80059be <_scanf_float+0x22a>
 800592e:	f1bb 0f01 	cmp.w	fp, #1
 8005932:	d003      	beq.n	800593c <_scanf_float+0x1a8>
 8005934:	f1bb 0f04 	cmp.w	fp, #4
 8005938:	f47f af64 	bne.w	8005804 <_scanf_float+0x70>
 800593c:	f10b 0b01 	add.w	fp, fp, #1
 8005940:	fa5f fb8b 	uxtb.w	fp, fp
 8005944:	e7e7      	b.n	8005916 <_scanf_float+0x182>
 8005946:	f1bb 0f03 	cmp.w	fp, #3
 800594a:	d0f7      	beq.n	800593c <_scanf_float+0x1a8>
 800594c:	f1bb 0f05 	cmp.w	fp, #5
 8005950:	e7f2      	b.n	8005938 <_scanf_float+0x1a4>
 8005952:	f1bb 0f02 	cmp.w	fp, #2
 8005956:	f47f af55 	bne.w	8005804 <_scanf_float+0x70>
 800595a:	f04f 0b03 	mov.w	fp, #3
 800595e:	e7da      	b.n	8005916 <_scanf_float+0x182>
 8005960:	f1bb 0f06 	cmp.w	fp, #6
 8005964:	f47f af4e 	bne.w	8005804 <_scanf_float+0x70>
 8005968:	f04f 0b07 	mov.w	fp, #7
 800596c:	e7d3      	b.n	8005916 <_scanf_float+0x182>
 800596e:	6821      	ldr	r1, [r4, #0]
 8005970:	0588      	lsls	r0, r1, #22
 8005972:	f57f af47 	bpl.w	8005804 <_scanf_float+0x70>
 8005976:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800597a:	6021      	str	r1, [r4, #0]
 800597c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005980:	e7c9      	b.n	8005916 <_scanf_float+0x182>
 8005982:	6821      	ldr	r1, [r4, #0]
 8005984:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005988:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800598c:	d006      	beq.n	800599c <_scanf_float+0x208>
 800598e:	0548      	lsls	r0, r1, #21
 8005990:	f57f af38 	bpl.w	8005804 <_scanf_float+0x70>
 8005994:	f1b9 0f00 	cmp.w	r9, #0
 8005998:	f43f af3b 	beq.w	8005812 <_scanf_float+0x7e>
 800599c:	0588      	lsls	r0, r1, #22
 800599e:	bf58      	it	pl
 80059a0:	9802      	ldrpl	r0, [sp, #8]
 80059a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80059a6:	bf58      	it	pl
 80059a8:	eba9 0000 	subpl.w	r0, r9, r0
 80059ac:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80059b0:	bf58      	it	pl
 80059b2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80059b6:	6021      	str	r1, [r4, #0]
 80059b8:	f04f 0900 	mov.w	r9, #0
 80059bc:	e7ab      	b.n	8005916 <_scanf_float+0x182>
 80059be:	2203      	movs	r2, #3
 80059c0:	e7a9      	b.n	8005916 <_scanf_float+0x182>
 80059c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80059c6:	9205      	str	r2, [sp, #20]
 80059c8:	4631      	mov	r1, r6
 80059ca:	4638      	mov	r0, r7
 80059cc:	4798      	blx	r3
 80059ce:	9a05      	ldr	r2, [sp, #20]
 80059d0:	2800      	cmp	r0, #0
 80059d2:	f43f af04 	beq.w	80057de <_scanf_float+0x4a>
 80059d6:	e715      	b.n	8005804 <_scanf_float+0x70>
 80059d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80059e0:	4632      	mov	r2, r6
 80059e2:	4638      	mov	r0, r7
 80059e4:	4798      	blx	r3
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	e715      	b.n	800581a <_scanf_float+0x86>
 80059ee:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80059f2:	2b06      	cmp	r3, #6
 80059f4:	d80a      	bhi.n	8005a0c <_scanf_float+0x278>
 80059f6:	f1bb 0f02 	cmp.w	fp, #2
 80059fa:	d968      	bls.n	8005ace <_scanf_float+0x33a>
 80059fc:	f1ab 0b03 	sub.w	fp, fp, #3
 8005a00:	fa5f fb8b 	uxtb.w	fp, fp
 8005a04:	eba5 0b0b 	sub.w	fp, r5, fp
 8005a08:	455d      	cmp	r5, fp
 8005a0a:	d14b      	bne.n	8005aa4 <_scanf_float+0x310>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	05da      	lsls	r2, r3, #23
 8005a10:	d51f      	bpl.n	8005a52 <_scanf_float+0x2be>
 8005a12:	055b      	lsls	r3, r3, #21
 8005a14:	d468      	bmi.n	8005ae8 <_scanf_float+0x354>
 8005a16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	2965      	cmp	r1, #101	; 0x65
 8005a1e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005a22:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	d00d      	beq.n	8005a46 <_scanf_float+0x2b2>
 8005a2a:	2945      	cmp	r1, #69	; 0x45
 8005a2c:	d00b      	beq.n	8005a46 <_scanf_float+0x2b2>
 8005a2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a32:	4632      	mov	r2, r6
 8005a34:	4638      	mov	r0, r7
 8005a36:	4798      	blx	r3
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	f1a5 0b02 	sub.w	fp, r5, #2
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a4a:	4632      	mov	r2, r6
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	4798      	blx	r3
 8005a50:	465d      	mov	r5, fp
 8005a52:	6826      	ldr	r6, [r4, #0]
 8005a54:	f016 0610 	ands.w	r6, r6, #16
 8005a58:	d17a      	bne.n	8005b50 <_scanf_float+0x3bc>
 8005a5a:	702e      	strb	r6, [r5, #0]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a66:	d142      	bne.n	8005aee <_scanf_float+0x35a>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	eba9 0303 	sub.w	r3, r9, r3
 8005a6e:	425a      	negs	r2, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d149      	bne.n	8005b08 <_scanf_float+0x374>
 8005a74:	2200      	movs	r2, #0
 8005a76:	4641      	mov	r1, r8
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f000 febd 	bl	80067f8 <_strtod_r>
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	f8da 3000 	ldr.w	r3, [sl]
 8005a84:	f015 0f02 	tst.w	r5, #2
 8005a88:	f103 0204 	add.w	r2, r3, #4
 8005a8c:	ec59 8b10 	vmov	r8, r9, d0
 8005a90:	f8ca 2000 	str.w	r2, [sl]
 8005a94:	d043      	beq.n	8005b1e <_scanf_float+0x38a>
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	e9c3 8900 	strd	r8, r9, [r3]
 8005a9c:	68e3      	ldr	r3, [r4, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60e3      	str	r3, [r4, #12]
 8005aa2:	e6be      	b.n	8005822 <_scanf_float+0x8e>
 8005aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005aa8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005aac:	4632      	mov	r2, r6
 8005aae:	4638      	mov	r0, r7
 8005ab0:	4798      	blx	r3
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	6123      	str	r3, [r4, #16]
 8005ab8:	e7a6      	b.n	8005a08 <_scanf_float+0x274>
 8005aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005abe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	4798      	blx	r3
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	6123      	str	r3, [r4, #16]
 8005ace:	4545      	cmp	r5, r8
 8005ad0:	d8f3      	bhi.n	8005aba <_scanf_float+0x326>
 8005ad2:	e6a5      	b.n	8005820 <_scanf_float+0x8c>
 8005ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ad8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005adc:	4632      	mov	r2, r6
 8005ade:	4638      	mov	r0, r7
 8005ae0:	4798      	blx	r3
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	4545      	cmp	r5, r8
 8005aea:	d8f3      	bhi.n	8005ad4 <_scanf_float+0x340>
 8005aec:	e698      	b.n	8005820 <_scanf_float+0x8c>
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0bf      	beq.n	8005a74 <_scanf_float+0x2e0>
 8005af4:	9904      	ldr	r1, [sp, #16]
 8005af6:	230a      	movs	r3, #10
 8005af8:	4632      	mov	r2, r6
 8005afa:	3101      	adds	r1, #1
 8005afc:	4638      	mov	r0, r7
 8005afe:	f000 ff07 	bl	8006910 <_strtol_r>
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	9d04      	ldr	r5, [sp, #16]
 8005b06:	1ac2      	subs	r2, r0, r3
 8005b08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005b0c:	429d      	cmp	r5, r3
 8005b0e:	bf28      	it	cs
 8005b10:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005b14:	490f      	ldr	r1, [pc, #60]	; (8005b54 <_scanf_float+0x3c0>)
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f83c 	bl	8005b94 <siprintf>
 8005b1c:	e7aa      	b.n	8005a74 <_scanf_float+0x2e0>
 8005b1e:	f015 0504 	ands.w	r5, r5, #4
 8005b22:	d1b8      	bne.n	8005a96 <_scanf_float+0x302>
 8005b24:	681f      	ldr	r7, [r3, #0]
 8005b26:	ee10 2a10 	vmov	r2, s0
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	ee10 0a10 	vmov	r0, s0
 8005b30:	4649      	mov	r1, r9
 8005b32:	f7fa fffb 	bl	8000b2c <__aeabi_dcmpun>
 8005b36:	b128      	cbz	r0, 8005b44 <_scanf_float+0x3b0>
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 f825 	bl	8005b88 <nanf>
 8005b3e:	ed87 0a00 	vstr	s0, [r7]
 8005b42:	e7ab      	b.n	8005a9c <_scanf_float+0x308>
 8005b44:	4640      	mov	r0, r8
 8005b46:	4649      	mov	r1, r9
 8005b48:	f7fb f84e 	bl	8000be8 <__aeabi_d2f>
 8005b4c:	6038      	str	r0, [r7, #0]
 8005b4e:	e7a5      	b.n	8005a9c <_scanf_float+0x308>
 8005b50:	2600      	movs	r6, #0
 8005b52:	e666      	b.n	8005822 <_scanf_float+0x8e>
 8005b54:	08009338 	.word	0x08009338

08005b58 <iprintf>:
 8005b58:	b40f      	push	{r0, r1, r2, r3}
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <iprintf+0x2c>)
 8005b5c:	b513      	push	{r0, r1, r4, lr}
 8005b5e:	681c      	ldr	r4, [r3, #0]
 8005b60:	b124      	cbz	r4, 8005b6c <iprintf+0x14>
 8005b62:	69a3      	ldr	r3, [r4, #24]
 8005b64:	b913      	cbnz	r3, 8005b6c <iprintf+0x14>
 8005b66:	4620      	mov	r0, r4
 8005b68:	f001 fd6a 	bl	8007640 <__sinit>
 8005b6c:	ab05      	add	r3, sp, #20
 8005b6e:	9a04      	ldr	r2, [sp, #16]
 8005b70:	68a1      	ldr	r1, [r4, #8]
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	4620      	mov	r0, r4
 8005b76:	f002 ff7d 	bl	8008a74 <_vfiprintf_r>
 8005b7a:	b002      	add	sp, #8
 8005b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b80:	b004      	add	sp, #16
 8005b82:	4770      	bx	lr
 8005b84:	20000014 	.word	0x20000014

08005b88 <nanf>:
 8005b88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b90 <nanf+0x8>
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	7fc00000 	.word	0x7fc00000

08005b94 <siprintf>:
 8005b94:	b40e      	push	{r1, r2, r3}
 8005b96:	b500      	push	{lr}
 8005b98:	b09c      	sub	sp, #112	; 0x70
 8005b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b9c:	9002      	str	r0, [sp, #8]
 8005b9e:	9006      	str	r0, [sp, #24]
 8005ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ba4:	4809      	ldr	r0, [pc, #36]	; (8005bcc <siprintf+0x38>)
 8005ba6:	9107      	str	r1, [sp, #28]
 8005ba8:	9104      	str	r1, [sp, #16]
 8005baa:	4909      	ldr	r1, [pc, #36]	; (8005bd0 <siprintf+0x3c>)
 8005bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb0:	9105      	str	r1, [sp, #20]
 8005bb2:	6800      	ldr	r0, [r0, #0]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	a902      	add	r1, sp, #8
 8005bb8:	f002 fe3a 	bl	8008830 <_svfiprintf_r>
 8005bbc:	9b02      	ldr	r3, [sp, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	b01c      	add	sp, #112	; 0x70
 8005bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc8:	b003      	add	sp, #12
 8005bca:	4770      	bx	lr
 8005bcc:	20000014 	.word	0x20000014
 8005bd0:	ffff0208 	.word	0xffff0208

08005bd4 <sulp>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	460d      	mov	r5, r1
 8005bda:	ec45 4b10 	vmov	d0, r4, r5
 8005bde:	4616      	mov	r6, r2
 8005be0:	f002 fbe2 	bl	80083a8 <__ulp>
 8005be4:	ec51 0b10 	vmov	r0, r1, d0
 8005be8:	b17e      	cbz	r6, 8005c0a <sulp+0x36>
 8005bea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005bee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dd09      	ble.n	8005c0a <sulp+0x36>
 8005bf6:	051b      	lsls	r3, r3, #20
 8005bf8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005bfc:	2400      	movs	r4, #0
 8005bfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	f7fa fcf7 	bl	80005f8 <__aeabi_dmul>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	0000      	movs	r0, r0
	...

08005c10 <_strtod_l>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	461f      	mov	r7, r3
 8005c16:	b0a1      	sub	sp, #132	; 0x84
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4681      	mov	r9, r0
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	460e      	mov	r6, r1
 8005c20:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c22:	931c      	str	r3, [sp, #112]	; 0x70
 8005c24:	f002 f8bf 	bl	8007da6 <__localeconv_l>
 8005c28:	4680      	mov	r8, r0
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	f7fa fad0 	bl	80001d0 <strlen>
 8005c30:	f04f 0a00 	mov.w	sl, #0
 8005c34:	4604      	mov	r4, r0
 8005c36:	f04f 0b00 	mov.w	fp, #0
 8005c3a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	2a0d      	cmp	r2, #13
 8005c42:	d832      	bhi.n	8005caa <_strtod_l+0x9a>
 8005c44:	2a09      	cmp	r2, #9
 8005c46:	d236      	bcs.n	8005cb6 <_strtod_l+0xa6>
 8005c48:	2a00      	cmp	r2, #0
 8005c4a:	d03e      	beq.n	8005cca <_strtod_l+0xba>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005c52:	782b      	ldrb	r3, [r5, #0]
 8005c54:	2b30      	cmp	r3, #48	; 0x30
 8005c56:	f040 80ac 	bne.w	8005db2 <_strtod_l+0x1a2>
 8005c5a:	786b      	ldrb	r3, [r5, #1]
 8005c5c:	2b58      	cmp	r3, #88	; 0x58
 8005c5e:	d001      	beq.n	8005c64 <_strtod_l+0x54>
 8005c60:	2b78      	cmp	r3, #120	; 0x78
 8005c62:	d167      	bne.n	8005d34 <_strtod_l+0x124>
 8005c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	ab1c      	add	r3, sp, #112	; 0x70
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	9702      	str	r7, [sp, #8]
 8005c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c70:	4a88      	ldr	r2, [pc, #544]	; (8005e94 <_strtod_l+0x284>)
 8005c72:	a91b      	add	r1, sp, #108	; 0x6c
 8005c74:	4648      	mov	r0, r9
 8005c76:	f001 fdbc 	bl	80077f2 <__gethex>
 8005c7a:	f010 0407 	ands.w	r4, r0, #7
 8005c7e:	4606      	mov	r6, r0
 8005c80:	d005      	beq.n	8005c8e <_strtod_l+0x7e>
 8005c82:	2c06      	cmp	r4, #6
 8005c84:	d12b      	bne.n	8005cde <_strtod_l+0xce>
 8005c86:	3501      	adds	r5, #1
 8005c88:	2300      	movs	r3, #0
 8005c8a:	951b      	str	r5, [sp, #108]	; 0x6c
 8005c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8005c8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 859a 	bne.w	80067ca <_strtod_l+0xbba>
 8005c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c98:	b1e3      	cbz	r3, 8005cd4 <_strtod_l+0xc4>
 8005c9a:	4652      	mov	r2, sl
 8005c9c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ca0:	ec43 2b10 	vmov	d0, r2, r3
 8005ca4:	b021      	add	sp, #132	; 0x84
 8005ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005caa:	2a2b      	cmp	r2, #43	; 0x2b
 8005cac:	d015      	beq.n	8005cda <_strtod_l+0xca>
 8005cae:	2a2d      	cmp	r2, #45	; 0x2d
 8005cb0:	d004      	beq.n	8005cbc <_strtod_l+0xac>
 8005cb2:	2a20      	cmp	r2, #32
 8005cb4:	d1ca      	bne.n	8005c4c <_strtod_l+0x3c>
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cba:	e7bf      	b.n	8005c3c <_strtod_l+0x2c>
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	920d      	str	r2, [sp, #52]	; 0x34
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1c2      	bne.n	8005c50 <_strtod_l+0x40>
 8005cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ccc:	961b      	str	r6, [sp, #108]	; 0x6c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f040 8579 	bne.w	80067c6 <_strtod_l+0xbb6>
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	465b      	mov	r3, fp
 8005cd8:	e7e2      	b.n	8005ca0 <_strtod_l+0x90>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	e7ef      	b.n	8005cbe <_strtod_l+0xae>
 8005cde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ce0:	b13a      	cbz	r2, 8005cf2 <_strtod_l+0xe2>
 8005ce2:	2135      	movs	r1, #53	; 0x35
 8005ce4:	a81e      	add	r0, sp, #120	; 0x78
 8005ce6:	f002 fc57 	bl	8008598 <__copybits>
 8005cea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cec:	4648      	mov	r0, r9
 8005cee:	f002 f8c4 	bl	8007e7a <_Bfree>
 8005cf2:	3c01      	subs	r4, #1
 8005cf4:	2c04      	cmp	r4, #4
 8005cf6:	d806      	bhi.n	8005d06 <_strtod_l+0xf6>
 8005cf8:	e8df f004 	tbb	[pc, r4]
 8005cfc:	1714030a 	.word	0x1714030a
 8005d00:	0a          	.byte	0x0a
 8005d01:	00          	.byte	0x00
 8005d02:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005d06:	0730      	lsls	r0, r6, #28
 8005d08:	d5c1      	bpl.n	8005c8e <_strtod_l+0x7e>
 8005d0a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005d0e:	e7be      	b.n	8005c8e <_strtod_l+0x7e>
 8005d10:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005d14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005d16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d1a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005d1e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d22:	e7f0      	b.n	8005d06 <_strtod_l+0xf6>
 8005d24:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005e98 <_strtod_l+0x288>
 8005d28:	e7ed      	b.n	8005d06 <_strtod_l+0xf6>
 8005d2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005d2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005d32:	e7e8      	b.n	8005d06 <_strtod_l+0xf6>
 8005d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b30      	cmp	r3, #48	; 0x30
 8005d3e:	d0f9      	beq.n	8005d34 <_strtod_l+0x124>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0a4      	beq.n	8005c8e <_strtod_l+0x7e>
 8005d44:	2301      	movs	r3, #1
 8005d46:	2500      	movs	r5, #0
 8005d48:	9306      	str	r3, [sp, #24]
 8005d4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d4c:	9308      	str	r3, [sp, #32]
 8005d4e:	9507      	str	r5, [sp, #28]
 8005d50:	9505      	str	r5, [sp, #20]
 8005d52:	220a      	movs	r2, #10
 8005d54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005d56:	7807      	ldrb	r7, [r0, #0]
 8005d58:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005d5c:	b2d9      	uxtb	r1, r3
 8005d5e:	2909      	cmp	r1, #9
 8005d60:	d929      	bls.n	8005db6 <_strtod_l+0x1a6>
 8005d62:	4622      	mov	r2, r4
 8005d64:	f8d8 1000 	ldr.w	r1, [r8]
 8005d68:	f002 ffed 	bl	8008d46 <strncmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d031      	beq.n	8005dd4 <_strtod_l+0x1c4>
 8005d70:	2000      	movs	r0, #0
 8005d72:	9c05      	ldr	r4, [sp, #20]
 8005d74:	9004      	str	r0, [sp, #16]
 8005d76:	463b      	mov	r3, r7
 8005d78:	4602      	mov	r2, r0
 8005d7a:	2b65      	cmp	r3, #101	; 0x65
 8005d7c:	d001      	beq.n	8005d82 <_strtod_l+0x172>
 8005d7e:	2b45      	cmp	r3, #69	; 0x45
 8005d80:	d114      	bne.n	8005dac <_strtod_l+0x19c>
 8005d82:	b924      	cbnz	r4, 8005d8e <_strtod_l+0x17e>
 8005d84:	b910      	cbnz	r0, 8005d8c <_strtod_l+0x17c>
 8005d86:	9b06      	ldr	r3, [sp, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d09e      	beq.n	8005cca <_strtod_l+0xba>
 8005d8c:	2400      	movs	r4, #0
 8005d8e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005d90:	1c73      	adds	r3, r6, #1
 8005d92:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d94:	7873      	ldrb	r3, [r6, #1]
 8005d96:	2b2b      	cmp	r3, #43	; 0x2b
 8005d98:	d078      	beq.n	8005e8c <_strtod_l+0x27c>
 8005d9a:	2b2d      	cmp	r3, #45	; 0x2d
 8005d9c:	d070      	beq.n	8005e80 <_strtod_l+0x270>
 8005d9e:	f04f 0c00 	mov.w	ip, #0
 8005da2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005da6:	2f09      	cmp	r7, #9
 8005da8:	d97c      	bls.n	8005ea4 <_strtod_l+0x294>
 8005daa:	961b      	str	r6, [sp, #108]	; 0x6c
 8005dac:	f04f 0e00 	mov.w	lr, #0
 8005db0:	e09a      	b.n	8005ee8 <_strtod_l+0x2d8>
 8005db2:	2300      	movs	r3, #0
 8005db4:	e7c7      	b.n	8005d46 <_strtod_l+0x136>
 8005db6:	9905      	ldr	r1, [sp, #20]
 8005db8:	2908      	cmp	r1, #8
 8005dba:	bfdd      	ittte	le
 8005dbc:	9907      	ldrle	r1, [sp, #28]
 8005dbe:	fb02 3301 	mlale	r3, r2, r1, r3
 8005dc2:	9307      	strle	r3, [sp, #28]
 8005dc4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005dc8:	9b05      	ldr	r3, [sp, #20]
 8005dca:	3001      	adds	r0, #1
 8005dcc:	3301      	adds	r3, #1
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	901b      	str	r0, [sp, #108]	; 0x6c
 8005dd2:	e7bf      	b.n	8005d54 <_strtod_l+0x144>
 8005dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dd6:	191a      	adds	r2, r3, r4
 8005dd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005dda:	9a05      	ldr	r2, [sp, #20]
 8005ddc:	5d1b      	ldrb	r3, [r3, r4]
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	d037      	beq.n	8005e52 <_strtod_l+0x242>
 8005de2:	9c05      	ldr	r4, [sp, #20]
 8005de4:	4602      	mov	r2, r0
 8005de6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005dea:	2909      	cmp	r1, #9
 8005dec:	d913      	bls.n	8005e16 <_strtod_l+0x206>
 8005dee:	2101      	movs	r1, #1
 8005df0:	9104      	str	r1, [sp, #16]
 8005df2:	e7c2      	b.n	8005d7a <_strtod_l+0x16a>
 8005df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	2b30      	cmp	r3, #48	; 0x30
 8005e00:	d0f8      	beq.n	8005df4 <_strtod_l+0x1e4>
 8005e02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005e06:	2a08      	cmp	r2, #8
 8005e08:	f200 84e4 	bhi.w	80067d4 <_strtod_l+0xbc4>
 8005e0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005e0e:	9208      	str	r2, [sp, #32]
 8005e10:	4602      	mov	r2, r0
 8005e12:	2000      	movs	r0, #0
 8005e14:	4604      	mov	r4, r0
 8005e16:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005e1a:	f100 0101 	add.w	r1, r0, #1
 8005e1e:	d012      	beq.n	8005e46 <_strtod_l+0x236>
 8005e20:	440a      	add	r2, r1
 8005e22:	eb00 0c04 	add.w	ip, r0, r4
 8005e26:	4621      	mov	r1, r4
 8005e28:	270a      	movs	r7, #10
 8005e2a:	458c      	cmp	ip, r1
 8005e2c:	d113      	bne.n	8005e56 <_strtod_l+0x246>
 8005e2e:	1821      	adds	r1, r4, r0
 8005e30:	2908      	cmp	r1, #8
 8005e32:	f104 0401 	add.w	r4, r4, #1
 8005e36:	4404      	add	r4, r0
 8005e38:	dc19      	bgt.n	8005e6e <_strtod_l+0x25e>
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	210a      	movs	r1, #10
 8005e3e:	fb01 e303 	mla	r3, r1, r3, lr
 8005e42:	9307      	str	r3, [sp, #28]
 8005e44:	2100      	movs	r1, #0
 8005e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e48:	1c58      	adds	r0, r3, #1
 8005e4a:	901b      	str	r0, [sp, #108]	; 0x6c
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	4608      	mov	r0, r1
 8005e50:	e7c9      	b.n	8005de6 <_strtod_l+0x1d6>
 8005e52:	9805      	ldr	r0, [sp, #20]
 8005e54:	e7d3      	b.n	8005dfe <_strtod_l+0x1ee>
 8005e56:	2908      	cmp	r1, #8
 8005e58:	f101 0101 	add.w	r1, r1, #1
 8005e5c:	dc03      	bgt.n	8005e66 <_strtod_l+0x256>
 8005e5e:	9b07      	ldr	r3, [sp, #28]
 8005e60:	437b      	muls	r3, r7
 8005e62:	9307      	str	r3, [sp, #28]
 8005e64:	e7e1      	b.n	8005e2a <_strtod_l+0x21a>
 8005e66:	2910      	cmp	r1, #16
 8005e68:	bfd8      	it	le
 8005e6a:	437d      	mulle	r5, r7
 8005e6c:	e7dd      	b.n	8005e2a <_strtod_l+0x21a>
 8005e6e:	2c10      	cmp	r4, #16
 8005e70:	bfdc      	itt	le
 8005e72:	210a      	movle	r1, #10
 8005e74:	fb01 e505 	mlale	r5, r1, r5, lr
 8005e78:	e7e4      	b.n	8005e44 <_strtod_l+0x234>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	e781      	b.n	8005d84 <_strtod_l+0x174>
 8005e80:	f04f 0c01 	mov.w	ip, #1
 8005e84:	1cb3      	adds	r3, r6, #2
 8005e86:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e88:	78b3      	ldrb	r3, [r6, #2]
 8005e8a:	e78a      	b.n	8005da2 <_strtod_l+0x192>
 8005e8c:	f04f 0c00 	mov.w	ip, #0
 8005e90:	e7f8      	b.n	8005e84 <_strtod_l+0x274>
 8005e92:	bf00      	nop
 8005e94:	08009340 	.word	0x08009340
 8005e98:	7ff00000 	.word	0x7ff00000
 8005e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e9e:	1c5f      	adds	r7, r3, #1
 8005ea0:	971b      	str	r7, [sp, #108]	; 0x6c
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b30      	cmp	r3, #48	; 0x30
 8005ea6:	d0f9      	beq.n	8005e9c <_strtod_l+0x28c>
 8005ea8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005eac:	2f08      	cmp	r7, #8
 8005eae:	f63f af7d 	bhi.w	8005dac <_strtod_l+0x19c>
 8005eb2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005eb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ebc:	1c5f      	adds	r7, r3, #1
 8005ebe:	971b      	str	r7, [sp, #108]	; 0x6c
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005ec6:	f1b8 0f09 	cmp.w	r8, #9
 8005eca:	d937      	bls.n	8005f3c <_strtod_l+0x32c>
 8005ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ece:	1a7f      	subs	r7, r7, r1
 8005ed0:	2f08      	cmp	r7, #8
 8005ed2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005ed6:	dc37      	bgt.n	8005f48 <_strtod_l+0x338>
 8005ed8:	45be      	cmp	lr, r7
 8005eda:	bfa8      	it	ge
 8005edc:	46be      	movge	lr, r7
 8005ede:	f1bc 0f00 	cmp.w	ip, #0
 8005ee2:	d001      	beq.n	8005ee8 <_strtod_l+0x2d8>
 8005ee4:	f1ce 0e00 	rsb	lr, lr, #0
 8005ee8:	2c00      	cmp	r4, #0
 8005eea:	d151      	bne.n	8005f90 <_strtod_l+0x380>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	f47f aece 	bne.w	8005c8e <_strtod_l+0x7e>
 8005ef2:	9a06      	ldr	r2, [sp, #24]
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	f47f aeca 	bne.w	8005c8e <_strtod_l+0x7e>
 8005efa:	9a04      	ldr	r2, [sp, #16]
 8005efc:	2a00      	cmp	r2, #0
 8005efe:	f47f aee4 	bne.w	8005cca <_strtod_l+0xba>
 8005f02:	2b4e      	cmp	r3, #78	; 0x4e
 8005f04:	d027      	beq.n	8005f56 <_strtod_l+0x346>
 8005f06:	dc21      	bgt.n	8005f4c <_strtod_l+0x33c>
 8005f08:	2b49      	cmp	r3, #73	; 0x49
 8005f0a:	f47f aede 	bne.w	8005cca <_strtod_l+0xba>
 8005f0e:	49a0      	ldr	r1, [pc, #640]	; (8006190 <_strtod_l+0x580>)
 8005f10:	a81b      	add	r0, sp, #108	; 0x6c
 8005f12:	f001 fea1 	bl	8007c58 <__match>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f43f aed7 	beq.w	8005cca <_strtod_l+0xba>
 8005f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f1e:	499d      	ldr	r1, [pc, #628]	; (8006194 <_strtod_l+0x584>)
 8005f20:	3b01      	subs	r3, #1
 8005f22:	a81b      	add	r0, sp, #108	; 0x6c
 8005f24:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f26:	f001 fe97 	bl	8007c58 <__match>
 8005f2a:	b910      	cbnz	r0, 8005f32 <_strtod_l+0x322>
 8005f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f2e:	3301      	adds	r3, #1
 8005f30:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f32:	f8df b274 	ldr.w	fp, [pc, #628]	; 80061a8 <_strtod_l+0x598>
 8005f36:	f04f 0a00 	mov.w	sl, #0
 8005f3a:	e6a8      	b.n	8005c8e <_strtod_l+0x7e>
 8005f3c:	210a      	movs	r1, #10
 8005f3e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005f42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005f46:	e7b8      	b.n	8005eba <_strtod_l+0x2aa>
 8005f48:	46be      	mov	lr, r7
 8005f4a:	e7c8      	b.n	8005ede <_strtod_l+0x2ce>
 8005f4c:	2b69      	cmp	r3, #105	; 0x69
 8005f4e:	d0de      	beq.n	8005f0e <_strtod_l+0x2fe>
 8005f50:	2b6e      	cmp	r3, #110	; 0x6e
 8005f52:	f47f aeba 	bne.w	8005cca <_strtod_l+0xba>
 8005f56:	4990      	ldr	r1, [pc, #576]	; (8006198 <_strtod_l+0x588>)
 8005f58:	a81b      	add	r0, sp, #108	; 0x6c
 8005f5a:	f001 fe7d 	bl	8007c58 <__match>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f43f aeb3 	beq.w	8005cca <_strtod_l+0xba>
 8005f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b28      	cmp	r3, #40	; 0x28
 8005f6a:	d10e      	bne.n	8005f8a <_strtod_l+0x37a>
 8005f6c:	aa1e      	add	r2, sp, #120	; 0x78
 8005f6e:	498b      	ldr	r1, [pc, #556]	; (800619c <_strtod_l+0x58c>)
 8005f70:	a81b      	add	r0, sp, #108	; 0x6c
 8005f72:	f001 fe85 	bl	8007c80 <__hexnan>
 8005f76:	2805      	cmp	r0, #5
 8005f78:	d107      	bne.n	8005f8a <_strtod_l+0x37a>
 8005f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f7c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005f80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005f84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005f88:	e681      	b.n	8005c8e <_strtod_l+0x7e>
 8005f8a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80061b0 <_strtod_l+0x5a0>
 8005f8e:	e7d2      	b.n	8005f36 <_strtod_l+0x326>
 8005f90:	ebae 0302 	sub.w	r3, lr, r2
 8005f94:	9306      	str	r3, [sp, #24]
 8005f96:	9b05      	ldr	r3, [sp, #20]
 8005f98:	9807      	ldr	r0, [sp, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bf08      	it	eq
 8005f9e:	4623      	moveq	r3, r4
 8005fa0:	2c10      	cmp	r4, #16
 8005fa2:	9305      	str	r3, [sp, #20]
 8005fa4:	46a0      	mov	r8, r4
 8005fa6:	bfa8      	it	ge
 8005fa8:	f04f 0810 	movge.w	r8, #16
 8005fac:	f7fa faaa 	bl	8000504 <__aeabi_ui2d>
 8005fb0:	2c09      	cmp	r4, #9
 8005fb2:	4682      	mov	sl, r0
 8005fb4:	468b      	mov	fp, r1
 8005fb6:	dc13      	bgt.n	8005fe0 <_strtod_l+0x3d0>
 8005fb8:	9b06      	ldr	r3, [sp, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f43f ae67 	beq.w	8005c8e <_strtod_l+0x7e>
 8005fc0:	9b06      	ldr	r3, [sp, #24]
 8005fc2:	dd7a      	ble.n	80060ba <_strtod_l+0x4aa>
 8005fc4:	2b16      	cmp	r3, #22
 8005fc6:	dc61      	bgt.n	800608c <_strtod_l+0x47c>
 8005fc8:	4a75      	ldr	r2, [pc, #468]	; (80061a0 <_strtod_l+0x590>)
 8005fca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005fce:	e9de 0100 	ldrd	r0, r1, [lr]
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	465b      	mov	r3, fp
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	4682      	mov	sl, r0
 8005fdc:	468b      	mov	fp, r1
 8005fde:	e656      	b.n	8005c8e <_strtod_l+0x7e>
 8005fe0:	4b6f      	ldr	r3, [pc, #444]	; (80061a0 <_strtod_l+0x590>)
 8005fe2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005fe6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005fea:	f7fa fb05 	bl	80005f8 <__aeabi_dmul>
 8005fee:	4606      	mov	r6, r0
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	460f      	mov	r7, r1
 8005ff4:	f7fa fa86 	bl	8000504 <__aeabi_ui2d>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa f944 	bl	800028c <__adddf3>
 8006004:	2c0f      	cmp	r4, #15
 8006006:	4682      	mov	sl, r0
 8006008:	468b      	mov	fp, r1
 800600a:	ddd5      	ble.n	8005fb8 <_strtod_l+0x3a8>
 800600c:	9b06      	ldr	r3, [sp, #24]
 800600e:	eba4 0808 	sub.w	r8, r4, r8
 8006012:	4498      	add	r8, r3
 8006014:	f1b8 0f00 	cmp.w	r8, #0
 8006018:	f340 8096 	ble.w	8006148 <_strtod_l+0x538>
 800601c:	f018 030f 	ands.w	r3, r8, #15
 8006020:	d00a      	beq.n	8006038 <_strtod_l+0x428>
 8006022:	495f      	ldr	r1, [pc, #380]	; (80061a0 <_strtod_l+0x590>)
 8006024:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006028:	4652      	mov	r2, sl
 800602a:	465b      	mov	r3, fp
 800602c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006030:	f7fa fae2 	bl	80005f8 <__aeabi_dmul>
 8006034:	4682      	mov	sl, r0
 8006036:	468b      	mov	fp, r1
 8006038:	f038 080f 	bics.w	r8, r8, #15
 800603c:	d073      	beq.n	8006126 <_strtod_l+0x516>
 800603e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006042:	dd47      	ble.n	80060d4 <_strtod_l+0x4c4>
 8006044:	2400      	movs	r4, #0
 8006046:	46a0      	mov	r8, r4
 8006048:	9407      	str	r4, [sp, #28]
 800604a:	9405      	str	r4, [sp, #20]
 800604c:	2322      	movs	r3, #34	; 0x22
 800604e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80061a8 <_strtod_l+0x598>
 8006052:	f8c9 3000 	str.w	r3, [r9]
 8006056:	f04f 0a00 	mov.w	sl, #0
 800605a:	9b07      	ldr	r3, [sp, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f43f ae16 	beq.w	8005c8e <_strtod_l+0x7e>
 8006062:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006064:	4648      	mov	r0, r9
 8006066:	f001 ff08 	bl	8007e7a <_Bfree>
 800606a:	9905      	ldr	r1, [sp, #20]
 800606c:	4648      	mov	r0, r9
 800606e:	f001 ff04 	bl	8007e7a <_Bfree>
 8006072:	4641      	mov	r1, r8
 8006074:	4648      	mov	r0, r9
 8006076:	f001 ff00 	bl	8007e7a <_Bfree>
 800607a:	9907      	ldr	r1, [sp, #28]
 800607c:	4648      	mov	r0, r9
 800607e:	f001 fefc 	bl	8007e7a <_Bfree>
 8006082:	4621      	mov	r1, r4
 8006084:	4648      	mov	r0, r9
 8006086:	f001 fef8 	bl	8007e7a <_Bfree>
 800608a:	e600      	b.n	8005c8e <_strtod_l+0x7e>
 800608c:	9a06      	ldr	r2, [sp, #24]
 800608e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006092:	4293      	cmp	r3, r2
 8006094:	dbba      	blt.n	800600c <_strtod_l+0x3fc>
 8006096:	4d42      	ldr	r5, [pc, #264]	; (80061a0 <_strtod_l+0x590>)
 8006098:	f1c4 040f 	rsb	r4, r4, #15
 800609c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80060a0:	4652      	mov	r2, sl
 80060a2:	465b      	mov	r3, fp
 80060a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060a8:	f7fa faa6 	bl	80005f8 <__aeabi_dmul>
 80060ac:	9b06      	ldr	r3, [sp, #24]
 80060ae:	1b1c      	subs	r4, r3, r4
 80060b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80060b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060b8:	e78d      	b.n	8005fd6 <_strtod_l+0x3c6>
 80060ba:	f113 0f16 	cmn.w	r3, #22
 80060be:	dba5      	blt.n	800600c <_strtod_l+0x3fc>
 80060c0:	4a37      	ldr	r2, [pc, #220]	; (80061a0 <_strtod_l+0x590>)
 80060c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80060c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80060ca:	4650      	mov	r0, sl
 80060cc:	4659      	mov	r1, fp
 80060ce:	f7fa fbbd 	bl	800084c <__aeabi_ddiv>
 80060d2:	e782      	b.n	8005fda <_strtod_l+0x3ca>
 80060d4:	2300      	movs	r3, #0
 80060d6:	4e33      	ldr	r6, [pc, #204]	; (80061a4 <_strtod_l+0x594>)
 80060d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80060dc:	4650      	mov	r0, sl
 80060de:	4659      	mov	r1, fp
 80060e0:	461d      	mov	r5, r3
 80060e2:	f1b8 0f01 	cmp.w	r8, #1
 80060e6:	dc21      	bgt.n	800612c <_strtod_l+0x51c>
 80060e8:	b10b      	cbz	r3, 80060ee <_strtod_l+0x4de>
 80060ea:	4682      	mov	sl, r0
 80060ec:	468b      	mov	fp, r1
 80060ee:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <_strtod_l+0x594>)
 80060f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80060f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80060f8:	4652      	mov	r2, sl
 80060fa:	465b      	mov	r3, fp
 80060fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006100:	f7fa fa7a 	bl	80005f8 <__aeabi_dmul>
 8006104:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <_strtod_l+0x598>)
 8006106:	460a      	mov	r2, r1
 8006108:	400b      	ands	r3, r1
 800610a:	4928      	ldr	r1, [pc, #160]	; (80061ac <_strtod_l+0x59c>)
 800610c:	428b      	cmp	r3, r1
 800610e:	4682      	mov	sl, r0
 8006110:	d898      	bhi.n	8006044 <_strtod_l+0x434>
 8006112:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006116:	428b      	cmp	r3, r1
 8006118:	bf86      	itte	hi
 800611a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80061b4 <_strtod_l+0x5a4>
 800611e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006122:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006126:	2300      	movs	r3, #0
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	e077      	b.n	800621c <_strtod_l+0x60c>
 800612c:	f018 0f01 	tst.w	r8, #1
 8006130:	d006      	beq.n	8006140 <_strtod_l+0x530>
 8006132:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	2301      	movs	r3, #1
 8006140:	3501      	adds	r5, #1
 8006142:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006146:	e7cc      	b.n	80060e2 <_strtod_l+0x4d2>
 8006148:	d0ed      	beq.n	8006126 <_strtod_l+0x516>
 800614a:	f1c8 0800 	rsb	r8, r8, #0
 800614e:	f018 020f 	ands.w	r2, r8, #15
 8006152:	d00a      	beq.n	800616a <_strtod_l+0x55a>
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <_strtod_l+0x590>)
 8006156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800615a:	4650      	mov	r0, sl
 800615c:	4659      	mov	r1, fp
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f7fa fb73 	bl	800084c <__aeabi_ddiv>
 8006166:	4682      	mov	sl, r0
 8006168:	468b      	mov	fp, r1
 800616a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800616e:	d0da      	beq.n	8006126 <_strtod_l+0x516>
 8006170:	f1b8 0f1f 	cmp.w	r8, #31
 8006174:	dd20      	ble.n	80061b8 <_strtod_l+0x5a8>
 8006176:	2400      	movs	r4, #0
 8006178:	46a0      	mov	r8, r4
 800617a:	9407      	str	r4, [sp, #28]
 800617c:	9405      	str	r4, [sp, #20]
 800617e:	2322      	movs	r3, #34	; 0x22
 8006180:	f04f 0a00 	mov.w	sl, #0
 8006184:	f04f 0b00 	mov.w	fp, #0
 8006188:	f8c9 3000 	str.w	r3, [r9]
 800618c:	e765      	b.n	800605a <_strtod_l+0x44a>
 800618e:	bf00      	nop
 8006190:	08009309 	.word	0x08009309
 8006194:	08009393 	.word	0x08009393
 8006198:	08009311 	.word	0x08009311
 800619c:	08009354 	.word	0x08009354
 80061a0:	08009438 	.word	0x08009438
 80061a4:	08009410 	.word	0x08009410
 80061a8:	7ff00000 	.word	0x7ff00000
 80061ac:	7ca00000 	.word	0x7ca00000
 80061b0:	fff80000 	.word	0xfff80000
 80061b4:	7fefffff 	.word	0x7fefffff
 80061b8:	f018 0310 	ands.w	r3, r8, #16
 80061bc:	bf18      	it	ne
 80061be:	236a      	movne	r3, #106	; 0x6a
 80061c0:	4da0      	ldr	r5, [pc, #640]	; (8006444 <_strtod_l+0x834>)
 80061c2:	9304      	str	r3, [sp, #16]
 80061c4:	4650      	mov	r0, sl
 80061c6:	4659      	mov	r1, fp
 80061c8:	2300      	movs	r3, #0
 80061ca:	f1b8 0f00 	cmp.w	r8, #0
 80061ce:	f300 810a 	bgt.w	80063e6 <_strtod_l+0x7d6>
 80061d2:	b10b      	cbz	r3, 80061d8 <_strtod_l+0x5c8>
 80061d4:	4682      	mov	sl, r0
 80061d6:	468b      	mov	fp, r1
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	b1bb      	cbz	r3, 800620c <_strtod_l+0x5fc>
 80061dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80061e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	4659      	mov	r1, fp
 80061e8:	dd10      	ble.n	800620c <_strtod_l+0x5fc>
 80061ea:	2b1f      	cmp	r3, #31
 80061ec:	f340 8107 	ble.w	80063fe <_strtod_l+0x7ee>
 80061f0:	2b34      	cmp	r3, #52	; 0x34
 80061f2:	bfde      	ittt	le
 80061f4:	3b20      	suble	r3, #32
 80061f6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80061fa:	fa02 f303 	lslle.w	r3, r2, r3
 80061fe:	f04f 0a00 	mov.w	sl, #0
 8006202:	bfcc      	ite	gt
 8006204:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006208:	ea03 0b01 	andle.w	fp, r3, r1
 800620c:	2200      	movs	r2, #0
 800620e:	2300      	movs	r3, #0
 8006210:	4650      	mov	r0, sl
 8006212:	4659      	mov	r1, fp
 8006214:	f7fa fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8006218:	2800      	cmp	r0, #0
 800621a:	d1ac      	bne.n	8006176 <_strtod_l+0x566>
 800621c:	9b07      	ldr	r3, [sp, #28]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	9a05      	ldr	r2, [sp, #20]
 8006222:	9908      	ldr	r1, [sp, #32]
 8006224:	4623      	mov	r3, r4
 8006226:	4648      	mov	r0, r9
 8006228:	f001 fe79 	bl	8007f1e <__s2b>
 800622c:	9007      	str	r0, [sp, #28]
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f af08 	beq.w	8006044 <_strtod_l+0x434>
 8006234:	9a06      	ldr	r2, [sp, #24]
 8006236:	9b06      	ldr	r3, [sp, #24]
 8006238:	2a00      	cmp	r2, #0
 800623a:	f1c3 0300 	rsb	r3, r3, #0
 800623e:	bfa8      	it	ge
 8006240:	2300      	movge	r3, #0
 8006242:	930e      	str	r3, [sp, #56]	; 0x38
 8006244:	2400      	movs	r4, #0
 8006246:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800624a:	9316      	str	r3, [sp, #88]	; 0x58
 800624c:	46a0      	mov	r8, r4
 800624e:	9b07      	ldr	r3, [sp, #28]
 8006250:	4648      	mov	r0, r9
 8006252:	6859      	ldr	r1, [r3, #4]
 8006254:	f001 fddd 	bl	8007e12 <_Balloc>
 8006258:	9005      	str	r0, [sp, #20]
 800625a:	2800      	cmp	r0, #0
 800625c:	f43f aef6 	beq.w	800604c <_strtod_l+0x43c>
 8006260:	9b07      	ldr	r3, [sp, #28]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	3202      	adds	r2, #2
 8006266:	f103 010c 	add.w	r1, r3, #12
 800626a:	0092      	lsls	r2, r2, #2
 800626c:	300c      	adds	r0, #12
 800626e:	f001 fdc5 	bl	8007dfc <memcpy>
 8006272:	aa1e      	add	r2, sp, #120	; 0x78
 8006274:	a91d      	add	r1, sp, #116	; 0x74
 8006276:	ec4b ab10 	vmov	d0, sl, fp
 800627a:	4648      	mov	r0, r9
 800627c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006280:	f002 f908 	bl	8008494 <__d2b>
 8006284:	901c      	str	r0, [sp, #112]	; 0x70
 8006286:	2800      	cmp	r0, #0
 8006288:	f43f aee0 	beq.w	800604c <_strtod_l+0x43c>
 800628c:	2101      	movs	r1, #1
 800628e:	4648      	mov	r0, r9
 8006290:	f001 fed1 	bl	8008036 <__i2b>
 8006294:	4680      	mov	r8, r0
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f aed8 	beq.w	800604c <_strtod_l+0x43c>
 800629c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800629e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	bfab      	itete	ge
 80062a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80062a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80062a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80062aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80062ac:	bfac      	ite	ge
 80062ae:	18f7      	addge	r7, r6, r3
 80062b0:	1b9d      	sublt	r5, r3, r6
 80062b2:	9b04      	ldr	r3, [sp, #16]
 80062b4:	1af6      	subs	r6, r6, r3
 80062b6:	4416      	add	r6, r2
 80062b8:	4b63      	ldr	r3, [pc, #396]	; (8006448 <_strtod_l+0x838>)
 80062ba:	3e01      	subs	r6, #1
 80062bc:	429e      	cmp	r6, r3
 80062be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80062c2:	f280 80af 	bge.w	8006424 <_strtod_l+0x814>
 80062c6:	1b9b      	subs	r3, r3, r6
 80062c8:	2b1f      	cmp	r3, #31
 80062ca:	eba2 0203 	sub.w	r2, r2, r3
 80062ce:	f04f 0101 	mov.w	r1, #1
 80062d2:	f300 809b 	bgt.w	800640c <_strtod_l+0x7fc>
 80062d6:	fa01 f303 	lsl.w	r3, r1, r3
 80062da:	930f      	str	r3, [sp, #60]	; 0x3c
 80062dc:	2300      	movs	r3, #0
 80062de:	930a      	str	r3, [sp, #40]	; 0x28
 80062e0:	18be      	adds	r6, r7, r2
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	42b7      	cmp	r7, r6
 80062e6:	4415      	add	r5, r2
 80062e8:	441d      	add	r5, r3
 80062ea:	463b      	mov	r3, r7
 80062ec:	bfa8      	it	ge
 80062ee:	4633      	movge	r3, r6
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	bfa8      	it	ge
 80062f4:	462b      	movge	r3, r5
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bfc2      	ittt	gt
 80062fa:	1af6      	subgt	r6, r6, r3
 80062fc:	1aed      	subgt	r5, r5, r3
 80062fe:	1aff      	subgt	r7, r7, r3
 8006300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006302:	b1bb      	cbz	r3, 8006334 <_strtod_l+0x724>
 8006304:	4641      	mov	r1, r8
 8006306:	461a      	mov	r2, r3
 8006308:	4648      	mov	r0, r9
 800630a:	f001 ff33 	bl	8008174 <__pow5mult>
 800630e:	4680      	mov	r8, r0
 8006310:	2800      	cmp	r0, #0
 8006312:	f43f ae9b 	beq.w	800604c <_strtod_l+0x43c>
 8006316:	4601      	mov	r1, r0
 8006318:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800631a:	4648      	mov	r0, r9
 800631c:	f001 fe94 	bl	8008048 <__multiply>
 8006320:	900c      	str	r0, [sp, #48]	; 0x30
 8006322:	2800      	cmp	r0, #0
 8006324:	f43f ae92 	beq.w	800604c <_strtod_l+0x43c>
 8006328:	991c      	ldr	r1, [sp, #112]	; 0x70
 800632a:	4648      	mov	r0, r9
 800632c:	f001 fda5 	bl	8007e7a <_Bfree>
 8006330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006332:	931c      	str	r3, [sp, #112]	; 0x70
 8006334:	2e00      	cmp	r6, #0
 8006336:	dc7a      	bgt.n	800642e <_strtod_l+0x81e>
 8006338:	9b06      	ldr	r3, [sp, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	dd08      	ble.n	8006350 <_strtod_l+0x740>
 800633e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006340:	9905      	ldr	r1, [sp, #20]
 8006342:	4648      	mov	r0, r9
 8006344:	f001 ff16 	bl	8008174 <__pow5mult>
 8006348:	9005      	str	r0, [sp, #20]
 800634a:	2800      	cmp	r0, #0
 800634c:	f43f ae7e 	beq.w	800604c <_strtod_l+0x43c>
 8006350:	2d00      	cmp	r5, #0
 8006352:	dd08      	ble.n	8006366 <_strtod_l+0x756>
 8006354:	462a      	mov	r2, r5
 8006356:	9905      	ldr	r1, [sp, #20]
 8006358:	4648      	mov	r0, r9
 800635a:	f001 ff59 	bl	8008210 <__lshift>
 800635e:	9005      	str	r0, [sp, #20]
 8006360:	2800      	cmp	r0, #0
 8006362:	f43f ae73 	beq.w	800604c <_strtod_l+0x43c>
 8006366:	2f00      	cmp	r7, #0
 8006368:	dd08      	ble.n	800637c <_strtod_l+0x76c>
 800636a:	4641      	mov	r1, r8
 800636c:	463a      	mov	r2, r7
 800636e:	4648      	mov	r0, r9
 8006370:	f001 ff4e 	bl	8008210 <__lshift>
 8006374:	4680      	mov	r8, r0
 8006376:	2800      	cmp	r0, #0
 8006378:	f43f ae68 	beq.w	800604c <_strtod_l+0x43c>
 800637c:	9a05      	ldr	r2, [sp, #20]
 800637e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006380:	4648      	mov	r0, r9
 8006382:	f001 ffb3 	bl	80082ec <__mdiff>
 8006386:	4604      	mov	r4, r0
 8006388:	2800      	cmp	r0, #0
 800638a:	f43f ae5f 	beq.w	800604c <_strtod_l+0x43c>
 800638e:	68c3      	ldr	r3, [r0, #12]
 8006390:	930c      	str	r3, [sp, #48]	; 0x30
 8006392:	2300      	movs	r3, #0
 8006394:	60c3      	str	r3, [r0, #12]
 8006396:	4641      	mov	r1, r8
 8006398:	f001 ff8e 	bl	80082b8 <__mcmp>
 800639c:	2800      	cmp	r0, #0
 800639e:	da55      	bge.n	800644c <_strtod_l+0x83c>
 80063a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a2:	b9e3      	cbnz	r3, 80063de <_strtod_l+0x7ce>
 80063a4:	f1ba 0f00 	cmp.w	sl, #0
 80063a8:	d119      	bne.n	80063de <_strtod_l+0x7ce>
 80063aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ae:	b9b3      	cbnz	r3, 80063de <_strtod_l+0x7ce>
 80063b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063b4:	0d1b      	lsrs	r3, r3, #20
 80063b6:	051b      	lsls	r3, r3, #20
 80063b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80063bc:	d90f      	bls.n	80063de <_strtod_l+0x7ce>
 80063be:	6963      	ldr	r3, [r4, #20]
 80063c0:	b913      	cbnz	r3, 80063c8 <_strtod_l+0x7b8>
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	dd0a      	ble.n	80063de <_strtod_l+0x7ce>
 80063c8:	4621      	mov	r1, r4
 80063ca:	2201      	movs	r2, #1
 80063cc:	4648      	mov	r0, r9
 80063ce:	f001 ff1f 	bl	8008210 <__lshift>
 80063d2:	4641      	mov	r1, r8
 80063d4:	4604      	mov	r4, r0
 80063d6:	f001 ff6f 	bl	80082b8 <__mcmp>
 80063da:	2800      	cmp	r0, #0
 80063dc:	dc67      	bgt.n	80064ae <_strtod_l+0x89e>
 80063de:	9b04      	ldr	r3, [sp, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d171      	bne.n	80064c8 <_strtod_l+0x8b8>
 80063e4:	e63d      	b.n	8006062 <_strtod_l+0x452>
 80063e6:	f018 0f01 	tst.w	r8, #1
 80063ea:	d004      	beq.n	80063f6 <_strtod_l+0x7e6>
 80063ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063f0:	f7fa f902 	bl	80005f8 <__aeabi_dmul>
 80063f4:	2301      	movs	r3, #1
 80063f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063fa:	3508      	adds	r5, #8
 80063fc:	e6e5      	b.n	80061ca <_strtod_l+0x5ba>
 80063fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	ea03 0a0a 	and.w	sl, r3, sl
 800640a:	e6ff      	b.n	800620c <_strtod_l+0x5fc>
 800640c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006410:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006414:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006418:	36e2      	adds	r6, #226	; 0xe2
 800641a:	fa01 f306 	lsl.w	r3, r1, r6
 800641e:	930a      	str	r3, [sp, #40]	; 0x28
 8006420:	910f      	str	r1, [sp, #60]	; 0x3c
 8006422:	e75d      	b.n	80062e0 <_strtod_l+0x6d0>
 8006424:	2300      	movs	r3, #0
 8006426:	930a      	str	r3, [sp, #40]	; 0x28
 8006428:	2301      	movs	r3, #1
 800642a:	930f      	str	r3, [sp, #60]	; 0x3c
 800642c:	e758      	b.n	80062e0 <_strtod_l+0x6d0>
 800642e:	4632      	mov	r2, r6
 8006430:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006432:	4648      	mov	r0, r9
 8006434:	f001 feec 	bl	8008210 <__lshift>
 8006438:	901c      	str	r0, [sp, #112]	; 0x70
 800643a:	2800      	cmp	r0, #0
 800643c:	f47f af7c 	bne.w	8006338 <_strtod_l+0x728>
 8006440:	e604      	b.n	800604c <_strtod_l+0x43c>
 8006442:	bf00      	nop
 8006444:	08009368 	.word	0x08009368
 8006448:	fffffc02 	.word	0xfffffc02
 800644c:	465d      	mov	r5, fp
 800644e:	f040 8086 	bne.w	800655e <_strtod_l+0x94e>
 8006452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006458:	b32a      	cbz	r2, 80064a6 <_strtod_l+0x896>
 800645a:	4aaf      	ldr	r2, [pc, #700]	; (8006718 <_strtod_l+0xb08>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d153      	bne.n	8006508 <_strtod_l+0x8f8>
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	4650      	mov	r0, sl
 8006464:	b1d3      	cbz	r3, 800649c <_strtod_l+0x88c>
 8006466:	4aad      	ldr	r2, [pc, #692]	; (800671c <_strtod_l+0xb0c>)
 8006468:	402a      	ands	r2, r5
 800646a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800646e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006472:	d816      	bhi.n	80064a2 <_strtod_l+0x892>
 8006474:	0d12      	lsrs	r2, r2, #20
 8006476:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	4298      	cmp	r0, r3
 8006480:	d142      	bne.n	8006508 <_strtod_l+0x8f8>
 8006482:	4ba7      	ldr	r3, [pc, #668]	; (8006720 <_strtod_l+0xb10>)
 8006484:	429d      	cmp	r5, r3
 8006486:	d102      	bne.n	800648e <_strtod_l+0x87e>
 8006488:	3001      	adds	r0, #1
 800648a:	f43f addf 	beq.w	800604c <_strtod_l+0x43c>
 800648e:	4ba3      	ldr	r3, [pc, #652]	; (800671c <_strtod_l+0xb0c>)
 8006490:	402b      	ands	r3, r5
 8006492:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006496:	f04f 0a00 	mov.w	sl, #0
 800649a:	e7a0      	b.n	80063de <_strtod_l+0x7ce>
 800649c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a0:	e7ed      	b.n	800647e <_strtod_l+0x86e>
 80064a2:	460b      	mov	r3, r1
 80064a4:	e7eb      	b.n	800647e <_strtod_l+0x86e>
 80064a6:	bb7b      	cbnz	r3, 8006508 <_strtod_l+0x8f8>
 80064a8:	f1ba 0f00 	cmp.w	sl, #0
 80064ac:	d12c      	bne.n	8006508 <_strtod_l+0x8f8>
 80064ae:	9904      	ldr	r1, [sp, #16]
 80064b0:	4a9a      	ldr	r2, [pc, #616]	; (800671c <_strtod_l+0xb0c>)
 80064b2:	465b      	mov	r3, fp
 80064b4:	b1f1      	cbz	r1, 80064f4 <_strtod_l+0x8e4>
 80064b6:	ea02 010b 	and.w	r1, r2, fp
 80064ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064be:	dc19      	bgt.n	80064f4 <_strtod_l+0x8e4>
 80064c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064c4:	f77f ae5b 	ble.w	800617e <_strtod_l+0x56e>
 80064c8:	4a96      	ldr	r2, [pc, #600]	; (8006724 <_strtod_l+0xb14>)
 80064ca:	2300      	movs	r3, #0
 80064cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80064d0:	4650      	mov	r0, sl
 80064d2:	4659      	mov	r1, fp
 80064d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	4682      	mov	sl, r0
 80064de:	468b      	mov	fp, r1
 80064e0:	2900      	cmp	r1, #0
 80064e2:	f47f adbe 	bne.w	8006062 <_strtod_l+0x452>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f47f adbb 	bne.w	8006062 <_strtod_l+0x452>
 80064ec:	2322      	movs	r3, #34	; 0x22
 80064ee:	f8c9 3000 	str.w	r3, [r9]
 80064f2:	e5b6      	b.n	8006062 <_strtod_l+0x452>
 80064f4:	4013      	ands	r3, r2
 80064f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80064fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80064fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006502:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006506:	e76a      	b.n	80063de <_strtod_l+0x7ce>
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	b193      	cbz	r3, 8006532 <_strtod_l+0x922>
 800650c:	422b      	tst	r3, r5
 800650e:	f43f af66 	beq.w	80063de <_strtod_l+0x7ce>
 8006512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006514:	9a04      	ldr	r2, [sp, #16]
 8006516:	4650      	mov	r0, sl
 8006518:	4659      	mov	r1, fp
 800651a:	b173      	cbz	r3, 800653a <_strtod_l+0x92a>
 800651c:	f7ff fb5a 	bl	8005bd4 <sulp>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006528:	f7f9 feb0 	bl	800028c <__adddf3>
 800652c:	4682      	mov	sl, r0
 800652e:	468b      	mov	fp, r1
 8006530:	e755      	b.n	80063de <_strtod_l+0x7ce>
 8006532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006534:	ea13 0f0a 	tst.w	r3, sl
 8006538:	e7e9      	b.n	800650e <_strtod_l+0x8fe>
 800653a:	f7ff fb4b 	bl	8005bd4 <sulp>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006546:	f7f9 fe9f 	bl	8000288 <__aeabi_dsub>
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	4682      	mov	sl, r0
 8006550:	468b      	mov	fp, r1
 8006552:	f7fa fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006556:	2800      	cmp	r0, #0
 8006558:	f47f ae11 	bne.w	800617e <_strtod_l+0x56e>
 800655c:	e73f      	b.n	80063de <_strtod_l+0x7ce>
 800655e:	4641      	mov	r1, r8
 8006560:	4620      	mov	r0, r4
 8006562:	f001 ffe6 	bl	8008532 <__ratio>
 8006566:	ec57 6b10 	vmov	r6, r7, d0
 800656a:	2200      	movs	r2, #0
 800656c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006570:	ee10 0a10 	vmov	r0, s0
 8006574:	4639      	mov	r1, r7
 8006576:	f7fa fabb 	bl	8000af0 <__aeabi_dcmple>
 800657a:	2800      	cmp	r0, #0
 800657c:	d077      	beq.n	800666e <_strtod_l+0xa5e>
 800657e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006580:	2b00      	cmp	r3, #0
 8006582:	d04a      	beq.n	800661a <_strtod_l+0xa0a>
 8006584:	4b68      	ldr	r3, [pc, #416]	; (8006728 <_strtod_l+0xb18>)
 8006586:	2200      	movs	r2, #0
 8006588:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800658c:	4f66      	ldr	r7, [pc, #408]	; (8006728 <_strtod_l+0xb18>)
 800658e:	2600      	movs	r6, #0
 8006590:	4b62      	ldr	r3, [pc, #392]	; (800671c <_strtod_l+0xb0c>)
 8006592:	402b      	ands	r3, r5
 8006594:	930f      	str	r3, [sp, #60]	; 0x3c
 8006596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006598:	4b64      	ldr	r3, [pc, #400]	; (800672c <_strtod_l+0xb1c>)
 800659a:	429a      	cmp	r2, r3
 800659c:	f040 80ce 	bne.w	800673c <_strtod_l+0xb2c>
 80065a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80065ac:	ec4b ab10 	vmov	d0, sl, fp
 80065b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80065b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065b8:	f001 fef6 	bl	80083a8 <__ulp>
 80065bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065c0:	ec53 2b10 	vmov	r2, r3, d0
 80065c4:	f7fa f818 	bl	80005f8 <__aeabi_dmul>
 80065c8:	4652      	mov	r2, sl
 80065ca:	465b      	mov	r3, fp
 80065cc:	f7f9 fe5e 	bl	800028c <__adddf3>
 80065d0:	460b      	mov	r3, r1
 80065d2:	4952      	ldr	r1, [pc, #328]	; (800671c <_strtod_l+0xb0c>)
 80065d4:	4a56      	ldr	r2, [pc, #344]	; (8006730 <_strtod_l+0xb20>)
 80065d6:	4019      	ands	r1, r3
 80065d8:	4291      	cmp	r1, r2
 80065da:	4682      	mov	sl, r0
 80065dc:	d95b      	bls.n	8006696 <_strtod_l+0xa86>
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <_strtod_l+0x9e0>
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	3301      	adds	r3, #1
 80065ec:	f43f ad2e 	beq.w	800604c <_strtod_l+0x43c>
 80065f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006720 <_strtod_l+0xb10>
 80065f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80065f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80065fa:	4648      	mov	r0, r9
 80065fc:	f001 fc3d 	bl	8007e7a <_Bfree>
 8006600:	9905      	ldr	r1, [sp, #20]
 8006602:	4648      	mov	r0, r9
 8006604:	f001 fc39 	bl	8007e7a <_Bfree>
 8006608:	4641      	mov	r1, r8
 800660a:	4648      	mov	r0, r9
 800660c:	f001 fc35 	bl	8007e7a <_Bfree>
 8006610:	4621      	mov	r1, r4
 8006612:	4648      	mov	r0, r9
 8006614:	f001 fc31 	bl	8007e7a <_Bfree>
 8006618:	e619      	b.n	800624e <_strtod_l+0x63e>
 800661a:	f1ba 0f00 	cmp.w	sl, #0
 800661e:	d11a      	bne.n	8006656 <_strtod_l+0xa46>
 8006620:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006624:	b9eb      	cbnz	r3, 8006662 <_strtod_l+0xa52>
 8006626:	2200      	movs	r2, #0
 8006628:	4b3f      	ldr	r3, [pc, #252]	; (8006728 <_strtod_l+0xb18>)
 800662a:	4630      	mov	r0, r6
 800662c:	4639      	mov	r1, r7
 800662e:	f7fa fa55 	bl	8000adc <__aeabi_dcmplt>
 8006632:	b9c8      	cbnz	r0, 8006668 <_strtod_l+0xa58>
 8006634:	4630      	mov	r0, r6
 8006636:	4639      	mov	r1, r7
 8006638:	2200      	movs	r2, #0
 800663a:	4b3e      	ldr	r3, [pc, #248]	; (8006734 <_strtod_l+0xb24>)
 800663c:	f7f9 ffdc 	bl	80005f8 <__aeabi_dmul>
 8006640:	4606      	mov	r6, r0
 8006642:	460f      	mov	r7, r1
 8006644:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006648:	9618      	str	r6, [sp, #96]	; 0x60
 800664a:	9319      	str	r3, [sp, #100]	; 0x64
 800664c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006650:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006654:	e79c      	b.n	8006590 <_strtod_l+0x980>
 8006656:	f1ba 0f01 	cmp.w	sl, #1
 800665a:	d102      	bne.n	8006662 <_strtod_l+0xa52>
 800665c:	2d00      	cmp	r5, #0
 800665e:	f43f ad8e 	beq.w	800617e <_strtod_l+0x56e>
 8006662:	2200      	movs	r2, #0
 8006664:	4b34      	ldr	r3, [pc, #208]	; (8006738 <_strtod_l+0xb28>)
 8006666:	e78f      	b.n	8006588 <_strtod_l+0x978>
 8006668:	2600      	movs	r6, #0
 800666a:	4f32      	ldr	r7, [pc, #200]	; (8006734 <_strtod_l+0xb24>)
 800666c:	e7ea      	b.n	8006644 <_strtod_l+0xa34>
 800666e:	4b31      	ldr	r3, [pc, #196]	; (8006734 <_strtod_l+0xb24>)
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	2200      	movs	r2, #0
 8006676:	f7f9 ffbf 	bl	80005f8 <__aeabi_dmul>
 800667a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800667c:	4606      	mov	r6, r0
 800667e:	460f      	mov	r7, r1
 8006680:	b933      	cbnz	r3, 8006690 <_strtod_l+0xa80>
 8006682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006686:	9010      	str	r0, [sp, #64]	; 0x40
 8006688:	9311      	str	r3, [sp, #68]	; 0x44
 800668a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800668e:	e7df      	b.n	8006650 <_strtod_l+0xa40>
 8006690:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006694:	e7f9      	b.n	800668a <_strtod_l+0xa7a>
 8006696:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ab      	bne.n	80065f8 <_strtod_l+0x9e8>
 80066a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066a4:	0d1b      	lsrs	r3, r3, #20
 80066a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a8:	051b      	lsls	r3, r3, #20
 80066aa:	429a      	cmp	r2, r3
 80066ac:	465d      	mov	r5, fp
 80066ae:	d1a3      	bne.n	80065f8 <_strtod_l+0x9e8>
 80066b0:	4639      	mov	r1, r7
 80066b2:	4630      	mov	r0, r6
 80066b4:	f7fa fa50 	bl	8000b58 <__aeabi_d2iz>
 80066b8:	f7f9 ff34 	bl	8000524 <__aeabi_i2d>
 80066bc:	460b      	mov	r3, r1
 80066be:	4602      	mov	r2, r0
 80066c0:	4639      	mov	r1, r7
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7f9 fde0 	bl	8000288 <__aeabi_dsub>
 80066c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	b933      	cbnz	r3, 80066de <_strtod_l+0xace>
 80066d0:	f1ba 0f00 	cmp.w	sl, #0
 80066d4:	d103      	bne.n	80066de <_strtod_l+0xace>
 80066d6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80066da:	2d00      	cmp	r5, #0
 80066dc:	d06d      	beq.n	80067ba <_strtod_l+0xbaa>
 80066de:	a30a      	add	r3, pc, #40	; (adr r3, 8006708 <_strtod_l+0xaf8>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	4630      	mov	r0, r6
 80066e6:	4639      	mov	r1, r7
 80066e8:	f7fa f9f8 	bl	8000adc <__aeabi_dcmplt>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	f47f acb8 	bne.w	8006062 <_strtod_l+0x452>
 80066f2:	a307      	add	r3, pc, #28	; (adr r3, 8006710 <_strtod_l+0xb00>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7fa fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 8006700:	2800      	cmp	r0, #0
 8006702:	f43f af79 	beq.w	80065f8 <_strtod_l+0x9e8>
 8006706:	e4ac      	b.n	8006062 <_strtod_l+0x452>
 8006708:	94a03595 	.word	0x94a03595
 800670c:	3fdfffff 	.word	0x3fdfffff
 8006710:	35afe535 	.word	0x35afe535
 8006714:	3fe00000 	.word	0x3fe00000
 8006718:	000fffff 	.word	0x000fffff
 800671c:	7ff00000 	.word	0x7ff00000
 8006720:	7fefffff 	.word	0x7fefffff
 8006724:	39500000 	.word	0x39500000
 8006728:	3ff00000 	.word	0x3ff00000
 800672c:	7fe00000 	.word	0x7fe00000
 8006730:	7c9fffff 	.word	0x7c9fffff
 8006734:	3fe00000 	.word	0x3fe00000
 8006738:	bff00000 	.word	0xbff00000
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	b333      	cbz	r3, 800678e <_strtod_l+0xb7e>
 8006740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006742:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006746:	d822      	bhi.n	800678e <_strtod_l+0xb7e>
 8006748:	a327      	add	r3, pc, #156	; (adr r3, 80067e8 <_strtod_l+0xbd8>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	4630      	mov	r0, r6
 8006750:	4639      	mov	r1, r7
 8006752:	f7fa f9cd 	bl	8000af0 <__aeabi_dcmple>
 8006756:	b1a0      	cbz	r0, 8006782 <_strtod_l+0xb72>
 8006758:	4639      	mov	r1, r7
 800675a:	4630      	mov	r0, r6
 800675c:	f7fa fa24 	bl	8000ba8 <__aeabi_d2uiz>
 8006760:	2800      	cmp	r0, #0
 8006762:	bf08      	it	eq
 8006764:	2001      	moveq	r0, #1
 8006766:	f7f9 fecd 	bl	8000504 <__aeabi_ui2d>
 800676a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	bb03      	cbnz	r3, 80067b4 <_strtod_l+0xba4>
 8006772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006776:	9012      	str	r0, [sp, #72]	; 0x48
 8006778:	9313      	str	r3, [sp, #76]	; 0x4c
 800677a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800677e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006786:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	930b      	str	r3, [sp, #44]	; 0x2c
 800678e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006792:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006796:	f001 fe07 	bl	80083a8 <__ulp>
 800679a:	4650      	mov	r0, sl
 800679c:	ec53 2b10 	vmov	r2, r3, d0
 80067a0:	4659      	mov	r1, fp
 80067a2:	f7f9 ff29 	bl	80005f8 <__aeabi_dmul>
 80067a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067aa:	f7f9 fd6f 	bl	800028c <__adddf3>
 80067ae:	4682      	mov	sl, r0
 80067b0:	468b      	mov	fp, r1
 80067b2:	e772      	b.n	800669a <_strtod_l+0xa8a>
 80067b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80067b8:	e7df      	b.n	800677a <_strtod_l+0xb6a>
 80067ba:	a30d      	add	r3, pc, #52	; (adr r3, 80067f0 <_strtod_l+0xbe0>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7fa f98c 	bl	8000adc <__aeabi_dcmplt>
 80067c4:	e79c      	b.n	8006700 <_strtod_l+0xaf0>
 80067c6:	2300      	movs	r3, #0
 80067c8:	930d      	str	r3, [sp, #52]	; 0x34
 80067ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	f7ff ba61 	b.w	8005c96 <_strtod_l+0x86>
 80067d4:	2b65      	cmp	r3, #101	; 0x65
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f43f ab4e 	beq.w	8005e7a <_strtod_l+0x26a>
 80067de:	2101      	movs	r1, #1
 80067e0:	4614      	mov	r4, r2
 80067e2:	9104      	str	r1, [sp, #16]
 80067e4:	f7ff bacb 	b.w	8005d7e <_strtod_l+0x16e>
 80067e8:	ffc00000 	.word	0xffc00000
 80067ec:	41dfffff 	.word	0x41dfffff
 80067f0:	94a03595 	.word	0x94a03595
 80067f4:	3fcfffff 	.word	0x3fcfffff

080067f8 <_strtod_r>:
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <_strtod_r+0x18>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	b410      	push	{r4}
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	4c04      	ldr	r4, [pc, #16]	; (8006814 <_strtod_r+0x1c>)
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf08      	it	eq
 8006806:	4623      	moveq	r3, r4
 8006808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800680c:	f7ff ba00 	b.w	8005c10 <_strtod_l>
 8006810:	20000014 	.word	0x20000014
 8006814:	20000078 	.word	0x20000078

08006818 <_strtol_l.isra.0>:
 8006818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	4680      	mov	r8, r0
 800681e:	4689      	mov	r9, r1
 8006820:	4692      	mov	sl, r2
 8006822:	461e      	mov	r6, r3
 8006824:	460f      	mov	r7, r1
 8006826:	463d      	mov	r5, r7
 8006828:	9808      	ldr	r0, [sp, #32]
 800682a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800682e:	f001 fab7 	bl	8007da0 <__locale_ctype_ptr_l>
 8006832:	4420      	add	r0, r4
 8006834:	7843      	ldrb	r3, [r0, #1]
 8006836:	f013 0308 	ands.w	r3, r3, #8
 800683a:	d132      	bne.n	80068a2 <_strtol_l.isra.0+0x8a>
 800683c:	2c2d      	cmp	r4, #45	; 0x2d
 800683e:	d132      	bne.n	80068a6 <_strtol_l.isra.0+0x8e>
 8006840:	787c      	ldrb	r4, [r7, #1]
 8006842:	1cbd      	adds	r5, r7, #2
 8006844:	2201      	movs	r2, #1
 8006846:	2e00      	cmp	r6, #0
 8006848:	d05d      	beq.n	8006906 <_strtol_l.isra.0+0xee>
 800684a:	2e10      	cmp	r6, #16
 800684c:	d109      	bne.n	8006862 <_strtol_l.isra.0+0x4a>
 800684e:	2c30      	cmp	r4, #48	; 0x30
 8006850:	d107      	bne.n	8006862 <_strtol_l.isra.0+0x4a>
 8006852:	782b      	ldrb	r3, [r5, #0]
 8006854:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006858:	2b58      	cmp	r3, #88	; 0x58
 800685a:	d14f      	bne.n	80068fc <_strtol_l.isra.0+0xe4>
 800685c:	786c      	ldrb	r4, [r5, #1]
 800685e:	2610      	movs	r6, #16
 8006860:	3502      	adds	r5, #2
 8006862:	2a00      	cmp	r2, #0
 8006864:	bf14      	ite	ne
 8006866:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800686a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800686e:	2700      	movs	r7, #0
 8006870:	fbb1 fcf6 	udiv	ip, r1, r6
 8006874:	4638      	mov	r0, r7
 8006876:	fb06 1e1c 	mls	lr, r6, ip, r1
 800687a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800687e:	2b09      	cmp	r3, #9
 8006880:	d817      	bhi.n	80068b2 <_strtol_l.isra.0+0x9a>
 8006882:	461c      	mov	r4, r3
 8006884:	42a6      	cmp	r6, r4
 8006886:	dd23      	ble.n	80068d0 <_strtol_l.isra.0+0xb8>
 8006888:	1c7b      	adds	r3, r7, #1
 800688a:	d007      	beq.n	800689c <_strtol_l.isra.0+0x84>
 800688c:	4584      	cmp	ip, r0
 800688e:	d31c      	bcc.n	80068ca <_strtol_l.isra.0+0xb2>
 8006890:	d101      	bne.n	8006896 <_strtol_l.isra.0+0x7e>
 8006892:	45a6      	cmp	lr, r4
 8006894:	db19      	blt.n	80068ca <_strtol_l.isra.0+0xb2>
 8006896:	fb00 4006 	mla	r0, r0, r6, r4
 800689a:	2701      	movs	r7, #1
 800689c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068a0:	e7eb      	b.n	800687a <_strtol_l.isra.0+0x62>
 80068a2:	462f      	mov	r7, r5
 80068a4:	e7bf      	b.n	8006826 <_strtol_l.isra.0+0xe>
 80068a6:	2c2b      	cmp	r4, #43	; 0x2b
 80068a8:	bf04      	itt	eq
 80068aa:	1cbd      	addeq	r5, r7, #2
 80068ac:	787c      	ldrbeq	r4, [r7, #1]
 80068ae:	461a      	mov	r2, r3
 80068b0:	e7c9      	b.n	8006846 <_strtol_l.isra.0+0x2e>
 80068b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80068b6:	2b19      	cmp	r3, #25
 80068b8:	d801      	bhi.n	80068be <_strtol_l.isra.0+0xa6>
 80068ba:	3c37      	subs	r4, #55	; 0x37
 80068bc:	e7e2      	b.n	8006884 <_strtol_l.isra.0+0x6c>
 80068be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80068c2:	2b19      	cmp	r3, #25
 80068c4:	d804      	bhi.n	80068d0 <_strtol_l.isra.0+0xb8>
 80068c6:	3c57      	subs	r4, #87	; 0x57
 80068c8:	e7dc      	b.n	8006884 <_strtol_l.isra.0+0x6c>
 80068ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068ce:	e7e5      	b.n	800689c <_strtol_l.isra.0+0x84>
 80068d0:	1c7b      	adds	r3, r7, #1
 80068d2:	d108      	bne.n	80068e6 <_strtol_l.isra.0+0xce>
 80068d4:	2322      	movs	r3, #34	; 0x22
 80068d6:	f8c8 3000 	str.w	r3, [r8]
 80068da:	4608      	mov	r0, r1
 80068dc:	f1ba 0f00 	cmp.w	sl, #0
 80068e0:	d107      	bne.n	80068f2 <_strtol_l.isra.0+0xda>
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e6:	b102      	cbz	r2, 80068ea <_strtol_l.isra.0+0xd2>
 80068e8:	4240      	negs	r0, r0
 80068ea:	f1ba 0f00 	cmp.w	sl, #0
 80068ee:	d0f8      	beq.n	80068e2 <_strtol_l.isra.0+0xca>
 80068f0:	b10f      	cbz	r7, 80068f6 <_strtol_l.isra.0+0xde>
 80068f2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80068f6:	f8ca 9000 	str.w	r9, [sl]
 80068fa:	e7f2      	b.n	80068e2 <_strtol_l.isra.0+0xca>
 80068fc:	2430      	movs	r4, #48	; 0x30
 80068fe:	2e00      	cmp	r6, #0
 8006900:	d1af      	bne.n	8006862 <_strtol_l.isra.0+0x4a>
 8006902:	2608      	movs	r6, #8
 8006904:	e7ad      	b.n	8006862 <_strtol_l.isra.0+0x4a>
 8006906:	2c30      	cmp	r4, #48	; 0x30
 8006908:	d0a3      	beq.n	8006852 <_strtol_l.isra.0+0x3a>
 800690a:	260a      	movs	r6, #10
 800690c:	e7a9      	b.n	8006862 <_strtol_l.isra.0+0x4a>
	...

08006910 <_strtol_r>:
 8006910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006912:	4c06      	ldr	r4, [pc, #24]	; (800692c <_strtol_r+0x1c>)
 8006914:	4d06      	ldr	r5, [pc, #24]	; (8006930 <_strtol_r+0x20>)
 8006916:	6824      	ldr	r4, [r4, #0]
 8006918:	6a24      	ldr	r4, [r4, #32]
 800691a:	2c00      	cmp	r4, #0
 800691c:	bf08      	it	eq
 800691e:	462c      	moveq	r4, r5
 8006920:	9400      	str	r4, [sp, #0]
 8006922:	f7ff ff79 	bl	8006818 <_strtol_l.isra.0>
 8006926:	b003      	add	sp, #12
 8006928:	bd30      	pop	{r4, r5, pc}
 800692a:	bf00      	nop
 800692c:	20000014 	.word	0x20000014
 8006930:	20000078 	.word	0x20000078

08006934 <quorem>:
 8006934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	6903      	ldr	r3, [r0, #16]
 800693a:	690c      	ldr	r4, [r1, #16]
 800693c:	42a3      	cmp	r3, r4
 800693e:	4680      	mov	r8, r0
 8006940:	f2c0 8082 	blt.w	8006a48 <quorem+0x114>
 8006944:	3c01      	subs	r4, #1
 8006946:	f101 0714 	add.w	r7, r1, #20
 800694a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800694e:	f100 0614 	add.w	r6, r0, #20
 8006952:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006956:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800695a:	eb06 030c 	add.w	r3, r6, ip
 800695e:	3501      	adds	r5, #1
 8006960:	eb07 090c 	add.w	r9, r7, ip
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	fbb0 f5f5 	udiv	r5, r0, r5
 800696a:	b395      	cbz	r5, 80069d2 <quorem+0x9e>
 800696c:	f04f 0a00 	mov.w	sl, #0
 8006970:	4638      	mov	r0, r7
 8006972:	46b6      	mov	lr, r6
 8006974:	46d3      	mov	fp, sl
 8006976:	f850 2b04 	ldr.w	r2, [r0], #4
 800697a:	b293      	uxth	r3, r2
 800697c:	fb05 a303 	mla	r3, r5, r3, sl
 8006980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006984:	b29b      	uxth	r3, r3
 8006986:	ebab 0303 	sub.w	r3, fp, r3
 800698a:	0c12      	lsrs	r2, r2, #16
 800698c:	f8de b000 	ldr.w	fp, [lr]
 8006990:	fb05 a202 	mla	r2, r5, r2, sl
 8006994:	fa13 f38b 	uxtah	r3, r3, fp
 8006998:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800699c:	fa1f fb82 	uxth.w	fp, r2
 80069a0:	f8de 2000 	ldr.w	r2, [lr]
 80069a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80069a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069b2:	4581      	cmp	r9, r0
 80069b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80069b8:	f84e 3b04 	str.w	r3, [lr], #4
 80069bc:	d2db      	bcs.n	8006976 <quorem+0x42>
 80069be:	f856 300c 	ldr.w	r3, [r6, ip]
 80069c2:	b933      	cbnz	r3, 80069d2 <quorem+0x9e>
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	3b04      	subs	r3, #4
 80069c8:	429e      	cmp	r6, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	d330      	bcc.n	8006a30 <quorem+0xfc>
 80069ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80069d2:	4640      	mov	r0, r8
 80069d4:	f001 fc70 	bl	80082b8 <__mcmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	db25      	blt.n	8006a28 <quorem+0xf4>
 80069dc:	3501      	adds	r5, #1
 80069de:	4630      	mov	r0, r6
 80069e0:	f04f 0c00 	mov.w	ip, #0
 80069e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80069e8:	f8d0 e000 	ldr.w	lr, [r0]
 80069ec:	b293      	uxth	r3, r2
 80069ee:	ebac 0303 	sub.w	r3, ip, r3
 80069f2:	0c12      	lsrs	r2, r2, #16
 80069f4:	fa13 f38e 	uxtah	r3, r3, lr
 80069f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a06:	45b9      	cmp	r9, r7
 8006a08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a0c:	f840 3b04 	str.w	r3, [r0], #4
 8006a10:	d2e8      	bcs.n	80069e4 <quorem+0xb0>
 8006a12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006a16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006a1a:	b92a      	cbnz	r2, 8006a28 <quorem+0xf4>
 8006a1c:	3b04      	subs	r3, #4
 8006a1e:	429e      	cmp	r6, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	d30b      	bcc.n	8006a3c <quorem+0x108>
 8006a24:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a28:	4628      	mov	r0, r5
 8006a2a:	b003      	add	sp, #12
 8006a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	3b04      	subs	r3, #4
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	d1ca      	bne.n	80069ce <quorem+0x9a>
 8006a38:	3c01      	subs	r4, #1
 8006a3a:	e7c5      	b.n	80069c8 <quorem+0x94>
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	3b04      	subs	r3, #4
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	d1ef      	bne.n	8006a24 <quorem+0xf0>
 8006a44:	3c01      	subs	r4, #1
 8006a46:	e7ea      	b.n	8006a1e <quorem+0xea>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e7ee      	b.n	8006a2a <quorem+0xf6>
 8006a4c:	0000      	movs	r0, r0
	...

08006a50 <_dtoa_r>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	ec57 6b10 	vmov	r6, r7, d0
 8006a58:	b097      	sub	sp, #92	; 0x5c
 8006a5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a5c:	9106      	str	r1, [sp, #24]
 8006a5e:	4604      	mov	r4, r0
 8006a60:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a62:	9312      	str	r3, [sp, #72]	; 0x48
 8006a64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a68:	e9cd 6700 	strd	r6, r7, [sp]
 8006a6c:	b93d      	cbnz	r5, 8006a7e <_dtoa_r+0x2e>
 8006a6e:	2010      	movs	r0, #16
 8006a70:	f001 f9aa 	bl	8007dc8 <malloc>
 8006a74:	6260      	str	r0, [r4, #36]	; 0x24
 8006a76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a7a:	6005      	str	r5, [r0, #0]
 8006a7c:	60c5      	str	r5, [r0, #12]
 8006a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a80:	6819      	ldr	r1, [r3, #0]
 8006a82:	b151      	cbz	r1, 8006a9a <_dtoa_r+0x4a>
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	604a      	str	r2, [r1, #4]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4093      	lsls	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f001 f9f3 	bl	8007e7a <_Bfree>
 8006a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	1e3b      	subs	r3, r7, #0
 8006a9c:	bfbb      	ittet	lt
 8006a9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006aa2:	9301      	strlt	r3, [sp, #4]
 8006aa4:	2300      	movge	r3, #0
 8006aa6:	2201      	movlt	r2, #1
 8006aa8:	bfac      	ite	ge
 8006aaa:	f8c8 3000 	strge.w	r3, [r8]
 8006aae:	f8c8 2000 	strlt.w	r2, [r8]
 8006ab2:	4baf      	ldr	r3, [pc, #700]	; (8006d70 <_dtoa_r+0x320>)
 8006ab4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ab8:	ea33 0308 	bics.w	r3, r3, r8
 8006abc:	d114      	bne.n	8006ae8 <_dtoa_r+0x98>
 8006abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	9b00      	ldr	r3, [sp, #0]
 8006ac8:	b923      	cbnz	r3, 8006ad4 <_dtoa_r+0x84>
 8006aca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f000 8542 	beq.w	8007558 <_dtoa_r+0xb08>
 8006ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006d84 <_dtoa_r+0x334>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 8544 	beq.w	8007568 <_dtoa_r+0xb18>
 8006ae0:	f10b 0303 	add.w	r3, fp, #3
 8006ae4:	f000 bd3e 	b.w	8007564 <_dtoa_r+0xb14>
 8006ae8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	4630      	mov	r0, r6
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7f9 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006af8:	4681      	mov	r9, r0
 8006afa:	b168      	cbz	r0, 8006b18 <_dtoa_r+0xc8>
 8006afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006afe:	2301      	movs	r3, #1
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8524 	beq.w	8007552 <_dtoa_r+0xb02>
 8006b0a:	4b9a      	ldr	r3, [pc, #616]	; (8006d74 <_dtoa_r+0x324>)
 8006b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b0e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	f000 bd28 	b.w	8007568 <_dtoa_r+0xb18>
 8006b18:	aa14      	add	r2, sp, #80	; 0x50
 8006b1a:	a915      	add	r1, sp, #84	; 0x54
 8006b1c:	ec47 6b10 	vmov	d0, r6, r7
 8006b20:	4620      	mov	r0, r4
 8006b22:	f001 fcb7 	bl	8008494 <__d2b>
 8006b26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b2a:	9004      	str	r0, [sp, #16]
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	d07c      	beq.n	8006c2a <_dtoa_r+0x1da>
 8006b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006b38:	46b2      	mov	sl, r6
 8006b3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006b46:	2200      	movs	r2, #0
 8006b48:	4b8b      	ldr	r3, [pc, #556]	; (8006d78 <_dtoa_r+0x328>)
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	f7f9 fb9b 	bl	8000288 <__aeabi_dsub>
 8006b52:	a381      	add	r3, pc, #516	; (adr r3, 8006d58 <_dtoa_r+0x308>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fd4e 	bl	80005f8 <__aeabi_dmul>
 8006b5c:	a380      	add	r3, pc, #512	; (adr r3, 8006d60 <_dtoa_r+0x310>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f7f9 fb93 	bl	800028c <__adddf3>
 8006b66:	4606      	mov	r6, r0
 8006b68:	4628      	mov	r0, r5
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	f7f9 fcda 	bl	8000524 <__aeabi_i2d>
 8006b70:	a37d      	add	r3, pc, #500	; (adr r3, 8006d68 <_dtoa_r+0x318>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fd3f 	bl	80005f8 <__aeabi_dmul>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	f7f9 fb83 	bl	800028c <__adddf3>
 8006b86:	4606      	mov	r6, r0
 8006b88:	460f      	mov	r7, r1
 8006b8a:	f7f9 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4682      	mov	sl, r0
 8006b92:	2300      	movs	r3, #0
 8006b94:	4630      	mov	r0, r6
 8006b96:	4639      	mov	r1, r7
 8006b98:	f7f9 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8006b9c:	b148      	cbz	r0, 8006bb2 <_dtoa_r+0x162>
 8006b9e:	4650      	mov	r0, sl
 8006ba0:	f7f9 fcc0 	bl	8000524 <__aeabi_i2d>
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	f7f9 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bac:	b908      	cbnz	r0, 8006bb2 <_dtoa_r+0x162>
 8006bae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006bb2:	f1ba 0f16 	cmp.w	sl, #22
 8006bb6:	d859      	bhi.n	8006c6c <_dtoa_r+0x21c>
 8006bb8:	4970      	ldr	r1, [pc, #448]	; (8006d7c <_dtoa_r+0x32c>)
 8006bba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc6:	f7f9 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d050      	beq.n	8006c70 <_dtoa_r+0x220>
 8006bce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bd8:	1b5d      	subs	r5, r3, r5
 8006bda:	f1b5 0801 	subs.w	r8, r5, #1
 8006bde:	bf49      	itett	mi
 8006be0:	f1c5 0301 	rsbmi	r3, r5, #1
 8006be4:	2300      	movpl	r3, #0
 8006be6:	9305      	strmi	r3, [sp, #20]
 8006be8:	f04f 0800 	movmi.w	r8, #0
 8006bec:	bf58      	it	pl
 8006bee:	9305      	strpl	r3, [sp, #20]
 8006bf0:	f1ba 0f00 	cmp.w	sl, #0
 8006bf4:	db3e      	blt.n	8006c74 <_dtoa_r+0x224>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	44d0      	add	r8, sl
 8006bfa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006bfe:	9307      	str	r3, [sp, #28]
 8006c00:	9b06      	ldr	r3, [sp, #24]
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	f200 8090 	bhi.w	8006d28 <_dtoa_r+0x2d8>
 8006c08:	2b05      	cmp	r3, #5
 8006c0a:	bfc4      	itt	gt
 8006c0c:	3b04      	subgt	r3, #4
 8006c0e:	9306      	strgt	r3, [sp, #24]
 8006c10:	9b06      	ldr	r3, [sp, #24]
 8006c12:	f1a3 0302 	sub.w	r3, r3, #2
 8006c16:	bfcc      	ite	gt
 8006c18:	2500      	movgt	r5, #0
 8006c1a:	2501      	movle	r5, #1
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	f200 808f 	bhi.w	8006d40 <_dtoa_r+0x2f0>
 8006c22:	e8df f003 	tbb	[pc, r3]
 8006c26:	7f7d      	.short	0x7f7d
 8006c28:	7131      	.short	0x7131
 8006c2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006c2e:	441d      	add	r5, r3
 8006c30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006c34:	2820      	cmp	r0, #32
 8006c36:	dd13      	ble.n	8006c60 <_dtoa_r+0x210>
 8006c38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	fa08 f800 	lsl.w	r8, r8, r0
 8006c42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006c46:	fa23 f000 	lsr.w	r0, r3, r0
 8006c4a:	ea48 0000 	orr.w	r0, r8, r0
 8006c4e:	f7f9 fc59 	bl	8000504 <__aeabi_ui2d>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4682      	mov	sl, r0
 8006c56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006c5a:	3d01      	subs	r5, #1
 8006c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c5e:	e772      	b.n	8006b46 <_dtoa_r+0xf6>
 8006c60:	9b00      	ldr	r3, [sp, #0]
 8006c62:	f1c0 0020 	rsb	r0, r0, #32
 8006c66:	fa03 f000 	lsl.w	r0, r3, r0
 8006c6a:	e7f0      	b.n	8006c4e <_dtoa_r+0x1fe>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e7b1      	b.n	8006bd4 <_dtoa_r+0x184>
 8006c70:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c72:	e7b0      	b.n	8006bd6 <_dtoa_r+0x186>
 8006c74:	9b05      	ldr	r3, [sp, #20]
 8006c76:	eba3 030a 	sub.w	r3, r3, sl
 8006c7a:	9305      	str	r3, [sp, #20]
 8006c7c:	f1ca 0300 	rsb	r3, sl, #0
 8006c80:	9307      	str	r3, [sp, #28]
 8006c82:	2300      	movs	r3, #0
 8006c84:	930e      	str	r3, [sp, #56]	; 0x38
 8006c86:	e7bb      	b.n	8006c00 <_dtoa_r+0x1b0>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dd59      	ble.n	8006d46 <_dtoa_r+0x2f6>
 8006c92:	9302      	str	r3, [sp, #8]
 8006c94:	4699      	mov	r9, r3
 8006c96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c98:	2200      	movs	r2, #0
 8006c9a:	6072      	str	r2, [r6, #4]
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	f102 0014 	add.w	r0, r2, #20
 8006ca2:	4298      	cmp	r0, r3
 8006ca4:	6871      	ldr	r1, [r6, #4]
 8006ca6:	d953      	bls.n	8006d50 <_dtoa_r+0x300>
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f001 f8b2 	bl	8007e12 <_Balloc>
 8006cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb0:	6030      	str	r0, [r6, #0]
 8006cb2:	f1b9 0f0e 	cmp.w	r9, #14
 8006cb6:	f8d3 b000 	ldr.w	fp, [r3]
 8006cba:	f200 80e6 	bhi.w	8006e8a <_dtoa_r+0x43a>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	f000 80e3 	beq.w	8006e8a <_dtoa_r+0x43a>
 8006cc4:	ed9d 7b00 	vldr	d7, [sp]
 8006cc8:	f1ba 0f00 	cmp.w	sl, #0
 8006ccc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006cd0:	dd74      	ble.n	8006dbc <_dtoa_r+0x36c>
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <_dtoa_r+0x32c>)
 8006cd4:	f00a 030f 	and.w	r3, sl, #15
 8006cd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cdc:	ed93 7b00 	vldr	d7, [r3]
 8006ce0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006ce4:	06f0      	lsls	r0, r6, #27
 8006ce6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006cea:	d565      	bpl.n	8006db8 <_dtoa_r+0x368>
 8006cec:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <_dtoa_r+0x330>)
 8006cee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cf6:	f7f9 fda9 	bl	800084c <__aeabi_ddiv>
 8006cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8006cfe:	f006 060f 	and.w	r6, r6, #15
 8006d02:	2503      	movs	r5, #3
 8006d04:	4f1e      	ldr	r7, [pc, #120]	; (8006d80 <_dtoa_r+0x330>)
 8006d06:	e04c      	b.n	8006da2 <_dtoa_r+0x352>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0e:	4453      	add	r3, sl
 8006d10:	f103 0901 	add.w	r9, r3, #1
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	464b      	mov	r3, r9
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	bfb8      	it	lt
 8006d1c:	2301      	movlt	r3, #1
 8006d1e:	e7ba      	b.n	8006c96 <_dtoa_r+0x246>
 8006d20:	2300      	movs	r3, #0
 8006d22:	e7b2      	b.n	8006c8a <_dtoa_r+0x23a>
 8006d24:	2300      	movs	r3, #0
 8006d26:	e7f0      	b.n	8006d0a <_dtoa_r+0x2ba>
 8006d28:	2501      	movs	r5, #1
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9306      	str	r3, [sp, #24]
 8006d2e:	950a      	str	r5, [sp, #40]	; 0x28
 8006d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	4699      	mov	r9, r3
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2312      	movs	r3, #18
 8006d3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d3e:	e7aa      	b.n	8006c96 <_dtoa_r+0x246>
 8006d40:	2301      	movs	r3, #1
 8006d42:	930a      	str	r3, [sp, #40]	; 0x28
 8006d44:	e7f4      	b.n	8006d30 <_dtoa_r+0x2e0>
 8006d46:	2301      	movs	r3, #1
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	4699      	mov	r9, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	e7f5      	b.n	8006d3c <_dtoa_r+0x2ec>
 8006d50:	3101      	adds	r1, #1
 8006d52:	6071      	str	r1, [r6, #4]
 8006d54:	0052      	lsls	r2, r2, #1
 8006d56:	e7a2      	b.n	8006c9e <_dtoa_r+0x24e>
 8006d58:	636f4361 	.word	0x636f4361
 8006d5c:	3fd287a7 	.word	0x3fd287a7
 8006d60:	8b60c8b3 	.word	0x8b60c8b3
 8006d64:	3fc68a28 	.word	0x3fc68a28
 8006d68:	509f79fb 	.word	0x509f79fb
 8006d6c:	3fd34413 	.word	0x3fd34413
 8006d70:	7ff00000 	.word	0x7ff00000
 8006d74:	08009315 	.word	0x08009315
 8006d78:	3ff80000 	.word	0x3ff80000
 8006d7c:	08009438 	.word	0x08009438
 8006d80:	08009410 	.word	0x08009410
 8006d84:	08009399 	.word	0x08009399
 8006d88:	07f1      	lsls	r1, r6, #31
 8006d8a:	d508      	bpl.n	8006d9e <_dtoa_r+0x34e>
 8006d8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d94:	f7f9 fc30 	bl	80005f8 <__aeabi_dmul>
 8006d98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	1076      	asrs	r6, r6, #1
 8006da0:	3708      	adds	r7, #8
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	d1f0      	bne.n	8006d88 <_dtoa_r+0x338>
 8006da6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dae:	f7f9 fd4d 	bl	800084c <__aeabi_ddiv>
 8006db2:	e9cd 0100 	strd	r0, r1, [sp]
 8006db6:	e01a      	b.n	8006dee <_dtoa_r+0x39e>
 8006db8:	2502      	movs	r5, #2
 8006dba:	e7a3      	b.n	8006d04 <_dtoa_r+0x2b4>
 8006dbc:	f000 80a0 	beq.w	8006f00 <_dtoa_r+0x4b0>
 8006dc0:	f1ca 0600 	rsb	r6, sl, #0
 8006dc4:	4b9f      	ldr	r3, [pc, #636]	; (8007044 <_dtoa_r+0x5f4>)
 8006dc6:	4fa0      	ldr	r7, [pc, #640]	; (8007048 <_dtoa_r+0x5f8>)
 8006dc8:	f006 020f 	and.w	r2, r6, #15
 8006dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dd8:	f7f9 fc0e 	bl	80005f8 <__aeabi_dmul>
 8006ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8006de0:	1136      	asrs	r6, r6, #4
 8006de2:	2300      	movs	r3, #0
 8006de4:	2502      	movs	r5, #2
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	d17f      	bne.n	8006eea <_dtoa_r+0x49a>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e1      	bne.n	8006db2 <_dtoa_r+0x362>
 8006dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8087 	beq.w	8006f04 <_dtoa_r+0x4b4>
 8006df6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4b93      	ldr	r3, [pc, #588]	; (800704c <_dtoa_r+0x5fc>)
 8006dfe:	4630      	mov	r0, r6
 8006e00:	4639      	mov	r1, r7
 8006e02:	f7f9 fe6b 	bl	8000adc <__aeabi_dcmplt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d07c      	beq.n	8006f04 <_dtoa_r+0x4b4>
 8006e0a:	f1b9 0f00 	cmp.w	r9, #0
 8006e0e:	d079      	beq.n	8006f04 <_dtoa_r+0x4b4>
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd35      	ble.n	8006e82 <_dtoa_r+0x432>
 8006e16:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006e1a:	9308      	str	r3, [sp, #32]
 8006e1c:	4639      	mov	r1, r7
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4b8b      	ldr	r3, [pc, #556]	; (8007050 <_dtoa_r+0x600>)
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7f9 fbe8 	bl	80005f8 <__aeabi_dmul>
 8006e28:	e9cd 0100 	strd	r0, r1, [sp]
 8006e2c:	9f02      	ldr	r7, [sp, #8]
 8006e2e:	3501      	adds	r5, #1
 8006e30:	4628      	mov	r0, r5
 8006e32:	f7f9 fb77 	bl	8000524 <__aeabi_i2d>
 8006e36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e3a:	f7f9 fbdd 	bl	80005f8 <__aeabi_dmul>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4b84      	ldr	r3, [pc, #528]	; (8007054 <_dtoa_r+0x604>)
 8006e42:	f7f9 fa23 	bl	800028c <__adddf3>
 8006e46:	4605      	mov	r5, r0
 8006e48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e4c:	2f00      	cmp	r7, #0
 8006e4e:	d15d      	bne.n	8006f0c <_dtoa_r+0x4bc>
 8006e50:	2200      	movs	r2, #0
 8006e52:	4b81      	ldr	r3, [pc, #516]	; (8007058 <_dtoa_r+0x608>)
 8006e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e58:	f7f9 fa16 	bl	8000288 <__aeabi_dsub>
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	4633      	mov	r3, r6
 8006e60:	e9cd 0100 	strd	r0, r1, [sp]
 8006e64:	f7f9 fe58 	bl	8000b18 <__aeabi_dcmpgt>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f040 8288 	bne.w	800737e <_dtoa_r+0x92e>
 8006e6e:	462a      	mov	r2, r5
 8006e70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e78:	f7f9 fe30 	bl	8000adc <__aeabi_dcmplt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f040 827c 	bne.w	800737a <_dtoa_r+0x92a>
 8006e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e86:	e9cd 2300 	strd	r2, r3, [sp]
 8006e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f2c0 8150 	blt.w	8007132 <_dtoa_r+0x6e2>
 8006e92:	f1ba 0f0e 	cmp.w	sl, #14
 8006e96:	f300 814c 	bgt.w	8007132 <_dtoa_r+0x6e2>
 8006e9a:	4b6a      	ldr	r3, [pc, #424]	; (8007044 <_dtoa_r+0x5f4>)
 8006e9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ea0:	ed93 7b00 	vldr	d7, [r3]
 8006ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006eac:	f280 80d8 	bge.w	8007060 <_dtoa_r+0x610>
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	f300 80d4 	bgt.w	8007060 <_dtoa_r+0x610>
 8006eb8:	f040 825e 	bne.w	8007378 <_dtoa_r+0x928>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4b66      	ldr	r3, [pc, #408]	; (8007058 <_dtoa_r+0x608>)
 8006ec0:	ec51 0b17 	vmov	r0, r1, d7
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ecc:	f7f9 fe1a 	bl	8000b04 <__aeabi_dcmpge>
 8006ed0:	464f      	mov	r7, r9
 8006ed2:	464e      	mov	r6, r9
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 8234 	bne.w	8007342 <_dtoa_r+0x8f2>
 8006eda:	2331      	movs	r3, #49	; 0x31
 8006edc:	f10b 0501 	add.w	r5, fp, #1
 8006ee0:	f88b 3000 	strb.w	r3, [fp]
 8006ee4:	f10a 0a01 	add.w	sl, sl, #1
 8006ee8:	e22f      	b.n	800734a <_dtoa_r+0x8fa>
 8006eea:	07f2      	lsls	r2, r6, #31
 8006eec:	d505      	bpl.n	8006efa <_dtoa_r+0x4aa>
 8006eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef2:	f7f9 fb81 	bl	80005f8 <__aeabi_dmul>
 8006ef6:	3501      	adds	r5, #1
 8006ef8:	2301      	movs	r3, #1
 8006efa:	1076      	asrs	r6, r6, #1
 8006efc:	3708      	adds	r7, #8
 8006efe:	e772      	b.n	8006de6 <_dtoa_r+0x396>
 8006f00:	2502      	movs	r5, #2
 8006f02:	e774      	b.n	8006dee <_dtoa_r+0x39e>
 8006f04:	f8cd a020 	str.w	sl, [sp, #32]
 8006f08:	464f      	mov	r7, r9
 8006f0a:	e791      	b.n	8006e30 <_dtoa_r+0x3e0>
 8006f0c:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <_dtoa_r+0x5f4>)
 8006f0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d047      	beq.n	8006fac <_dtoa_r+0x55c>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	2000      	movs	r0, #0
 8006f22:	494e      	ldr	r1, [pc, #312]	; (800705c <_dtoa_r+0x60c>)
 8006f24:	f7f9 fc92 	bl	800084c <__aeabi_ddiv>
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4633      	mov	r3, r6
 8006f2c:	f7f9 f9ac 	bl	8000288 <__aeabi_dsub>
 8006f30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f34:	465d      	mov	r5, fp
 8006f36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f3a:	f7f9 fe0d 	bl	8000b58 <__aeabi_d2iz>
 8006f3e:	4606      	mov	r6, r0
 8006f40:	f7f9 faf0 	bl	8000524 <__aeabi_i2d>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f4c:	f7f9 f99c 	bl	8000288 <__aeabi_dsub>
 8006f50:	3630      	adds	r6, #48	; 0x30
 8006f52:	f805 6b01 	strb.w	r6, [r5], #1
 8006f56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f5e:	f7f9 fdbd 	bl	8000adc <__aeabi_dcmplt>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d163      	bne.n	800702e <_dtoa_r+0x5de>
 8006f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	4937      	ldr	r1, [pc, #220]	; (800704c <_dtoa_r+0x5fc>)
 8006f6e:	f7f9 f98b 	bl	8000288 <__aeabi_dsub>
 8006f72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f76:	f7f9 fdb1 	bl	8000adc <__aeabi_dcmplt>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f040 80b7 	bne.w	80070ee <_dtoa_r+0x69e>
 8006f80:	eba5 030b 	sub.w	r3, r5, fp
 8006f84:	429f      	cmp	r7, r3
 8006f86:	f77f af7c 	ble.w	8006e82 <_dtoa_r+0x432>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4b30      	ldr	r3, [pc, #192]	; (8007050 <_dtoa_r+0x600>)
 8006f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f92:	f7f9 fb31 	bl	80005f8 <__aeabi_dmul>
 8006f96:	2200      	movs	r2, #0
 8006f98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f9c:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <_dtoa_r+0x600>)
 8006f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fa2:	f7f9 fb29 	bl	80005f8 <__aeabi_dmul>
 8006fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8006faa:	e7c4      	b.n	8006f36 <_dtoa_r+0x4e6>
 8006fac:	462a      	mov	r2, r5
 8006fae:	4633      	mov	r3, r6
 8006fb0:	f7f9 fb22 	bl	80005f8 <__aeabi_dmul>
 8006fb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006fb8:	eb0b 0507 	add.w	r5, fp, r7
 8006fbc:	465e      	mov	r6, fp
 8006fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc2:	f7f9 fdc9 	bl	8000b58 <__aeabi_d2iz>
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	f7f9 faac 	bl	8000524 <__aeabi_i2d>
 8006fcc:	3730      	adds	r7, #48	; 0x30
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd6:	f7f9 f957 	bl	8000288 <__aeabi_dsub>
 8006fda:	f806 7b01 	strb.w	r7, [r6], #1
 8006fde:	42ae      	cmp	r6, r5
 8006fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	d126      	bne.n	8007038 <_dtoa_r+0x5e8>
 8006fea:	4b1c      	ldr	r3, [pc, #112]	; (800705c <_dtoa_r+0x60c>)
 8006fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ff0:	f7f9 f94c 	bl	800028c <__adddf3>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ffc:	f7f9 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 8007000:	2800      	cmp	r0, #0
 8007002:	d174      	bne.n	80070ee <_dtoa_r+0x69e>
 8007004:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007008:	2000      	movs	r0, #0
 800700a:	4914      	ldr	r1, [pc, #80]	; (800705c <_dtoa_r+0x60c>)
 800700c:	f7f9 f93c 	bl	8000288 <__aeabi_dsub>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007018:	f7f9 fd60 	bl	8000adc <__aeabi_dcmplt>
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f af30 	beq.w	8006e82 <_dtoa_r+0x432>
 8007022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007026:	2b30      	cmp	r3, #48	; 0x30
 8007028:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800702c:	d002      	beq.n	8007034 <_dtoa_r+0x5e4>
 800702e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007032:	e04a      	b.n	80070ca <_dtoa_r+0x67a>
 8007034:	4615      	mov	r5, r2
 8007036:	e7f4      	b.n	8007022 <_dtoa_r+0x5d2>
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <_dtoa_r+0x600>)
 800703a:	f7f9 fadd 	bl	80005f8 <__aeabi_dmul>
 800703e:	e9cd 0100 	strd	r0, r1, [sp]
 8007042:	e7bc      	b.n	8006fbe <_dtoa_r+0x56e>
 8007044:	08009438 	.word	0x08009438
 8007048:	08009410 	.word	0x08009410
 800704c:	3ff00000 	.word	0x3ff00000
 8007050:	40240000 	.word	0x40240000
 8007054:	401c0000 	.word	0x401c0000
 8007058:	40140000 	.word	0x40140000
 800705c:	3fe00000 	.word	0x3fe00000
 8007060:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007064:	465d      	mov	r5, fp
 8007066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800706a:	4630      	mov	r0, r6
 800706c:	4639      	mov	r1, r7
 800706e:	f7f9 fbed 	bl	800084c <__aeabi_ddiv>
 8007072:	f7f9 fd71 	bl	8000b58 <__aeabi_d2iz>
 8007076:	4680      	mov	r8, r0
 8007078:	f7f9 fa54 	bl	8000524 <__aeabi_i2d>
 800707c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007080:	f7f9 faba 	bl	80005f8 <__aeabi_dmul>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4630      	mov	r0, r6
 800708a:	4639      	mov	r1, r7
 800708c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007090:	f7f9 f8fa 	bl	8000288 <__aeabi_dsub>
 8007094:	f805 6b01 	strb.w	r6, [r5], #1
 8007098:	eba5 060b 	sub.w	r6, r5, fp
 800709c:	45b1      	cmp	r9, r6
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	d139      	bne.n	8007118 <_dtoa_r+0x6c8>
 80070a4:	f7f9 f8f2 	bl	800028c <__adddf3>
 80070a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070ac:	4606      	mov	r6, r0
 80070ae:	460f      	mov	r7, r1
 80070b0:	f7f9 fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80070b4:	b9c8      	cbnz	r0, 80070ea <_dtoa_r+0x69a>
 80070b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070ba:	4630      	mov	r0, r6
 80070bc:	4639      	mov	r1, r7
 80070be:	f7f9 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c2:	b110      	cbz	r0, 80070ca <_dtoa_r+0x67a>
 80070c4:	f018 0f01 	tst.w	r8, #1
 80070c8:	d10f      	bne.n	80070ea <_dtoa_r+0x69a>
 80070ca:	9904      	ldr	r1, [sp, #16]
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 fed4 	bl	8007e7a <_Bfree>
 80070d2:	2300      	movs	r3, #0
 80070d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070d6:	702b      	strb	r3, [r5, #0]
 80070d8:	f10a 0301 	add.w	r3, sl, #1
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8241 	beq.w	8007568 <_dtoa_r+0xb18>
 80070e6:	601d      	str	r5, [r3, #0]
 80070e8:	e23e      	b.n	8007568 <_dtoa_r+0xb18>
 80070ea:	f8cd a020 	str.w	sl, [sp, #32]
 80070ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070f2:	2a39      	cmp	r2, #57	; 0x39
 80070f4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80070f8:	d108      	bne.n	800710c <_dtoa_r+0x6bc>
 80070fa:	459b      	cmp	fp, r3
 80070fc:	d10a      	bne.n	8007114 <_dtoa_r+0x6c4>
 80070fe:	9b08      	ldr	r3, [sp, #32]
 8007100:	3301      	adds	r3, #1
 8007102:	9308      	str	r3, [sp, #32]
 8007104:	2330      	movs	r3, #48	; 0x30
 8007106:	f88b 3000 	strb.w	r3, [fp]
 800710a:	465b      	mov	r3, fp
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	3201      	adds	r2, #1
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	e78c      	b.n	800702e <_dtoa_r+0x5de>
 8007114:	461d      	mov	r5, r3
 8007116:	e7ea      	b.n	80070ee <_dtoa_r+0x69e>
 8007118:	2200      	movs	r2, #0
 800711a:	4b9b      	ldr	r3, [pc, #620]	; (8007388 <_dtoa_r+0x938>)
 800711c:	f7f9 fa6c 	bl	80005f8 <__aeabi_dmul>
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	4606      	mov	r6, r0
 8007126:	460f      	mov	r7, r1
 8007128:	f7f9 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800712c:	2800      	cmp	r0, #0
 800712e:	d09a      	beq.n	8007066 <_dtoa_r+0x616>
 8007130:	e7cb      	b.n	80070ca <_dtoa_r+0x67a>
 8007132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007134:	2a00      	cmp	r2, #0
 8007136:	f000 808b 	beq.w	8007250 <_dtoa_r+0x800>
 800713a:	9a06      	ldr	r2, [sp, #24]
 800713c:	2a01      	cmp	r2, #1
 800713e:	dc6e      	bgt.n	800721e <_dtoa_r+0x7ce>
 8007140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007142:	2a00      	cmp	r2, #0
 8007144:	d067      	beq.n	8007216 <_dtoa_r+0x7c6>
 8007146:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800714a:	9f07      	ldr	r7, [sp, #28]
 800714c:	9d05      	ldr	r5, [sp, #20]
 800714e:	9a05      	ldr	r2, [sp, #20]
 8007150:	2101      	movs	r1, #1
 8007152:	441a      	add	r2, r3
 8007154:	4620      	mov	r0, r4
 8007156:	9205      	str	r2, [sp, #20]
 8007158:	4498      	add	r8, r3
 800715a:	f000 ff6c 	bl	8008036 <__i2b>
 800715e:	4606      	mov	r6, r0
 8007160:	2d00      	cmp	r5, #0
 8007162:	dd0c      	ble.n	800717e <_dtoa_r+0x72e>
 8007164:	f1b8 0f00 	cmp.w	r8, #0
 8007168:	dd09      	ble.n	800717e <_dtoa_r+0x72e>
 800716a:	4545      	cmp	r5, r8
 800716c:	9a05      	ldr	r2, [sp, #20]
 800716e:	462b      	mov	r3, r5
 8007170:	bfa8      	it	ge
 8007172:	4643      	movge	r3, r8
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	9205      	str	r2, [sp, #20]
 8007178:	1aed      	subs	r5, r5, r3
 800717a:	eba8 0803 	sub.w	r8, r8, r3
 800717e:	9b07      	ldr	r3, [sp, #28]
 8007180:	b1eb      	cbz	r3, 80071be <_dtoa_r+0x76e>
 8007182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007184:	2b00      	cmp	r3, #0
 8007186:	d067      	beq.n	8007258 <_dtoa_r+0x808>
 8007188:	b18f      	cbz	r7, 80071ae <_dtoa_r+0x75e>
 800718a:	4631      	mov	r1, r6
 800718c:	463a      	mov	r2, r7
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fff0 	bl	8008174 <__pow5mult>
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	4601      	mov	r1, r0
 8007198:	4606      	mov	r6, r0
 800719a:	4620      	mov	r0, r4
 800719c:	f000 ff54 	bl	8008048 <__multiply>
 80071a0:	9904      	ldr	r1, [sp, #16]
 80071a2:	9008      	str	r0, [sp, #32]
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fe68 	bl	8007e7a <_Bfree>
 80071aa:	9b08      	ldr	r3, [sp, #32]
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	9b07      	ldr	r3, [sp, #28]
 80071b0:	1bda      	subs	r2, r3, r7
 80071b2:	d004      	beq.n	80071be <_dtoa_r+0x76e>
 80071b4:	9904      	ldr	r1, [sp, #16]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 ffdc 	bl	8008174 <__pow5mult>
 80071bc:	9004      	str	r0, [sp, #16]
 80071be:	2101      	movs	r1, #1
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 ff38 	bl	8008036 <__i2b>
 80071c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c8:	4607      	mov	r7, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 81d0 	beq.w	8007570 <_dtoa_r+0xb20>
 80071d0:	461a      	mov	r2, r3
 80071d2:	4601      	mov	r1, r0
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 ffcd 	bl	8008174 <__pow5mult>
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	4607      	mov	r7, r0
 80071e0:	dc40      	bgt.n	8007264 <_dtoa_r+0x814>
 80071e2:	9b00      	ldr	r3, [sp, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d139      	bne.n	800725c <_dtoa_r+0x80c>
 80071e8:	9b01      	ldr	r3, [sp, #4]
 80071ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d136      	bne.n	8007260 <_dtoa_r+0x810>
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f8:	0d1b      	lsrs	r3, r3, #20
 80071fa:	051b      	lsls	r3, r3, #20
 80071fc:	b12b      	cbz	r3, 800720a <_dtoa_r+0x7ba>
 80071fe:	9b05      	ldr	r3, [sp, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	f108 0801 	add.w	r8, r8, #1
 8007208:	2301      	movs	r3, #1
 800720a:	9307      	str	r3, [sp, #28]
 800720c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800720e:	2b00      	cmp	r3, #0
 8007210:	d12a      	bne.n	8007268 <_dtoa_r+0x818>
 8007212:	2001      	movs	r0, #1
 8007214:	e030      	b.n	8007278 <_dtoa_r+0x828>
 8007216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007218:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800721c:	e795      	b.n	800714a <_dtoa_r+0x6fa>
 800721e:	9b07      	ldr	r3, [sp, #28]
 8007220:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007224:	42bb      	cmp	r3, r7
 8007226:	bfbf      	itttt	lt
 8007228:	9b07      	ldrlt	r3, [sp, #28]
 800722a:	9707      	strlt	r7, [sp, #28]
 800722c:	1afa      	sublt	r2, r7, r3
 800722e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007230:	bfbb      	ittet	lt
 8007232:	189b      	addlt	r3, r3, r2
 8007234:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007236:	1bdf      	subge	r7, r3, r7
 8007238:	2700      	movlt	r7, #0
 800723a:	f1b9 0f00 	cmp.w	r9, #0
 800723e:	bfb5      	itete	lt
 8007240:	9b05      	ldrlt	r3, [sp, #20]
 8007242:	9d05      	ldrge	r5, [sp, #20]
 8007244:	eba3 0509 	sublt.w	r5, r3, r9
 8007248:	464b      	movge	r3, r9
 800724a:	bfb8      	it	lt
 800724c:	2300      	movlt	r3, #0
 800724e:	e77e      	b.n	800714e <_dtoa_r+0x6fe>
 8007250:	9f07      	ldr	r7, [sp, #28]
 8007252:	9d05      	ldr	r5, [sp, #20]
 8007254:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007256:	e783      	b.n	8007160 <_dtoa_r+0x710>
 8007258:	9a07      	ldr	r2, [sp, #28]
 800725a:	e7ab      	b.n	80071b4 <_dtoa_r+0x764>
 800725c:	2300      	movs	r3, #0
 800725e:	e7d4      	b.n	800720a <_dtoa_r+0x7ba>
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	e7d2      	b.n	800720a <_dtoa_r+0x7ba>
 8007264:	2300      	movs	r3, #0
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800726e:	6918      	ldr	r0, [r3, #16]
 8007270:	f000 fe93 	bl	8007f9a <__hi0bits>
 8007274:	f1c0 0020 	rsb	r0, r0, #32
 8007278:	4440      	add	r0, r8
 800727a:	f010 001f 	ands.w	r0, r0, #31
 800727e:	d047      	beq.n	8007310 <_dtoa_r+0x8c0>
 8007280:	f1c0 0320 	rsb	r3, r0, #32
 8007284:	2b04      	cmp	r3, #4
 8007286:	dd3b      	ble.n	8007300 <_dtoa_r+0x8b0>
 8007288:	9b05      	ldr	r3, [sp, #20]
 800728a:	f1c0 001c 	rsb	r0, r0, #28
 800728e:	4403      	add	r3, r0
 8007290:	9305      	str	r3, [sp, #20]
 8007292:	4405      	add	r5, r0
 8007294:	4480      	add	r8, r0
 8007296:	9b05      	ldr	r3, [sp, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dd05      	ble.n	80072a8 <_dtoa_r+0x858>
 800729c:	461a      	mov	r2, r3
 800729e:	9904      	ldr	r1, [sp, #16]
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 ffb5 	bl	8008210 <__lshift>
 80072a6:	9004      	str	r0, [sp, #16]
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	dd05      	ble.n	80072ba <_dtoa_r+0x86a>
 80072ae:	4639      	mov	r1, r7
 80072b0:	4642      	mov	r2, r8
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 ffac 	bl	8008210 <__lshift>
 80072b8:	4607      	mov	r7, r0
 80072ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072bc:	b353      	cbz	r3, 8007314 <_dtoa_r+0x8c4>
 80072be:	4639      	mov	r1, r7
 80072c0:	9804      	ldr	r0, [sp, #16]
 80072c2:	f000 fff9 	bl	80082b8 <__mcmp>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	da24      	bge.n	8007314 <_dtoa_r+0x8c4>
 80072ca:	2300      	movs	r3, #0
 80072cc:	220a      	movs	r2, #10
 80072ce:	9904      	ldr	r1, [sp, #16]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fde9 	bl	8007ea8 <__multadd>
 80072d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d8:	9004      	str	r0, [sp, #16]
 80072da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 814d 	beq.w	800757e <_dtoa_r+0xb2e>
 80072e4:	2300      	movs	r3, #0
 80072e6:	4631      	mov	r1, r6
 80072e8:	220a      	movs	r2, #10
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fddc 	bl	8007ea8 <__multadd>
 80072f0:	9b02      	ldr	r3, [sp, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	4606      	mov	r6, r0
 80072f6:	dc4f      	bgt.n	8007398 <_dtoa_r+0x948>
 80072f8:	9b06      	ldr	r3, [sp, #24]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	dd4c      	ble.n	8007398 <_dtoa_r+0x948>
 80072fe:	e011      	b.n	8007324 <_dtoa_r+0x8d4>
 8007300:	d0c9      	beq.n	8007296 <_dtoa_r+0x846>
 8007302:	9a05      	ldr	r2, [sp, #20]
 8007304:	331c      	adds	r3, #28
 8007306:	441a      	add	r2, r3
 8007308:	9205      	str	r2, [sp, #20]
 800730a:	441d      	add	r5, r3
 800730c:	4498      	add	r8, r3
 800730e:	e7c2      	b.n	8007296 <_dtoa_r+0x846>
 8007310:	4603      	mov	r3, r0
 8007312:	e7f6      	b.n	8007302 <_dtoa_r+0x8b2>
 8007314:	f1b9 0f00 	cmp.w	r9, #0
 8007318:	dc38      	bgt.n	800738c <_dtoa_r+0x93c>
 800731a:	9b06      	ldr	r3, [sp, #24]
 800731c:	2b02      	cmp	r3, #2
 800731e:	dd35      	ble.n	800738c <_dtoa_r+0x93c>
 8007320:	f8cd 9008 	str.w	r9, [sp, #8]
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	b963      	cbnz	r3, 8007342 <_dtoa_r+0x8f2>
 8007328:	4639      	mov	r1, r7
 800732a:	2205      	movs	r2, #5
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fdbb 	bl	8007ea8 <__multadd>
 8007332:	4601      	mov	r1, r0
 8007334:	4607      	mov	r7, r0
 8007336:	9804      	ldr	r0, [sp, #16]
 8007338:	f000 ffbe 	bl	80082b8 <__mcmp>
 800733c:	2800      	cmp	r0, #0
 800733e:	f73f adcc 	bgt.w	8006eda <_dtoa_r+0x48a>
 8007342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007344:	465d      	mov	r5, fp
 8007346:	ea6f 0a03 	mvn.w	sl, r3
 800734a:	f04f 0900 	mov.w	r9, #0
 800734e:	4639      	mov	r1, r7
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fd92 	bl	8007e7a <_Bfree>
 8007356:	2e00      	cmp	r6, #0
 8007358:	f43f aeb7 	beq.w	80070ca <_dtoa_r+0x67a>
 800735c:	f1b9 0f00 	cmp.w	r9, #0
 8007360:	d005      	beq.n	800736e <_dtoa_r+0x91e>
 8007362:	45b1      	cmp	r9, r6
 8007364:	d003      	beq.n	800736e <_dtoa_r+0x91e>
 8007366:	4649      	mov	r1, r9
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fd86 	bl	8007e7a <_Bfree>
 800736e:	4631      	mov	r1, r6
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fd82 	bl	8007e7a <_Bfree>
 8007376:	e6a8      	b.n	80070ca <_dtoa_r+0x67a>
 8007378:	2700      	movs	r7, #0
 800737a:	463e      	mov	r6, r7
 800737c:	e7e1      	b.n	8007342 <_dtoa_r+0x8f2>
 800737e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007382:	463e      	mov	r6, r7
 8007384:	e5a9      	b.n	8006eda <_dtoa_r+0x48a>
 8007386:	bf00      	nop
 8007388:	40240000 	.word	0x40240000
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80fa 	beq.w	800758c <_dtoa_r+0xb3c>
 8007398:	2d00      	cmp	r5, #0
 800739a:	dd05      	ble.n	80073a8 <_dtoa_r+0x958>
 800739c:	4631      	mov	r1, r6
 800739e:	462a      	mov	r2, r5
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 ff35 	bl	8008210 <__lshift>
 80073a6:	4606      	mov	r6, r0
 80073a8:	9b07      	ldr	r3, [sp, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04c      	beq.n	8007448 <_dtoa_r+0x9f8>
 80073ae:	6871      	ldr	r1, [r6, #4]
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fd2e 	bl	8007e12 <_Balloc>
 80073b6:	6932      	ldr	r2, [r6, #16]
 80073b8:	3202      	adds	r2, #2
 80073ba:	4605      	mov	r5, r0
 80073bc:	0092      	lsls	r2, r2, #2
 80073be:	f106 010c 	add.w	r1, r6, #12
 80073c2:	300c      	adds	r0, #12
 80073c4:	f000 fd1a 	bl	8007dfc <memcpy>
 80073c8:	2201      	movs	r2, #1
 80073ca:	4629      	mov	r1, r5
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 ff1f 	bl	8008210 <__lshift>
 80073d2:	9b00      	ldr	r3, [sp, #0]
 80073d4:	f8cd b014 	str.w	fp, [sp, #20]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	46b1      	mov	r9, r6
 80073de:	9307      	str	r3, [sp, #28]
 80073e0:	4606      	mov	r6, r0
 80073e2:	4639      	mov	r1, r7
 80073e4:	9804      	ldr	r0, [sp, #16]
 80073e6:	f7ff faa5 	bl	8006934 <quorem>
 80073ea:	4649      	mov	r1, r9
 80073ec:	4605      	mov	r5, r0
 80073ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80073f2:	9804      	ldr	r0, [sp, #16]
 80073f4:	f000 ff60 	bl	80082b8 <__mcmp>
 80073f8:	4632      	mov	r2, r6
 80073fa:	9000      	str	r0, [sp, #0]
 80073fc:	4639      	mov	r1, r7
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 ff74 	bl	80082ec <__mdiff>
 8007404:	68c3      	ldr	r3, [r0, #12]
 8007406:	4602      	mov	r2, r0
 8007408:	bb03      	cbnz	r3, 800744c <_dtoa_r+0x9fc>
 800740a:	4601      	mov	r1, r0
 800740c:	9008      	str	r0, [sp, #32]
 800740e:	9804      	ldr	r0, [sp, #16]
 8007410:	f000 ff52 	bl	80082b8 <__mcmp>
 8007414:	9a08      	ldr	r2, [sp, #32]
 8007416:	4603      	mov	r3, r0
 8007418:	4611      	mov	r1, r2
 800741a:	4620      	mov	r0, r4
 800741c:	9308      	str	r3, [sp, #32]
 800741e:	f000 fd2c 	bl	8007e7a <_Bfree>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	b9a3      	cbnz	r3, 8007450 <_dtoa_r+0xa00>
 8007426:	9a06      	ldr	r2, [sp, #24]
 8007428:	b992      	cbnz	r2, 8007450 <_dtoa_r+0xa00>
 800742a:	9a07      	ldr	r2, [sp, #28]
 800742c:	b982      	cbnz	r2, 8007450 <_dtoa_r+0xa00>
 800742e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007432:	d029      	beq.n	8007488 <_dtoa_r+0xa38>
 8007434:	9b00      	ldr	r3, [sp, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	dd01      	ble.n	800743e <_dtoa_r+0x9ee>
 800743a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800743e:	9b05      	ldr	r3, [sp, #20]
 8007440:	1c5d      	adds	r5, r3, #1
 8007442:	f883 8000 	strb.w	r8, [r3]
 8007446:	e782      	b.n	800734e <_dtoa_r+0x8fe>
 8007448:	4630      	mov	r0, r6
 800744a:	e7c2      	b.n	80073d2 <_dtoa_r+0x982>
 800744c:	2301      	movs	r3, #1
 800744e:	e7e3      	b.n	8007418 <_dtoa_r+0x9c8>
 8007450:	9a00      	ldr	r2, [sp, #0]
 8007452:	2a00      	cmp	r2, #0
 8007454:	db04      	blt.n	8007460 <_dtoa_r+0xa10>
 8007456:	d125      	bne.n	80074a4 <_dtoa_r+0xa54>
 8007458:	9a06      	ldr	r2, [sp, #24]
 800745a:	bb1a      	cbnz	r2, 80074a4 <_dtoa_r+0xa54>
 800745c:	9a07      	ldr	r2, [sp, #28]
 800745e:	bb0a      	cbnz	r2, 80074a4 <_dtoa_r+0xa54>
 8007460:	2b00      	cmp	r3, #0
 8007462:	ddec      	ble.n	800743e <_dtoa_r+0x9ee>
 8007464:	2201      	movs	r2, #1
 8007466:	9904      	ldr	r1, [sp, #16]
 8007468:	4620      	mov	r0, r4
 800746a:	f000 fed1 	bl	8008210 <__lshift>
 800746e:	4639      	mov	r1, r7
 8007470:	9004      	str	r0, [sp, #16]
 8007472:	f000 ff21 	bl	80082b8 <__mcmp>
 8007476:	2800      	cmp	r0, #0
 8007478:	dc03      	bgt.n	8007482 <_dtoa_r+0xa32>
 800747a:	d1e0      	bne.n	800743e <_dtoa_r+0x9ee>
 800747c:	f018 0f01 	tst.w	r8, #1
 8007480:	d0dd      	beq.n	800743e <_dtoa_r+0x9ee>
 8007482:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007486:	d1d8      	bne.n	800743a <_dtoa_r+0x9ea>
 8007488:	9b05      	ldr	r3, [sp, #20]
 800748a:	9a05      	ldr	r2, [sp, #20]
 800748c:	1c5d      	adds	r5, r3, #1
 800748e:	2339      	movs	r3, #57	; 0x39
 8007490:	7013      	strb	r3, [r2, #0]
 8007492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007496:	2b39      	cmp	r3, #57	; 0x39
 8007498:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800749c:	d04f      	beq.n	800753e <_dtoa_r+0xaee>
 800749e:	3301      	adds	r3, #1
 80074a0:	7013      	strb	r3, [r2, #0]
 80074a2:	e754      	b.n	800734e <_dtoa_r+0x8fe>
 80074a4:	9a05      	ldr	r2, [sp, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f102 0501 	add.w	r5, r2, #1
 80074ac:	dd06      	ble.n	80074bc <_dtoa_r+0xa6c>
 80074ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074b2:	d0e9      	beq.n	8007488 <_dtoa_r+0xa38>
 80074b4:	f108 0801 	add.w	r8, r8, #1
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	e7c2      	b.n	8007442 <_dtoa_r+0x9f2>
 80074bc:	9a02      	ldr	r2, [sp, #8]
 80074be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80074c2:	eba5 030b 	sub.w	r3, r5, fp
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d021      	beq.n	800750e <_dtoa_r+0xabe>
 80074ca:	2300      	movs	r3, #0
 80074cc:	220a      	movs	r2, #10
 80074ce:	9904      	ldr	r1, [sp, #16]
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fce9 	bl	8007ea8 <__multadd>
 80074d6:	45b1      	cmp	r9, r6
 80074d8:	9004      	str	r0, [sp, #16]
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	f04f 020a 	mov.w	r2, #10
 80074e2:	4649      	mov	r1, r9
 80074e4:	4620      	mov	r0, r4
 80074e6:	d105      	bne.n	80074f4 <_dtoa_r+0xaa4>
 80074e8:	f000 fcde 	bl	8007ea8 <__multadd>
 80074ec:	4681      	mov	r9, r0
 80074ee:	4606      	mov	r6, r0
 80074f0:	9505      	str	r5, [sp, #20]
 80074f2:	e776      	b.n	80073e2 <_dtoa_r+0x992>
 80074f4:	f000 fcd8 	bl	8007ea8 <__multadd>
 80074f8:	4631      	mov	r1, r6
 80074fa:	4681      	mov	r9, r0
 80074fc:	2300      	movs	r3, #0
 80074fe:	220a      	movs	r2, #10
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fcd1 	bl	8007ea8 <__multadd>
 8007506:	4606      	mov	r6, r0
 8007508:	e7f2      	b.n	80074f0 <_dtoa_r+0xaa0>
 800750a:	f04f 0900 	mov.w	r9, #0
 800750e:	2201      	movs	r2, #1
 8007510:	9904      	ldr	r1, [sp, #16]
 8007512:	4620      	mov	r0, r4
 8007514:	f000 fe7c 	bl	8008210 <__lshift>
 8007518:	4639      	mov	r1, r7
 800751a:	9004      	str	r0, [sp, #16]
 800751c:	f000 fecc 	bl	80082b8 <__mcmp>
 8007520:	2800      	cmp	r0, #0
 8007522:	dcb6      	bgt.n	8007492 <_dtoa_r+0xa42>
 8007524:	d102      	bne.n	800752c <_dtoa_r+0xadc>
 8007526:	f018 0f01 	tst.w	r8, #1
 800752a:	d1b2      	bne.n	8007492 <_dtoa_r+0xa42>
 800752c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007530:	2b30      	cmp	r3, #48	; 0x30
 8007532:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007536:	f47f af0a 	bne.w	800734e <_dtoa_r+0x8fe>
 800753a:	4615      	mov	r5, r2
 800753c:	e7f6      	b.n	800752c <_dtoa_r+0xadc>
 800753e:	4593      	cmp	fp, r2
 8007540:	d105      	bne.n	800754e <_dtoa_r+0xafe>
 8007542:	2331      	movs	r3, #49	; 0x31
 8007544:	f10a 0a01 	add.w	sl, sl, #1
 8007548:	f88b 3000 	strb.w	r3, [fp]
 800754c:	e6ff      	b.n	800734e <_dtoa_r+0x8fe>
 800754e:	4615      	mov	r5, r2
 8007550:	e79f      	b.n	8007492 <_dtoa_r+0xa42>
 8007552:	f8df b064 	ldr.w	fp, [pc, #100]	; 80075b8 <_dtoa_r+0xb68>
 8007556:	e007      	b.n	8007568 <_dtoa_r+0xb18>
 8007558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800755a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80075bc <_dtoa_r+0xb6c>
 800755e:	b11b      	cbz	r3, 8007568 <_dtoa_r+0xb18>
 8007560:	f10b 0308 	add.w	r3, fp, #8
 8007564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	4658      	mov	r0, fp
 800756a:	b017      	add	sp, #92	; 0x5c
 800756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007570:	9b06      	ldr	r3, [sp, #24]
 8007572:	2b01      	cmp	r3, #1
 8007574:	f77f ae35 	ble.w	80071e2 <_dtoa_r+0x792>
 8007578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800757a:	9307      	str	r3, [sp, #28]
 800757c:	e649      	b.n	8007212 <_dtoa_r+0x7c2>
 800757e:	9b02      	ldr	r3, [sp, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	dc03      	bgt.n	800758c <_dtoa_r+0xb3c>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	2b02      	cmp	r3, #2
 8007588:	f73f aecc 	bgt.w	8007324 <_dtoa_r+0x8d4>
 800758c:	465d      	mov	r5, fp
 800758e:	4639      	mov	r1, r7
 8007590:	9804      	ldr	r0, [sp, #16]
 8007592:	f7ff f9cf 	bl	8006934 <quorem>
 8007596:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800759a:	f805 8b01 	strb.w	r8, [r5], #1
 800759e:	9a02      	ldr	r2, [sp, #8]
 80075a0:	eba5 030b 	sub.w	r3, r5, fp
 80075a4:	429a      	cmp	r2, r3
 80075a6:	ddb0      	ble.n	800750a <_dtoa_r+0xaba>
 80075a8:	2300      	movs	r3, #0
 80075aa:	220a      	movs	r2, #10
 80075ac:	9904      	ldr	r1, [sp, #16]
 80075ae:	4620      	mov	r0, r4
 80075b0:	f000 fc7a 	bl	8007ea8 <__multadd>
 80075b4:	9004      	str	r0, [sp, #16]
 80075b6:	e7ea      	b.n	800758e <_dtoa_r+0xb3e>
 80075b8:	08009314 	.word	0x08009314
 80075bc:	08009390 	.word	0x08009390

080075c0 <std>:
 80075c0:	2300      	movs	r3, #0
 80075c2:	b510      	push	{r4, lr}
 80075c4:	4604      	mov	r4, r0
 80075c6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ca:	6083      	str	r3, [r0, #8]
 80075cc:	8181      	strh	r1, [r0, #12]
 80075ce:	6643      	str	r3, [r0, #100]	; 0x64
 80075d0:	81c2      	strh	r2, [r0, #14]
 80075d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d6:	6183      	str	r3, [r0, #24]
 80075d8:	4619      	mov	r1, r3
 80075da:	2208      	movs	r2, #8
 80075dc:	305c      	adds	r0, #92	; 0x5c
 80075de:	f7fd fc75 	bl	8004ecc <memset>
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <std+0x38>)
 80075e4:	6263      	str	r3, [r4, #36]	; 0x24
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <std+0x3c>)
 80075e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <std+0x40>)
 80075ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <std+0x44>)
 80075f0:	6224      	str	r4, [r4, #32]
 80075f2:	6323      	str	r3, [r4, #48]	; 0x30
 80075f4:	bd10      	pop	{r4, pc}
 80075f6:	bf00      	nop
 80075f8:	08008cc1 	.word	0x08008cc1
 80075fc:	08008ce3 	.word	0x08008ce3
 8007600:	08008d1b 	.word	0x08008d1b
 8007604:	08008d3f 	.word	0x08008d3f

08007608 <_cleanup_r>:
 8007608:	4901      	ldr	r1, [pc, #4]	; (8007610 <_cleanup_r+0x8>)
 800760a:	f000 b885 	b.w	8007718 <_fwalk_reent>
 800760e:	bf00      	nop
 8007610:	08009059 	.word	0x08009059

08007614 <__sfmoreglue>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	1e4a      	subs	r2, r1, #1
 8007618:	2568      	movs	r5, #104	; 0x68
 800761a:	4355      	muls	r5, r2
 800761c:	460e      	mov	r6, r1
 800761e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007622:	f001 f851 	bl	80086c8 <_malloc_r>
 8007626:	4604      	mov	r4, r0
 8007628:	b140      	cbz	r0, 800763c <__sfmoreglue+0x28>
 800762a:	2100      	movs	r1, #0
 800762c:	e9c0 1600 	strd	r1, r6, [r0]
 8007630:	300c      	adds	r0, #12
 8007632:	60a0      	str	r0, [r4, #8]
 8007634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007638:	f7fd fc48 	bl	8004ecc <memset>
 800763c:	4620      	mov	r0, r4
 800763e:	bd70      	pop	{r4, r5, r6, pc}

08007640 <__sinit>:
 8007640:	6983      	ldr	r3, [r0, #24]
 8007642:	b510      	push	{r4, lr}
 8007644:	4604      	mov	r4, r0
 8007646:	bb33      	cbnz	r3, 8007696 <__sinit+0x56>
 8007648:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800764c:	6503      	str	r3, [r0, #80]	; 0x50
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <__sinit+0x58>)
 8007650:	4a12      	ldr	r2, [pc, #72]	; (800769c <__sinit+0x5c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6282      	str	r2, [r0, #40]	; 0x28
 8007656:	4298      	cmp	r0, r3
 8007658:	bf04      	itt	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	6183      	streq	r3, [r0, #24]
 800765e:	f000 f81f 	bl	80076a0 <__sfp>
 8007662:	6060      	str	r0, [r4, #4]
 8007664:	4620      	mov	r0, r4
 8007666:	f000 f81b 	bl	80076a0 <__sfp>
 800766a:	60a0      	str	r0, [r4, #8]
 800766c:	4620      	mov	r0, r4
 800766e:	f000 f817 	bl	80076a0 <__sfp>
 8007672:	2200      	movs	r2, #0
 8007674:	60e0      	str	r0, [r4, #12]
 8007676:	2104      	movs	r1, #4
 8007678:	6860      	ldr	r0, [r4, #4]
 800767a:	f7ff ffa1 	bl	80075c0 <std>
 800767e:	2201      	movs	r2, #1
 8007680:	2109      	movs	r1, #9
 8007682:	68a0      	ldr	r0, [r4, #8]
 8007684:	f7ff ff9c 	bl	80075c0 <std>
 8007688:	2202      	movs	r2, #2
 800768a:	2112      	movs	r1, #18
 800768c:	68e0      	ldr	r0, [r4, #12]
 800768e:	f7ff ff97 	bl	80075c0 <std>
 8007692:	2301      	movs	r3, #1
 8007694:	61a3      	str	r3, [r4, #24]
 8007696:	bd10      	pop	{r4, pc}
 8007698:	08009300 	.word	0x08009300
 800769c:	08007609 	.word	0x08007609

080076a0 <__sfp>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	4b1b      	ldr	r3, [pc, #108]	; (8007710 <__sfp+0x70>)
 80076a4:	681e      	ldr	r6, [r3, #0]
 80076a6:	69b3      	ldr	r3, [r6, #24]
 80076a8:	4607      	mov	r7, r0
 80076aa:	b913      	cbnz	r3, 80076b2 <__sfp+0x12>
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff ffc7 	bl	8007640 <__sinit>
 80076b2:	3648      	adds	r6, #72	; 0x48
 80076b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	d503      	bpl.n	80076c4 <__sfp+0x24>
 80076bc:	6833      	ldr	r3, [r6, #0]
 80076be:	b133      	cbz	r3, 80076ce <__sfp+0x2e>
 80076c0:	6836      	ldr	r6, [r6, #0]
 80076c2:	e7f7      	b.n	80076b4 <__sfp+0x14>
 80076c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076c8:	b16d      	cbz	r5, 80076e6 <__sfp+0x46>
 80076ca:	3468      	adds	r4, #104	; 0x68
 80076cc:	e7f4      	b.n	80076b8 <__sfp+0x18>
 80076ce:	2104      	movs	r1, #4
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ff9f 	bl	8007614 <__sfmoreglue>
 80076d6:	6030      	str	r0, [r6, #0]
 80076d8:	2800      	cmp	r0, #0
 80076da:	d1f1      	bne.n	80076c0 <__sfp+0x20>
 80076dc:	230c      	movs	r3, #12
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	4604      	mov	r4, r0
 80076e2:	4620      	mov	r0, r4
 80076e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <__sfp+0x74>)
 80076e8:	6665      	str	r5, [r4, #100]	; 0x64
 80076ea:	e9c4 5500 	strd	r5, r5, [r4]
 80076ee:	60a5      	str	r5, [r4, #8]
 80076f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80076f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80076f8:	2208      	movs	r2, #8
 80076fa:	4629      	mov	r1, r5
 80076fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007700:	f7fd fbe4 	bl	8004ecc <memset>
 8007704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800770c:	e7e9      	b.n	80076e2 <__sfp+0x42>
 800770e:	bf00      	nop
 8007710:	08009300 	.word	0x08009300
 8007714:	ffff0001 	.word	0xffff0001

08007718 <_fwalk_reent>:
 8007718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800771c:	4680      	mov	r8, r0
 800771e:	4689      	mov	r9, r1
 8007720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007724:	2600      	movs	r6, #0
 8007726:	b914      	cbnz	r4, 800772e <_fwalk_reent+0x16>
 8007728:	4630      	mov	r0, r6
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007732:	3f01      	subs	r7, #1
 8007734:	d501      	bpl.n	800773a <_fwalk_reent+0x22>
 8007736:	6824      	ldr	r4, [r4, #0]
 8007738:	e7f5      	b.n	8007726 <_fwalk_reent+0xe>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d907      	bls.n	8007750 <_fwalk_reent+0x38>
 8007740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007744:	3301      	adds	r3, #1
 8007746:	d003      	beq.n	8007750 <_fwalk_reent+0x38>
 8007748:	4629      	mov	r1, r5
 800774a:	4640      	mov	r0, r8
 800774c:	47c8      	blx	r9
 800774e:	4306      	orrs	r6, r0
 8007750:	3568      	adds	r5, #104	; 0x68
 8007752:	e7ee      	b.n	8007732 <_fwalk_reent+0x1a>

08007754 <rshift>:
 8007754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007756:	6906      	ldr	r6, [r0, #16]
 8007758:	114b      	asrs	r3, r1, #5
 800775a:	429e      	cmp	r6, r3
 800775c:	f100 0414 	add.w	r4, r0, #20
 8007760:	dd30      	ble.n	80077c4 <rshift+0x70>
 8007762:	f011 011f 	ands.w	r1, r1, #31
 8007766:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800776a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800776e:	d108      	bne.n	8007782 <rshift+0x2e>
 8007770:	4621      	mov	r1, r4
 8007772:	42b2      	cmp	r2, r6
 8007774:	460b      	mov	r3, r1
 8007776:	d211      	bcs.n	800779c <rshift+0x48>
 8007778:	f852 3b04 	ldr.w	r3, [r2], #4
 800777c:	f841 3b04 	str.w	r3, [r1], #4
 8007780:	e7f7      	b.n	8007772 <rshift+0x1e>
 8007782:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007786:	f1c1 0c20 	rsb	ip, r1, #32
 800778a:	40cd      	lsrs	r5, r1
 800778c:	3204      	adds	r2, #4
 800778e:	4623      	mov	r3, r4
 8007790:	42b2      	cmp	r2, r6
 8007792:	4617      	mov	r7, r2
 8007794:	d30c      	bcc.n	80077b0 <rshift+0x5c>
 8007796:	601d      	str	r5, [r3, #0]
 8007798:	b105      	cbz	r5, 800779c <rshift+0x48>
 800779a:	3304      	adds	r3, #4
 800779c:	1b1a      	subs	r2, r3, r4
 800779e:	42a3      	cmp	r3, r4
 80077a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077a4:	bf08      	it	eq
 80077a6:	2300      	moveq	r3, #0
 80077a8:	6102      	str	r2, [r0, #16]
 80077aa:	bf08      	it	eq
 80077ac:	6143      	streq	r3, [r0, #20]
 80077ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b0:	683f      	ldr	r7, [r7, #0]
 80077b2:	fa07 f70c 	lsl.w	r7, r7, ip
 80077b6:	433d      	orrs	r5, r7
 80077b8:	f843 5b04 	str.w	r5, [r3], #4
 80077bc:	f852 5b04 	ldr.w	r5, [r2], #4
 80077c0:	40cd      	lsrs	r5, r1
 80077c2:	e7e5      	b.n	8007790 <rshift+0x3c>
 80077c4:	4623      	mov	r3, r4
 80077c6:	e7e9      	b.n	800779c <rshift+0x48>

080077c8 <__hexdig_fun>:
 80077c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d802      	bhi.n	80077d6 <__hexdig_fun+0xe>
 80077d0:	3820      	subs	r0, #32
 80077d2:	b2c0      	uxtb	r0, r0
 80077d4:	4770      	bx	lr
 80077d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077da:	2b05      	cmp	r3, #5
 80077dc:	d801      	bhi.n	80077e2 <__hexdig_fun+0x1a>
 80077de:	3847      	subs	r0, #71	; 0x47
 80077e0:	e7f7      	b.n	80077d2 <__hexdig_fun+0xa>
 80077e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	d801      	bhi.n	80077ee <__hexdig_fun+0x26>
 80077ea:	3827      	subs	r0, #39	; 0x27
 80077ec:	e7f1      	b.n	80077d2 <__hexdig_fun+0xa>
 80077ee:	2000      	movs	r0, #0
 80077f0:	4770      	bx	lr

080077f2 <__gethex>:
 80077f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	b08b      	sub	sp, #44	; 0x2c
 80077f8:	468a      	mov	sl, r1
 80077fa:	9002      	str	r0, [sp, #8]
 80077fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80077fe:	9306      	str	r3, [sp, #24]
 8007800:	4690      	mov	r8, r2
 8007802:	f000 fad0 	bl	8007da6 <__localeconv_l>
 8007806:	6803      	ldr	r3, [r0, #0]
 8007808:	9303      	str	r3, [sp, #12]
 800780a:	4618      	mov	r0, r3
 800780c:	f7f8 fce0 	bl	80001d0 <strlen>
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	9001      	str	r0, [sp, #4]
 8007814:	4403      	add	r3, r0
 8007816:	f04f 0b00 	mov.w	fp, #0
 800781a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800781e:	9307      	str	r3, [sp, #28]
 8007820:	f8da 3000 	ldr.w	r3, [sl]
 8007824:	3302      	adds	r3, #2
 8007826:	461f      	mov	r7, r3
 8007828:	f813 0b01 	ldrb.w	r0, [r3], #1
 800782c:	2830      	cmp	r0, #48	; 0x30
 800782e:	d06c      	beq.n	800790a <__gethex+0x118>
 8007830:	f7ff ffca 	bl	80077c8 <__hexdig_fun>
 8007834:	4604      	mov	r4, r0
 8007836:	2800      	cmp	r0, #0
 8007838:	d16a      	bne.n	8007910 <__gethex+0x11e>
 800783a:	9a01      	ldr	r2, [sp, #4]
 800783c:	9903      	ldr	r1, [sp, #12]
 800783e:	4638      	mov	r0, r7
 8007840:	f001 fa81 	bl	8008d46 <strncmp>
 8007844:	2800      	cmp	r0, #0
 8007846:	d166      	bne.n	8007916 <__gethex+0x124>
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	5cf8      	ldrb	r0, [r7, r3]
 800784c:	18fe      	adds	r6, r7, r3
 800784e:	f7ff ffbb 	bl	80077c8 <__hexdig_fun>
 8007852:	2800      	cmp	r0, #0
 8007854:	d062      	beq.n	800791c <__gethex+0x12a>
 8007856:	4633      	mov	r3, r6
 8007858:	7818      	ldrb	r0, [r3, #0]
 800785a:	2830      	cmp	r0, #48	; 0x30
 800785c:	461f      	mov	r7, r3
 800785e:	f103 0301 	add.w	r3, r3, #1
 8007862:	d0f9      	beq.n	8007858 <__gethex+0x66>
 8007864:	f7ff ffb0 	bl	80077c8 <__hexdig_fun>
 8007868:	fab0 f580 	clz	r5, r0
 800786c:	096d      	lsrs	r5, r5, #5
 800786e:	4634      	mov	r4, r6
 8007870:	f04f 0b01 	mov.w	fp, #1
 8007874:	463a      	mov	r2, r7
 8007876:	4616      	mov	r6, r2
 8007878:	3201      	adds	r2, #1
 800787a:	7830      	ldrb	r0, [r6, #0]
 800787c:	f7ff ffa4 	bl	80077c8 <__hexdig_fun>
 8007880:	2800      	cmp	r0, #0
 8007882:	d1f8      	bne.n	8007876 <__gethex+0x84>
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	9903      	ldr	r1, [sp, #12]
 8007888:	4630      	mov	r0, r6
 800788a:	f001 fa5c 	bl	8008d46 <strncmp>
 800788e:	b950      	cbnz	r0, 80078a6 <__gethex+0xb4>
 8007890:	b954      	cbnz	r4, 80078a8 <__gethex+0xb6>
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	18f4      	adds	r4, r6, r3
 8007896:	4622      	mov	r2, r4
 8007898:	4616      	mov	r6, r2
 800789a:	3201      	adds	r2, #1
 800789c:	7830      	ldrb	r0, [r6, #0]
 800789e:	f7ff ff93 	bl	80077c8 <__hexdig_fun>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d1f8      	bne.n	8007898 <__gethex+0xa6>
 80078a6:	b10c      	cbz	r4, 80078ac <__gethex+0xba>
 80078a8:	1ba4      	subs	r4, r4, r6
 80078aa:	00a4      	lsls	r4, r4, #2
 80078ac:	7833      	ldrb	r3, [r6, #0]
 80078ae:	2b50      	cmp	r3, #80	; 0x50
 80078b0:	d001      	beq.n	80078b6 <__gethex+0xc4>
 80078b2:	2b70      	cmp	r3, #112	; 0x70
 80078b4:	d140      	bne.n	8007938 <__gethex+0x146>
 80078b6:	7873      	ldrb	r3, [r6, #1]
 80078b8:	2b2b      	cmp	r3, #43	; 0x2b
 80078ba:	d031      	beq.n	8007920 <__gethex+0x12e>
 80078bc:	2b2d      	cmp	r3, #45	; 0x2d
 80078be:	d033      	beq.n	8007928 <__gethex+0x136>
 80078c0:	1c71      	adds	r1, r6, #1
 80078c2:	f04f 0900 	mov.w	r9, #0
 80078c6:	7808      	ldrb	r0, [r1, #0]
 80078c8:	f7ff ff7e 	bl	80077c8 <__hexdig_fun>
 80078cc:	1e43      	subs	r3, r0, #1
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b18      	cmp	r3, #24
 80078d2:	d831      	bhi.n	8007938 <__gethex+0x146>
 80078d4:	f1a0 0210 	sub.w	r2, r0, #16
 80078d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078dc:	f7ff ff74 	bl	80077c8 <__hexdig_fun>
 80078e0:	1e43      	subs	r3, r0, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b18      	cmp	r3, #24
 80078e6:	d922      	bls.n	800792e <__gethex+0x13c>
 80078e8:	f1b9 0f00 	cmp.w	r9, #0
 80078ec:	d000      	beq.n	80078f0 <__gethex+0xfe>
 80078ee:	4252      	negs	r2, r2
 80078f0:	4414      	add	r4, r2
 80078f2:	f8ca 1000 	str.w	r1, [sl]
 80078f6:	b30d      	cbz	r5, 800793c <__gethex+0x14a>
 80078f8:	f1bb 0f00 	cmp.w	fp, #0
 80078fc:	bf0c      	ite	eq
 80078fe:	2706      	moveq	r7, #6
 8007900:	2700      	movne	r7, #0
 8007902:	4638      	mov	r0, r7
 8007904:	b00b      	add	sp, #44	; 0x2c
 8007906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790a:	f10b 0b01 	add.w	fp, fp, #1
 800790e:	e78a      	b.n	8007826 <__gethex+0x34>
 8007910:	2500      	movs	r5, #0
 8007912:	462c      	mov	r4, r5
 8007914:	e7ae      	b.n	8007874 <__gethex+0x82>
 8007916:	463e      	mov	r6, r7
 8007918:	2501      	movs	r5, #1
 800791a:	e7c7      	b.n	80078ac <__gethex+0xba>
 800791c:	4604      	mov	r4, r0
 800791e:	e7fb      	b.n	8007918 <__gethex+0x126>
 8007920:	f04f 0900 	mov.w	r9, #0
 8007924:	1cb1      	adds	r1, r6, #2
 8007926:	e7ce      	b.n	80078c6 <__gethex+0xd4>
 8007928:	f04f 0901 	mov.w	r9, #1
 800792c:	e7fa      	b.n	8007924 <__gethex+0x132>
 800792e:	230a      	movs	r3, #10
 8007930:	fb03 0202 	mla	r2, r3, r2, r0
 8007934:	3a10      	subs	r2, #16
 8007936:	e7cf      	b.n	80078d8 <__gethex+0xe6>
 8007938:	4631      	mov	r1, r6
 800793a:	e7da      	b.n	80078f2 <__gethex+0x100>
 800793c:	1bf3      	subs	r3, r6, r7
 800793e:	3b01      	subs	r3, #1
 8007940:	4629      	mov	r1, r5
 8007942:	2b07      	cmp	r3, #7
 8007944:	dc49      	bgt.n	80079da <__gethex+0x1e8>
 8007946:	9802      	ldr	r0, [sp, #8]
 8007948:	f000 fa63 	bl	8007e12 <_Balloc>
 800794c:	9b01      	ldr	r3, [sp, #4]
 800794e:	f100 0914 	add.w	r9, r0, #20
 8007952:	f04f 0b00 	mov.w	fp, #0
 8007956:	f1c3 0301 	rsb	r3, r3, #1
 800795a:	4605      	mov	r5, r0
 800795c:	f8cd 9010 	str.w	r9, [sp, #16]
 8007960:	46da      	mov	sl, fp
 8007962:	9308      	str	r3, [sp, #32]
 8007964:	42b7      	cmp	r7, r6
 8007966:	d33b      	bcc.n	80079e0 <__gethex+0x1ee>
 8007968:	9804      	ldr	r0, [sp, #16]
 800796a:	f840 ab04 	str.w	sl, [r0], #4
 800796e:	eba0 0009 	sub.w	r0, r0, r9
 8007972:	1080      	asrs	r0, r0, #2
 8007974:	6128      	str	r0, [r5, #16]
 8007976:	0147      	lsls	r7, r0, #5
 8007978:	4650      	mov	r0, sl
 800797a:	f000 fb0e 	bl	8007f9a <__hi0bits>
 800797e:	f8d8 6000 	ldr.w	r6, [r8]
 8007982:	1a3f      	subs	r7, r7, r0
 8007984:	42b7      	cmp	r7, r6
 8007986:	dd64      	ble.n	8007a52 <__gethex+0x260>
 8007988:	1bbf      	subs	r7, r7, r6
 800798a:	4639      	mov	r1, r7
 800798c:	4628      	mov	r0, r5
 800798e:	f000 fe1d 	bl	80085cc <__any_on>
 8007992:	4682      	mov	sl, r0
 8007994:	b178      	cbz	r0, 80079b6 <__gethex+0x1c4>
 8007996:	1e7b      	subs	r3, r7, #1
 8007998:	1159      	asrs	r1, r3, #5
 800799a:	f003 021f 	and.w	r2, r3, #31
 800799e:	f04f 0a01 	mov.w	sl, #1
 80079a2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80079a6:	fa0a f202 	lsl.w	r2, sl, r2
 80079aa:	420a      	tst	r2, r1
 80079ac:	d003      	beq.n	80079b6 <__gethex+0x1c4>
 80079ae:	4553      	cmp	r3, sl
 80079b0:	dc46      	bgt.n	8007a40 <__gethex+0x24e>
 80079b2:	f04f 0a02 	mov.w	sl, #2
 80079b6:	4639      	mov	r1, r7
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7ff fecb 	bl	8007754 <rshift>
 80079be:	443c      	add	r4, r7
 80079c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	da52      	bge.n	8007a6e <__gethex+0x27c>
 80079c8:	4629      	mov	r1, r5
 80079ca:	9802      	ldr	r0, [sp, #8]
 80079cc:	f000 fa55 	bl	8007e7a <_Bfree>
 80079d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079d2:	2300      	movs	r3, #0
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	27a3      	movs	r7, #163	; 0xa3
 80079d8:	e793      	b.n	8007902 <__gethex+0x110>
 80079da:	3101      	adds	r1, #1
 80079dc:	105b      	asrs	r3, r3, #1
 80079de:	e7b0      	b.n	8007942 <__gethex+0x150>
 80079e0:	1e73      	subs	r3, r6, #1
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	9a07      	ldr	r2, [sp, #28]
 80079e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d018      	beq.n	8007a20 <__gethex+0x22e>
 80079ee:	f1bb 0f20 	cmp.w	fp, #32
 80079f2:	d107      	bne.n	8007a04 <__gethex+0x212>
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	f8c3 a000 	str.w	sl, [r3]
 80079fa:	3304      	adds	r3, #4
 80079fc:	f04f 0a00 	mov.w	sl, #0
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	46d3      	mov	fp, sl
 8007a04:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a08:	f7ff fede 	bl	80077c8 <__hexdig_fun>
 8007a0c:	f000 000f 	and.w	r0, r0, #15
 8007a10:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a14:	ea4a 0a00 	orr.w	sl, sl, r0
 8007a18:	f10b 0b04 	add.w	fp, fp, #4
 8007a1c:	9b05      	ldr	r3, [sp, #20]
 8007a1e:	e00d      	b.n	8007a3c <__gethex+0x24a>
 8007a20:	9b05      	ldr	r3, [sp, #20]
 8007a22:	9a08      	ldr	r2, [sp, #32]
 8007a24:	4413      	add	r3, r2
 8007a26:	42bb      	cmp	r3, r7
 8007a28:	d3e1      	bcc.n	80079ee <__gethex+0x1fc>
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	9a01      	ldr	r2, [sp, #4]
 8007a2e:	9903      	ldr	r1, [sp, #12]
 8007a30:	9309      	str	r3, [sp, #36]	; 0x24
 8007a32:	f001 f988 	bl	8008d46 <strncmp>
 8007a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d1d8      	bne.n	80079ee <__gethex+0x1fc>
 8007a3c:	461e      	mov	r6, r3
 8007a3e:	e791      	b.n	8007964 <__gethex+0x172>
 8007a40:	1eb9      	subs	r1, r7, #2
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 fdc2 	bl	80085cc <__any_on>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0b2      	beq.n	80079b2 <__gethex+0x1c0>
 8007a4c:	f04f 0a03 	mov.w	sl, #3
 8007a50:	e7b1      	b.n	80079b6 <__gethex+0x1c4>
 8007a52:	da09      	bge.n	8007a68 <__gethex+0x276>
 8007a54:	1bf7      	subs	r7, r6, r7
 8007a56:	4629      	mov	r1, r5
 8007a58:	463a      	mov	r2, r7
 8007a5a:	9802      	ldr	r0, [sp, #8]
 8007a5c:	f000 fbd8 	bl	8008210 <__lshift>
 8007a60:	1be4      	subs	r4, r4, r7
 8007a62:	4605      	mov	r5, r0
 8007a64:	f100 0914 	add.w	r9, r0, #20
 8007a68:	f04f 0a00 	mov.w	sl, #0
 8007a6c:	e7a8      	b.n	80079c0 <__gethex+0x1ce>
 8007a6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a72:	42a0      	cmp	r0, r4
 8007a74:	dd6a      	ble.n	8007b4c <__gethex+0x35a>
 8007a76:	1b04      	subs	r4, r0, r4
 8007a78:	42a6      	cmp	r6, r4
 8007a7a:	dc2e      	bgt.n	8007ada <__gethex+0x2e8>
 8007a7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d022      	beq.n	8007aca <__gethex+0x2d8>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d024      	beq.n	8007ad2 <__gethex+0x2e0>
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d115      	bne.n	8007ab8 <__gethex+0x2c6>
 8007a8c:	42a6      	cmp	r6, r4
 8007a8e:	d113      	bne.n	8007ab8 <__gethex+0x2c6>
 8007a90:	2e01      	cmp	r6, #1
 8007a92:	dc0b      	bgt.n	8007aac <__gethex+0x2ba>
 8007a94:	9a06      	ldr	r2, [sp, #24]
 8007a96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	612b      	str	r3, [r5, #16]
 8007aa0:	f8c9 3000 	str.w	r3, [r9]
 8007aa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007aa6:	2762      	movs	r7, #98	; 0x62
 8007aa8:	601d      	str	r5, [r3, #0]
 8007aaa:	e72a      	b.n	8007902 <__gethex+0x110>
 8007aac:	1e71      	subs	r1, r6, #1
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f000 fd8c 	bl	80085cc <__any_on>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d1ed      	bne.n	8007a94 <__gethex+0x2a2>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	9802      	ldr	r0, [sp, #8]
 8007abc:	f000 f9dd 	bl	8007e7a <_Bfree>
 8007ac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	2750      	movs	r7, #80	; 0x50
 8007ac8:	e71b      	b.n	8007902 <__gethex+0x110>
 8007aca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0e1      	beq.n	8007a94 <__gethex+0x2a2>
 8007ad0:	e7f2      	b.n	8007ab8 <__gethex+0x2c6>
 8007ad2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1dd      	bne.n	8007a94 <__gethex+0x2a2>
 8007ad8:	e7ee      	b.n	8007ab8 <__gethex+0x2c6>
 8007ada:	1e67      	subs	r7, r4, #1
 8007adc:	f1ba 0f00 	cmp.w	sl, #0
 8007ae0:	d131      	bne.n	8007b46 <__gethex+0x354>
 8007ae2:	b127      	cbz	r7, 8007aee <__gethex+0x2fc>
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 fd70 	bl	80085cc <__any_on>
 8007aec:	4682      	mov	sl, r0
 8007aee:	117a      	asrs	r2, r7, #5
 8007af0:	2301      	movs	r3, #1
 8007af2:	f007 071f 	and.w	r7, r7, #31
 8007af6:	fa03 f707 	lsl.w	r7, r3, r7
 8007afa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007afe:	4621      	mov	r1, r4
 8007b00:	421f      	tst	r7, r3
 8007b02:	4628      	mov	r0, r5
 8007b04:	bf18      	it	ne
 8007b06:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b0a:	1b36      	subs	r6, r6, r4
 8007b0c:	f7ff fe22 	bl	8007754 <rshift>
 8007b10:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007b14:	2702      	movs	r7, #2
 8007b16:	f1ba 0f00 	cmp.w	sl, #0
 8007b1a:	d048      	beq.n	8007bae <__gethex+0x3bc>
 8007b1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d015      	beq.n	8007b50 <__gethex+0x35e>
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d017      	beq.n	8007b58 <__gethex+0x366>
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d109      	bne.n	8007b40 <__gethex+0x34e>
 8007b2c:	f01a 0f02 	tst.w	sl, #2
 8007b30:	d006      	beq.n	8007b40 <__gethex+0x34e>
 8007b32:	f8d9 3000 	ldr.w	r3, [r9]
 8007b36:	ea4a 0a03 	orr.w	sl, sl, r3
 8007b3a:	f01a 0f01 	tst.w	sl, #1
 8007b3e:	d10e      	bne.n	8007b5e <__gethex+0x36c>
 8007b40:	f047 0710 	orr.w	r7, r7, #16
 8007b44:	e033      	b.n	8007bae <__gethex+0x3bc>
 8007b46:	f04f 0a01 	mov.w	sl, #1
 8007b4a:	e7d0      	b.n	8007aee <__gethex+0x2fc>
 8007b4c:	2701      	movs	r7, #1
 8007b4e:	e7e2      	b.n	8007b16 <__gethex+0x324>
 8007b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b52:	f1c3 0301 	rsb	r3, r3, #1
 8007b56:	9315      	str	r3, [sp, #84]	; 0x54
 8007b58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f0      	beq.n	8007b40 <__gethex+0x34e>
 8007b5e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007b62:	f105 0314 	add.w	r3, r5, #20
 8007b66:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007b6a:	eb03 010a 	add.w	r1, r3, sl
 8007b6e:	f04f 0c00 	mov.w	ip, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b78:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007b7c:	d01c      	beq.n	8007bb8 <__gethex+0x3c6>
 8007b7e:	3201      	adds	r2, #1
 8007b80:	6002      	str	r2, [r0, #0]
 8007b82:	2f02      	cmp	r7, #2
 8007b84:	f105 0314 	add.w	r3, r5, #20
 8007b88:	d138      	bne.n	8007bfc <__gethex+0x40a>
 8007b8a:	f8d8 2000 	ldr.w	r2, [r8]
 8007b8e:	3a01      	subs	r2, #1
 8007b90:	42b2      	cmp	r2, r6
 8007b92:	d10a      	bne.n	8007baa <__gethex+0x3b8>
 8007b94:	1171      	asrs	r1, r6, #5
 8007b96:	2201      	movs	r2, #1
 8007b98:	f006 061f 	and.w	r6, r6, #31
 8007b9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ba0:	fa02 f606 	lsl.w	r6, r2, r6
 8007ba4:	421e      	tst	r6, r3
 8007ba6:	bf18      	it	ne
 8007ba8:	4617      	movne	r7, r2
 8007baa:	f047 0720 	orr.w	r7, r7, #32
 8007bae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bb0:	601d      	str	r5, [r3, #0]
 8007bb2:	9b06      	ldr	r3, [sp, #24]
 8007bb4:	601c      	str	r4, [r3, #0]
 8007bb6:	e6a4      	b.n	8007902 <__gethex+0x110>
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	f843 cc04 	str.w	ip, [r3, #-4]
 8007bbe:	d8d8      	bhi.n	8007b72 <__gethex+0x380>
 8007bc0:	68ab      	ldr	r3, [r5, #8]
 8007bc2:	4599      	cmp	r9, r3
 8007bc4:	db12      	blt.n	8007bec <__gethex+0x3fa>
 8007bc6:	6869      	ldr	r1, [r5, #4]
 8007bc8:	9802      	ldr	r0, [sp, #8]
 8007bca:	3101      	adds	r1, #1
 8007bcc:	f000 f921 	bl	8007e12 <_Balloc>
 8007bd0:	692a      	ldr	r2, [r5, #16]
 8007bd2:	3202      	adds	r2, #2
 8007bd4:	f105 010c 	add.w	r1, r5, #12
 8007bd8:	4683      	mov	fp, r0
 8007bda:	0092      	lsls	r2, r2, #2
 8007bdc:	300c      	adds	r0, #12
 8007bde:	f000 f90d 	bl	8007dfc <memcpy>
 8007be2:	4629      	mov	r1, r5
 8007be4:	9802      	ldr	r0, [sp, #8]
 8007be6:	f000 f948 	bl	8007e7a <_Bfree>
 8007bea:	465d      	mov	r5, fp
 8007bec:	692b      	ldr	r3, [r5, #16]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007bf4:	612a      	str	r2, [r5, #16]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	615a      	str	r2, [r3, #20]
 8007bfa:	e7c2      	b.n	8007b82 <__gethex+0x390>
 8007bfc:	692a      	ldr	r2, [r5, #16]
 8007bfe:	454a      	cmp	r2, r9
 8007c00:	dd0b      	ble.n	8007c1a <__gethex+0x428>
 8007c02:	2101      	movs	r1, #1
 8007c04:	4628      	mov	r0, r5
 8007c06:	f7ff fda5 	bl	8007754 <rshift>
 8007c0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c0e:	3401      	adds	r4, #1
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	f6ff aed9 	blt.w	80079c8 <__gethex+0x1d6>
 8007c16:	2701      	movs	r7, #1
 8007c18:	e7c7      	b.n	8007baa <__gethex+0x3b8>
 8007c1a:	f016 061f 	ands.w	r6, r6, #31
 8007c1e:	d0fa      	beq.n	8007c16 <__gethex+0x424>
 8007c20:	449a      	add	sl, r3
 8007c22:	f1c6 0620 	rsb	r6, r6, #32
 8007c26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007c2a:	f000 f9b6 	bl	8007f9a <__hi0bits>
 8007c2e:	42b0      	cmp	r0, r6
 8007c30:	dbe7      	blt.n	8007c02 <__gethex+0x410>
 8007c32:	e7f0      	b.n	8007c16 <__gethex+0x424>

08007c34 <L_shift>:
 8007c34:	f1c2 0208 	rsb	r2, r2, #8
 8007c38:	0092      	lsls	r2, r2, #2
 8007c3a:	b570      	push	{r4, r5, r6, lr}
 8007c3c:	f1c2 0620 	rsb	r6, r2, #32
 8007c40:	6843      	ldr	r3, [r0, #4]
 8007c42:	6804      	ldr	r4, [r0, #0]
 8007c44:	fa03 f506 	lsl.w	r5, r3, r6
 8007c48:	432c      	orrs	r4, r5
 8007c4a:	40d3      	lsrs	r3, r2
 8007c4c:	6004      	str	r4, [r0, #0]
 8007c4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c52:	4288      	cmp	r0, r1
 8007c54:	d3f4      	bcc.n	8007c40 <L_shift+0xc>
 8007c56:	bd70      	pop	{r4, r5, r6, pc}

08007c58 <__match>:
 8007c58:	b530      	push	{r4, r5, lr}
 8007c5a:	6803      	ldr	r3, [r0, #0]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c62:	b914      	cbnz	r4, 8007c6a <__match+0x12>
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	2001      	movs	r0, #1
 8007c68:	bd30      	pop	{r4, r5, pc}
 8007c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007c72:	2d19      	cmp	r5, #25
 8007c74:	bf98      	it	ls
 8007c76:	3220      	addls	r2, #32
 8007c78:	42a2      	cmp	r2, r4
 8007c7a:	d0f0      	beq.n	8007c5e <__match+0x6>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7f3      	b.n	8007c68 <__match+0x10>

08007c80 <__hexnan>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	680b      	ldr	r3, [r1, #0]
 8007c86:	6801      	ldr	r1, [r0, #0]
 8007c88:	115f      	asrs	r7, r3, #5
 8007c8a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007c8e:	f013 031f 	ands.w	r3, r3, #31
 8007c92:	b087      	sub	sp, #28
 8007c94:	bf18      	it	ne
 8007c96:	3704      	addne	r7, #4
 8007c98:	2500      	movs	r5, #0
 8007c9a:	1f3e      	subs	r6, r7, #4
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	4690      	mov	r8, r2
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	f847 5c04 	str.w	r5, [r7, #-4]
 8007ca6:	46b1      	mov	r9, r6
 8007ca8:	4634      	mov	r4, r6
 8007caa:	9502      	str	r5, [sp, #8]
 8007cac:	46ab      	mov	fp, r5
 8007cae:	784a      	ldrb	r2, [r1, #1]
 8007cb0:	1c4b      	adds	r3, r1, #1
 8007cb2:	9303      	str	r3, [sp, #12]
 8007cb4:	b342      	cbz	r2, 8007d08 <__hexnan+0x88>
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	9105      	str	r1, [sp, #20]
 8007cba:	9204      	str	r2, [sp, #16]
 8007cbc:	f7ff fd84 	bl	80077c8 <__hexdig_fun>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d143      	bne.n	8007d4c <__hexnan+0xcc>
 8007cc4:	9a04      	ldr	r2, [sp, #16]
 8007cc6:	9905      	ldr	r1, [sp, #20]
 8007cc8:	2a20      	cmp	r2, #32
 8007cca:	d818      	bhi.n	8007cfe <__hexnan+0x7e>
 8007ccc:	9b02      	ldr	r3, [sp, #8]
 8007cce:	459b      	cmp	fp, r3
 8007cd0:	dd13      	ble.n	8007cfa <__hexnan+0x7a>
 8007cd2:	454c      	cmp	r4, r9
 8007cd4:	d206      	bcs.n	8007ce4 <__hexnan+0x64>
 8007cd6:	2d07      	cmp	r5, #7
 8007cd8:	dc04      	bgt.n	8007ce4 <__hexnan+0x64>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ffa8 	bl	8007c34 <L_shift>
 8007ce4:	4544      	cmp	r4, r8
 8007ce6:	d944      	bls.n	8007d72 <__hexnan+0xf2>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f1a4 0904 	sub.w	r9, r4, #4
 8007cee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cf2:	f8cd b008 	str.w	fp, [sp, #8]
 8007cf6:	464c      	mov	r4, r9
 8007cf8:	461d      	mov	r5, r3
 8007cfa:	9903      	ldr	r1, [sp, #12]
 8007cfc:	e7d7      	b.n	8007cae <__hexnan+0x2e>
 8007cfe:	2a29      	cmp	r2, #41	; 0x29
 8007d00:	d14a      	bne.n	8007d98 <__hexnan+0x118>
 8007d02:	3102      	adds	r1, #2
 8007d04:	f8ca 1000 	str.w	r1, [sl]
 8007d08:	f1bb 0f00 	cmp.w	fp, #0
 8007d0c:	d044      	beq.n	8007d98 <__hexnan+0x118>
 8007d0e:	454c      	cmp	r4, r9
 8007d10:	d206      	bcs.n	8007d20 <__hexnan+0xa0>
 8007d12:	2d07      	cmp	r5, #7
 8007d14:	dc04      	bgt.n	8007d20 <__hexnan+0xa0>
 8007d16:	462a      	mov	r2, r5
 8007d18:	4649      	mov	r1, r9
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f7ff ff8a 	bl	8007c34 <L_shift>
 8007d20:	4544      	cmp	r4, r8
 8007d22:	d928      	bls.n	8007d76 <__hexnan+0xf6>
 8007d24:	4643      	mov	r3, r8
 8007d26:	f854 2b04 	ldr.w	r2, [r4], #4
 8007d2a:	f843 2b04 	str.w	r2, [r3], #4
 8007d2e:	42a6      	cmp	r6, r4
 8007d30:	d2f9      	bcs.n	8007d26 <__hexnan+0xa6>
 8007d32:	2200      	movs	r2, #0
 8007d34:	f843 2b04 	str.w	r2, [r3], #4
 8007d38:	429e      	cmp	r6, r3
 8007d3a:	d2fb      	bcs.n	8007d34 <__hexnan+0xb4>
 8007d3c:	6833      	ldr	r3, [r6, #0]
 8007d3e:	b91b      	cbnz	r3, 8007d48 <__hexnan+0xc8>
 8007d40:	4546      	cmp	r6, r8
 8007d42:	d127      	bne.n	8007d94 <__hexnan+0x114>
 8007d44:	2301      	movs	r3, #1
 8007d46:	6033      	str	r3, [r6, #0]
 8007d48:	2005      	movs	r0, #5
 8007d4a:	e026      	b.n	8007d9a <__hexnan+0x11a>
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	2d08      	cmp	r5, #8
 8007d50:	f10b 0b01 	add.w	fp, fp, #1
 8007d54:	dd06      	ble.n	8007d64 <__hexnan+0xe4>
 8007d56:	4544      	cmp	r4, r8
 8007d58:	d9cf      	bls.n	8007cfa <__hexnan+0x7a>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d60:	2501      	movs	r5, #1
 8007d62:	3c04      	subs	r4, #4
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	f000 000f 	and.w	r0, r0, #15
 8007d6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d6e:	6020      	str	r0, [r4, #0]
 8007d70:	e7c3      	b.n	8007cfa <__hexnan+0x7a>
 8007d72:	2508      	movs	r5, #8
 8007d74:	e7c1      	b.n	8007cfa <__hexnan+0x7a>
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0df      	beq.n	8007d3c <__hexnan+0xbc>
 8007d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d80:	f1c3 0320 	rsb	r3, r3, #32
 8007d84:	fa22 f303 	lsr.w	r3, r2, r3
 8007d88:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007d8c:	401a      	ands	r2, r3
 8007d8e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007d92:	e7d3      	b.n	8007d3c <__hexnan+0xbc>
 8007d94:	3e04      	subs	r6, #4
 8007d96:	e7d1      	b.n	8007d3c <__hexnan+0xbc>
 8007d98:	2004      	movs	r0, #4
 8007d9a:	b007      	add	sp, #28
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007da0 <__locale_ctype_ptr_l>:
 8007da0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007da4:	4770      	bx	lr

08007da6 <__localeconv_l>:
 8007da6:	30f0      	adds	r0, #240	; 0xf0
 8007da8:	4770      	bx	lr
	...

08007dac <_localeconv_r>:
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <_localeconv_r+0x14>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a18      	ldr	r0, [r3, #32]
 8007db2:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <_localeconv_r+0x18>)
 8007db4:	2800      	cmp	r0, #0
 8007db6:	bf08      	it	eq
 8007db8:	4618      	moveq	r0, r3
 8007dba:	30f0      	adds	r0, #240	; 0xf0
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000014 	.word	0x20000014
 8007dc4:	20000078 	.word	0x20000078

08007dc8 <malloc>:
 8007dc8:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <malloc+0xc>)
 8007dca:	4601      	mov	r1, r0
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	f000 bc7b 	b.w	80086c8 <_malloc_r>
 8007dd2:	bf00      	nop
 8007dd4:	20000014 	.word	0x20000014

08007dd8 <__ascii_mbtowc>:
 8007dd8:	b082      	sub	sp, #8
 8007dda:	b901      	cbnz	r1, 8007dde <__ascii_mbtowc+0x6>
 8007ddc:	a901      	add	r1, sp, #4
 8007dde:	b142      	cbz	r2, 8007df2 <__ascii_mbtowc+0x1a>
 8007de0:	b14b      	cbz	r3, 8007df6 <__ascii_mbtowc+0x1e>
 8007de2:	7813      	ldrb	r3, [r2, #0]
 8007de4:	600b      	str	r3, [r1, #0]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	1c10      	adds	r0, r2, #0
 8007dea:	bf18      	it	ne
 8007dec:	2001      	movne	r0, #1
 8007dee:	b002      	add	sp, #8
 8007df0:	4770      	bx	lr
 8007df2:	4610      	mov	r0, r2
 8007df4:	e7fb      	b.n	8007dee <__ascii_mbtowc+0x16>
 8007df6:	f06f 0001 	mvn.w	r0, #1
 8007dfa:	e7f8      	b.n	8007dee <__ascii_mbtowc+0x16>

08007dfc <memcpy>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	1e43      	subs	r3, r0, #1
 8007e00:	440a      	add	r2, r1
 8007e02:	4291      	cmp	r1, r2
 8007e04:	d100      	bne.n	8007e08 <memcpy+0xc>
 8007e06:	bd10      	pop	{r4, pc}
 8007e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e10:	e7f7      	b.n	8007e02 <memcpy+0x6>

08007e12 <_Balloc>:
 8007e12:	b570      	push	{r4, r5, r6, lr}
 8007e14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e16:	4604      	mov	r4, r0
 8007e18:	460e      	mov	r6, r1
 8007e1a:	b93d      	cbnz	r5, 8007e2c <_Balloc+0x1a>
 8007e1c:	2010      	movs	r0, #16
 8007e1e:	f7ff ffd3 	bl	8007dc8 <malloc>
 8007e22:	6260      	str	r0, [r4, #36]	; 0x24
 8007e24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e28:	6005      	str	r5, [r0, #0]
 8007e2a:	60c5      	str	r5, [r0, #12]
 8007e2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007e2e:	68eb      	ldr	r3, [r5, #12]
 8007e30:	b183      	cbz	r3, 8007e54 <_Balloc+0x42>
 8007e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007e3a:	b9b8      	cbnz	r0, 8007e6c <_Balloc+0x5a>
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f506 	lsl.w	r5, r1, r6
 8007e42:	1d6a      	adds	r2, r5, #5
 8007e44:	0092      	lsls	r2, r2, #2
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fbe1 	bl	800860e <_calloc_r>
 8007e4c:	b160      	cbz	r0, 8007e68 <_Balloc+0x56>
 8007e4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007e52:	e00e      	b.n	8007e72 <_Balloc+0x60>
 8007e54:	2221      	movs	r2, #33	; 0x21
 8007e56:	2104      	movs	r1, #4
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fbd8 	bl	800860e <_calloc_r>
 8007e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e60:	60e8      	str	r0, [r5, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e4      	bne.n	8007e32 <_Balloc+0x20>
 8007e68:	2000      	movs	r0, #0
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	6802      	ldr	r2, [r0, #0]
 8007e6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007e72:	2300      	movs	r3, #0
 8007e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e78:	e7f7      	b.n	8007e6a <_Balloc+0x58>

08007e7a <_Bfree>:
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460d      	mov	r5, r1
 8007e82:	b93c      	cbnz	r4, 8007e94 <_Bfree+0x1a>
 8007e84:	2010      	movs	r0, #16
 8007e86:	f7ff ff9f 	bl	8007dc8 <malloc>
 8007e8a:	6270      	str	r0, [r6, #36]	; 0x24
 8007e8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e90:	6004      	str	r4, [r0, #0]
 8007e92:	60c4      	str	r4, [r0, #12]
 8007e94:	b13d      	cbz	r5, 8007ea6 <_Bfree+0x2c>
 8007e96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e98:	686a      	ldr	r2, [r5, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ea0:	6029      	str	r1, [r5, #0]
 8007ea2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}

08007ea8 <__multadd>:
 8007ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eac:	690d      	ldr	r5, [r1, #16]
 8007eae:	461f      	mov	r7, r3
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	f101 0c14 	add.w	ip, r1, #20
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8dc 0000 	ldr.w	r0, [ip]
 8007ebe:	b281      	uxth	r1, r0
 8007ec0:	fb02 7101 	mla	r1, r2, r1, r7
 8007ec4:	0c0f      	lsrs	r7, r1, #16
 8007ec6:	0c00      	lsrs	r0, r0, #16
 8007ec8:	fb02 7000 	mla	r0, r2, r0, r7
 8007ecc:	b289      	uxth	r1, r1
 8007ece:	3301      	adds	r3, #1
 8007ed0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007ed4:	429d      	cmp	r5, r3
 8007ed6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007eda:	f84c 1b04 	str.w	r1, [ip], #4
 8007ede:	dcec      	bgt.n	8007eba <__multadd+0x12>
 8007ee0:	b1d7      	cbz	r7, 8007f18 <__multadd+0x70>
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	42ab      	cmp	r3, r5
 8007ee6:	dc12      	bgt.n	8007f0e <__multadd+0x66>
 8007ee8:	6861      	ldr	r1, [r4, #4]
 8007eea:	4630      	mov	r0, r6
 8007eec:	3101      	adds	r1, #1
 8007eee:	f7ff ff90 	bl	8007e12 <_Balloc>
 8007ef2:	6922      	ldr	r2, [r4, #16]
 8007ef4:	3202      	adds	r2, #2
 8007ef6:	f104 010c 	add.w	r1, r4, #12
 8007efa:	4680      	mov	r8, r0
 8007efc:	0092      	lsls	r2, r2, #2
 8007efe:	300c      	adds	r0, #12
 8007f00:	f7ff ff7c 	bl	8007dfc <memcpy>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7ff ffb7 	bl	8007e7a <_Bfree>
 8007f0c:	4644      	mov	r4, r8
 8007f0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f12:	3501      	adds	r5, #1
 8007f14:	615f      	str	r7, [r3, #20]
 8007f16:	6125      	str	r5, [r4, #16]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f1e <__s2b>:
 8007f1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f22:	460c      	mov	r4, r1
 8007f24:	4615      	mov	r5, r2
 8007f26:	461f      	mov	r7, r3
 8007f28:	2209      	movs	r2, #9
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f32:	2100      	movs	r1, #0
 8007f34:	2201      	movs	r2, #1
 8007f36:	429a      	cmp	r2, r3
 8007f38:	db20      	blt.n	8007f7c <__s2b+0x5e>
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff ff69 	bl	8007e12 <_Balloc>
 8007f40:	9b08      	ldr	r3, [sp, #32]
 8007f42:	6143      	str	r3, [r0, #20]
 8007f44:	2d09      	cmp	r5, #9
 8007f46:	f04f 0301 	mov.w	r3, #1
 8007f4a:	6103      	str	r3, [r0, #16]
 8007f4c:	dd19      	ble.n	8007f82 <__s2b+0x64>
 8007f4e:	f104 0809 	add.w	r8, r4, #9
 8007f52:	46c1      	mov	r9, r8
 8007f54:	442c      	add	r4, r5
 8007f56:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	3b30      	subs	r3, #48	; 0x30
 8007f5e:	220a      	movs	r2, #10
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7ff ffa1 	bl	8007ea8 <__multadd>
 8007f66:	45a1      	cmp	r9, r4
 8007f68:	d1f5      	bne.n	8007f56 <__s2b+0x38>
 8007f6a:	eb08 0405 	add.w	r4, r8, r5
 8007f6e:	3c08      	subs	r4, #8
 8007f70:	1b2d      	subs	r5, r5, r4
 8007f72:	1963      	adds	r3, r4, r5
 8007f74:	42bb      	cmp	r3, r7
 8007f76:	db07      	blt.n	8007f88 <__s2b+0x6a>
 8007f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7c:	0052      	lsls	r2, r2, #1
 8007f7e:	3101      	adds	r1, #1
 8007f80:	e7d9      	b.n	8007f36 <__s2b+0x18>
 8007f82:	340a      	adds	r4, #10
 8007f84:	2509      	movs	r5, #9
 8007f86:	e7f3      	b.n	8007f70 <__s2b+0x52>
 8007f88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	3b30      	subs	r3, #48	; 0x30
 8007f90:	220a      	movs	r2, #10
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7ff ff88 	bl	8007ea8 <__multadd>
 8007f98:	e7eb      	b.n	8007f72 <__s2b+0x54>

08007f9a <__hi0bits>:
 8007f9a:	0c02      	lsrs	r2, r0, #16
 8007f9c:	0412      	lsls	r2, r2, #16
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	b9b2      	cbnz	r2, 8007fd0 <__hi0bits+0x36>
 8007fa2:	0403      	lsls	r3, r0, #16
 8007fa4:	2010      	movs	r0, #16
 8007fa6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007faa:	bf04      	itt	eq
 8007fac:	021b      	lsleq	r3, r3, #8
 8007fae:	3008      	addeq	r0, #8
 8007fb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fb4:	bf04      	itt	eq
 8007fb6:	011b      	lsleq	r3, r3, #4
 8007fb8:	3004      	addeq	r0, #4
 8007fba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fbe:	bf04      	itt	eq
 8007fc0:	009b      	lsleq	r3, r3, #2
 8007fc2:	3002      	addeq	r0, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	db06      	blt.n	8007fd6 <__hi0bits+0x3c>
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	d503      	bpl.n	8007fd4 <__hi0bits+0x3a>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	4770      	bx	lr
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	e7e8      	b.n	8007fa6 <__hi0bits+0xc>
 8007fd4:	2020      	movs	r0, #32
 8007fd6:	4770      	bx	lr

08007fd8 <__lo0bits>:
 8007fd8:	6803      	ldr	r3, [r0, #0]
 8007fda:	f013 0207 	ands.w	r2, r3, #7
 8007fde:	4601      	mov	r1, r0
 8007fe0:	d00b      	beq.n	8007ffa <__lo0bits+0x22>
 8007fe2:	07da      	lsls	r2, r3, #31
 8007fe4:	d423      	bmi.n	800802e <__lo0bits+0x56>
 8007fe6:	0798      	lsls	r0, r3, #30
 8007fe8:	bf49      	itett	mi
 8007fea:	085b      	lsrmi	r3, r3, #1
 8007fec:	089b      	lsrpl	r3, r3, #2
 8007fee:	2001      	movmi	r0, #1
 8007ff0:	600b      	strmi	r3, [r1, #0]
 8007ff2:	bf5c      	itt	pl
 8007ff4:	600b      	strpl	r3, [r1, #0]
 8007ff6:	2002      	movpl	r0, #2
 8007ff8:	4770      	bx	lr
 8007ffa:	b298      	uxth	r0, r3
 8007ffc:	b9a8      	cbnz	r0, 800802a <__lo0bits+0x52>
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	2010      	movs	r0, #16
 8008002:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008006:	bf04      	itt	eq
 8008008:	0a1b      	lsreq	r3, r3, #8
 800800a:	3008      	addeq	r0, #8
 800800c:	071a      	lsls	r2, r3, #28
 800800e:	bf04      	itt	eq
 8008010:	091b      	lsreq	r3, r3, #4
 8008012:	3004      	addeq	r0, #4
 8008014:	079a      	lsls	r2, r3, #30
 8008016:	bf04      	itt	eq
 8008018:	089b      	lsreq	r3, r3, #2
 800801a:	3002      	addeq	r0, #2
 800801c:	07da      	lsls	r2, r3, #31
 800801e:	d402      	bmi.n	8008026 <__lo0bits+0x4e>
 8008020:	085b      	lsrs	r3, r3, #1
 8008022:	d006      	beq.n	8008032 <__lo0bits+0x5a>
 8008024:	3001      	adds	r0, #1
 8008026:	600b      	str	r3, [r1, #0]
 8008028:	4770      	bx	lr
 800802a:	4610      	mov	r0, r2
 800802c:	e7e9      	b.n	8008002 <__lo0bits+0x2a>
 800802e:	2000      	movs	r0, #0
 8008030:	4770      	bx	lr
 8008032:	2020      	movs	r0, #32
 8008034:	4770      	bx	lr

08008036 <__i2b>:
 8008036:	b510      	push	{r4, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	2101      	movs	r1, #1
 800803c:	f7ff fee9 	bl	8007e12 <_Balloc>
 8008040:	2201      	movs	r2, #1
 8008042:	6144      	str	r4, [r0, #20]
 8008044:	6102      	str	r2, [r0, #16]
 8008046:	bd10      	pop	{r4, pc}

08008048 <__multiply>:
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	4614      	mov	r4, r2
 800804e:	690a      	ldr	r2, [r1, #16]
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	429a      	cmp	r2, r3
 8008054:	bfb8      	it	lt
 8008056:	460b      	movlt	r3, r1
 8008058:	4688      	mov	r8, r1
 800805a:	bfbc      	itt	lt
 800805c:	46a0      	movlt	r8, r4
 800805e:	461c      	movlt	r4, r3
 8008060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008064:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008068:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800806c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008070:	eb07 0609 	add.w	r6, r7, r9
 8008074:	42b3      	cmp	r3, r6
 8008076:	bfb8      	it	lt
 8008078:	3101      	addlt	r1, #1
 800807a:	f7ff feca 	bl	8007e12 <_Balloc>
 800807e:	f100 0514 	add.w	r5, r0, #20
 8008082:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008086:	462b      	mov	r3, r5
 8008088:	2200      	movs	r2, #0
 800808a:	4573      	cmp	r3, lr
 800808c:	d316      	bcc.n	80080bc <__multiply+0x74>
 800808e:	f104 0214 	add.w	r2, r4, #20
 8008092:	f108 0114 	add.w	r1, r8, #20
 8008096:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800809a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	9b00      	ldr	r3, [sp, #0]
 80080a2:	9201      	str	r2, [sp, #4]
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d80c      	bhi.n	80080c2 <__multiply+0x7a>
 80080a8:	2e00      	cmp	r6, #0
 80080aa:	dd03      	ble.n	80080b4 <__multiply+0x6c>
 80080ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d05d      	beq.n	8008170 <__multiply+0x128>
 80080b4:	6106      	str	r6, [r0, #16]
 80080b6:	b003      	add	sp, #12
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	f843 2b04 	str.w	r2, [r3], #4
 80080c0:	e7e3      	b.n	800808a <__multiply+0x42>
 80080c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80080c6:	f1bb 0f00 	cmp.w	fp, #0
 80080ca:	d023      	beq.n	8008114 <__multiply+0xcc>
 80080cc:	4689      	mov	r9, r1
 80080ce:	46ac      	mov	ip, r5
 80080d0:	f04f 0800 	mov.w	r8, #0
 80080d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80080d8:	f8dc a000 	ldr.w	sl, [ip]
 80080dc:	b2a3      	uxth	r3, r4
 80080de:	fa1f fa8a 	uxth.w	sl, sl
 80080e2:	fb0b a303 	mla	r3, fp, r3, sl
 80080e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80080ea:	f8dc 4000 	ldr.w	r4, [ip]
 80080ee:	4443      	add	r3, r8
 80080f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80080f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80080f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80080fc:	46e2      	mov	sl, ip
 80080fe:	b29b      	uxth	r3, r3
 8008100:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008104:	454f      	cmp	r7, r9
 8008106:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800810a:	f84a 3b04 	str.w	r3, [sl], #4
 800810e:	d82b      	bhi.n	8008168 <__multiply+0x120>
 8008110:	f8cc 8004 	str.w	r8, [ip, #4]
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800811a:	3204      	adds	r2, #4
 800811c:	f1ba 0f00 	cmp.w	sl, #0
 8008120:	d020      	beq.n	8008164 <__multiply+0x11c>
 8008122:	682b      	ldr	r3, [r5, #0]
 8008124:	4689      	mov	r9, r1
 8008126:	46a8      	mov	r8, r5
 8008128:	f04f 0b00 	mov.w	fp, #0
 800812c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008130:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008134:	fb0a 440c 	mla	r4, sl, ip, r4
 8008138:	445c      	add	r4, fp
 800813a:	46c4      	mov	ip, r8
 800813c:	b29b      	uxth	r3, r3
 800813e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008142:	f84c 3b04 	str.w	r3, [ip], #4
 8008146:	f859 3b04 	ldr.w	r3, [r9], #4
 800814a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	fb0a b303 	mla	r3, sl, r3, fp
 8008154:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008158:	454f      	cmp	r7, r9
 800815a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800815e:	d805      	bhi.n	800816c <__multiply+0x124>
 8008160:	f8c8 3004 	str.w	r3, [r8, #4]
 8008164:	3504      	adds	r5, #4
 8008166:	e79b      	b.n	80080a0 <__multiply+0x58>
 8008168:	46d4      	mov	ip, sl
 800816a:	e7b3      	b.n	80080d4 <__multiply+0x8c>
 800816c:	46e0      	mov	r8, ip
 800816e:	e7dd      	b.n	800812c <__multiply+0xe4>
 8008170:	3e01      	subs	r6, #1
 8008172:	e799      	b.n	80080a8 <__multiply+0x60>

08008174 <__pow5mult>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	4615      	mov	r5, r2
 800817a:	f012 0203 	ands.w	r2, r2, #3
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	d007      	beq.n	8008194 <__pow5mult+0x20>
 8008184:	3a01      	subs	r2, #1
 8008186:	4c21      	ldr	r4, [pc, #132]	; (800820c <__pow5mult+0x98>)
 8008188:	2300      	movs	r3, #0
 800818a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800818e:	f7ff fe8b 	bl	8007ea8 <__multadd>
 8008192:	4607      	mov	r7, r0
 8008194:	10ad      	asrs	r5, r5, #2
 8008196:	d035      	beq.n	8008204 <__pow5mult+0x90>
 8008198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800819a:	b93c      	cbnz	r4, 80081ac <__pow5mult+0x38>
 800819c:	2010      	movs	r0, #16
 800819e:	f7ff fe13 	bl	8007dc8 <malloc>
 80081a2:	6270      	str	r0, [r6, #36]	; 0x24
 80081a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081a8:	6004      	str	r4, [r0, #0]
 80081aa:	60c4      	str	r4, [r0, #12]
 80081ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081b4:	b94c      	cbnz	r4, 80081ca <__pow5mult+0x56>
 80081b6:	f240 2171 	movw	r1, #625	; 0x271
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ff3b 	bl	8008036 <__i2b>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80081c6:	4604      	mov	r4, r0
 80081c8:	6003      	str	r3, [r0, #0]
 80081ca:	f04f 0800 	mov.w	r8, #0
 80081ce:	07eb      	lsls	r3, r5, #31
 80081d0:	d50a      	bpl.n	80081e8 <__pow5mult+0x74>
 80081d2:	4639      	mov	r1, r7
 80081d4:	4622      	mov	r2, r4
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff ff36 	bl	8008048 <__multiply>
 80081dc:	4639      	mov	r1, r7
 80081de:	4681      	mov	r9, r0
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff fe4a 	bl	8007e7a <_Bfree>
 80081e6:	464f      	mov	r7, r9
 80081e8:	106d      	asrs	r5, r5, #1
 80081ea:	d00b      	beq.n	8008204 <__pow5mult+0x90>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	b938      	cbnz	r0, 8008200 <__pow5mult+0x8c>
 80081f0:	4622      	mov	r2, r4
 80081f2:	4621      	mov	r1, r4
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7ff ff27 	bl	8008048 <__multiply>
 80081fa:	6020      	str	r0, [r4, #0]
 80081fc:	f8c0 8000 	str.w	r8, [r0]
 8008200:	4604      	mov	r4, r0
 8008202:	e7e4      	b.n	80081ce <__pow5mult+0x5a>
 8008204:	4638      	mov	r0, r7
 8008206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820a:	bf00      	nop
 800820c:	08009500 	.word	0x08009500

08008210 <__lshift>:
 8008210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008214:	460c      	mov	r4, r1
 8008216:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	6849      	ldr	r1, [r1, #4]
 800821e:	eb0a 0903 	add.w	r9, sl, r3
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	4607      	mov	r7, r0
 8008226:	4616      	mov	r6, r2
 8008228:	f109 0501 	add.w	r5, r9, #1
 800822c:	42ab      	cmp	r3, r5
 800822e:	db32      	blt.n	8008296 <__lshift+0x86>
 8008230:	4638      	mov	r0, r7
 8008232:	f7ff fdee 	bl	8007e12 <_Balloc>
 8008236:	2300      	movs	r3, #0
 8008238:	4680      	mov	r8, r0
 800823a:	f100 0114 	add.w	r1, r0, #20
 800823e:	461a      	mov	r2, r3
 8008240:	4553      	cmp	r3, sl
 8008242:	db2b      	blt.n	800829c <__lshift+0x8c>
 8008244:	6920      	ldr	r0, [r4, #16]
 8008246:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800824a:	f104 0314 	add.w	r3, r4, #20
 800824e:	f016 021f 	ands.w	r2, r6, #31
 8008252:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008256:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800825a:	d025      	beq.n	80082a8 <__lshift+0x98>
 800825c:	f1c2 0e20 	rsb	lr, r2, #32
 8008260:	2000      	movs	r0, #0
 8008262:	681e      	ldr	r6, [r3, #0]
 8008264:	468a      	mov	sl, r1
 8008266:	4096      	lsls	r6, r2
 8008268:	4330      	orrs	r0, r6
 800826a:	f84a 0b04 	str.w	r0, [sl], #4
 800826e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008272:	459c      	cmp	ip, r3
 8008274:	fa20 f00e 	lsr.w	r0, r0, lr
 8008278:	d814      	bhi.n	80082a4 <__lshift+0x94>
 800827a:	6048      	str	r0, [r1, #4]
 800827c:	b108      	cbz	r0, 8008282 <__lshift+0x72>
 800827e:	f109 0502 	add.w	r5, r9, #2
 8008282:	3d01      	subs	r5, #1
 8008284:	4638      	mov	r0, r7
 8008286:	f8c8 5010 	str.w	r5, [r8, #16]
 800828a:	4621      	mov	r1, r4
 800828c:	f7ff fdf5 	bl	8007e7a <_Bfree>
 8008290:	4640      	mov	r0, r8
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	3101      	adds	r1, #1
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	e7c7      	b.n	800822c <__lshift+0x1c>
 800829c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80082a0:	3301      	adds	r3, #1
 80082a2:	e7cd      	b.n	8008240 <__lshift+0x30>
 80082a4:	4651      	mov	r1, sl
 80082a6:	e7dc      	b.n	8008262 <__lshift+0x52>
 80082a8:	3904      	subs	r1, #4
 80082aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80082b2:	459c      	cmp	ip, r3
 80082b4:	d8f9      	bhi.n	80082aa <__lshift+0x9a>
 80082b6:	e7e4      	b.n	8008282 <__lshift+0x72>

080082b8 <__mcmp>:
 80082b8:	6903      	ldr	r3, [r0, #16]
 80082ba:	690a      	ldr	r2, [r1, #16]
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	b530      	push	{r4, r5, lr}
 80082c0:	d10c      	bne.n	80082dc <__mcmp+0x24>
 80082c2:	0092      	lsls	r2, r2, #2
 80082c4:	3014      	adds	r0, #20
 80082c6:	3114      	adds	r1, #20
 80082c8:	1884      	adds	r4, r0, r2
 80082ca:	4411      	add	r1, r2
 80082cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082d4:	4295      	cmp	r5, r2
 80082d6:	d003      	beq.n	80082e0 <__mcmp+0x28>
 80082d8:	d305      	bcc.n	80082e6 <__mcmp+0x2e>
 80082da:	2301      	movs	r3, #1
 80082dc:	4618      	mov	r0, r3
 80082de:	bd30      	pop	{r4, r5, pc}
 80082e0:	42a0      	cmp	r0, r4
 80082e2:	d3f3      	bcc.n	80082cc <__mcmp+0x14>
 80082e4:	e7fa      	b.n	80082dc <__mcmp+0x24>
 80082e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ea:	e7f7      	b.n	80082dc <__mcmp+0x24>

080082ec <__mdiff>:
 80082ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f0:	460d      	mov	r5, r1
 80082f2:	4607      	mov	r7, r0
 80082f4:	4611      	mov	r1, r2
 80082f6:	4628      	mov	r0, r5
 80082f8:	4614      	mov	r4, r2
 80082fa:	f7ff ffdd 	bl	80082b8 <__mcmp>
 80082fe:	1e06      	subs	r6, r0, #0
 8008300:	d108      	bne.n	8008314 <__mdiff+0x28>
 8008302:	4631      	mov	r1, r6
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff fd84 	bl	8007e12 <_Balloc>
 800830a:	2301      	movs	r3, #1
 800830c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008314:	bfa4      	itt	ge
 8008316:	4623      	movge	r3, r4
 8008318:	462c      	movge	r4, r5
 800831a:	4638      	mov	r0, r7
 800831c:	6861      	ldr	r1, [r4, #4]
 800831e:	bfa6      	itte	ge
 8008320:	461d      	movge	r5, r3
 8008322:	2600      	movge	r6, #0
 8008324:	2601      	movlt	r6, #1
 8008326:	f7ff fd74 	bl	8007e12 <_Balloc>
 800832a:	692b      	ldr	r3, [r5, #16]
 800832c:	60c6      	str	r6, [r0, #12]
 800832e:	6926      	ldr	r6, [r4, #16]
 8008330:	f105 0914 	add.w	r9, r5, #20
 8008334:	f104 0214 	add.w	r2, r4, #20
 8008338:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800833c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008340:	f100 0514 	add.w	r5, r0, #20
 8008344:	f04f 0e00 	mov.w	lr, #0
 8008348:	f852 ab04 	ldr.w	sl, [r2], #4
 800834c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008350:	fa1e f18a 	uxtah	r1, lr, sl
 8008354:	b2a3      	uxth	r3, r4
 8008356:	1ac9      	subs	r1, r1, r3
 8008358:	0c23      	lsrs	r3, r4, #16
 800835a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800835e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008362:	b289      	uxth	r1, r1
 8008364:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008368:	45c8      	cmp	r8, r9
 800836a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800836e:	4694      	mov	ip, r2
 8008370:	f845 3b04 	str.w	r3, [r5], #4
 8008374:	d8e8      	bhi.n	8008348 <__mdiff+0x5c>
 8008376:	45bc      	cmp	ip, r7
 8008378:	d304      	bcc.n	8008384 <__mdiff+0x98>
 800837a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800837e:	b183      	cbz	r3, 80083a2 <__mdiff+0xb6>
 8008380:	6106      	str	r6, [r0, #16]
 8008382:	e7c5      	b.n	8008310 <__mdiff+0x24>
 8008384:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008388:	fa1e f381 	uxtah	r3, lr, r1
 800838c:	141a      	asrs	r2, r3, #16
 800838e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008392:	b29b      	uxth	r3, r3
 8008394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008398:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800839c:	f845 3b04 	str.w	r3, [r5], #4
 80083a0:	e7e9      	b.n	8008376 <__mdiff+0x8a>
 80083a2:	3e01      	subs	r6, #1
 80083a4:	e7e9      	b.n	800837a <__mdiff+0x8e>
	...

080083a8 <__ulp>:
 80083a8:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <__ulp+0x4c>)
 80083aa:	ee10 2a90 	vmov	r2, s1
 80083ae:	401a      	ands	r2, r3
 80083b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd04      	ble.n	80083c2 <__ulp+0x1a>
 80083b8:	2000      	movs	r0, #0
 80083ba:	4619      	mov	r1, r3
 80083bc:	ec41 0b10 	vmov	d0, r0, r1
 80083c0:	4770      	bx	lr
 80083c2:	425b      	negs	r3, r3
 80083c4:	151b      	asrs	r3, r3, #20
 80083c6:	2b13      	cmp	r3, #19
 80083c8:	f04f 0000 	mov.w	r0, #0
 80083cc:	f04f 0100 	mov.w	r1, #0
 80083d0:	dc04      	bgt.n	80083dc <__ulp+0x34>
 80083d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80083d6:	fa42 f103 	asr.w	r1, r2, r3
 80083da:	e7ef      	b.n	80083bc <__ulp+0x14>
 80083dc:	3b14      	subs	r3, #20
 80083de:	2b1e      	cmp	r3, #30
 80083e0:	f04f 0201 	mov.w	r2, #1
 80083e4:	bfda      	itte	le
 80083e6:	f1c3 031f 	rsble	r3, r3, #31
 80083ea:	fa02 f303 	lslle.w	r3, r2, r3
 80083ee:	4613      	movgt	r3, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	e7e3      	b.n	80083bc <__ulp+0x14>
 80083f4:	7ff00000 	.word	0x7ff00000

080083f8 <__b2d>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	6905      	ldr	r5, [r0, #16]
 80083fc:	f100 0714 	add.w	r7, r0, #20
 8008400:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008404:	1f2e      	subs	r6, r5, #4
 8008406:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800840a:	4620      	mov	r0, r4
 800840c:	f7ff fdc5 	bl	8007f9a <__hi0bits>
 8008410:	f1c0 0320 	rsb	r3, r0, #32
 8008414:	280a      	cmp	r0, #10
 8008416:	600b      	str	r3, [r1, #0]
 8008418:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008490 <__b2d+0x98>
 800841c:	dc14      	bgt.n	8008448 <__b2d+0x50>
 800841e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008422:	fa24 f10e 	lsr.w	r1, r4, lr
 8008426:	42b7      	cmp	r7, r6
 8008428:	ea41 030c 	orr.w	r3, r1, ip
 800842c:	bf34      	ite	cc
 800842e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008432:	2100      	movcs	r1, #0
 8008434:	3015      	adds	r0, #21
 8008436:	fa04 f000 	lsl.w	r0, r4, r0
 800843a:	fa21 f10e 	lsr.w	r1, r1, lr
 800843e:	ea40 0201 	orr.w	r2, r0, r1
 8008442:	ec43 2b10 	vmov	d0, r2, r3
 8008446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008448:	42b7      	cmp	r7, r6
 800844a:	bf3a      	itte	cc
 800844c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008450:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008454:	2100      	movcs	r1, #0
 8008456:	380b      	subs	r0, #11
 8008458:	d015      	beq.n	8008486 <__b2d+0x8e>
 800845a:	4084      	lsls	r4, r0
 800845c:	f1c0 0520 	rsb	r5, r0, #32
 8008460:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008464:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008468:	42be      	cmp	r6, r7
 800846a:	fa21 fc05 	lsr.w	ip, r1, r5
 800846e:	ea44 030c 	orr.w	r3, r4, ip
 8008472:	bf8c      	ite	hi
 8008474:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008478:	2400      	movls	r4, #0
 800847a:	fa01 f000 	lsl.w	r0, r1, r0
 800847e:	40ec      	lsrs	r4, r5
 8008480:	ea40 0204 	orr.w	r2, r0, r4
 8008484:	e7dd      	b.n	8008442 <__b2d+0x4a>
 8008486:	ea44 030c 	orr.w	r3, r4, ip
 800848a:	460a      	mov	r2, r1
 800848c:	e7d9      	b.n	8008442 <__b2d+0x4a>
 800848e:	bf00      	nop
 8008490:	3ff00000 	.word	0x3ff00000

08008494 <__d2b>:
 8008494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008498:	460e      	mov	r6, r1
 800849a:	2101      	movs	r1, #1
 800849c:	ec59 8b10 	vmov	r8, r9, d0
 80084a0:	4615      	mov	r5, r2
 80084a2:	f7ff fcb6 	bl	8007e12 <_Balloc>
 80084a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084aa:	4607      	mov	r7, r0
 80084ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084b0:	bb34      	cbnz	r4, 8008500 <__d2b+0x6c>
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	f1b8 0300 	subs.w	r3, r8, #0
 80084b8:	d027      	beq.n	800850a <__d2b+0x76>
 80084ba:	a802      	add	r0, sp, #8
 80084bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 80084c0:	f7ff fd8a 	bl	8007fd8 <__lo0bits>
 80084c4:	9900      	ldr	r1, [sp, #0]
 80084c6:	b1f0      	cbz	r0, 8008506 <__d2b+0x72>
 80084c8:	9a01      	ldr	r2, [sp, #4]
 80084ca:	f1c0 0320 	rsb	r3, r0, #32
 80084ce:	fa02 f303 	lsl.w	r3, r2, r3
 80084d2:	430b      	orrs	r3, r1
 80084d4:	40c2      	lsrs	r2, r0
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	9201      	str	r2, [sp, #4]
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	61bb      	str	r3, [r7, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bf14      	ite	ne
 80084e2:	2102      	movne	r1, #2
 80084e4:	2101      	moveq	r1, #1
 80084e6:	6139      	str	r1, [r7, #16]
 80084e8:	b1c4      	cbz	r4, 800851c <__d2b+0x88>
 80084ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80084ee:	4404      	add	r4, r0
 80084f0:	6034      	str	r4, [r6, #0]
 80084f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084f6:	6028      	str	r0, [r5, #0]
 80084f8:	4638      	mov	r0, r7
 80084fa:	b003      	add	sp, #12
 80084fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008504:	e7d5      	b.n	80084b2 <__d2b+0x1e>
 8008506:	6179      	str	r1, [r7, #20]
 8008508:	e7e7      	b.n	80084da <__d2b+0x46>
 800850a:	a801      	add	r0, sp, #4
 800850c:	f7ff fd64 	bl	8007fd8 <__lo0bits>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	2101      	movs	r1, #1
 8008516:	6139      	str	r1, [r7, #16]
 8008518:	3020      	adds	r0, #32
 800851a:	e7e5      	b.n	80084e8 <__d2b+0x54>
 800851c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008520:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008524:	6030      	str	r0, [r6, #0]
 8008526:	6918      	ldr	r0, [r3, #16]
 8008528:	f7ff fd37 	bl	8007f9a <__hi0bits>
 800852c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008530:	e7e1      	b.n	80084f6 <__d2b+0x62>

08008532 <__ratio>:
 8008532:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008536:	4688      	mov	r8, r1
 8008538:	4669      	mov	r1, sp
 800853a:	4681      	mov	r9, r0
 800853c:	f7ff ff5c 	bl	80083f8 <__b2d>
 8008540:	a901      	add	r1, sp, #4
 8008542:	4640      	mov	r0, r8
 8008544:	ec57 6b10 	vmov	r6, r7, d0
 8008548:	f7ff ff56 	bl	80083f8 <__b2d>
 800854c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008550:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008554:	eba3 0c02 	sub.w	ip, r3, r2
 8008558:	e9dd 3200 	ldrd	r3, r2, [sp]
 800855c:	1a9b      	subs	r3, r3, r2
 800855e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008562:	ec5b ab10 	vmov	sl, fp, d0
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfce      	itee	gt
 800856a:	463a      	movgt	r2, r7
 800856c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008570:	465a      	movle	r2, fp
 8008572:	4659      	mov	r1, fp
 8008574:	463d      	mov	r5, r7
 8008576:	bfd4      	ite	le
 8008578:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800857c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008580:	4630      	mov	r0, r6
 8008582:	ee10 2a10 	vmov	r2, s0
 8008586:	460b      	mov	r3, r1
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 f95f 	bl	800084c <__aeabi_ddiv>
 800858e:	ec41 0b10 	vmov	d0, r0, r1
 8008592:	b003      	add	sp, #12
 8008594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008598 <__copybits>:
 8008598:	3901      	subs	r1, #1
 800859a:	b510      	push	{r4, lr}
 800859c:	1149      	asrs	r1, r1, #5
 800859e:	6914      	ldr	r4, [r2, #16]
 80085a0:	3101      	adds	r1, #1
 80085a2:	f102 0314 	add.w	r3, r2, #20
 80085a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80085aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	4602      	mov	r2, r0
 80085b2:	d303      	bcc.n	80085bc <__copybits+0x24>
 80085b4:	2300      	movs	r3, #0
 80085b6:	428a      	cmp	r2, r1
 80085b8:	d305      	bcc.n	80085c6 <__copybits+0x2e>
 80085ba:	bd10      	pop	{r4, pc}
 80085bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c0:	f840 2b04 	str.w	r2, [r0], #4
 80085c4:	e7f3      	b.n	80085ae <__copybits+0x16>
 80085c6:	f842 3b04 	str.w	r3, [r2], #4
 80085ca:	e7f4      	b.n	80085b6 <__copybits+0x1e>

080085cc <__any_on>:
 80085cc:	f100 0214 	add.w	r2, r0, #20
 80085d0:	6900      	ldr	r0, [r0, #16]
 80085d2:	114b      	asrs	r3, r1, #5
 80085d4:	4298      	cmp	r0, r3
 80085d6:	b510      	push	{r4, lr}
 80085d8:	db11      	blt.n	80085fe <__any_on+0x32>
 80085da:	dd0a      	ble.n	80085f2 <__any_on+0x26>
 80085dc:	f011 011f 	ands.w	r1, r1, #31
 80085e0:	d007      	beq.n	80085f2 <__any_on+0x26>
 80085e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80085e6:	fa24 f001 	lsr.w	r0, r4, r1
 80085ea:	fa00 f101 	lsl.w	r1, r0, r1
 80085ee:	428c      	cmp	r4, r1
 80085f0:	d10b      	bne.n	800860a <__any_on+0x3e>
 80085f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d803      	bhi.n	8008602 <__any_on+0x36>
 80085fa:	2000      	movs	r0, #0
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	4603      	mov	r3, r0
 8008600:	e7f7      	b.n	80085f2 <__any_on+0x26>
 8008602:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008606:	2900      	cmp	r1, #0
 8008608:	d0f5      	beq.n	80085f6 <__any_on+0x2a>
 800860a:	2001      	movs	r0, #1
 800860c:	e7f6      	b.n	80085fc <__any_on+0x30>

0800860e <_calloc_r>:
 800860e:	b538      	push	{r3, r4, r5, lr}
 8008610:	fb02 f401 	mul.w	r4, r2, r1
 8008614:	4621      	mov	r1, r4
 8008616:	f000 f857 	bl	80086c8 <_malloc_r>
 800861a:	4605      	mov	r5, r0
 800861c:	b118      	cbz	r0, 8008626 <_calloc_r+0x18>
 800861e:	4622      	mov	r2, r4
 8008620:	2100      	movs	r1, #0
 8008622:	f7fc fc53 	bl	8004ecc <memset>
 8008626:	4628      	mov	r0, r5
 8008628:	bd38      	pop	{r3, r4, r5, pc}
	...

0800862c <_free_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4605      	mov	r5, r0
 8008630:	2900      	cmp	r1, #0
 8008632:	d045      	beq.n	80086c0 <_free_r+0x94>
 8008634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008638:	1f0c      	subs	r4, r1, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	bfb8      	it	lt
 800863e:	18e4      	addlt	r4, r4, r3
 8008640:	f000 fdc3 	bl	80091ca <__malloc_lock>
 8008644:	4a1f      	ldr	r2, [pc, #124]	; (80086c4 <_free_r+0x98>)
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	4610      	mov	r0, r2
 800864a:	b933      	cbnz	r3, 800865a <_free_r+0x2e>
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	6014      	str	r4, [r2, #0]
 8008650:	4628      	mov	r0, r5
 8008652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008656:	f000 bdb9 	b.w	80091cc <__malloc_unlock>
 800865a:	42a3      	cmp	r3, r4
 800865c:	d90c      	bls.n	8008678 <_free_r+0x4c>
 800865e:	6821      	ldr	r1, [r4, #0]
 8008660:	1862      	adds	r2, r4, r1
 8008662:	4293      	cmp	r3, r2
 8008664:	bf04      	itt	eq
 8008666:	681a      	ldreq	r2, [r3, #0]
 8008668:	685b      	ldreq	r3, [r3, #4]
 800866a:	6063      	str	r3, [r4, #4]
 800866c:	bf04      	itt	eq
 800866e:	1852      	addeq	r2, r2, r1
 8008670:	6022      	streq	r2, [r4, #0]
 8008672:	6004      	str	r4, [r0, #0]
 8008674:	e7ec      	b.n	8008650 <_free_r+0x24>
 8008676:	4613      	mov	r3, r2
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	b10a      	cbz	r2, 8008680 <_free_r+0x54>
 800867c:	42a2      	cmp	r2, r4
 800867e:	d9fa      	bls.n	8008676 <_free_r+0x4a>
 8008680:	6819      	ldr	r1, [r3, #0]
 8008682:	1858      	adds	r0, r3, r1
 8008684:	42a0      	cmp	r0, r4
 8008686:	d10b      	bne.n	80086a0 <_free_r+0x74>
 8008688:	6820      	ldr	r0, [r4, #0]
 800868a:	4401      	add	r1, r0
 800868c:	1858      	adds	r0, r3, r1
 800868e:	4282      	cmp	r2, r0
 8008690:	6019      	str	r1, [r3, #0]
 8008692:	d1dd      	bne.n	8008650 <_free_r+0x24>
 8008694:	6810      	ldr	r0, [r2, #0]
 8008696:	6852      	ldr	r2, [r2, #4]
 8008698:	605a      	str	r2, [r3, #4]
 800869a:	4401      	add	r1, r0
 800869c:	6019      	str	r1, [r3, #0]
 800869e:	e7d7      	b.n	8008650 <_free_r+0x24>
 80086a0:	d902      	bls.n	80086a8 <_free_r+0x7c>
 80086a2:	230c      	movs	r3, #12
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	e7d3      	b.n	8008650 <_free_r+0x24>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	1821      	adds	r1, r4, r0
 80086ac:	428a      	cmp	r2, r1
 80086ae:	bf04      	itt	eq
 80086b0:	6811      	ldreq	r1, [r2, #0]
 80086b2:	6852      	ldreq	r2, [r2, #4]
 80086b4:	6062      	str	r2, [r4, #4]
 80086b6:	bf04      	itt	eq
 80086b8:	1809      	addeq	r1, r1, r0
 80086ba:	6021      	streq	r1, [r4, #0]
 80086bc:	605c      	str	r4, [r3, #4]
 80086be:	e7c7      	b.n	8008650 <_free_r+0x24>
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	bf00      	nop
 80086c4:	20000214 	.word	0x20000214

080086c8 <_malloc_r>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	1ccd      	adds	r5, r1, #3
 80086cc:	f025 0503 	bic.w	r5, r5, #3
 80086d0:	3508      	adds	r5, #8
 80086d2:	2d0c      	cmp	r5, #12
 80086d4:	bf38      	it	cc
 80086d6:	250c      	movcc	r5, #12
 80086d8:	2d00      	cmp	r5, #0
 80086da:	4606      	mov	r6, r0
 80086dc:	db01      	blt.n	80086e2 <_malloc_r+0x1a>
 80086de:	42a9      	cmp	r1, r5
 80086e0:	d903      	bls.n	80086ea <_malloc_r+0x22>
 80086e2:	230c      	movs	r3, #12
 80086e4:	6033      	str	r3, [r6, #0]
 80086e6:	2000      	movs	r0, #0
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
 80086ea:	f000 fd6e 	bl	80091ca <__malloc_lock>
 80086ee:	4a21      	ldr	r2, [pc, #132]	; (8008774 <_malloc_r+0xac>)
 80086f0:	6814      	ldr	r4, [r2, #0]
 80086f2:	4621      	mov	r1, r4
 80086f4:	b991      	cbnz	r1, 800871c <_malloc_r+0x54>
 80086f6:	4c20      	ldr	r4, [pc, #128]	; (8008778 <_malloc_r+0xb0>)
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	b91b      	cbnz	r3, 8008704 <_malloc_r+0x3c>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f000 facf 	bl	8008ca0 <_sbrk_r>
 8008702:	6020      	str	r0, [r4, #0]
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f000 faca 	bl	8008ca0 <_sbrk_r>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d124      	bne.n	800875a <_malloc_r+0x92>
 8008710:	230c      	movs	r3, #12
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	4630      	mov	r0, r6
 8008716:	f000 fd59 	bl	80091cc <__malloc_unlock>
 800871a:	e7e4      	b.n	80086e6 <_malloc_r+0x1e>
 800871c:	680b      	ldr	r3, [r1, #0]
 800871e:	1b5b      	subs	r3, r3, r5
 8008720:	d418      	bmi.n	8008754 <_malloc_r+0x8c>
 8008722:	2b0b      	cmp	r3, #11
 8008724:	d90f      	bls.n	8008746 <_malloc_r+0x7e>
 8008726:	600b      	str	r3, [r1, #0]
 8008728:	50cd      	str	r5, [r1, r3]
 800872a:	18cc      	adds	r4, r1, r3
 800872c:	4630      	mov	r0, r6
 800872e:	f000 fd4d 	bl	80091cc <__malloc_unlock>
 8008732:	f104 000b 	add.w	r0, r4, #11
 8008736:	1d23      	adds	r3, r4, #4
 8008738:	f020 0007 	bic.w	r0, r0, #7
 800873c:	1ac3      	subs	r3, r0, r3
 800873e:	d0d3      	beq.n	80086e8 <_malloc_r+0x20>
 8008740:	425a      	negs	r2, r3
 8008742:	50e2      	str	r2, [r4, r3]
 8008744:	e7d0      	b.n	80086e8 <_malloc_r+0x20>
 8008746:	428c      	cmp	r4, r1
 8008748:	684b      	ldr	r3, [r1, #4]
 800874a:	bf16      	itet	ne
 800874c:	6063      	strne	r3, [r4, #4]
 800874e:	6013      	streq	r3, [r2, #0]
 8008750:	460c      	movne	r4, r1
 8008752:	e7eb      	b.n	800872c <_malloc_r+0x64>
 8008754:	460c      	mov	r4, r1
 8008756:	6849      	ldr	r1, [r1, #4]
 8008758:	e7cc      	b.n	80086f4 <_malloc_r+0x2c>
 800875a:	1cc4      	adds	r4, r0, #3
 800875c:	f024 0403 	bic.w	r4, r4, #3
 8008760:	42a0      	cmp	r0, r4
 8008762:	d005      	beq.n	8008770 <_malloc_r+0xa8>
 8008764:	1a21      	subs	r1, r4, r0
 8008766:	4630      	mov	r0, r6
 8008768:	f000 fa9a 	bl	8008ca0 <_sbrk_r>
 800876c:	3001      	adds	r0, #1
 800876e:	d0cf      	beq.n	8008710 <_malloc_r+0x48>
 8008770:	6025      	str	r5, [r4, #0]
 8008772:	e7db      	b.n	800872c <_malloc_r+0x64>
 8008774:	20000214 	.word	0x20000214
 8008778:	20000218 	.word	0x20000218

0800877c <__ssputs_r>:
 800877c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	688e      	ldr	r6, [r1, #8]
 8008782:	429e      	cmp	r6, r3
 8008784:	4682      	mov	sl, r0
 8008786:	460c      	mov	r4, r1
 8008788:	4690      	mov	r8, r2
 800878a:	4699      	mov	r9, r3
 800878c:	d837      	bhi.n	80087fe <__ssputs_r+0x82>
 800878e:	898a      	ldrh	r2, [r1, #12]
 8008790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008794:	d031      	beq.n	80087fa <__ssputs_r+0x7e>
 8008796:	6825      	ldr	r5, [r4, #0]
 8008798:	6909      	ldr	r1, [r1, #16]
 800879a:	1a6f      	subs	r7, r5, r1
 800879c:	6965      	ldr	r5, [r4, #20]
 800879e:	2302      	movs	r3, #2
 80087a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80087a8:	f109 0301 	add.w	r3, r9, #1
 80087ac:	443b      	add	r3, r7
 80087ae:	429d      	cmp	r5, r3
 80087b0:	bf38      	it	cc
 80087b2:	461d      	movcc	r5, r3
 80087b4:	0553      	lsls	r3, r2, #21
 80087b6:	d530      	bpl.n	800881a <__ssputs_r+0x9e>
 80087b8:	4629      	mov	r1, r5
 80087ba:	f7ff ff85 	bl	80086c8 <_malloc_r>
 80087be:	4606      	mov	r6, r0
 80087c0:	b950      	cbnz	r0, 80087d8 <__ssputs_r+0x5c>
 80087c2:	230c      	movs	r3, #12
 80087c4:	f8ca 3000 	str.w	r3, [sl]
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d8:	463a      	mov	r2, r7
 80087da:	6921      	ldr	r1, [r4, #16]
 80087dc:	f7ff fb0e 	bl	8007dfc <memcpy>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ea:	81a3      	strh	r3, [r4, #12]
 80087ec:	6126      	str	r6, [r4, #16]
 80087ee:	6165      	str	r5, [r4, #20]
 80087f0:	443e      	add	r6, r7
 80087f2:	1bed      	subs	r5, r5, r7
 80087f4:	6026      	str	r6, [r4, #0]
 80087f6:	60a5      	str	r5, [r4, #8]
 80087f8:	464e      	mov	r6, r9
 80087fa:	454e      	cmp	r6, r9
 80087fc:	d900      	bls.n	8008800 <__ssputs_r+0x84>
 80087fe:	464e      	mov	r6, r9
 8008800:	4632      	mov	r2, r6
 8008802:	4641      	mov	r1, r8
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	f000 fcc7 	bl	8009198 <memmove>
 800880a:	68a3      	ldr	r3, [r4, #8]
 800880c:	1b9b      	subs	r3, r3, r6
 800880e:	60a3      	str	r3, [r4, #8]
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	441e      	add	r6, r3
 8008814:	6026      	str	r6, [r4, #0]
 8008816:	2000      	movs	r0, #0
 8008818:	e7dc      	b.n	80087d4 <__ssputs_r+0x58>
 800881a:	462a      	mov	r2, r5
 800881c:	f000 fcd7 	bl	80091ce <_realloc_r>
 8008820:	4606      	mov	r6, r0
 8008822:	2800      	cmp	r0, #0
 8008824:	d1e2      	bne.n	80087ec <__ssputs_r+0x70>
 8008826:	6921      	ldr	r1, [r4, #16]
 8008828:	4650      	mov	r0, sl
 800882a:	f7ff feff 	bl	800862c <_free_r>
 800882e:	e7c8      	b.n	80087c2 <__ssputs_r+0x46>

08008830 <_svfiprintf_r>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	461d      	mov	r5, r3
 8008836:	898b      	ldrh	r3, [r1, #12]
 8008838:	061f      	lsls	r7, r3, #24
 800883a:	b09d      	sub	sp, #116	; 0x74
 800883c:	4680      	mov	r8, r0
 800883e:	460c      	mov	r4, r1
 8008840:	4616      	mov	r6, r2
 8008842:	d50f      	bpl.n	8008864 <_svfiprintf_r+0x34>
 8008844:	690b      	ldr	r3, [r1, #16]
 8008846:	b96b      	cbnz	r3, 8008864 <_svfiprintf_r+0x34>
 8008848:	2140      	movs	r1, #64	; 0x40
 800884a:	f7ff ff3d 	bl	80086c8 <_malloc_r>
 800884e:	6020      	str	r0, [r4, #0]
 8008850:	6120      	str	r0, [r4, #16]
 8008852:	b928      	cbnz	r0, 8008860 <_svfiprintf_r+0x30>
 8008854:	230c      	movs	r3, #12
 8008856:	f8c8 3000 	str.w	r3, [r8]
 800885a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800885e:	e0c8      	b.n	80089f2 <_svfiprintf_r+0x1c2>
 8008860:	2340      	movs	r3, #64	; 0x40
 8008862:	6163      	str	r3, [r4, #20]
 8008864:	2300      	movs	r3, #0
 8008866:	9309      	str	r3, [sp, #36]	; 0x24
 8008868:	2320      	movs	r3, #32
 800886a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800886e:	2330      	movs	r3, #48	; 0x30
 8008870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008874:	9503      	str	r5, [sp, #12]
 8008876:	f04f 0b01 	mov.w	fp, #1
 800887a:	4637      	mov	r7, r6
 800887c:	463d      	mov	r5, r7
 800887e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008882:	b10b      	cbz	r3, 8008888 <_svfiprintf_r+0x58>
 8008884:	2b25      	cmp	r3, #37	; 0x25
 8008886:	d13e      	bne.n	8008906 <_svfiprintf_r+0xd6>
 8008888:	ebb7 0a06 	subs.w	sl, r7, r6
 800888c:	d00b      	beq.n	80088a6 <_svfiprintf_r+0x76>
 800888e:	4653      	mov	r3, sl
 8008890:	4632      	mov	r2, r6
 8008892:	4621      	mov	r1, r4
 8008894:	4640      	mov	r0, r8
 8008896:	f7ff ff71 	bl	800877c <__ssputs_r>
 800889a:	3001      	adds	r0, #1
 800889c:	f000 80a4 	beq.w	80089e8 <_svfiprintf_r+0x1b8>
 80088a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a2:	4453      	add	r3, sl
 80088a4:	9309      	str	r3, [sp, #36]	; 0x24
 80088a6:	783b      	ldrb	r3, [r7, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 809d 	beq.w	80089e8 <_svfiprintf_r+0x1b8>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	9307      	str	r3, [sp, #28]
 80088bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088c0:	931a      	str	r3, [sp, #104]	; 0x68
 80088c2:	462f      	mov	r7, r5
 80088c4:	2205      	movs	r2, #5
 80088c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80088ca:	4850      	ldr	r0, [pc, #320]	; (8008a0c <_svfiprintf_r+0x1dc>)
 80088cc:	f7f7 fc88 	bl	80001e0 <memchr>
 80088d0:	9b04      	ldr	r3, [sp, #16]
 80088d2:	b9d0      	cbnz	r0, 800890a <_svfiprintf_r+0xda>
 80088d4:	06d9      	lsls	r1, r3, #27
 80088d6:	bf44      	itt	mi
 80088d8:	2220      	movmi	r2, #32
 80088da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088de:	071a      	lsls	r2, r3, #28
 80088e0:	bf44      	itt	mi
 80088e2:	222b      	movmi	r2, #43	; 0x2b
 80088e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088e8:	782a      	ldrb	r2, [r5, #0]
 80088ea:	2a2a      	cmp	r2, #42	; 0x2a
 80088ec:	d015      	beq.n	800891a <_svfiprintf_r+0xea>
 80088ee:	9a07      	ldr	r2, [sp, #28]
 80088f0:	462f      	mov	r7, r5
 80088f2:	2000      	movs	r0, #0
 80088f4:	250a      	movs	r5, #10
 80088f6:	4639      	mov	r1, r7
 80088f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088fc:	3b30      	subs	r3, #48	; 0x30
 80088fe:	2b09      	cmp	r3, #9
 8008900:	d94d      	bls.n	800899e <_svfiprintf_r+0x16e>
 8008902:	b1b8      	cbz	r0, 8008934 <_svfiprintf_r+0x104>
 8008904:	e00f      	b.n	8008926 <_svfiprintf_r+0xf6>
 8008906:	462f      	mov	r7, r5
 8008908:	e7b8      	b.n	800887c <_svfiprintf_r+0x4c>
 800890a:	4a40      	ldr	r2, [pc, #256]	; (8008a0c <_svfiprintf_r+0x1dc>)
 800890c:	1a80      	subs	r0, r0, r2
 800890e:	fa0b f000 	lsl.w	r0, fp, r0
 8008912:	4318      	orrs	r0, r3
 8008914:	9004      	str	r0, [sp, #16]
 8008916:	463d      	mov	r5, r7
 8008918:	e7d3      	b.n	80088c2 <_svfiprintf_r+0x92>
 800891a:	9a03      	ldr	r2, [sp, #12]
 800891c:	1d11      	adds	r1, r2, #4
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	9103      	str	r1, [sp, #12]
 8008922:	2a00      	cmp	r2, #0
 8008924:	db01      	blt.n	800892a <_svfiprintf_r+0xfa>
 8008926:	9207      	str	r2, [sp, #28]
 8008928:	e004      	b.n	8008934 <_svfiprintf_r+0x104>
 800892a:	4252      	negs	r2, r2
 800892c:	f043 0302 	orr.w	r3, r3, #2
 8008930:	9207      	str	r2, [sp, #28]
 8008932:	9304      	str	r3, [sp, #16]
 8008934:	783b      	ldrb	r3, [r7, #0]
 8008936:	2b2e      	cmp	r3, #46	; 0x2e
 8008938:	d10c      	bne.n	8008954 <_svfiprintf_r+0x124>
 800893a:	787b      	ldrb	r3, [r7, #1]
 800893c:	2b2a      	cmp	r3, #42	; 0x2a
 800893e:	d133      	bne.n	80089a8 <_svfiprintf_r+0x178>
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	1d1a      	adds	r2, r3, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	9203      	str	r2, [sp, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	bfb8      	it	lt
 800894c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008950:	3702      	adds	r7, #2
 8008952:	9305      	str	r3, [sp, #20]
 8008954:	4d2e      	ldr	r5, [pc, #184]	; (8008a10 <_svfiprintf_r+0x1e0>)
 8008956:	7839      	ldrb	r1, [r7, #0]
 8008958:	2203      	movs	r2, #3
 800895a:	4628      	mov	r0, r5
 800895c:	f7f7 fc40 	bl	80001e0 <memchr>
 8008960:	b138      	cbz	r0, 8008972 <_svfiprintf_r+0x142>
 8008962:	2340      	movs	r3, #64	; 0x40
 8008964:	1b40      	subs	r0, r0, r5
 8008966:	fa03 f000 	lsl.w	r0, r3, r0
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	4303      	orrs	r3, r0
 800896e:	3701      	adds	r7, #1
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	7839      	ldrb	r1, [r7, #0]
 8008974:	4827      	ldr	r0, [pc, #156]	; (8008a14 <_svfiprintf_r+0x1e4>)
 8008976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800897a:	2206      	movs	r2, #6
 800897c:	1c7e      	adds	r6, r7, #1
 800897e:	f7f7 fc2f 	bl	80001e0 <memchr>
 8008982:	2800      	cmp	r0, #0
 8008984:	d038      	beq.n	80089f8 <_svfiprintf_r+0x1c8>
 8008986:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <_svfiprintf_r+0x1e8>)
 8008988:	bb13      	cbnz	r3, 80089d0 <_svfiprintf_r+0x1a0>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	3307      	adds	r3, #7
 800898e:	f023 0307 	bic.w	r3, r3, #7
 8008992:	3308      	adds	r3, #8
 8008994:	9303      	str	r3, [sp, #12]
 8008996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008998:	444b      	add	r3, r9
 800899a:	9309      	str	r3, [sp, #36]	; 0x24
 800899c:	e76d      	b.n	800887a <_svfiprintf_r+0x4a>
 800899e:	fb05 3202 	mla	r2, r5, r2, r3
 80089a2:	2001      	movs	r0, #1
 80089a4:	460f      	mov	r7, r1
 80089a6:	e7a6      	b.n	80088f6 <_svfiprintf_r+0xc6>
 80089a8:	2300      	movs	r3, #0
 80089aa:	3701      	adds	r7, #1
 80089ac:	9305      	str	r3, [sp, #20]
 80089ae:	4619      	mov	r1, r3
 80089b0:	250a      	movs	r5, #10
 80089b2:	4638      	mov	r0, r7
 80089b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b8:	3a30      	subs	r2, #48	; 0x30
 80089ba:	2a09      	cmp	r2, #9
 80089bc:	d903      	bls.n	80089c6 <_svfiprintf_r+0x196>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0c8      	beq.n	8008954 <_svfiprintf_r+0x124>
 80089c2:	9105      	str	r1, [sp, #20]
 80089c4:	e7c6      	b.n	8008954 <_svfiprintf_r+0x124>
 80089c6:	fb05 2101 	mla	r1, r5, r1, r2
 80089ca:	2301      	movs	r3, #1
 80089cc:	4607      	mov	r7, r0
 80089ce:	e7f0      	b.n	80089b2 <_svfiprintf_r+0x182>
 80089d0:	ab03      	add	r3, sp, #12
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	4622      	mov	r2, r4
 80089d6:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <_svfiprintf_r+0x1ec>)
 80089d8:	a904      	add	r1, sp, #16
 80089da:	4640      	mov	r0, r8
 80089dc:	f7fc fb12 	bl	8005004 <_printf_float>
 80089e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80089e4:	4681      	mov	r9, r0
 80089e6:	d1d6      	bne.n	8008996 <_svfiprintf_r+0x166>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	065b      	lsls	r3, r3, #25
 80089ec:	f53f af35 	bmi.w	800885a <_svfiprintf_r+0x2a>
 80089f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089f2:	b01d      	add	sp, #116	; 0x74
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	4622      	mov	r2, r4
 80089fe:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <_svfiprintf_r+0x1ec>)
 8008a00:	a904      	add	r1, sp, #16
 8008a02:	4640      	mov	r0, r8
 8008a04:	f7fc fdb4 	bl	8005570 <_printf_i>
 8008a08:	e7ea      	b.n	80089e0 <_svfiprintf_r+0x1b0>
 8008a0a:	bf00      	nop
 8008a0c:	0800950c 	.word	0x0800950c
 8008a10:	08009512 	.word	0x08009512
 8008a14:	08009516 	.word	0x08009516
 8008a18:	08005005 	.word	0x08005005
 8008a1c:	0800877d 	.word	0x0800877d

08008a20 <__sfputc_r>:
 8008a20:	6893      	ldr	r3, [r2, #8]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	b410      	push	{r4}
 8008a28:	6093      	str	r3, [r2, #8]
 8008a2a:	da08      	bge.n	8008a3e <__sfputc_r+0x1e>
 8008a2c:	6994      	ldr	r4, [r2, #24]
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	db01      	blt.n	8008a36 <__sfputc_r+0x16>
 8008a32:	290a      	cmp	r1, #10
 8008a34:	d103      	bne.n	8008a3e <__sfputc_r+0x1e>
 8008a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a3a:	f000 b997 	b.w	8008d6c <__swbuf_r>
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	1c58      	adds	r0, r3, #1
 8008a42:	6010      	str	r0, [r2, #0]
 8008a44:	7019      	strb	r1, [r3, #0]
 8008a46:	4608      	mov	r0, r1
 8008a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <__sfputs_r>:
 8008a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a50:	4606      	mov	r6, r0
 8008a52:	460f      	mov	r7, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	18d5      	adds	r5, r2, r3
 8008a58:	42ac      	cmp	r4, r5
 8008a5a:	d101      	bne.n	8008a60 <__sfputs_r+0x12>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e007      	b.n	8008a70 <__sfputs_r+0x22>
 8008a60:	463a      	mov	r2, r7
 8008a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff ffda 	bl	8008a20 <__sfputc_r>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d1f3      	bne.n	8008a58 <__sfputs_r+0xa>
 8008a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a74 <_vfiprintf_r>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	b09d      	sub	sp, #116	; 0x74
 8008a7c:	4617      	mov	r7, r2
 8008a7e:	461d      	mov	r5, r3
 8008a80:	4606      	mov	r6, r0
 8008a82:	b118      	cbz	r0, 8008a8c <_vfiprintf_r+0x18>
 8008a84:	6983      	ldr	r3, [r0, #24]
 8008a86:	b90b      	cbnz	r3, 8008a8c <_vfiprintf_r+0x18>
 8008a88:	f7fe fdda 	bl	8007640 <__sinit>
 8008a8c:	4b7c      	ldr	r3, [pc, #496]	; (8008c80 <_vfiprintf_r+0x20c>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	d158      	bne.n	8008b44 <_vfiprintf_r+0xd0>
 8008a92:	6874      	ldr	r4, [r6, #4]
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	0718      	lsls	r0, r3, #28
 8008a98:	d55e      	bpl.n	8008b58 <_vfiprintf_r+0xe4>
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05b      	beq.n	8008b58 <_vfiprintf_r+0xe4>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa4:	2320      	movs	r3, #32
 8008aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aaa:	2330      	movs	r3, #48	; 0x30
 8008aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ab0:	9503      	str	r5, [sp, #12]
 8008ab2:	f04f 0b01 	mov.w	fp, #1
 8008ab6:	46b8      	mov	r8, r7
 8008ab8:	4645      	mov	r5, r8
 8008aba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008abe:	b10b      	cbz	r3, 8008ac4 <_vfiprintf_r+0x50>
 8008ac0:	2b25      	cmp	r3, #37	; 0x25
 8008ac2:	d154      	bne.n	8008b6e <_vfiprintf_r+0xfa>
 8008ac4:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ac8:	d00b      	beq.n	8008ae2 <_vfiprintf_r+0x6e>
 8008aca:	4653      	mov	r3, sl
 8008acc:	463a      	mov	r2, r7
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7ff ffbc 	bl	8008a4e <__sfputs_r>
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	f000 80c2 	beq.w	8008c60 <_vfiprintf_r+0x1ec>
 8008adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ade:	4453      	add	r3, sl
 8008ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae2:	f898 3000 	ldrb.w	r3, [r8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 80ba 	beq.w	8008c60 <_vfiprintf_r+0x1ec>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	9307      	str	r3, [sp, #28]
 8008afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008afe:	931a      	str	r3, [sp, #104]	; 0x68
 8008b00:	46a8      	mov	r8, r5
 8008b02:	2205      	movs	r2, #5
 8008b04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008b08:	485e      	ldr	r0, [pc, #376]	; (8008c84 <_vfiprintf_r+0x210>)
 8008b0a:	f7f7 fb69 	bl	80001e0 <memchr>
 8008b0e:	9b04      	ldr	r3, [sp, #16]
 8008b10:	bb78      	cbnz	r0, 8008b72 <_vfiprintf_r+0xfe>
 8008b12:	06d9      	lsls	r1, r3, #27
 8008b14:	bf44      	itt	mi
 8008b16:	2220      	movmi	r2, #32
 8008b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b1c:	071a      	lsls	r2, r3, #28
 8008b1e:	bf44      	itt	mi
 8008b20:	222b      	movmi	r2, #43	; 0x2b
 8008b22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b26:	782a      	ldrb	r2, [r5, #0]
 8008b28:	2a2a      	cmp	r2, #42	; 0x2a
 8008b2a:	d02a      	beq.n	8008b82 <_vfiprintf_r+0x10e>
 8008b2c:	9a07      	ldr	r2, [sp, #28]
 8008b2e:	46a8      	mov	r8, r5
 8008b30:	2000      	movs	r0, #0
 8008b32:	250a      	movs	r5, #10
 8008b34:	4641      	mov	r1, r8
 8008b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b3a:	3b30      	subs	r3, #48	; 0x30
 8008b3c:	2b09      	cmp	r3, #9
 8008b3e:	d969      	bls.n	8008c14 <_vfiprintf_r+0x1a0>
 8008b40:	b360      	cbz	r0, 8008b9c <_vfiprintf_r+0x128>
 8008b42:	e024      	b.n	8008b8e <_vfiprintf_r+0x11a>
 8008b44:	4b50      	ldr	r3, [pc, #320]	; (8008c88 <_vfiprintf_r+0x214>)
 8008b46:	429c      	cmp	r4, r3
 8008b48:	d101      	bne.n	8008b4e <_vfiprintf_r+0xda>
 8008b4a:	68b4      	ldr	r4, [r6, #8]
 8008b4c:	e7a2      	b.n	8008a94 <_vfiprintf_r+0x20>
 8008b4e:	4b4f      	ldr	r3, [pc, #316]	; (8008c8c <_vfiprintf_r+0x218>)
 8008b50:	429c      	cmp	r4, r3
 8008b52:	bf08      	it	eq
 8008b54:	68f4      	ldreq	r4, [r6, #12]
 8008b56:	e79d      	b.n	8008a94 <_vfiprintf_r+0x20>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f978 	bl	8008e50 <__swsetup_r>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d09d      	beq.n	8008aa0 <_vfiprintf_r+0x2c>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b68:	b01d      	add	sp, #116	; 0x74
 8008b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6e:	46a8      	mov	r8, r5
 8008b70:	e7a2      	b.n	8008ab8 <_vfiprintf_r+0x44>
 8008b72:	4a44      	ldr	r2, [pc, #272]	; (8008c84 <_vfiprintf_r+0x210>)
 8008b74:	1a80      	subs	r0, r0, r2
 8008b76:	fa0b f000 	lsl.w	r0, fp, r0
 8008b7a:	4318      	orrs	r0, r3
 8008b7c:	9004      	str	r0, [sp, #16]
 8008b7e:	4645      	mov	r5, r8
 8008b80:	e7be      	b.n	8008b00 <_vfiprintf_r+0x8c>
 8008b82:	9a03      	ldr	r2, [sp, #12]
 8008b84:	1d11      	adds	r1, r2, #4
 8008b86:	6812      	ldr	r2, [r2, #0]
 8008b88:	9103      	str	r1, [sp, #12]
 8008b8a:	2a00      	cmp	r2, #0
 8008b8c:	db01      	blt.n	8008b92 <_vfiprintf_r+0x11e>
 8008b8e:	9207      	str	r2, [sp, #28]
 8008b90:	e004      	b.n	8008b9c <_vfiprintf_r+0x128>
 8008b92:	4252      	negs	r2, r2
 8008b94:	f043 0302 	orr.w	r3, r3, #2
 8008b98:	9207      	str	r2, [sp, #28]
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	f898 3000 	ldrb.w	r3, [r8]
 8008ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ba2:	d10e      	bne.n	8008bc2 <_vfiprintf_r+0x14e>
 8008ba4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8008baa:	d138      	bne.n	8008c1e <_vfiprintf_r+0x1aa>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	1d1a      	adds	r2, r3, #4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	9203      	str	r2, [sp, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bfb8      	it	lt
 8008bb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008bbc:	f108 0802 	add.w	r8, r8, #2
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	4d33      	ldr	r5, [pc, #204]	; (8008c90 <_vfiprintf_r+0x21c>)
 8008bc4:	f898 1000 	ldrb.w	r1, [r8]
 8008bc8:	2203      	movs	r2, #3
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7f7 fb08 	bl	80001e0 <memchr>
 8008bd0:	b140      	cbz	r0, 8008be4 <_vfiprintf_r+0x170>
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	1b40      	subs	r0, r0, r5
 8008bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	4303      	orrs	r3, r0
 8008bde:	f108 0801 	add.w	r8, r8, #1
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	f898 1000 	ldrb.w	r1, [r8]
 8008be8:	482a      	ldr	r0, [pc, #168]	; (8008c94 <_vfiprintf_r+0x220>)
 8008bea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bee:	2206      	movs	r2, #6
 8008bf0:	f108 0701 	add.w	r7, r8, #1
 8008bf4:	f7f7 faf4 	bl	80001e0 <memchr>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d037      	beq.n	8008c6c <_vfiprintf_r+0x1f8>
 8008bfc:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <_vfiprintf_r+0x224>)
 8008bfe:	bb1b      	cbnz	r3, 8008c48 <_vfiprintf_r+0x1d4>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	3307      	adds	r3, #7
 8008c04:	f023 0307 	bic.w	r3, r3, #7
 8008c08:	3308      	adds	r3, #8
 8008c0a:	9303      	str	r3, [sp, #12]
 8008c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0e:	444b      	add	r3, r9
 8008c10:	9309      	str	r3, [sp, #36]	; 0x24
 8008c12:	e750      	b.n	8008ab6 <_vfiprintf_r+0x42>
 8008c14:	fb05 3202 	mla	r2, r5, r2, r3
 8008c18:	2001      	movs	r0, #1
 8008c1a:	4688      	mov	r8, r1
 8008c1c:	e78a      	b.n	8008b34 <_vfiprintf_r+0xc0>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f108 0801 	add.w	r8, r8, #1
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	4619      	mov	r1, r3
 8008c28:	250a      	movs	r5, #10
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c30:	3a30      	subs	r2, #48	; 0x30
 8008c32:	2a09      	cmp	r2, #9
 8008c34:	d903      	bls.n	8008c3e <_vfiprintf_r+0x1ca>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0c3      	beq.n	8008bc2 <_vfiprintf_r+0x14e>
 8008c3a:	9105      	str	r1, [sp, #20]
 8008c3c:	e7c1      	b.n	8008bc2 <_vfiprintf_r+0x14e>
 8008c3e:	fb05 2101 	mla	r1, r5, r1, r2
 8008c42:	2301      	movs	r3, #1
 8008c44:	4680      	mov	r8, r0
 8008c46:	e7f0      	b.n	8008c2a <_vfiprintf_r+0x1b6>
 8008c48:	ab03      	add	r3, sp, #12
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <_vfiprintf_r+0x228>)
 8008c50:	a904      	add	r1, sp, #16
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7fc f9d6 	bl	8005004 <_printf_float>
 8008c58:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008c5c:	4681      	mov	r9, r0
 8008c5e:	d1d5      	bne.n	8008c0c <_vfiprintf_r+0x198>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	065b      	lsls	r3, r3, #25
 8008c64:	f53f af7e 	bmi.w	8008b64 <_vfiprintf_r+0xf0>
 8008c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c6a:	e77d      	b.n	8008b68 <_vfiprintf_r+0xf4>
 8008c6c:	ab03      	add	r3, sp, #12
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4622      	mov	r2, r4
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <_vfiprintf_r+0x228>)
 8008c74:	a904      	add	r1, sp, #16
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7fc fc7a 	bl	8005570 <_printf_i>
 8008c7c:	e7ec      	b.n	8008c58 <_vfiprintf_r+0x1e4>
 8008c7e:	bf00      	nop
 8008c80:	080093c0 	.word	0x080093c0
 8008c84:	0800950c 	.word	0x0800950c
 8008c88:	080093e0 	.word	0x080093e0
 8008c8c:	080093a0 	.word	0x080093a0
 8008c90:	08009512 	.word	0x08009512
 8008c94:	08009516 	.word	0x08009516
 8008c98:	08005005 	.word	0x08005005
 8008c9c:	08008a4f 	.word	0x08008a4f

08008ca0 <_sbrk_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4c06      	ldr	r4, [pc, #24]	; (8008cbc <_sbrk_r+0x1c>)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	4608      	mov	r0, r1
 8008caa:	6023      	str	r3, [r4, #0]
 8008cac:	f7f8 feae 	bl	8001a0c <_sbrk>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d102      	bne.n	8008cba <_sbrk_r+0x1a>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	b103      	cbz	r3, 8008cba <_sbrk_r+0x1a>
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	20000324 	.word	0x20000324

08008cc0 <__sread>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	f000 faa8 	bl	800921c <_read_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	bfab      	itete	ge
 8008cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008cd4:	181b      	addge	r3, r3, r0
 8008cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cda:	bfac      	ite	ge
 8008cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cde:	81a3      	strhlt	r3, [r4, #12]
 8008ce0:	bd10      	pop	{r4, pc}

08008ce2 <__swrite>:
 8008ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	461f      	mov	r7, r3
 8008ce8:	898b      	ldrh	r3, [r1, #12]
 8008cea:	05db      	lsls	r3, r3, #23
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	4616      	mov	r6, r2
 8008cf2:	d505      	bpl.n	8008d00 <__swrite+0x1e>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	f000 f9d6 	bl	80090ac <_lseek_r>
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d0a:	81a3      	strh	r3, [r4, #12]
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	463b      	mov	r3, r7
 8008d10:	4628      	mov	r0, r5
 8008d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	f000 b889 	b.w	8008e2c <_write_r>

08008d1a <__sseek>:
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d22:	f000 f9c3 	bl	80090ac <_lseek_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	bf15      	itete	ne
 8008d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d36:	81a3      	strheq	r3, [r4, #12]
 8008d38:	bf18      	it	ne
 8008d3a:	81a3      	strhne	r3, [r4, #12]
 8008d3c:	bd10      	pop	{r4, pc}

08008d3e <__sclose>:
 8008d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d42:	f000 b8f3 	b.w	8008f2c <_close_r>

08008d46 <strncmp>:
 8008d46:	b510      	push	{r4, lr}
 8008d48:	b16a      	cbz	r2, 8008d66 <strncmp+0x20>
 8008d4a:	3901      	subs	r1, #1
 8008d4c:	1884      	adds	r4, r0, r2
 8008d4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d103      	bne.n	8008d62 <strncmp+0x1c>
 8008d5a:	42a0      	cmp	r0, r4
 8008d5c:	d001      	beq.n	8008d62 <strncmp+0x1c>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1f5      	bne.n	8008d4e <strncmp+0x8>
 8008d62:	1a98      	subs	r0, r3, r2
 8008d64:	bd10      	pop	{r4, pc}
 8008d66:	4610      	mov	r0, r2
 8008d68:	e7fc      	b.n	8008d64 <strncmp+0x1e>
	...

08008d6c <__swbuf_r>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	460e      	mov	r6, r1
 8008d70:	4614      	mov	r4, r2
 8008d72:	4605      	mov	r5, r0
 8008d74:	b118      	cbz	r0, 8008d7e <__swbuf_r+0x12>
 8008d76:	6983      	ldr	r3, [r0, #24]
 8008d78:	b90b      	cbnz	r3, 8008d7e <__swbuf_r+0x12>
 8008d7a:	f7fe fc61 	bl	8007640 <__sinit>
 8008d7e:	4b21      	ldr	r3, [pc, #132]	; (8008e04 <__swbuf_r+0x98>)
 8008d80:	429c      	cmp	r4, r3
 8008d82:	d12a      	bne.n	8008dda <__swbuf_r+0x6e>
 8008d84:	686c      	ldr	r4, [r5, #4]
 8008d86:	69a3      	ldr	r3, [r4, #24]
 8008d88:	60a3      	str	r3, [r4, #8]
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	071a      	lsls	r2, r3, #28
 8008d8e:	d52e      	bpl.n	8008dee <__swbuf_r+0x82>
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	b363      	cbz	r3, 8008dee <__swbuf_r+0x82>
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1ac0      	subs	r0, r0, r3
 8008d9a:	6963      	ldr	r3, [r4, #20]
 8008d9c:	b2f6      	uxtb	r6, r6
 8008d9e:	4283      	cmp	r3, r0
 8008da0:	4637      	mov	r7, r6
 8008da2:	dc04      	bgt.n	8008dae <__swbuf_r+0x42>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 f956 	bl	8009058 <_fflush_r>
 8008dac:	bb28      	cbnz	r0, 8008dfa <__swbuf_r+0x8e>
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	60a3      	str	r3, [r4, #8]
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	701e      	strb	r6, [r3, #0]
 8008dbc:	6963      	ldr	r3, [r4, #20]
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	4283      	cmp	r3, r0
 8008dc2:	d004      	beq.n	8008dce <__swbuf_r+0x62>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	07db      	lsls	r3, r3, #31
 8008dc8:	d519      	bpl.n	8008dfe <__swbuf_r+0x92>
 8008dca:	2e0a      	cmp	r6, #10
 8008dcc:	d117      	bne.n	8008dfe <__swbuf_r+0x92>
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 f941 	bl	8009058 <_fflush_r>
 8008dd6:	b190      	cbz	r0, 8008dfe <__swbuf_r+0x92>
 8008dd8:	e00f      	b.n	8008dfa <__swbuf_r+0x8e>
 8008dda:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <__swbuf_r+0x9c>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	d101      	bne.n	8008de4 <__swbuf_r+0x78>
 8008de0:	68ac      	ldr	r4, [r5, #8]
 8008de2:	e7d0      	b.n	8008d86 <__swbuf_r+0x1a>
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <__swbuf_r+0xa0>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	bf08      	it	eq
 8008dea:	68ec      	ldreq	r4, [r5, #12]
 8008dec:	e7cb      	b.n	8008d86 <__swbuf_r+0x1a>
 8008dee:	4621      	mov	r1, r4
 8008df0:	4628      	mov	r0, r5
 8008df2:	f000 f82d 	bl	8008e50 <__swsetup_r>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d0cc      	beq.n	8008d94 <__swbuf_r+0x28>
 8008dfa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008dfe:	4638      	mov	r0, r7
 8008e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e02:	bf00      	nop
 8008e04:	080093c0 	.word	0x080093c0
 8008e08:	080093e0 	.word	0x080093e0
 8008e0c:	080093a0 	.word	0x080093a0

08008e10 <__ascii_wctomb>:
 8008e10:	b149      	cbz	r1, 8008e26 <__ascii_wctomb+0x16>
 8008e12:	2aff      	cmp	r2, #255	; 0xff
 8008e14:	bf85      	ittet	hi
 8008e16:	238a      	movhi	r3, #138	; 0x8a
 8008e18:	6003      	strhi	r3, [r0, #0]
 8008e1a:	700a      	strbls	r2, [r1, #0]
 8008e1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e20:	bf98      	it	ls
 8008e22:	2001      	movls	r0, #1
 8008e24:	4770      	bx	lr
 8008e26:	4608      	mov	r0, r1
 8008e28:	4770      	bx	lr
	...

08008e2c <_write_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4c07      	ldr	r4, [pc, #28]	; (8008e4c <_write_r+0x20>)
 8008e30:	4605      	mov	r5, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7f8 fd95 	bl	800196a <_write>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_write_r+0x1e>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_write_r+0x1e>
 8008e48:	602b      	str	r3, [r5, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000324 	.word	0x20000324

08008e50 <__swsetup_r>:
 8008e50:	4b32      	ldr	r3, [pc, #200]	; (8008f1c <__swsetup_r+0xcc>)
 8008e52:	b570      	push	{r4, r5, r6, lr}
 8008e54:	681d      	ldr	r5, [r3, #0]
 8008e56:	4606      	mov	r6, r0
 8008e58:	460c      	mov	r4, r1
 8008e5a:	b125      	cbz	r5, 8008e66 <__swsetup_r+0x16>
 8008e5c:	69ab      	ldr	r3, [r5, #24]
 8008e5e:	b913      	cbnz	r3, 8008e66 <__swsetup_r+0x16>
 8008e60:	4628      	mov	r0, r5
 8008e62:	f7fe fbed 	bl	8007640 <__sinit>
 8008e66:	4b2e      	ldr	r3, [pc, #184]	; (8008f20 <__swsetup_r+0xd0>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	d10f      	bne.n	8008e8c <__swsetup_r+0x3c>
 8008e6c:	686c      	ldr	r4, [r5, #4]
 8008e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	0715      	lsls	r5, r2, #28
 8008e76:	d42c      	bmi.n	8008ed2 <__swsetup_r+0x82>
 8008e78:	06d0      	lsls	r0, r2, #27
 8008e7a:	d411      	bmi.n	8008ea0 <__swsetup_r+0x50>
 8008e7c:	2209      	movs	r2, #9
 8008e7e:	6032      	str	r2, [r6, #0]
 8008e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e8a:	e03e      	b.n	8008f0a <__swsetup_r+0xba>
 8008e8c:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <__swsetup_r+0xd4>)
 8008e8e:	429c      	cmp	r4, r3
 8008e90:	d101      	bne.n	8008e96 <__swsetup_r+0x46>
 8008e92:	68ac      	ldr	r4, [r5, #8]
 8008e94:	e7eb      	b.n	8008e6e <__swsetup_r+0x1e>
 8008e96:	4b24      	ldr	r3, [pc, #144]	; (8008f28 <__swsetup_r+0xd8>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	bf08      	it	eq
 8008e9c:	68ec      	ldreq	r4, [r5, #12]
 8008e9e:	e7e6      	b.n	8008e6e <__swsetup_r+0x1e>
 8008ea0:	0751      	lsls	r1, r2, #29
 8008ea2:	d512      	bpl.n	8008eca <__swsetup_r+0x7a>
 8008ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea6:	b141      	cbz	r1, 8008eba <__swsetup_r+0x6a>
 8008ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eac:	4299      	cmp	r1, r3
 8008eae:	d002      	beq.n	8008eb6 <__swsetup_r+0x66>
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff fbbb 	bl	800862c <_free_r>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6363      	str	r3, [r4, #52]	; 0x34
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6063      	str	r3, [r4, #4]
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f043 0308 	orr.w	r3, r3, #8
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	b94b      	cbnz	r3, 8008eea <__swsetup_r+0x9a>
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee0:	d003      	beq.n	8008eea <__swsetup_r+0x9a>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 f917 	bl	8009118 <__smakebuf_r>
 8008eea:	89a2      	ldrh	r2, [r4, #12]
 8008eec:	f012 0301 	ands.w	r3, r2, #1
 8008ef0:	d00c      	beq.n	8008f0c <__swsetup_r+0xbc>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60a3      	str	r3, [r4, #8]
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	425b      	negs	r3, r3
 8008efa:	61a3      	str	r3, [r4, #24]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	b953      	cbnz	r3, 8008f16 <__swsetup_r+0xc6>
 8008f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008f08:	d1ba      	bne.n	8008e80 <__swsetup_r+0x30>
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	0792      	lsls	r2, r2, #30
 8008f0e:	bf58      	it	pl
 8008f10:	6963      	ldrpl	r3, [r4, #20]
 8008f12:	60a3      	str	r3, [r4, #8]
 8008f14:	e7f2      	b.n	8008efc <__swsetup_r+0xac>
 8008f16:	2000      	movs	r0, #0
 8008f18:	e7f7      	b.n	8008f0a <__swsetup_r+0xba>
 8008f1a:	bf00      	nop
 8008f1c:	20000014 	.word	0x20000014
 8008f20:	080093c0 	.word	0x080093c0
 8008f24:	080093e0 	.word	0x080093e0
 8008f28:	080093a0 	.word	0x080093a0

08008f2c <_close_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4c06      	ldr	r4, [pc, #24]	; (8008f48 <_close_r+0x1c>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4605      	mov	r5, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	f7f8 fd33 	bl	80019a2 <_close>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_close_r+0x1a>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_close_r+0x1a>
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	20000324 	.word	0x20000324

08008f4c <__sflush_r>:
 8008f4c:	898a      	ldrh	r2, [r1, #12]
 8008f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	4605      	mov	r5, r0
 8008f54:	0710      	lsls	r0, r2, #28
 8008f56:	460c      	mov	r4, r1
 8008f58:	d458      	bmi.n	800900c <__sflush_r+0xc0>
 8008f5a:	684b      	ldr	r3, [r1, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dc05      	bgt.n	8008f6c <__sflush_r+0x20>
 8008f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dc02      	bgt.n	8008f6c <__sflush_r+0x20>
 8008f66:	2000      	movs	r0, #0
 8008f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f6e:	2e00      	cmp	r6, #0
 8008f70:	d0f9      	beq.n	8008f66 <__sflush_r+0x1a>
 8008f72:	2300      	movs	r3, #0
 8008f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f78:	682f      	ldr	r7, [r5, #0]
 8008f7a:	6a21      	ldr	r1, [r4, #32]
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	d032      	beq.n	8008fe6 <__sflush_r+0x9a>
 8008f80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	075a      	lsls	r2, r3, #29
 8008f86:	d505      	bpl.n	8008f94 <__sflush_r+0x48>
 8008f88:	6863      	ldr	r3, [r4, #4]
 8008f8a:	1ac0      	subs	r0, r0, r3
 8008f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f8e:	b10b      	cbz	r3, 8008f94 <__sflush_r+0x48>
 8008f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f92:	1ac0      	subs	r0, r0, r3
 8008f94:	2300      	movs	r3, #0
 8008f96:	4602      	mov	r2, r0
 8008f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f9a:	6a21      	ldr	r1, [r4, #32]
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b0      	blx	r6
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	d106      	bne.n	8008fb4 <__sflush_r+0x68>
 8008fa6:	6829      	ldr	r1, [r5, #0]
 8008fa8:	291d      	cmp	r1, #29
 8008faa:	d848      	bhi.n	800903e <__sflush_r+0xf2>
 8008fac:	4a29      	ldr	r2, [pc, #164]	; (8009054 <__sflush_r+0x108>)
 8008fae:	40ca      	lsrs	r2, r1
 8008fb0:	07d6      	lsls	r6, r2, #31
 8008fb2:	d544      	bpl.n	800903e <__sflush_r+0xf2>
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	6062      	str	r2, [r4, #4]
 8008fb8:	04d9      	lsls	r1, r3, #19
 8008fba:	6922      	ldr	r2, [r4, #16]
 8008fbc:	6022      	str	r2, [r4, #0]
 8008fbe:	d504      	bpl.n	8008fca <__sflush_r+0x7e>
 8008fc0:	1c42      	adds	r2, r0, #1
 8008fc2:	d101      	bne.n	8008fc8 <__sflush_r+0x7c>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b903      	cbnz	r3, 8008fca <__sflush_r+0x7e>
 8008fc8:	6560      	str	r0, [r4, #84]	; 0x54
 8008fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fcc:	602f      	str	r7, [r5, #0]
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	d0c9      	beq.n	8008f66 <__sflush_r+0x1a>
 8008fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fd6:	4299      	cmp	r1, r3
 8008fd8:	d002      	beq.n	8008fe0 <__sflush_r+0x94>
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f7ff fb26 	bl	800862c <_free_r>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	6360      	str	r0, [r4, #52]	; 0x34
 8008fe4:	e7c0      	b.n	8008f68 <__sflush_r+0x1c>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b0      	blx	r6
 8008fec:	1c41      	adds	r1, r0, #1
 8008fee:	d1c8      	bne.n	8008f82 <__sflush_r+0x36>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0c5      	beq.n	8008f82 <__sflush_r+0x36>
 8008ff6:	2b1d      	cmp	r3, #29
 8008ff8:	d001      	beq.n	8008ffe <__sflush_r+0xb2>
 8008ffa:	2b16      	cmp	r3, #22
 8008ffc:	d101      	bne.n	8009002 <__sflush_r+0xb6>
 8008ffe:	602f      	str	r7, [r5, #0]
 8009000:	e7b1      	b.n	8008f66 <__sflush_r+0x1a>
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	e7ad      	b.n	8008f68 <__sflush_r+0x1c>
 800900c:	690f      	ldr	r7, [r1, #16]
 800900e:	2f00      	cmp	r7, #0
 8009010:	d0a9      	beq.n	8008f66 <__sflush_r+0x1a>
 8009012:	0793      	lsls	r3, r2, #30
 8009014:	680e      	ldr	r6, [r1, #0]
 8009016:	bf08      	it	eq
 8009018:	694b      	ldreq	r3, [r1, #20]
 800901a:	600f      	str	r7, [r1, #0]
 800901c:	bf18      	it	ne
 800901e:	2300      	movne	r3, #0
 8009020:	eba6 0807 	sub.w	r8, r6, r7
 8009024:	608b      	str	r3, [r1, #8]
 8009026:	f1b8 0f00 	cmp.w	r8, #0
 800902a:	dd9c      	ble.n	8008f66 <__sflush_r+0x1a>
 800902c:	4643      	mov	r3, r8
 800902e:	463a      	mov	r2, r7
 8009030:	6a21      	ldr	r1, [r4, #32]
 8009032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009034:	4628      	mov	r0, r5
 8009036:	47b0      	blx	r6
 8009038:	2800      	cmp	r0, #0
 800903a:	dc06      	bgt.n	800904a <__sflush_r+0xfe>
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009048:	e78e      	b.n	8008f68 <__sflush_r+0x1c>
 800904a:	4407      	add	r7, r0
 800904c:	eba8 0800 	sub.w	r8, r8, r0
 8009050:	e7e9      	b.n	8009026 <__sflush_r+0xda>
 8009052:	bf00      	nop
 8009054:	20400001 	.word	0x20400001

08009058 <_fflush_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	690b      	ldr	r3, [r1, #16]
 800905c:	4605      	mov	r5, r0
 800905e:	460c      	mov	r4, r1
 8009060:	b1db      	cbz	r3, 800909a <_fflush_r+0x42>
 8009062:	b118      	cbz	r0, 800906c <_fflush_r+0x14>
 8009064:	6983      	ldr	r3, [r0, #24]
 8009066:	b90b      	cbnz	r3, 800906c <_fflush_r+0x14>
 8009068:	f7fe faea 	bl	8007640 <__sinit>
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <_fflush_r+0x48>)
 800906e:	429c      	cmp	r4, r3
 8009070:	d109      	bne.n	8009086 <_fflush_r+0x2e>
 8009072:	686c      	ldr	r4, [r5, #4]
 8009074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009078:	b17b      	cbz	r3, 800909a <_fflush_r+0x42>
 800907a:	4621      	mov	r1, r4
 800907c:	4628      	mov	r0, r5
 800907e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009082:	f7ff bf63 	b.w	8008f4c <__sflush_r>
 8009086:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <_fflush_r+0x4c>)
 8009088:	429c      	cmp	r4, r3
 800908a:	d101      	bne.n	8009090 <_fflush_r+0x38>
 800908c:	68ac      	ldr	r4, [r5, #8]
 800908e:	e7f1      	b.n	8009074 <_fflush_r+0x1c>
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <_fflush_r+0x50>)
 8009092:	429c      	cmp	r4, r3
 8009094:	bf08      	it	eq
 8009096:	68ec      	ldreq	r4, [r5, #12]
 8009098:	e7ec      	b.n	8009074 <_fflush_r+0x1c>
 800909a:	2000      	movs	r0, #0
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	080093c0 	.word	0x080093c0
 80090a4:	080093e0 	.word	0x080093e0
 80090a8:	080093a0 	.word	0x080093a0

080090ac <_lseek_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4c07      	ldr	r4, [pc, #28]	; (80090cc <_lseek_r+0x20>)
 80090b0:	4605      	mov	r5, r0
 80090b2:	4608      	mov	r0, r1
 80090b4:	4611      	mov	r1, r2
 80090b6:	2200      	movs	r2, #0
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	f7f8 fc98 	bl	80019f0 <_lseek>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_lseek_r+0x1e>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_lseek_r+0x1e>
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20000324 	.word	0x20000324

080090d0 <__swhatbuf_r>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d8:	2900      	cmp	r1, #0
 80090da:	b096      	sub	sp, #88	; 0x58
 80090dc:	4614      	mov	r4, r2
 80090de:	461d      	mov	r5, r3
 80090e0:	da07      	bge.n	80090f2 <__swhatbuf_r+0x22>
 80090e2:	2300      	movs	r3, #0
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	89b3      	ldrh	r3, [r6, #12]
 80090e8:	061a      	lsls	r2, r3, #24
 80090ea:	d410      	bmi.n	800910e <__swhatbuf_r+0x3e>
 80090ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f0:	e00e      	b.n	8009110 <__swhatbuf_r+0x40>
 80090f2:	466a      	mov	r2, sp
 80090f4:	f000 f8a4 	bl	8009240 <_fstat_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	dbf2      	blt.n	80090e2 <__swhatbuf_r+0x12>
 80090fc:	9a01      	ldr	r2, [sp, #4]
 80090fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009106:	425a      	negs	r2, r3
 8009108:	415a      	adcs	r2, r3
 800910a:	602a      	str	r2, [r5, #0]
 800910c:	e7ee      	b.n	80090ec <__swhatbuf_r+0x1c>
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	2000      	movs	r0, #0
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	b016      	add	sp, #88	; 0x58
 8009116:	bd70      	pop	{r4, r5, r6, pc}

08009118 <__smakebuf_r>:
 8009118:	898b      	ldrh	r3, [r1, #12]
 800911a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800911c:	079d      	lsls	r5, r3, #30
 800911e:	4606      	mov	r6, r0
 8009120:	460c      	mov	r4, r1
 8009122:	d507      	bpl.n	8009134 <__smakebuf_r+0x1c>
 8009124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	6123      	str	r3, [r4, #16]
 800912c:	2301      	movs	r3, #1
 800912e:	6163      	str	r3, [r4, #20]
 8009130:	b002      	add	sp, #8
 8009132:	bd70      	pop	{r4, r5, r6, pc}
 8009134:	ab01      	add	r3, sp, #4
 8009136:	466a      	mov	r2, sp
 8009138:	f7ff ffca 	bl	80090d0 <__swhatbuf_r>
 800913c:	9900      	ldr	r1, [sp, #0]
 800913e:	4605      	mov	r5, r0
 8009140:	4630      	mov	r0, r6
 8009142:	f7ff fac1 	bl	80086c8 <_malloc_r>
 8009146:	b948      	cbnz	r0, 800915c <__smakebuf_r+0x44>
 8009148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914c:	059a      	lsls	r2, r3, #22
 800914e:	d4ef      	bmi.n	8009130 <__smakebuf_r+0x18>
 8009150:	f023 0303 	bic.w	r3, r3, #3
 8009154:	f043 0302 	orr.w	r3, r3, #2
 8009158:	81a3      	strh	r3, [r4, #12]
 800915a:	e7e3      	b.n	8009124 <__smakebuf_r+0xc>
 800915c:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <__smakebuf_r+0x7c>)
 800915e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	6020      	str	r0, [r4, #0]
 8009164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	9b00      	ldr	r3, [sp, #0]
 800916c:	6163      	str	r3, [r4, #20]
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	6120      	str	r0, [r4, #16]
 8009172:	b15b      	cbz	r3, 800918c <__smakebuf_r+0x74>
 8009174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009178:	4630      	mov	r0, r6
 800917a:	f000 f873 	bl	8009264 <_isatty_r>
 800917e:	b128      	cbz	r0, 800918c <__smakebuf_r+0x74>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	f043 0301 	orr.w	r3, r3, #1
 800918a:	81a3      	strh	r3, [r4, #12]
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	431d      	orrs	r5, r3
 8009190:	81a5      	strh	r5, [r4, #12]
 8009192:	e7cd      	b.n	8009130 <__smakebuf_r+0x18>
 8009194:	08007609 	.word	0x08007609

08009198 <memmove>:
 8009198:	4288      	cmp	r0, r1
 800919a:	b510      	push	{r4, lr}
 800919c:	eb01 0302 	add.w	r3, r1, r2
 80091a0:	d807      	bhi.n	80091b2 <memmove+0x1a>
 80091a2:	1e42      	subs	r2, r0, #1
 80091a4:	4299      	cmp	r1, r3
 80091a6:	d00a      	beq.n	80091be <memmove+0x26>
 80091a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80091b0:	e7f8      	b.n	80091a4 <memmove+0xc>
 80091b2:	4283      	cmp	r3, r0
 80091b4:	d9f5      	bls.n	80091a2 <memmove+0xa>
 80091b6:	1881      	adds	r1, r0, r2
 80091b8:	1ad2      	subs	r2, r2, r3
 80091ba:	42d3      	cmn	r3, r2
 80091bc:	d100      	bne.n	80091c0 <memmove+0x28>
 80091be:	bd10      	pop	{r4, pc}
 80091c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80091c8:	e7f7      	b.n	80091ba <memmove+0x22>

080091ca <__malloc_lock>:
 80091ca:	4770      	bx	lr

080091cc <__malloc_unlock>:
 80091cc:	4770      	bx	lr

080091ce <_realloc_r>:
 80091ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d0:	4607      	mov	r7, r0
 80091d2:	4614      	mov	r4, r2
 80091d4:	460e      	mov	r6, r1
 80091d6:	b921      	cbnz	r1, 80091e2 <_realloc_r+0x14>
 80091d8:	4611      	mov	r1, r2
 80091da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091de:	f7ff ba73 	b.w	80086c8 <_malloc_r>
 80091e2:	b922      	cbnz	r2, 80091ee <_realloc_r+0x20>
 80091e4:	f7ff fa22 	bl	800862c <_free_r>
 80091e8:	4625      	mov	r5, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ee:	f000 f849 	bl	8009284 <_malloc_usable_size_r>
 80091f2:	42a0      	cmp	r0, r4
 80091f4:	d20f      	bcs.n	8009216 <_realloc_r+0x48>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff fa65 	bl	80086c8 <_malloc_r>
 80091fe:	4605      	mov	r5, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	d0f2      	beq.n	80091ea <_realloc_r+0x1c>
 8009204:	4631      	mov	r1, r6
 8009206:	4622      	mov	r2, r4
 8009208:	f7fe fdf8 	bl	8007dfc <memcpy>
 800920c:	4631      	mov	r1, r6
 800920e:	4638      	mov	r0, r7
 8009210:	f7ff fa0c 	bl	800862c <_free_r>
 8009214:	e7e9      	b.n	80091ea <_realloc_r+0x1c>
 8009216:	4635      	mov	r5, r6
 8009218:	e7e7      	b.n	80091ea <_realloc_r+0x1c>
	...

0800921c <_read_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4c07      	ldr	r4, [pc, #28]	; (800923c <_read_r+0x20>)
 8009220:	4605      	mov	r5, r0
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	2200      	movs	r2, #0
 8009228:	6022      	str	r2, [r4, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f8 fb80 	bl	8001930 <_read>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_read_r+0x1e>
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	b103      	cbz	r3, 800923a <_read_r+0x1e>
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20000324 	.word	0x20000324

08009240 <_fstat_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4c07      	ldr	r4, [pc, #28]	; (8009260 <_fstat_r+0x20>)
 8009244:	2300      	movs	r3, #0
 8009246:	4605      	mov	r5, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	f7f8 fbb4 	bl	80019ba <_fstat>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d102      	bne.n	800925c <_fstat_r+0x1c>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	b103      	cbz	r3, 800925c <_fstat_r+0x1c>
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	bd38      	pop	{r3, r4, r5, pc}
 800925e:	bf00      	nop
 8009260:	20000324 	.word	0x20000324

08009264 <_isatty_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4c06      	ldr	r4, [pc, #24]	; (8009280 <_isatty_r+0x1c>)
 8009268:	2300      	movs	r3, #0
 800926a:	4605      	mov	r5, r0
 800926c:	4608      	mov	r0, r1
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	f7f8 fbb3 	bl	80019da <_isatty>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_isatty_r+0x1a>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	b103      	cbz	r3, 800927e <_isatty_r+0x1a>
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	20000324 	.word	0x20000324

08009284 <_malloc_usable_size_r>:
 8009284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009288:	1f18      	subs	r0, r3, #4
 800928a:	2b00      	cmp	r3, #0
 800928c:	bfbc      	itt	lt
 800928e:	580b      	ldrlt	r3, [r1, r0]
 8009290:	18c0      	addlt	r0, r0, r3
 8009292:	4770      	bx	lr

08009294 <_init>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	bf00      	nop
 8009298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800929a:	bc08      	pop	{r3}
 800929c:	469e      	mov	lr, r3
 800929e:	4770      	bx	lr

080092a0 <_fini>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr
