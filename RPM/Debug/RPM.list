
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008e20  08008e20  00018e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009120  08009120  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009128  08009128  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200001e0  08009310  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08009310  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130fb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025d6  00000000  00000000  0003330b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a8  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  00036990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003897  00000000  00000000  00037900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d1c5  00000000  00000000  0003b197  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ace8b  00000000  00000000  0004835c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f51e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  000f5264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e04 	.word	0x08008e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008e04 	.word	0x08008e04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <app_NumeroA7Segmentos>:
uint8_t Bandera[]={0,0,0};


/* Conversion del valor numerico para 7 segmentos */
void app_NumeroA7Segmentos(uint32_t Numero,uint8_t TipoDisplay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	switch(TipoDisplay)
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <app_NumeroA7Segmentos+0x1a>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	f000 81a3 	beq.w	80012e6 <app_NumeroA7Segmentos+0x35e>
				}
			}
		}break;
		default:{}
	}
}
 8000fa0:	e348      	b.n	8001634 <app_NumeroA7Segmentos+0x6ac>
			switch(Numero)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b09      	cmp	r3, #9
 8000fa6:	f200 8342 	bhi.w	800162e <app_NumeroA7Segmentos+0x6a6>
 8000faa:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <app_NumeroA7Segmentos+0x28>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08000fd9 	.word	0x08000fd9
 8000fb4:	08001027 	.word	0x08001027
 8000fb8:	08001075 	.word	0x08001075
 8000fbc:	080010c3 	.word	0x080010c3
 8000fc0:	08001111 	.word	0x08001111
 8000fc4:	0800115f 	.word	0x0800115f
 8000fc8:	080011ad 	.word	0x080011ad
 8000fcc:	080011fb 	.word	0x080011fb
 8000fd0:	08001249 	.word	0x08001249
 8000fd4:	08001297 	.word	0x08001297
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe2:	f001 fdd7 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2102      	movs	r1, #2
 8000fea:	48cc      	ldr	r0, [pc, #816]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8000fec:	f001 fdd2 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	48c9      	ldr	r0, [pc, #804]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8000ff6:	f001 fdcd 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f001 fdc7 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	2110      	movs	r1, #16
 800100a:	48c4      	ldr	r0, [pc, #784]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800100c:	f001 fdc2 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	48c1      	ldr	r0, [pc, #772]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001016:	f001 fdbd 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	48bf      	ldr	r0, [pc, #764]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001020:	f001 fdb8 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 8001024:	e15e      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f001 fdb0 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	2102      	movs	r1, #2
 8001038:	48b8      	ldr	r0, [pc, #736]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800103a:	f001 fdab 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800103e:	2201      	movs	r2, #1
 8001040:	2104      	movs	r1, #4
 8001042:	48b6      	ldr	r0, [pc, #728]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001044:	f001 fda6 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f001 fda0 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2110      	movs	r1, #16
 8001058:	48b0      	ldr	r0, [pc, #704]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800105a:	f001 fd9b 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	48ae      	ldr	r0, [pc, #696]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001064:	f001 fd96 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	48ab      	ldr	r0, [pc, #684]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800106e:	f001 fd91 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 8001072:	e137      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f001 fd89 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	2102      	movs	r1, #2
 8001086:	48a5      	ldr	r0, [pc, #660]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001088:	f001 fd84 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2104      	movs	r1, #4
 8001090:	48a2      	ldr	r0, [pc, #648]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001092:	f001 fd7f 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	2101      	movs	r1, #1
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f001 fd79 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2110      	movs	r1, #16
 80010a6:	489d      	ldr	r0, [pc, #628]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010a8:	f001 fd74 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	489a      	ldr	r0, [pc, #616]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010b2:	f001 fd6f 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	4898      	ldr	r0, [pc, #608]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010bc:	f001 fd6a 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80010c0:	e110      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f001 fd62 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	4891      	ldr	r0, [pc, #580]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010d6:	f001 fd5d 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	2104      	movs	r1, #4
 80010de:	488f      	ldr	r0, [pc, #572]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010e0:	f001 fd58 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2101      	movs	r1, #1
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f001 fd52 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2110      	movs	r1, #16
 80010f4:	4889      	ldr	r0, [pc, #548]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010f6:	f001 fd4d 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4887      	ldr	r0, [pc, #540]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001100:	f001 fd48 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	4884      	ldr	r0, [pc, #528]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800110a:	f001 fd43 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 800110e:	e0e9      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f001 fd3b 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800111e:	2201      	movs	r2, #1
 8001120:	2102      	movs	r1, #2
 8001122:	487e      	ldr	r0, [pc, #504]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001124:	f001 fd36 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	2104      	movs	r1, #4
 800112c:	487b      	ldr	r0, [pc, #492]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800112e:	f001 fd31 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f001 fd2b 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2110      	movs	r1, #16
 8001142:	4876      	ldr	r0, [pc, #472]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001144:	f001 fd26 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4873      	ldr	r0, [pc, #460]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800114e:	f001 fd21 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	4871      	ldr	r0, [pc, #452]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001158:	f001 fd1c 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 800115c:	e0c2      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f001 fd14 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	486a      	ldr	r0, [pc, #424]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001172:	f001 fd0f 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	2104      	movs	r1, #4
 800117a:	4868      	ldr	r0, [pc, #416]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800117c:	f001 fd0a 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f001 fd04 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	4862      	ldr	r0, [pc, #392]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001192:	f001 fcff 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4860      	ldr	r0, [pc, #384]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800119c:	f001 fcfa 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	485d      	ldr	r0, [pc, #372]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011a6:	f001 fcf5 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80011aa:	e09b      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f001 fced 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2102      	movs	r1, #2
 80011be:	4857      	ldr	r0, [pc, #348]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011c0:	f001 fce8 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2104      	movs	r1, #4
 80011c8:	4854      	ldr	r0, [pc, #336]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011ca:	f001 fce3 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2101      	movs	r1, #1
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f001 fcdd 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2110      	movs	r1, #16
 80011de:	484f      	ldr	r0, [pc, #316]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011e0:	f001 fcd8 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	484c      	ldr	r0, [pc, #304]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011ea:	f001 fcd3 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	484a      	ldr	r0, [pc, #296]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011f4:	f001 fcce 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80011f8:	e074      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f001 fcc6 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	2102      	movs	r1, #2
 800120c:	4843      	ldr	r0, [pc, #268]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800120e:	f001 fcc1 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	2104      	movs	r1, #4
 8001216:	4841      	ldr	r0, [pc, #260]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001218:	f001 fcbc 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2101      	movs	r1, #1
 8001220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001224:	f001 fcb6 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2110      	movs	r1, #16
 800122c:	483b      	ldr	r0, [pc, #236]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800122e:	f001 fcb1 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	4839      	ldr	r0, [pc, #228]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001238:	f001 fcac 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	4836      	ldr	r0, [pc, #216]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001242:	f001 fca7 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 8001246:	e04d      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f001 fc9f 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	4830      	ldr	r0, [pc, #192]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800125c:	f001 fc9a 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	2104      	movs	r1, #4
 8001264:	482d      	ldr	r0, [pc, #180]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001266:	f001 fc95 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	2101      	movs	r1, #1
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 fc8f 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001276:	2201      	movs	r2, #1
 8001278:	2110      	movs	r1, #16
 800127a:	4828      	ldr	r0, [pc, #160]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800127c:	f001 fc8a 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4825      	ldr	r0, [pc, #148]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001286:	f001 fc85 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	4823      	ldr	r0, [pc, #140]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001290:	f001 fc80 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 8001294:	e026      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 fc78 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2102      	movs	r1, #2
 80012a8:	481c      	ldr	r0, [pc, #112]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012aa:	f001 fc73 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2104      	movs	r1, #4
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012b4:	f001 fc6e 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2101      	movs	r1, #1
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f001 fc68 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2110      	movs	r1, #16
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012ca:	f001 fc63 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012d4:	f001 fc5e 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80012d8:	2201      	movs	r2, #1
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	480f      	ldr	r0, [pc, #60]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012de:	f001 fc59 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80012e2:	bf00      	nop
		}break;
 80012e4:	e1a3      	b.n	800162e <app_NumeroA7Segmentos+0x6a6>
			switch(Numero)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	f200 81a2 	bhi.w	8001632 <app_NumeroA7Segmentos+0x6aa>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <app_NumeroA7Segmentos+0x36c>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001321 	.word	0x08001321
 80012f8:	0800136f 	.word	0x0800136f
 80012fc:	080013bd 	.word	0x080013bd
 8001300:	0800140b 	.word	0x0800140b
 8001304:	08001459 	.word	0x08001459
 8001308:	080014a7 	.word	0x080014a7
 800130c:	080014f5 	.word	0x080014f5
 8001310:	08001543 	.word	0x08001543
 8001314:	08001591 	.word	0x08001591
 8001318:	080015df 	.word	0x080015df
 800131c:	48000800 	.word	0x48000800
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f001 fc33 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2102      	movs	r1, #2
 8001332:	48c2      	ldr	r0, [pc, #776]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001334:	f001 fc2e 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2104      	movs	r1, #4
 800133c:	48bf      	ldr	r0, [pc, #764]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800133e:	f001 fc29 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2101      	movs	r1, #1
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f001 fc23 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2110      	movs	r1, #16
 8001352:	48ba      	ldr	r0, [pc, #744]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001354:	f001 fc1e 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2140      	movs	r1, #64	; 0x40
 800135c:	48b7      	ldr	r0, [pc, #732]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800135e:	f001 fc19 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001362:	2201      	movs	r2, #1
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	48b5      	ldr	r0, [pc, #724]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001368:	f001 fc14 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 800136c:	e15e      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f001 fc0c 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	48ae      	ldr	r0, [pc, #696]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001382:	f001 fc07 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2104      	movs	r1, #4
 800138a:	48ac      	ldr	r0, [pc, #688]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800138c:	f001 fc02 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f001 fbfc 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	2110      	movs	r1, #16
 80013a0:	48a6      	ldr	r0, [pc, #664]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013a2:	f001 fbf7 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2140      	movs	r1, #64	; 0x40
 80013aa:	48a4      	ldr	r0, [pc, #656]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013ac:	f001 fbf2 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	48a1      	ldr	r0, [pc, #644]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013b6:	f001 fbed 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80013ba:	e137      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f001 fbe5 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2102      	movs	r1, #2
 80013ce:	489b      	ldr	r0, [pc, #620]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013d0:	f001 fbe0 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2104      	movs	r1, #4
 80013d8:	4898      	ldr	r0, [pc, #608]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013da:	f001 fbdb 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f001 fbd5 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4893      	ldr	r0, [pc, #588]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013f0:	f001 fbd0 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	4890      	ldr	r0, [pc, #576]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013fa:	f001 fbcb 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	488e      	ldr	r0, [pc, #568]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001404:	f001 fbc6 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 8001408:	e110      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f001 fbbe 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2102      	movs	r1, #2
 800141c:	4887      	ldr	r0, [pc, #540]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800141e:	f001 fbb9 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2104      	movs	r1, #4
 8001426:	4885      	ldr	r0, [pc, #532]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001428:	f001 fbb4 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2101      	movs	r1, #1
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f001 fbae 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	2110      	movs	r1, #16
 800143c:	487f      	ldr	r0, [pc, #508]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800143e:	f001 fba9 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	487d      	ldr	r0, [pc, #500]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001448:	f001 fba4 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	487a      	ldr	r0, [pc, #488]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001452:	f001 fb9f 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 8001456:	e0e9      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f001 fb97 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	4874      	ldr	r0, [pc, #464]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800146c:	f001 fb92 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2104      	movs	r1, #4
 8001474:	4871      	ldr	r0, [pc, #452]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001476:	f001 fb8d 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800147a:	2201      	movs	r2, #1
 800147c:	2101      	movs	r1, #1
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f001 fb87 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	2110      	movs	r1, #16
 800148a:	486c      	ldr	r0, [pc, #432]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800148c:	f001 fb82 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	4869      	ldr	r0, [pc, #420]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001496:	f001 fb7d 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	4867      	ldr	r0, [pc, #412]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014a0:	f001 fb78 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80014a4:	e0c2      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f001 fb70 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2102      	movs	r1, #2
 80014b8:	4860      	ldr	r0, [pc, #384]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014ba:	f001 fb6b 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2104      	movs	r1, #4
 80014c2:	485e      	ldr	r0, [pc, #376]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014c4:	f001 fb66 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2101      	movs	r1, #1
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f001 fb60 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2110      	movs	r1, #16
 80014d8:	4858      	ldr	r0, [pc, #352]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014da:	f001 fb5b 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	4856      	ldr	r0, [pc, #344]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014e4:	f001 fb56 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	4853      	ldr	r0, [pc, #332]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014ee:	f001 fb51 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80014f2:	e09b      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f001 fb49 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	2102      	movs	r1, #2
 8001506:	484d      	ldr	r0, [pc, #308]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001508:	f001 fb44 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2104      	movs	r1, #4
 8001510:	484a      	ldr	r0, [pc, #296]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001512:	f001 fb3f 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2101      	movs	r1, #1
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f001 fb39 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2110      	movs	r1, #16
 8001526:	4845      	ldr	r0, [pc, #276]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001528:	f001 fb34 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	4842      	ldr	r0, [pc, #264]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001532:	f001 fb2f 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	4840      	ldr	r0, [pc, #256]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800153c:	f001 fb2a 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 8001540:	e074      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f001 fb22 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2102      	movs	r1, #2
 8001554:	4839      	ldr	r0, [pc, #228]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001556:	f001 fb1d 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2104      	movs	r1, #4
 800155e:	4837      	ldr	r0, [pc, #220]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001560:	f001 fb18 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f001 fb12 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	2110      	movs	r1, #16
 8001574:	4831      	ldr	r0, [pc, #196]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001576:	f001 fb0d 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	482f      	ldr	r0, [pc, #188]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001580:	f001 fb08 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	482c      	ldr	r0, [pc, #176]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800158a:	f001 fb03 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 800158e:	e04d      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f001 fafb 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015a4:	f001 faf6 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	4823      	ldr	r0, [pc, #140]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015ae:	f001 faf1 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2101      	movs	r1, #1
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f001 faeb 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	481e      	ldr	r0, [pc, #120]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015c4:	f001 fae6 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	481b      	ldr	r0, [pc, #108]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015ce:	f001 fae1 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	4819      	ldr	r0, [pc, #100]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015d8:	f001 fadc 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 80015dc:	e026      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f001 fad4 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2102      	movs	r1, #2
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015f2:	f001 facf 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2104      	movs	r1, #4
 80015fa:	4810      	ldr	r0, [pc, #64]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015fc:	f001 faca 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2101      	movs	r1, #1
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f001 fac4 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	480a      	ldr	r0, [pc, #40]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001612:	f001 fabf 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2140      	movs	r1, #64	; 0x40
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800161c:	f001 faba 	bl	8002b94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001626:	f001 fab5 	bl	8002b94 <HAL_GPIO_WritePin>
				}break;
 800162a:	bf00      	nop
		}break;
 800162c:	e001      	b.n	8001632 <app_NumeroA7Segmentos+0x6aa>
		}break;
 800162e:	bf00      	nop
 8001630:	e000      	b.n	8001634 <app_NumeroA7Segmentos+0x6ac>
		}break;
 8001632:	bf00      	nop
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	48000800 	.word	0x48000800

08001640 <app_SeleccionDisplay>:

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display, uint8_t TipoDisplay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
	switch(TipoDisplay)
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <app_SeleccionDisplay+0x1e>
 8001656:	2b01      	cmp	r3, #1
 8001658:	f000 80b3 	beq.w	80017c2 <app_SeleccionDisplay+0x182>
		default:
		{

		}
	}
}
 800165c:	e166      	b.n	800192c <app_SeleccionDisplay+0x2ec>
			switch(Display)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b04      	cmp	r3, #4
 8001662:	f200 8160 	bhi.w	8001926 <app_SeleccionDisplay+0x2e6>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <app_SeleccionDisplay+0x2c>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001681 	.word	0x08001681
 8001670:	080016c1 	.word	0x080016c1
 8001674:	08001701 	.word	0x08001701
 8001678:	08001741 	.word	0x08001741
 800167c:	08001781 	.word	0x08001781
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f001 fa83 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2120      	movs	r1, #32
 8001692:	48a8      	ldr	r0, [pc, #672]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001694:	f001 fa7e 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f001 fa77 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ac:	48a1      	ldr	r0, [pc, #644]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016ae:	f001 fa71 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b8:	489e      	ldr	r0, [pc, #632]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016ba:	f001 fa6b 	bl	8002b94 <HAL_GPIO_WritePin>
					}break;
 80016be:	e07f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f001 fa63 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2120      	movs	r1, #32
 80016d2:	4898      	ldr	r0, [pc, #608]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016d4:	f001 fa5e 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 fa57 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ec:	4891      	ldr	r0, [pc, #580]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016ee:	f001 fa51 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	488e      	ldr	r0, [pc, #568]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016fa:	f001 fa4b 	bl	8002b94 <HAL_GPIO_WritePin>
					}break;
 80016fe:	e05f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f001 fa43 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	4888      	ldr	r0, [pc, #544]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001714:	f001 fa3e 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fa37 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172c:	4881      	ldr	r0, [pc, #516]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800172e:	f001 fa31 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001738:	487e      	ldr	r0, [pc, #504]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800173a:	f001 fa2b 	bl	8002b94 <HAL_GPIO_WritePin>
					}break;
 800173e:	e03f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f001 fa23 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2120      	movs	r1, #32
 8001752:	4878      	ldr	r0, [pc, #480]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001754:	f001 fa1e 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f001 fa17 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176c:	4871      	ldr	r0, [pc, #452]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800176e:	f001 fa11 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001778:	486e      	ldr	r0, [pc, #440]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800177a:	f001 fa0b 	bl	8002b94 <HAL_GPIO_WritePin>
					}break;
 800177e:	e01f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 fa03 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2120      	movs	r1, #32
 8001792:	4868      	ldr	r0, [pc, #416]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001794:	f001 f9fe 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f001 f9f7 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ac:	4861      	ldr	r0, [pc, #388]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80017ae:	f001 f9f1 	bl	8002b94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b8:	485e      	ldr	r0, [pc, #376]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80017ba:	f001 f9eb 	bl	8002b94 <HAL_GPIO_WritePin>
		}break;
 80017be:	e0b2      	b.n	8001926 <app_SeleccionDisplay+0x2e6>
 80017c0:	e0b1      	b.n	8001926 <app_SeleccionDisplay+0x2e6>
			switch(Display)
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	f200 80b0 	bhi.w	800192a <app_SeleccionDisplay+0x2ea>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <app_SeleccionDisplay+0x190>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e5 	.word	0x080017e5
 80017d4:	08001825 	.word	0x08001825
 80017d8:	08001865 	.word	0x08001865
 80017dc:	080018a5 	.word	0x080018a5
 80017e0:	080018e5 	.word	0x080018e5
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ee:	f001 f9d1 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2120      	movs	r1, #32
 80017f6:	484f      	ldr	r0, [pc, #316]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80017f8:	f001 f9cc 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f001 f9c5 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001810:	4848      	ldr	r0, [pc, #288]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001812:	f001 f9bf 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181c:	4845      	ldr	r0, [pc, #276]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800181e:	f001 f9b9 	bl	8002b94 <HAL_GPIO_WritePin>
						}break;
 8001822:	e07f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f001 f9b1 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2120      	movs	r1, #32
 8001836:	483f      	ldr	r0, [pc, #252]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001838:	f001 f9ac 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f001 f9a5 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001850:	4838      	ldr	r0, [pc, #224]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001852:	f001 f99f 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185c:	4835      	ldr	r0, [pc, #212]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800185e:	f001 f999 	bl	8002b94 <HAL_GPIO_WritePin>
						}break;
 8001862:	e05f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f001 f991 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 8001872:	2201      	movs	r2, #1
 8001874:	2120      	movs	r1, #32
 8001876:	482f      	ldr	r0, [pc, #188]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001878:	f001 f98c 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f001 f985 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001890:	4828      	ldr	r0, [pc, #160]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001892:	f001 f97f 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189c:	4825      	ldr	r0, [pc, #148]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800189e:	f001 f979 	bl	8002b94 <HAL_GPIO_WritePin>
						}break;
 80018a2:	e03f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f001 f971 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2120      	movs	r1, #32
 80018b6:	481f      	ldr	r0, [pc, #124]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018b8:	f001 f96c 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f001 f965 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d0:	4818      	ldr	r0, [pc, #96]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018d2:	f001 f95f 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018dc:	4815      	ldr	r0, [pc, #84]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018de:	f001 f959 	bl	8002b94 <HAL_GPIO_WritePin>
						}break;
 80018e2:	e01f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f001 f951 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2120      	movs	r1, #32
 80018f6:	480f      	ldr	r0, [pc, #60]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018f8:	f001 f94c 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f001 f945 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001912:	f001 f93f 	bl	8002b94 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800191e:	f001 f939 	bl	8002b94 <HAL_GPIO_WritePin>
						}break;
 8001922:	bf00      	nop
		}break;
 8001924:	e001      	b.n	800192a <app_SeleccionDisplay+0x2ea>
		}break;
 8001926:	bf00      	nop
 8001928:	e000      	b.n	800192c <app_SeleccionDisplay+0x2ec>
		}break;
 800192a:	bf00      	nop
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	48000400 	.word	0x48000400

08001938 <app_Despliegue>:

/* Separacion de numero en unidades, decenas, centenas ... */
void app_Despliegue(uint32_t Numero,uint8_t TipoDisplay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
	uint32_t Primero  =  Numero % 10;
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4ba0      	ldr	r3, [pc, #640]	; (8001bc8 <app_Despliegue+0x290>)
 8001948:	fba3 1302 	umull	r1, r3, r3, r2
 800194c:	08d9      	lsrs	r1, r3, #3
 800194e:	460b      	mov	r3, r1
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]
	uint32_t Segundo =  ( Numero - Primero ) % 100 / 10;
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	1ad2      	subs	r2, r2, r3
 8001960:	4b9a      	ldr	r3, [pc, #616]	; (8001bcc <app_Despliegue+0x294>)
 8001962:	fba3 1302 	umull	r1, r3, r3, r2
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2164      	movs	r1, #100	; 0x64
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a95      	ldr	r2, [pc, #596]	; (8001bc8 <app_Despliegue+0x290>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	61bb      	str	r3, [r7, #24]
	uint32_t Tercero  =  ( Numero - Primero - Segundo ) % 1000 / 100;
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad2      	subs	r2, r2, r3
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <app_Despliegue+0x298>)
 8001986:	fba3 1302 	umull	r1, r3, r3, r2
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4a8d      	ldr	r2, [pc, #564]	; (8001bcc <app_Despliegue+0x294>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	617b      	str	r3, [r7, #20]
	uint32_t Cuarto =  ( Numero - Primero - Segundo - Tercero ) % 10000 / 1000;
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	1ad2      	subs	r2, r2, r3
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <app_Despliegue+0x29c>)
 80019b0:	fba3 1302 	umull	r1, r3, r3, r2
 80019b4:	0b5b      	lsrs	r3, r3, #13
 80019b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a83      	ldr	r2, [pc, #524]	; (8001bd0 <app_Despliegue+0x298>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	613b      	str	r3, [r7, #16]
	uint32_t Quinto = (Numero - Primero - Segundo - Tercero - Cuarto) % 100000 / 10000;
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	1ad2      	subs	r2, r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	0953      	lsrs	r3, r2, #5
 80019de:	497e      	ldr	r1, [pc, #504]	; (8001bd8 <app_Despliegue+0x2a0>)
 80019e0:	fba1 1303 	umull	r1, r3, r1, r3
 80019e4:	09db      	lsrs	r3, r3, #7
 80019e6:	497d      	ldr	r1, [pc, #500]	; (8001bdc <app_Despliegue+0x2a4>)
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4a79      	ldr	r2, [pc, #484]	; (8001bd4 <app_Despliegue+0x29c>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0b5b      	lsrs	r3, r3, #13
 80019f6:	60fb      	str	r3, [r7, #12]
		if(TipoDisplay == Anodo)
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <app_Despliegue+0xd4>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a04:	4876      	ldr	r0, [pc, #472]	; (8001be0 <app_Despliegue+0x2a8>)
 8001a06:	f001 f8c5 	bl	8002b94 <HAL_GPIO_WritePin>
 8001a0a:	e008      	b.n	8001a1e <app_Despliegue+0xe6>
		}
		else if(TipoDisplay == Catodo)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <app_Despliegue+0xe6>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a18:	4871      	ldr	r0, [pc, #452]	; (8001be0 <app_Despliegue+0x2a8>)
 8001a1a:	f001 f8bb 	bl	8002b94 <HAL_GPIO_WritePin>
		}
		app_SeleccionDisplay(0, TipoDisplay);
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	4619      	mov	r1, r3
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fe0c 	bl	8001640 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Quinto,TipoDisplay);
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff faab 	bl	8000f88 <app_NumeroA7Segmentos>

		HAL_Delay(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 fe08 	bl	8002648 <HAL_Delay>
		app_SeleccionDisplay(1, TipoDisplay);
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fdff 	bl	8001640 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Cuarto,TipoDisplay);
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	4619      	mov	r1, r3
 8001a46:	6938      	ldr	r0, [r7, #16]
 8001a48:	f7ff fa9e 	bl	8000f88 <app_NumeroA7Segmentos>
		HAL_Delay(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f000 fdfb 	bl	8002648 <HAL_Delay>
		app_SeleccionDisplay(2, TipoDisplay);
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	4619      	mov	r1, r3
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff fdf2 	bl	8001640 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Tercero,TipoDisplay);
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6978      	ldr	r0, [r7, #20]
 8001a62:	f7ff fa91 	bl	8000f88 <app_NumeroA7Segmentos>
		HAL_Delay(1);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f000 fdee 	bl	8002648 <HAL_Delay>
		app_SeleccionDisplay(3, TipoDisplay);
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2003      	movs	r0, #3
 8001a72:	f7ff fde5 	bl	8001640 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Segundo,TipoDisplay);
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	69b8      	ldr	r0, [r7, #24]
 8001a7c:	f7ff fa84 	bl	8000f88 <app_NumeroA7Segmentos>
		HAL_Delay(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f000 fde1 	bl	8002648 <HAL_Delay>
		app_SeleccionDisplay(4, TipoDisplay);
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2004      	movs	r0, #4
 8001a8c:	f7ff fdd8 	bl	8001640 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Primero,TipoDisplay);
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	4619      	mov	r1, r3
 8001a94:	69f8      	ldr	r0, [r7, #28]
 8001a96:	f7ff fa77 	bl	8000f88 <app_NumeroA7Segmentos>
		HAL_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fdd4 	bl	8002648 <HAL_Delay>
		if(Bandera[0] == 1)
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <app_Despliegue+0x2ac>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d11f      	bne.n	8001ae8 <app_Despliegue+0x1b0>
		{
			app_SeleccionDisplay(0, TipoDisplay);
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fdc7 	bl	8001640 <app_SeleccionDisplay>
			app_NumeroA7Segmentos(Quinto,TipoDisplay);
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff fa66 	bl	8000f88 <app_NumeroA7Segmentos>
			if(TipoDisplay == Anodo)
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <app_Despliegue+0x198>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac8:	4845      	ldr	r0, [pc, #276]	; (8001be0 <app_Despliegue+0x2a8>)
 8001aca:	f001 f863 	bl	8002b94 <HAL_GPIO_WritePin>
 8001ace:	e008      	b.n	8001ae2 <app_Despliegue+0x1aa>
			}
			else if(TipoDisplay == Catodo)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d105      	bne.n	8001ae2 <app_Despliegue+0x1aa>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001adc:	4840      	ldr	r0, [pc, #256]	; (8001be0 <app_Despliegue+0x2a8>)
 8001ade:	f001 f859 	bl	8002b94 <HAL_GPIO_WritePin>
			}

			HAL_Delay(3);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f000 fdb0 	bl	8002648 <HAL_Delay>
		}
		if(Bandera[1] == 1)
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <app_Despliegue+0x2ac>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11f      	bne.n	8001b30 <app_Despliegue+0x1f8>
		{
			app_SeleccionDisplay(1, TipoDisplay);
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	4619      	mov	r1, r3
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fda3 	bl	8001640 <app_SeleccionDisplay>
			if(TipoDisplay == Anodo)
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <app_Despliegue+0x1d6>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b06:	4836      	ldr	r0, [pc, #216]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b08:	f001 f844 	bl	8002b94 <HAL_GPIO_WritePin>
 8001b0c:	e008      	b.n	8001b20 <app_Despliegue+0x1e8>
			}
			else if(TipoDisplay == Catodo)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <app_Despliegue+0x1e8>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1a:	4831      	ldr	r0, [pc, #196]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b1c:	f001 f83a 	bl	8002b94 <HAL_GPIO_WritePin>
			}
			app_NumeroA7Segmentos(Cuarto,TipoDisplay);
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	4619      	mov	r1, r3
 8001b24:	6938      	ldr	r0, [r7, #16]
 8001b26:	f7ff fa2f 	bl	8000f88 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8001b2a:	2003      	movs	r0, #3
 8001b2c:	f000 fd8c 	bl	8002648 <HAL_Delay>
		}
		if(Bandera[2] == 1)
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <app_Despliegue+0x2ac>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d11f      	bne.n	8001b78 <app_Despliegue+0x240>
		{
			app_SeleccionDisplay(2, TipoDisplay);
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fd7f 	bl	8001640 <app_SeleccionDisplay>
			if(TipoDisplay == Anodo)
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <app_Despliegue+0x21e>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b4e:	4824      	ldr	r0, [pc, #144]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b50:	f001 f820 	bl	8002b94 <HAL_GPIO_WritePin>
 8001b54:	e008      	b.n	8001b68 <app_Despliegue+0x230>
			}
			else if(TipoDisplay == Catodo)
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <app_Despliegue+0x230>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b62:	481f      	ldr	r0, [pc, #124]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b64:	f001 f816 	bl	8002b94 <HAL_GPIO_WritePin>
			}
			app_NumeroA7Segmentos(Tercero,TipoDisplay);
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6978      	ldr	r0, [r7, #20]
 8001b6e:	f7ff fa0b 	bl	8000f88 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 fd68 	bl	8002648 <HAL_Delay>
		}
		if(Bandera[3] == 1)
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <app_Despliegue+0x2ac>)
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d11f      	bne.n	8001bc0 <app_Despliegue+0x288>
		{
			app_SeleccionDisplay(3, TipoDisplay);
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	4619      	mov	r1, r3
 8001b84:	2003      	movs	r0, #3
 8001b86:	f7ff fd5b 	bl	8001640 <app_SeleccionDisplay>
			if(TipoDisplay == Anodo)
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d106      	bne.n	8001b9e <app_Despliegue+0x266>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b98:	f000 fffc 	bl	8002b94 <HAL_GPIO_WritePin>
 8001b9c:	e008      	b.n	8001bb0 <app_Despliegue+0x278>
			}
			else if(TipoDisplay == Catodo)
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <app_Despliegue+0x278>
			{
				HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <app_Despliegue+0x2a8>)
 8001bac:	f000 fff2 	bl	8002b94 <HAL_GPIO_WritePin>
			}
			app_NumeroA7Segmentos(Segundo,TipoDisplay);
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	69b8      	ldr	r0, [r7, #24]
 8001bb6:	f7ff f9e7 	bl	8000f88 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8001bba:	2003      	movs	r0, #3
 8001bbc:	f000 fd44 	bl	8002648 <HAL_Delay>
		}



}
 8001bc0:	bf00      	nop
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	cccccccd 	.word	0xcccccccd
 8001bcc:	51eb851f 	.word	0x51eb851f
 8001bd0:	10624dd3 	.word	0x10624dd3
 8001bd4:	d1b71759 	.word	0xd1b71759
 8001bd8:	0a7c5ac5 	.word	0x0a7c5ac5
 8001bdc:	000186a0 	.word	0x000186a0
 8001be0:	48000800 	.word	0x48000800
 8001be4:	200001fc 	.word	0x200001fc

08001be8 <app_SeleccionarTiempo>:

}


void app_SeleccionarTiempo(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

	  switch(Aumento)
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <app_SeleccionarTiempo+0x84>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d013      	beq.n	8001c1c <app_SeleccionarTiempo+0x34>
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d025      	beq.n	8001c44 <app_SeleccionarTiempo+0x5c>
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d000      	beq.n	8001bfe <app_SeleccionarTiempo+0x16>
		  {

		  }
	  }

}
 8001bfc:	e034      	b.n	8001c68 <app_SeleccionarTiempo+0x80>
				  Primero = app_LecturaEncoder() * 100;
 8001bfe:	f000 f83f 	bl	8001c80 <app_LecturaEncoder>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	fb03 f302 	mul.w	r3, r3, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <app_SeleccionarTiempo+0x88>)
 8001c10:	601a      	str	r2, [r3, #0]
				  Total = Primero;
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <app_SeleccionarTiempo+0x88>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <app_SeleccionarTiempo+0x8c>)
 8001c18:	6013      	str	r3, [r2, #0]
		  }break;
 8001c1a:	e025      	b.n	8001c68 <app_SeleccionarTiempo+0x80>
				  Segundo = app_LecturaEncoder()*10;
 8001c1c:	f000 f830 	bl	8001c80 <app_LecturaEncoder>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <app_SeleccionarTiempo+0x90>)
 8001c30:	801a      	strh	r2, [r3, #0]
				  Total = Primero + Segundo;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <app_SeleccionarTiempo+0x90>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <app_SeleccionarTiempo+0x88>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <app_SeleccionarTiempo+0x8c>)
 8001c40:	6013      	str	r3, [r2, #0]
		  }break;
 8001c42:	e011      	b.n	8001c68 <app_SeleccionarTiempo+0x80>
		  				  Tercero = app_LecturaEncoder()*1;
 8001c44:	f000 f81c 	bl	8001c80 <app_LecturaEncoder>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <app_SeleccionarTiempo+0x94>)
 8001c4e:	801a      	strh	r2, [r3, #0]
		  				  Total = Primero + Segundo + Tercero;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <app_SeleccionarTiempo+0x90>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <app_SeleccionarTiempo+0x88>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <app_SeleccionarTiempo+0x94>)
 8001c5e:	8812      	ldrh	r2, [r2, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <app_SeleccionarTiempo+0x8c>)
 8001c64:	6013      	str	r3, [r2, #0]
		  		  }break;
 8001c66:	bf00      	nop
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000020d 	.word	0x2000020d
 8001c70:	20000204 	.word	0x20000204
 8001c74:	20000208 	.word	0x20000208
 8001c78:	20000200 	.word	0x20000200
 8001c7c:	20000202 	.word	0x20000202

08001c80 <app_LecturaEncoder>:
uint8_t app_LecturaEncoder(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	/* Inicia el Timer de bajo consumo */
	HAL_LPTIM_Encoder_Start(&hlptim1, 36);
 8001c84:	2124      	movs	r1, #36	; 0x24
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <app_LecturaEncoder+0x24>)
 8001c88:	f001 f888 	bl	8002d9c <HAL_LPTIM_Encoder_Start>

	/* Definicion de las variables */
	ValorEncoder = HAL_LPTIM_ReadCounter(&hlptim1)/4;
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <app_LecturaEncoder+0x24>)
 8001c8e:	f001 f8d1 	bl	8002e34 <HAL_LPTIM_ReadCounter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <app_LecturaEncoder+0x28>)
 8001c9a:	701a      	strb	r2, [r3, #0]

	/*Devuelve valor del encoder*/
	return ValorEncoder;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <app_LecturaEncoder+0x28>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]

	/* Desabilita el Encoder */
	HAL_LPTIM_Encoder_Stop(&hlptim1);
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2000021c 	.word	0x2000021c
 8001ca8:	2000020c 	.word	0x2000020c

08001cac <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
/* Variables globales */
Tipo cambio;
uint8_t Aumento = 0,Bandera_DetectorCero = 1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == Boton_encoder_Pin)
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbc:	d112      	bne.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if(Aumento > 2)
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x50>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d903      	bls.n	8001cce <HAL_GPIO_EXTI_Callback+0x22>
		{
			Aumento = 0;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x38>
		}
		else
		{
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd2:	480b      	ldr	r0, [pc, #44]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x54>)
 8001cd4:	f000 ff76 	bl	8002bc4 <HAL_GPIO_TogglePin>
			Aumento++;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x50>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x50>)
 8001ce2:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_pin == DetectorCero_Pin)
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cea:	d102      	bne.n	8001cf2 <HAL_GPIO_EXTI_Callback+0x46>
	{
		Bandera_DetectorCero = 0;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000020d 	.word	0x2000020d
 8001d00:	48000400 	.word	0x48000400
 8001d04:	20000000 	.word	0x20000000

08001d08 <Espera>:

uint8_t Espera(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
	uint8_t Continua = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t Contador = htim2.Instance->CNT;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <Espera+0x40>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	603b      	str	r3, [r7, #0]

	do
	{
		if(Contador > 999)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d20:	d304      	bcc.n	8001d2c <Espera+0x24>
			{
				Continua++;
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	3301      	adds	r3, #1
 8001d26:	71fb      	strb	r3, [r7, #7]
				Contador = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	603b      	str	r3, [r7, #0]
			}
		Contador = htim2.Instance->CNT;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <Espera+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	603b      	str	r3, [r7, #0]
	}while(Continua < 4);
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d9ef      	bls.n	8001d1a <Espera+0x12>

	return true;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	20000258 	.word	0x20000258

08001d4c <app_CruceCero>:
void app_CruceCero(uint32_t Tiempo)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	volatile uint32_t Timer = htim2.Instance->CNT;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <app_CruceCero+0x50>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	60fb      	str	r3, [r7, #12]
	if(Bandera_DetectorCero == 0)
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <app_CruceCero+0x54>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d116      	bne.n	8001d92 <app_CruceCero+0x46>
	{
		if(Timer >= Tiempo)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d807      	bhi.n	8001d7c <app_CruceCero+0x30>
		{
			HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <app_CruceCero+0x58>)
 8001d74:	f000 ff0e 	bl	8002b94 <HAL_GPIO_WritePin>
			Timer = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

		}
			Espera();
 8001d7c:	f7ff ffc4 	bl	8001d08 <Espera>
			HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <app_CruceCero+0x58>)
 8001d88:	f000 ff04 	bl	8002b94 <HAL_GPIO_WritePin>
			Bandera_DetectorCero = 1;
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <app_CruceCero+0x54>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000258 	.word	0x20000258
 8001da0:	20000000 	.word	0x20000000
 8001da4:	48000800 	.word	0x48000800

08001da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dac:	f000 fbdb 	bl	8002566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db0:	f000 f81e 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db4:	f000 f94e 	bl	8002054 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001db8:	f000 f91c 	bl	8001ff4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001dbc:	f000 f8cc 	bl	8001f58 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8001dc0:	f000 f894 	bl	8001eec <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001dc4:	4808      	ldr	r0, [pc, #32]	; (8001de8 <main+0x40>)
 8001dc6:	f002 fa3b 	bl	8004240 <HAL_TIM_Base_Start_IT>
//		  PIDInputSet(Mesument);
//		  PIDCompute();
//		  Valor = PIDOutputGet();

		  //app_SeleccionEncoder();
		  app_SeleccionarTiempo();
 8001dca:	f7ff ff0d 	bl	8001be8 <app_SeleccionarTiempo>
		  app_Despliegue(Total, Catodo);
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <main+0x44>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fdaf 	bl	8001938 <app_Despliegue>
		  app_CruceCero(Total);
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <main+0x44>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ffb4 	bl	8001d4c <app_CruceCero>
		  app_SeleccionarTiempo();
 8001de4:	e7f1      	b.n	8001dca <main+0x22>
 8001de6:	bf00      	nop
 8001de8:	20000258 	.word	0x20000258
 8001dec:	20000208 	.word	0x20000208

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0a4      	sub	sp, #144	; 0x90
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dfa:	2244      	movs	r2, #68	; 0x44
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fac2 	bl	8005388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2234      	movs	r2, #52	; 0x34
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fab4 	bl	8005388 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001e20:	f001 f96e 	bl	8003100 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <SystemClock_Config+0xf8>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <SystemClock_Config+0xf8>)
 8001e2c:	f023 0318 	bic.w	r3, r3, #24
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e38:	f001 f980 	bl	800313c <HAL_PWREx_ControlVoltageScaling>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001e42:	f000 f9cd 	bl	80021e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e46:	2314      	movs	r3, #20
 8001e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e56:	2360      	movs	r3, #96	; 0x60
 8001e58:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001e68:	2314      	movs	r3, #20
 8001e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 f9b2 	bl	80031e8 <HAL_RCC_OscConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e8a:	f000 f9a9 	bl	80021e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8e:	230f      	movs	r3, #15
 8001e90:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e92:	2303      	movs	r3, #3
 8001e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 fe02 	bl	8003ab4 <HAL_RCC_ClockConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001eb6:	f000 f993 	bl	80021e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 8001eba:	f240 2302 	movw	r3, #514	; 0x202
 8001ebe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 fff6 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001ed6:	f000 f983 	bl	80021e0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001eda:	f002 f975 	bl	80041c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ede:	bf00      	nop
 8001ee0:	3790      	adds	r7, #144	; 0x90
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000

08001eec <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001ef2:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <MX_LPTIM1_Init+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f04:	2204      	movs	r2, #4
 8001f06:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f14:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 200;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f38:	22c8      	movs	r2, #200	; 0xc8
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f3e:	f000 fe73 	bl	8002c28 <HAL_LPTIM_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_LPTIM1_Init+0x60>
  {
    Error_Handler();
 8001f48:	f000 f94a 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000021c 	.word	0x2000021c
 8001f54:	40007c00 	.word	0x40007c00

08001f58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001f80:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa0:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001fa2:	f002 f921 	bl	80041e8 <HAL_TIM_Base_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001fac:	f000 f918 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001fbe:	f002 fa88 	bl	80044d2 <HAL_TIM_ConfigClockSource>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001fc8:	f000 f90a 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_TIM2_Init+0x98>)
 8001fda:	f002 fc63 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001fe4:	f000 f8fc 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000258 	.word	0x20000258

08001ff4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_USART2_UART_Init+0x58>)
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <MX_USART2_UART_Init+0x5c>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_USART2_UART_Init+0x58>)
 8002000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART2_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART2_UART_Init+0x58>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART2_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART2_UART_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART2_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART2_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART2_UART_Init+0x58>)
 8002038:	f002 fcb8 	bl	80049ac <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002042:	f000 f8cd 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002ac 	.word	0x200002ac
 8002050:	40004400 	.word	0x40004400

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	4b58      	ldr	r3, [pc, #352]	; (80021cc <MX_GPIO_Init+0x178>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a57      	ldr	r2, [pc, #348]	; (80021cc <MX_GPIO_Init+0x178>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b55      	ldr	r3, [pc, #340]	; (80021cc <MX_GPIO_Init+0x178>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <MX_GPIO_Init+0x178>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a51      	ldr	r2, [pc, #324]	; (80021cc <MX_GPIO_Init+0x178>)
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <MX_GPIO_Init+0x178>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <MX_GPIO_Init+0x178>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <MX_GPIO_Init+0x178>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <MX_GPIO_Init+0x178>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <MX_GPIO_Init+0x178>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	4a45      	ldr	r2, [pc, #276]	; (80021cc <MX_GPIO_Init+0x178>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020be:	4b43      	ldr	r3, [pc, #268]	; (80021cc <MX_GPIO_Init+0x178>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 80020ca:	2200      	movs	r2, #0
 80020cc:	f640 11d6 	movw	r1, #2518	; 0x9d6
 80020d0:	483f      	ldr	r0, [pc, #252]	; (80021d0 <MX_GPIO_Init+0x17c>)
 80020d2:	f000 fd5f 	bl	8002b94 <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin|Tiempo_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 80020d6:	2200      	movs	r2, #0
 80020d8:	f249 1131 	movw	r1, #37169	; 0x9131
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e0:	f000 fd58 	bl	8002b94 <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_3_Pin|LD4_Pin|Display_4_Pin|Display_1_Pin, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f24a 4120 	movw	r1, #42016	; 0xa420
 80020ea:	483a      	ldr	r0, [pc, #232]	; (80021d4 <MX_GPIO_Init+0x180>)
 80020ec:	f000 fd52 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin Tiempo_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 80020f0:	f640 13d6 	movw	r3, #2518	; 0x9d6
 80020f4:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin|Tiempo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4831      	ldr	r0, [pc, #196]	; (80021d0 <MX_GPIO_Init+0x17c>)
 800210a:	f000 fbd1 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 800210e:	f249 1331 	movw	r3, #37169	; 0x9131
 8002112:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212a:	f000 fbc1 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_3_Pin LD4_Pin Display_4_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Display_3_Pin|LD4_Pin|Display_4_Pin|Display_1_Pin;
 800212e:	f24a 4320 	movw	r3, #42016	; 0xa420
 8002132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4823      	ldr	r0, [pc, #140]	; (80021d4 <MX_GPIO_Init+0x180>)
 8002148:	f000 fbb2 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DetectorCero_Pin */
  GPIO_InitStruct.Pin = DetectorCero_Pin;
 800214c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_GPIO_Init+0x184>)
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DetectorCero_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	481b      	ldr	r0, [pc, #108]	; (80021d0 <MX_GPIO_Init+0x17c>)
 8002162:	f000 fba5 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 8002166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002170:	2301      	movs	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4619      	mov	r1, r3
 800217a:	4815      	ldr	r0, [pc, #84]	; (80021d0 <MX_GPIO_Init+0x17c>)
 800217c:	f000 fb98 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 8002180:	2340      	movs	r3, #64	; 0x40
 8002182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	4810      	ldr	r0, [pc, #64]	; (80021d4 <MX_GPIO_Init+0x180>)
 8002194:	f000 fb8c 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_encoder_Pin */
  GPIO_InitStruct.Pin = Boton_encoder_Pin;
 8002198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_GPIO_Init+0x188>)
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_encoder_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4809      	ldr	r0, [pc, #36]	; (80021d4 <MX_GPIO_Init+0x180>)
 80021ae:	f000 fb7f 	bl	80028b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	2017      	movs	r0, #23
 80021b8:	f000 fb43 	bl	8002842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021bc:	2017      	movs	r0, #23
 80021be:	f000 fb5c 	bl	800287a <HAL_NVIC_EnableIRQ>

}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000400 	.word	0x48000400
 80021d8:	10210000 	.word	0x10210000
 80021dc:	10110000 	.word	0x10110000

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_MspInit+0x44>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <HAL_MspInit+0x44>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6613      	str	r3, [r2, #96]	; 0x60
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <HAL_MspInit+0x44>)
 8002204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_MspInit+0x44>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <HAL_MspInit+0x44>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_MspInit+0x44>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_LPTIM_MspInit+0xb4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d143      	bne.n	80022e2 <HAL_LPTIM_MspInit+0xaa>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 8002260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_LPTIM_MspInit+0xb8>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration    
    PC0     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022a2:	2301      	movs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <HAL_LPTIM_MspInit+0xbc>)
 80022be:	f000 faf7 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4806      	ldr	r0, [pc, #24]	; (80022f8 <HAL_LPTIM_MspInit+0xc0>)
 80022de:	f000 fae7 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	; 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40007c00 	.word	0x40007c00
 80022f0:	40021000 	.word	0x40021000
 80022f4:	48000800 	.word	0x48000800
 80022f8:	48000400 	.word	0x48000400

080022fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230c:	d113      	bne.n	8002336 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_TIM_Base_MspInit+0x44>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HAL_TIM_Base_MspInit+0x44>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_TIM_Base_MspInit+0x44>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	201c      	movs	r0, #28
 800232c:	f000 fa89 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002330:	201c      	movs	r0, #28
 8002332:	f000 faa2 	bl	800287a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_UART_MspInit+0x7c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d128      	bne.n	80023b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_UART_MspInit+0x80>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_UART_MspInit+0x80>)
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_UART_MspInit+0x80>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_UART_MspInit+0x80>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_UART_MspInit+0x80>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_UART_MspInit+0x80>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002396:	230c      	movs	r3, #12
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a6:	2307      	movs	r3, #7
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b4:	f000 fa7c 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40004400 	.word	0x40004400
 80023c4:	40021000 	.word	0x40021000

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <HardFault_Handler+0x4>

080023dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <MemManage_Handler+0x4>

080023e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <UsageFault_Handler+0x4>

080023ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241c:	f000 f8f6 	bl	800260c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002428:	f44f 7080 	mov.w	r0, #256	; 0x100
 800242c:	f000 fbe4 	bl	8002bf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002430:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002434:	f000 fbe0 	bl	8002bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <TIM2_IRQHandler+0x10>)
 8002442:	f001 ff27 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000258 	.word	0x20000258

08002450 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <_sbrk+0x50>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x16>
		heap_end = &end;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <_sbrk+0x50>)
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <_sbrk+0x54>)
 8002464:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <_sbrk+0x50>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <_sbrk+0x50>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	466a      	mov	r2, sp
 8002476:	4293      	cmp	r3, r2
 8002478:	d907      	bls.n	800248a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800247a:	f002 ff5b 	bl	8005334 <__errno>
 800247e:	4602      	mov	r2, r0
 8002480:	230c      	movs	r3, #12
 8002482:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002488:	e006      	b.n	8002498 <_sbrk+0x48>
	}

	heap_end += incr;
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <_sbrk+0x50>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <_sbrk+0x50>)
 8002494:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000210 	.word	0x20000210
 80024a4:	20000338 	.word	0x20000338

080024a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <SystemInit+0x64>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <SystemInit+0x64>)
 80024b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <SystemInit+0x68>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <SystemInit+0x68>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <SystemInit+0x68>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <SystemInit+0x68>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <SystemInit+0x68>)
 80024d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80024dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <SystemInit+0x68>)
 80024e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <SystemInit+0x68>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <SystemInit+0x68>)
 80024ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <SystemInit+0x68>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <SystemInit+0x64>)
 80024fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	40021000 	.word	0x40021000

08002514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800254c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002518:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800251a:	e003      	b.n	8002524 <LoopCopyDataInit>

0800251c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800251e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002520:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002522:	3104      	adds	r1, #4

08002524 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002524:	480b      	ldr	r0, [pc, #44]	; (8002554 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002528:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800252a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800252c:	d3f6      	bcc.n	800251c <CopyDataInit>
	ldr	r2, =_sbss
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002530:	e002      	b.n	8002538 <LoopFillZerobss>

08002532 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002532:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002534:	f842 3b04 	str.w	r3, [r2], #4

08002538 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <LoopForever+0x16>)
	cmp	r2, r3
 800253a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800253c:	d3f9      	bcc.n	8002532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800253e:	f7ff ffb3 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002542:	f002 fefd 	bl	8005340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002546:	f7ff fc2f 	bl	8001da8 <main>

0800254a <LoopForever>:

LoopForever:
    b LoopForever
 800254a:	e7fe      	b.n	800254a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800254c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002550:	08009130 	.word	0x08009130
	ldr	r0, =_sdata
 8002554:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002558:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 800255c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002560:	20000338 	.word	0x20000338

08002564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC1_2_IRQHandler>

08002566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f000 f95b 	bl	800282c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002576:	2000      	movs	r0, #0
 8002578:	f000 f80e 	bl	8002598 <HAL_InitTick>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	e001      	b.n	800258c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002588:	f7ff fe32 	bl	80021f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800258c:	79fb      	ldrb	r3, [r7, #7]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_InitTick+0x68>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d022      	beq.n	80025f2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_InitTick+0x6c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_InitTick+0x68>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f968 	bl	8002896 <HAL_SYSTICK_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b0f      	cmp	r3, #15
 80025d0:	d809      	bhi.n	80025e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d2:	2200      	movs	r2, #0
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025da:	f000 f932 	bl	8002842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_InitTick+0x70>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	e007      	b.n	80025f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e004      	b.n	80025f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e001      	b.n	80025f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000000c 	.word	0x2000000c
 8002604:	20000004 	.word	0x20000004
 8002608:	20000008 	.word	0x20000008

0800260c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_IncTick+0x1c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_IncTick+0x20>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4413      	add	r3, r2
 800261a:	4a03      	ldr	r2, [pc, #12]	; (8002628 <HAL_IncTick+0x1c>)
 800261c:	6013      	str	r3, [r2, #0]
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	20000330 	.word	0x20000330
 800262c:	2000000c 	.word	0x2000000c

08002630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return uwTick;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_GetTick+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000330 	.word	0x20000330

08002648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff ffee 	bl	8002630 <HAL_GetTick>
 8002654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002660:	d004      	beq.n	800266c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_Delay+0x40>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800266c:	bf00      	nop
 800266e:	f7ff ffdf 	bl	8002630 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	429a      	cmp	r2, r3
 800267c:	d8f7      	bhi.n	800266e <HAL_Delay+0x26>
  {
  }
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000000c 	.word	0x2000000c

0800268c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <__NVIC_GetPriorityGrouping+0x18>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0307 	and.w	r3, r3, #7
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0b      	blt.n	800271a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4907      	ldr	r1, [pc, #28]	; (8002728 <__NVIC_EnableIRQ+0x38>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2001      	movs	r0, #1
 8002712:	fa00 f202 	lsl.w	r2, r0, r2
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000e100 	.word	0xe000e100

0800272c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	; (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <__NVIC_SetPriority+0x50>)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
         );
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f8:	d301      	bcc.n	80027fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00f      	b.n	800281e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <SysTick_Config+0x40>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002806:	210f      	movs	r1, #15
 8002808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800280c:	f7ff ff8e 	bl	800272c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <SysTick_Config+0x40>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <SysTick_Config+0x40>)
 8002818:	2207      	movs	r2, #7
 800281a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010

0800282c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff29 	bl	800268c <__NVIC_SetPriorityGrouping>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002854:	f7ff ff3e 	bl	80026d4 <__NVIC_GetPriorityGrouping>
 8002858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f7ff ff8e 	bl	8002780 <NVIC_EncodePriority>
 8002864:	4602      	mov	r2, r0
 8002866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff5d 	bl	800272c <__NVIC_SetPriority>
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff31 	bl	80026f0 <__NVIC_EnableIRQ>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ffa2 	bl	80027e8 <SysTick_Config>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e14e      	b.n	8002b5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8140 	beq.w	8002b58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d00b      	beq.n	80028f8 <HAL_GPIO_Init+0x48>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ec:	2b11      	cmp	r3, #17
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b12      	cmp	r3, #18
 80028f6:	d130      	bne.n	800295a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800292e:	2201      	movs	r2, #1
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0201 	and.w	r2, r3, #1
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0xea>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b12      	cmp	r3, #18
 8002998:	d123      	bne.n	80029e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 809a 	beq.w	8002b58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a24:	4b55      	ldr	r3, [pc, #340]	; (8002b7c <HAL_GPIO_Init+0x2cc>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	4a54      	ldr	r2, [pc, #336]	; (8002b7c <HAL_GPIO_Init+0x2cc>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a30:	4b52      	ldr	r3, [pc, #328]	; (8002b7c <HAL_GPIO_Init+0x2cc>)
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a3c:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a66:	d013      	beq.n	8002a90 <HAL_GPIO_Init+0x1e0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a46      	ldr	r2, [pc, #280]	; (8002b84 <HAL_GPIO_Init+0x2d4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00d      	beq.n	8002a8c <HAL_GPIO_Init+0x1dc>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a45      	ldr	r2, [pc, #276]	; (8002b88 <HAL_GPIO_Init+0x2d8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <HAL_GPIO_Init+0x1d8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a44      	ldr	r2, [pc, #272]	; (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_GPIO_Init+0x1d4>
 8002a80:	2303      	movs	r3, #3
 8002a82:	e006      	b.n	8002a92 <HAL_GPIO_Init+0x1e2>
 8002a84:	2307      	movs	r3, #7
 8002a86:	e004      	b.n	8002a92 <HAL_GPIO_Init+0x1e2>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e002      	b.n	8002a92 <HAL_GPIO_Init+0x1e2>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_GPIO_Init+0x1e2>
 8002a90:	2300      	movs	r3, #0
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	f002 0203 	and.w	r2, r2, #3
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	4093      	lsls	r3, r2
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aa2:	4937      	ldr	r1, [pc, #220]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ab0:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ad4:	4a2e      	ldr	r2, [pc, #184]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b52:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f47f aea9 	bne.w	80028c0 <HAL_GPIO_Init+0x10>
  }
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010000 	.word	0x40010000
 8002b84:	48000400 	.word	0x48000400
 8002b88:	48000800 	.word	0x48000800
 8002b8c:	48000c00 	.word	0x48000c00
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bdc:	887a      	ldrh	r2, [r7, #2]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002be2:	e002      	b.n	8002bea <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f848 	bl	8001cac <HAL_GPIO_EXTI_Callback>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0a7      	b.n	8002d8a <HAL_LPTIM_Init+0x162>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff faf2 	bl	8002238 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c74:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8002c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8f1 	bl	8002e6c <LPTIM_WaitForFlag>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d101      	bne.n	8002c94 <HAL_LPTIM_Init+0x6c>
  {
    return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e07a      	b.n	8002d8a <HAL_LPTIM_Init+0x162>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f919 	bl	8002ecc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8d7 	bl	8002e4e <HAL_LPTIM_GetState>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d101      	bne.n	8002caa <HAL_LPTIM_Init+0x82>
  {
    return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e06f      	b.n	8002d8a <HAL_LPTIM_Init+0x162>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d004      	beq.n	8002cc4 <HAL_LPTIM_Init+0x9c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc2:	d103      	bne.n	8002ccc <HAL_LPTIM_Init+0xa4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 031e 	bic.w	r3, r3, #30
 8002cca:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d005      	beq.n	8002ce4 <HAL_LPTIM_Init+0xbc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002cde:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_LPTIM_Init+0x16c>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002cf4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002cfa:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002d00:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002d06:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d004      	beq.n	8002d20 <HAL_LPTIM_Init+0xf8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d1e:	d107      	bne.n	8002d30 <HAL_LPTIM_Init+0x108>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00a      	beq.n	8002d52 <HAL_LPTIM_Init+0x12a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002d44:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002d4a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <HAL_LPTIM_Init+0x170>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <HAL_LPTIM_Init+0x14e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	621a      	str	r2, [r3, #32]
 8002d74:	e004      	b.n	8002d80 <HAL_LPTIM_Init+0x158>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d7e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	ff19f1f8 	.word	0xff19f1f8
 8002d98:	40007c00 	.word	0x40007c00

08002d9c <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0306 	bic.w	r3, r3, #6
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002e00:	2110      	movs	r1, #16
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f832 	bl	8002e6c <LPTIM_WaitForFlag>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d101      	bne.n	8002e12 <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e00c      	b.n	8002e2c <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0204 	orr.w	r2, r2, #4
 8002e20:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e5c:	b2db      	uxtb	r3, r3
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <LPTIM_WaitForFlag+0x58>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <LPTIM_WaitForFlag+0x5c>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	0b9b      	lsrs	r3, r3, #14
 8002e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	60bb      	str	r3, [r7, #8]
    do
    {
      count--;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <LPTIM_WaitForFlag+0x34>
      {
        result = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
    }
    while((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d002      	beq.n	8002eb6 <LPTIM_WaitForFlag+0x4a>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ec      	bne.n	8002e90 <LPTIM_WaitForFlag+0x24>

    return result;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	d1b71759 	.word	0xd1b71759

08002ecc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed8:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a85      	ldr	r2, [pc, #532]	; (80030f4 <LPTIM_Disable+0x228>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <LPTIM_Disable+0x20>
 8002ee4:	4a84      	ldr	r2, [pc, #528]	; (80030f8 <LPTIM_Disable+0x22c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <LPTIM_Disable+0x2e>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8002eea:	e00d      	b.n	8002f08 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002eec:	4b83      	ldr	r3, [pc, #524]	; (80030fc <LPTIM_Disable+0x230>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8002ef8:	e006      	b.n	8002f08 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002efa:	4b80      	ldr	r3, [pc, #512]	; (80030fc <LPTIM_Disable+0x230>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8002f06:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6d      	ldr	r2, [pc, #436]	; (80030f4 <LPTIM_Disable+0x228>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <LPTIM_Disable+0x7e>
 8002f42:	4a6d      	ldr	r2, [pc, #436]	; (80030f8 <LPTIM_Disable+0x22c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00d      	beq.n	8002f64 <LPTIM_Disable+0x98>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8002f48:	e019      	b.n	8002f7e <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <LPTIM_Disable+0x230>)
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	4a6b      	ldr	r2, [pc, #428]	; (80030fc <LPTIM_Disable+0x230>)
 8002f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f54:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8002f56:	4b69      	ldr	r3, [pc, #420]	; (80030fc <LPTIM_Disable+0x230>)
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	4a68      	ldr	r2, [pc, #416]	; (80030fc <LPTIM_Disable+0x230>)
 8002f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f60:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 8002f62:	e00c      	b.n	8002f7e <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM2_FORCE_RESET();
 8002f64:	4b65      	ldr	r3, [pc, #404]	; (80030fc <LPTIM_Disable+0x230>)
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	4a64      	ldr	r2, [pc, #400]	; (80030fc <LPTIM_Disable+0x230>)
 8002f6a:	f043 0320 	orr.w	r3, r3, #32
 8002f6e:	63d3      	str	r3, [r2, #60]	; 0x3c
       __HAL_RCC_LPTIM2_RELEASE_RESET();
 8002f70:	4b62      	ldr	r3, [pc, #392]	; (80030fc <LPTIM_Disable+0x230>)
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	4a61      	ldr	r2, [pc, #388]	; (80030fc <LPTIM_Disable+0x230>)
 8002f76:	f023 0320 	bic.w	r3, r3, #32
 8002f7a:	63d3      	str	r3, [r2, #60]	; 0x3c
       break;
 8002f7c:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <LPTIM_Disable+0xc6>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <LPTIM_Disable+0xc6>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8096 	beq.w	80030be <LPTIM_Disable+0x1f2>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a57      	ldr	r2, [pc, #348]	; (80030f4 <LPTIM_Disable+0x228>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <LPTIM_Disable+0xd8>
 8002f9c:	4a56      	ldr	r2, [pc, #344]	; (80030f8 <LPTIM_Disable+0x22c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <LPTIM_Disable+0xea>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8002fa2:	e011      	b.n	8002fc8 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <LPTIM_Disable+0x230>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	4a54      	ldr	r2, [pc, #336]	; (80030fc <LPTIM_Disable+0x230>)
 8002fac:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8002fb4:	e008      	b.n	8002fc8 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8002fb6:	4b51      	ldr	r3, [pc, #324]	; (80030fc <LPTIM_Disable+0x230>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	4a4f      	ldr	r2, [pc, #316]	; (80030fc <LPTIM_Disable+0x230>)
 8002fbe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002fc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8002fc6:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <LPTIM_Disable+0x138>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002fe6:	2108      	movs	r1, #8
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ff3f 	bl	8002e6c <LPTIM_WaitForFlag>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d103      	bne.n	8002ffc <LPTIM_Disable+0x130>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2208      	movs	r2, #8
 8003002:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01a      	beq.n	8003040 <LPTIM_Disable+0x174>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003022:	2110      	movs	r1, #16
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff21 	bl	8002e6c <LPTIM_WaitForFlag>
 800302a:	4603      	mov	r3, r0
 800302c:	2b03      	cmp	r3, #3
 800302e:	d103      	bne.n	8003038 <LPTIM_Disable+0x16c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2203      	movs	r2, #3
 8003034:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2210      	movs	r2, #16
 800303e:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <LPTIM_Disable+0x1b4>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800305e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff02 	bl	8002e6c <LPTIM_WaitForFlag>
 8003068:	4603      	mov	r3, r0
 800306a:	2b03      	cmp	r3, #3
 800306c:	d103      	bne.n	8003076 <LPTIM_Disable+0x1aa>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307e:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <LPTIM_Disable+0x228>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <LPTIM_Disable+0x1c6>
 800308a:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <LPTIM_Disable+0x22c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00b      	beq.n	80030a8 <LPTIM_Disable+0x1dc>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003090:	e016      	b.n	80030c0 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <LPTIM_Disable+0x230>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800309c:	4917      	ldr	r1, [pc, #92]	; (80030fc <LPTIM_Disable+0x230>)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 80030a6:	e00b      	b.n	80030c0 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80030a8:	4b14      	ldr	r3, [pc, #80]	; (80030fc <LPTIM_Disable+0x230>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030b2:	4912      	ldr	r1, [pc, #72]	; (80030fc <LPTIM_Disable+0x230>)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 80030bc:	e000      	b.n	80030c0 <LPTIM_Disable+0x1f4>
    }
  }
 80030be:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80030e8:	b662      	cpsie	i

  __enable_irq();
}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40007c00 	.word	0x40007c00
 80030f8:	40009400 	.word	0x40009400
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40007000 	.word	0x40007000

08003120 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_PWREx_GetVoltageRange+0x18>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40007000 	.word	0x40007000

0800313c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314a:	d130      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d038      	beq.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003168:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2232      	movs	r2, #50	; 0x32
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9b      	lsrs	r3, r3, #18
 800317c:	3301      	adds	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003180:	e002      	b.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b01      	subs	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d102      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f2      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d110      	bne.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e00f      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	d007      	beq.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031c4:	4a05      	ldr	r2, [pc, #20]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40007000 	.word	0x40007000
 80031e0:	20000004 	.word	0x20000004
 80031e4:	431bde83 	.word	0x431bde83

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f000 bc56 	b.w	8003aa8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fc:	4ba1      	ldr	r3, [pc, #644]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003206:	4b9f      	ldr	r3, [pc, #636]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80e6 	beq.w	80033ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_RCC_OscConfig+0x4c>
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	f040 808d 	bne.w	8003346 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b01      	cmp	r3, #1
 8003230:	f040 8089 	bne.w	8003346 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003234:	4b93      	ldr	r3, [pc, #588]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <HAL_RCC_OscConfig+0x66>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f000 bc2d 	b.w	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003252:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_RCC_OscConfig+0x80>
 800325e:	4b89      	ldr	r3, [pc, #548]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003266:	e005      	b.n	8003274 <HAL_RCC_OscConfig+0x8c>
 8003268:	4b86      	ldr	r3, [pc, #536]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003274:	4293      	cmp	r3, r2
 8003276:	d224      	bcs.n	80032c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fdbd 	bl	8003dfc <RCC_SetFlashLatencyFromMSIRange>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f000 bc0d 	b.w	8003aa8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800328e:	4b7d      	ldr	r3, [pc, #500]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7c      	ldr	r2, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b7a      	ldr	r3, [pc, #488]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	4977      	ldr	r1, [pc, #476]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ac:	4b75      	ldr	r3, [pc, #468]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	4972      	ldr	r1, [pc, #456]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
 80032c0:	e025      	b.n	800330e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c2:	4b70      	ldr	r3, [pc, #448]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6f      	ldr	r2, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	496a      	ldr	r1, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e0:	4b68      	ldr	r3, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4965      	ldr	r1, [pc, #404]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fd7c 	bl	8003dfc <RCC_SetFlashLatencyFromMSIRange>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e3cc      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800330e:	f000 fcb3 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003312:	4601      	mov	r1, r0
 8003314:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a5a      	ldr	r2, [pc, #360]	; (8003488 <HAL_RCC_OscConfig+0x2a0>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	fa21 f303 	lsr.w	r3, r1, r3
 800332a:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCC_OscConfig+0x2a4>)
 800332c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800332e:	4b58      	ldr	r3, [pc, #352]	; (8003490 <HAL_RCC_OscConfig+0x2a8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f930 	bl	8002598 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
 800333a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d052      	beq.n	80033e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	e3b0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d032      	beq.n	80033b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800334e:	4b4d      	ldr	r3, [pc, #308]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a4c      	ldr	r2, [pc, #304]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800335a:	f7ff f969 	bl	8002630 <HAL_GetTick>
 800335e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003362:	f7ff f965 	bl	8002630 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e399      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003374:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003380:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3f      	ldr	r2, [pc, #252]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003386:	f043 0308 	orr.w	r3, r3, #8
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	493a      	ldr	r1, [pc, #232]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	4935      	ldr	r1, [pc, #212]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
 80033b2:	e01a      	b.n	80033ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033b4:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a32      	ldr	r2, [pc, #200]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033c0:	f7ff f936 	bl	8002630 <HAL_GetTick>
 80033c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033c8:	f7ff f932 	bl	8002630 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e366      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1e0>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d073      	beq.n	80034de <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_OscConfig+0x220>
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d10e      	bne.n	8003420 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d10b      	bne.n	8003420 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d063      	beq.n	80034dc <HAL_RCC_OscConfig+0x2f4>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d15f      	bne.n	80034dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e343      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x250>
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0x28c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x274>
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a0c      	ldr	r2, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0x28c>
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a05      	ldr	r2, [pc, #20]	; (8003484 <HAL_RCC_OscConfig+0x29c>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7ff f8d8 	bl	8002630 <HAL_GetTick>
 8003480:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003482:	e010      	b.n	80034a6 <HAL_RCC_OscConfig+0x2be>
 8003484:	40021000 	.word	0x40021000
 8003488:	08008e20 	.word	0x08008e20
 800348c:	20000004 	.word	0x20000004
 8003490:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7ff f8cc 	bl	8002630 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e300      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x2ac>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7ff f8bc 	bl	8002630 <HAL_GetTick>
 80034b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7ff f8b8 	bl	8002630 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e2ec      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ce:	4b96      	ldr	r3, [pc, #600]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x2d4>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d060      	beq.n	80035ac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_OscConfig+0x314>
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d119      	bne.n	800352a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d116      	bne.n	800352a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	4b8a      	ldr	r3, [pc, #552]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_OscConfig+0x32c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e2c9      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b84      	ldr	r3, [pc, #528]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	4981      	ldr	r1, [pc, #516]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003528:	e040      	b.n	80035ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d023      	beq.n	800357a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003532:	4b7d      	ldr	r3, [pc, #500]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7c      	ldr	r2, [pc, #496]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7ff f877 	bl	8002630 <HAL_GetTick>
 8003542:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003546:	f7ff f873 	bl	8002630 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e2a7      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003558:	4b73      	ldr	r3, [pc, #460]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	4b70      	ldr	r3, [pc, #448]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	496d      	ldr	r1, [pc, #436]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	e018      	b.n	80035ac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357a:	4b6b      	ldr	r3, [pc, #428]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6a      	ldr	r2, [pc, #424]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7ff f853 	bl	8002630 <HAL_GetTick>
 800358a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358e:	f7ff f84f 	bl	8002630 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e283      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035a0:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d07f      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05f      	beq.n	8003680 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80035c0:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d037      	beq.n	8003646 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e25c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	4a4a      	ldr	r2, [pc, #296]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003608:	f7ff f812 	bl	8002630 <HAL_GetTick>
 800360c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003610:	f7ff f80e 	bl	8002630 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b11      	cmp	r3, #17
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e242      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ef      	bne.n	8003610 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003630:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003636:	f023 0210 	bic.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	493a      	ldr	r1, [pc, #232]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364c:	4a36      	ldr	r2, [pc, #216]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fe ffeb 	bl	8002630 <HAL_GetTick>
 800365a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7fe ffe7 	bl	8002630 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b11      	cmp	r3, #17
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e21b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003670:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ef      	beq.n	800365e <HAL_RCC_OscConfig+0x476>
 800367e:	e01b      	b.n	80036b8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003680:	4b29      	ldr	r3, [pc, #164]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003686:	4a28      	ldr	r2, [pc, #160]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe ffce 	bl	8002630 <HAL_GetTick>
 8003694:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003698:	f7fe ffca 	bl	8002630 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b11      	cmp	r3, #17
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e1fe      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80036ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ef      	bne.n	8003698 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80c1 	beq.w	8003848 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10e      	bne.n	80036f6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	4a12      	ldr	r2, [pc, #72]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80036de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6593      	str	r3, [r2, #88]	; 0x58
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x540>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_RCC_OscConfig+0x544>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11c      	bne.n	800373c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_OscConfig+0x544>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_RCC_OscConfig+0x544>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370e:	f7fe ff8f 	bl	8002630 <HAL_GetTick>
 8003712:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003714:	e00c      	b.n	8003730 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003716:	f7fe ff8b 	bl	8002630 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d905      	bls.n	8003730 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1bf      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003730:	4bb1      	ldr	r3, [pc, #708]	; (80039f8 <HAL_RCC_OscConfig+0x810>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ec      	beq.n	8003716 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003748:	4bac      	ldr	r3, [pc, #688]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	49a8      	ldr	r1, [pc, #672]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800376e:	4ba3      	ldr	r3, [pc, #652]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	4aa1      	ldr	r2, [pc, #644]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800377e:	4b9f      	ldr	r3, [pc, #636]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	4a9d      	ldr	r2, [pc, #628]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378e:	e018      	b.n	80037c2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003790:	4b9a      	ldr	r3, [pc, #616]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	4a99      	ldr	r2, [pc, #612]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a0:	e00f      	b.n	80037c2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037a2:	4b96      	ldr	r3, [pc, #600]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	4a94      	ldr	r2, [pc, #592]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037b2:	4b92      	ldr	r3, [pc, #584]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	4a90      	ldr	r2, [pc, #576]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80037ba:	f023 0304 	bic.w	r3, r3, #4
 80037be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fe ff31 	bl	8002630 <HAL_GetTick>
 80037ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fe ff2d 	bl	8002630 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e15f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e8:	4b84      	ldr	r3, [pc, #528]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ed      	beq.n	80037d2 <HAL_RCC_OscConfig+0x5ea>
 80037f6:	e01d      	b.n	8003834 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fe ff1a 	bl	8002630 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe ff16 	bl	8002630 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e148      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003816:	4b79      	ldr	r3, [pc, #484]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ed      	bne.n	8003800 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	4a74      	ldr	r2, [pc, #464]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800382c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383c:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4a6e      	ldr	r2, [pc, #440]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003846:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03c      	beq.n	80038ce <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01c      	beq.n	8003896 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800385c:	4b67      	ldr	r3, [pc, #412]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800385e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003862:	4a66      	ldr	r2, [pc, #408]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe fee0 	bl	8002630 <HAL_GetTick>
 8003870:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003874:	f7fe fedc 	bl	8002630 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e110      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003886:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ef      	beq.n	8003874 <HAL_RCC_OscConfig+0x68c>
 8003894:	e01b      	b.n	80038ce <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800389c:	4a57      	ldr	r2, [pc, #348]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe fec3 	bl	8002630 <HAL_GetTick>
 80038aa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ae:	f7fe febf 	bl	8002630 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0f3      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038c0:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80038c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ef      	bne.n	80038ae <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80e7 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2b02      	cmp	r3, #2
 80038de:	f040 80b7 	bne.w	8003a50 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038e2:	4b46      	ldr	r3, [pc, #280]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d124      	bne.n	8003940 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	3b01      	subs	r3, #1
 8003902:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d11b      	bne.n	8003940 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d113      	bne.n	8003940 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	3b01      	subs	r3, #1
 8003926:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d109      	bne.n	8003940 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	3b01      	subs	r3, #1
 800393a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d061      	beq.n	8003a04 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d056      	beq.n	80039f4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2c      	ldr	r2, [pc, #176]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800394c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003950:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003952:	f7fe fe6d 	bl	8002630 <HAL_GetTick>
 8003956:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395a:	f7fe fe69 	bl	8002630 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e09d      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <HAL_RCC_OscConfig+0x818>)
 800397e:	4013      	ands	r3, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003988:	3a01      	subs	r2, #1
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	4311      	orrs	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003992:	0212      	lsls	r2, r2, #8
 8003994:	4311      	orrs	r1, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800399a:	0852      	lsrs	r2, r2, #1
 800399c:	3a01      	subs	r2, #1
 800399e:	0552      	lsls	r2, r2, #21
 80039a0:	4311      	orrs	r1, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039a6:	0852      	lsrs	r2, r2, #1
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0652      	lsls	r2, r2, #25
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4913      	ldr	r1, [pc, #76]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a10      	ldr	r2, [pc, #64]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80039ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039cc:	f7fe fe30 	bl	8002630 <HAL_GetTick>
 80039d0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fe fe2c 	bl	8002630 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e060      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_OscConfig+0x814>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039f2:	e058      	b.n	8003aa6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e057      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
 80039f8:	40007000 	.word	0x40007000
 80039fc:	40021000 	.word	0x40021000
 8003a00:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a04:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d14a      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a10:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a28:	f7fe fe02 	bl	8002630 <HAL_GetTick>
 8003a2c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe fdfe 	bl	8002630 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e032      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x848>
 8003a4e:	e02a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d025      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a60:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fe fdd9 	bl	8002630 <HAL_GetTick>
 8003a7e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fe fdd5 	bl	8002630 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e009      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_OscConfig+0x8c8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x89a>
 8003aa0:	e001      	b.n	8003aa6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0c8      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4961      	ldr	r1, [pc, #388]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b5f      	ldr	r3, [pc, #380]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b0      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d04c      	beq.n	8003b9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0c:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d121      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e09e      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b24:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d115      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e092      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e086      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4c:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e07e      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 0203 	bic.w	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	493f      	ldr	r1, [pc, #252]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6e:	f7fe fd5f 	bl	8002630 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b76:	f7fe fd5b 	bl	8002630 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e066      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 020c 	and.w	r2, r3, #12
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d1eb      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	492c      	ldr	r1, [pc, #176]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d210      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	4924      	ldr	r1, [pc, #144]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e036      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4918      	ldr	r1, [pc, #96]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4910      	ldr	r1, [pc, #64]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c2a:	f000 f825 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003c2e:	4601      	mov	r1, r0
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	fa21 f303 	lsr.w	r3, r1, r3
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fca2 	bl	8002598 <HAL_InitTick>
 8003c54:	4603      	mov	r3, r0
 8003c56:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c58:	7afb      	ldrb	r3, [r7, #11]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40022000 	.word	0x40022000
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08008e20 	.word	0x08008e20
 8003c70:	20000004 	.word	0x20000004
 8003c74:	20000008 	.word	0x20000008

08003c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c86:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c90:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x34>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d121      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d11e      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cb8:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cc8:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10d      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cf0:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e004      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cfc:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d133      	bne.n	8003d6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d002      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0xa4>
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0xaa>
 8003d1a:	e005      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d1e:	617b      	str	r3, [r7, #20]
      break;
 8003d20:	e005      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d22:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d24:	617b      	str	r3, [r7, #20]
      break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	617b      	str	r3, [r7, #20]
      break;
 8003d2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	3301      	adds	r3, #1
 8003d3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	fb02 f203 	mul.w	r2, r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x104>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0e5b      	lsrs	r3, r3, #25
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3724      	adds	r7, #36	; 0x24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	08008e38 	.word	0x08008e38
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	007a1200 	.word	0x007a1200

08003d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000004 	.word	0x20000004

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4601      	mov	r1, r0
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08008e30 	.word	0x08008e30

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd4:	f7ff ffda 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd8:	4601      	mov	r1, r0
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0adb      	lsrs	r3, r3, #11
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	08008e30 	.word	0x08008e30

08003dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e14:	f7ff f984 	bl	8003120 <HAL_PWREx_GetVoltageRange>
 8003e18:	6178      	str	r0, [r7, #20]
 8003e1a:	e014      	b.n	8003e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e34:	f7ff f974 	bl	8003120 <HAL_PWREx_GetVoltageRange>
 8003e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4c:	d10b      	bne.n	8003e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d919      	bls.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2ba0      	cmp	r3, #160	; 0xa0
 8003e58:	d902      	bls.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	e013      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e60:	2301      	movs	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	e010      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d902      	bls.n	8003e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	e00a      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d102      	bne.n	8003e7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e78:	2302      	movs	r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	e004      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d101      	bne.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e84:	2301      	movs	r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 0207 	bic.w	r2, r3, #7
 8003e90:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40022000 	.word	0x40022000

08003ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 809e 	beq.w	8004016 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ede:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6593      	str	r3, [r2, #88]	; 0x58
 8003f00:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f10:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a39      	ldr	r2, [pc, #228]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe fb88 	bl	8002630 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f22:	e009      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f24:	f7fe fb84 	bl	8002630 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d902      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	74fb      	strb	r3, [r7, #19]
        break;
 8003f36:	e005      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f38:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ef      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d15a      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01e      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d019      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f92:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fb44 	bl	8002630 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fe fb40 	bl	8002630 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d902      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	74fb      	strb	r3, [r7, #19]
            break;
 8003fc2:	e006      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ec      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fee:	e009      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	74bb      	strb	r3, [r7, #18]
 8003ff4:	e006      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004004:	7c7b      	ldrb	r3, [r7, #17]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d105      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400a:	4b6e      	ldr	r3, [pc, #440]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	4a6d      	ldr	r2, [pc, #436]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f023 0203 	bic.w	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4964      	ldr	r1, [pc, #400]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004044:	4b5f      	ldr	r3, [pc, #380]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f023 020c 	bic.w	r2, r3, #12
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	495c      	ldr	r1, [pc, #368]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004066:	4b57      	ldr	r3, [pc, #348]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4953      	ldr	r1, [pc, #332]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004088:	4b4e      	ldr	r3, [pc, #312]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	494b      	ldr	r1, [pc, #300]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040aa:	4b46      	ldr	r3, [pc, #280]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4942      	ldr	r1, [pc, #264]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040cc:	4b3d      	ldr	r3, [pc, #244]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	493a      	ldr	r1, [pc, #232]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ee:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	4931      	ldr	r1, [pc, #196]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004110:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	4929      	ldr	r1, [pc, #164]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	4920      	ldr	r1, [pc, #128]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	4918      	ldr	r1, [pc, #96]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	490a      	ldr	r1, [pc, #40]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000

080041c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041d2:	f043 0304 	orr.w	r3, r3, #4
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000

080041e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e01d      	b.n	8004236 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe f874 	bl	80022fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 fa3e 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_TIM_Base_Start_IT+0x50>)
 8004260:	4013      	ands	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d00b      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x42>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d007      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	00010007 	.word	0x00010007

08004294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d122      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d11b      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0202 	mvn.w	r2, #2
 80042c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f9c8 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f9ba 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f9cb 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0204 	mvn.w	r2, #4
 8004314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f99e 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f990 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f9a1 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0208 	mvn.w	r2, #8
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2204      	movs	r2, #4
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f974 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f966 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f977 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0210 	mvn.w	r2, #16
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2208      	movs	r2, #8
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f94a 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f93c 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f94d 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0201 	mvn.w	r2, #1
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f916 	bl	8004644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 faa0 	bl	8004984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d10e      	bne.n	8004472 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d107      	bne.n	8004472 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa93 	bl	8004998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d10e      	bne.n	800449e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d107      	bne.n	800449e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8fb 	bl	8004694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d10e      	bne.n	80044ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d107      	bne.n	80044ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0220 	mvn.w	r2, #32
 80044c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fa53 	bl	8004970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_ConfigClockSource+0x18>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0a8      	b.n	800463c <HAL_TIM_ConfigClockSource+0x16a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004508:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800450c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004514:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d067      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x124>
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d80b      	bhi.n	8004542 <HAL_TIM_ConfigClockSource+0x70>
 800452a:	2b10      	cmp	r3, #16
 800452c:	d073      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x144>
 800452e:	2b10      	cmp	r3, #16
 8004530:	d802      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x66>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d06f      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004536:	e078      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004538:	2b20      	cmp	r3, #32
 800453a:	d06c      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x144>
 800453c:	2b30      	cmp	r3, #48	; 0x30
 800453e:	d06a      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004540:	e073      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004542:	2b70      	cmp	r3, #112	; 0x70
 8004544:	d00d      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x90>
 8004546:	2b70      	cmp	r3, #112	; 0x70
 8004548:	d804      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x82>
 800454a:	2b50      	cmp	r3, #80	; 0x50
 800454c:	d033      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0xe4>
 800454e:	2b60      	cmp	r3, #96	; 0x60
 8004550:	d041      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004552:	e06a      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004558:	d066      	beq.n	8004628 <HAL_TIM_ConfigClockSource+0x156>
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	d017      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004560:	e063      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6899      	ldr	r1, [r3, #8]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f000 f977 	bl	8004864 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004584:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	609a      	str	r2, [r3, #8]
      break;
 800458e:	e04c      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6899      	ldr	r1, [r3, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f000 f960 	bl	8004864 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b2:	609a      	str	r2, [r3, #8]
      break;
 80045b4:	e039      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f000 f8d4 	bl	8004770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2150      	movs	r1, #80	; 0x50
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f92d 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 80045d4:	e029      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f000 f8f3 	bl	80047ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2160      	movs	r1, #96	; 0x60
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f91d 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 80045f4:	e019      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	461a      	mov	r2, r3
 8004604:	f000 f8b4 	bl	8004770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2140      	movs	r1, #64	; 0x40
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f90d 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 8004614:	e009      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f000 f904 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 8004626:	e000      	b.n	800462a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004628:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a2a      	ldr	r2, [pc, #168]	; (8004764 <TIM_Base_SetConfig+0xbc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x20>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a21      	ldr	r2, [pc, #132]	; (8004764 <TIM_Base_SetConfig+0xbc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x52>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x52>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <TIM_Base_SetConfig+0xc0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x52>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	; (800476c <TIM_Base_SetConfig+0xc4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <TIM_Base_SetConfig+0xbc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_Base_SetConfig+0xa0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <TIM_Base_SetConfig+0xc0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_Base_SetConfig+0xa0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0a      	ldr	r2, [pc, #40]	; (800476c <TIM_Base_SetConfig+0xc4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	615a      	str	r2, [r3, #20]
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40014000 	.word	0x40014000
 800476c:	40014400 	.word	0x40014400

08004770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f023 0201 	bic.w	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800479a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f023 030a 	bic.w	r3, r3, #10
 80047ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0210 	bic.w	r2, r3, #16
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	031b      	lsls	r3, r3, #12
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800480a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	f043 0307 	orr.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	431a      	orrs	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e04f      	b.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a21      	ldr	r2, [pc, #132]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d004      	beq.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10c      	bne.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40014000 	.word	0x40014000

08004970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e040      	b.n	8004a40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd fcb8 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f82c 	bl	8004a48 <UART_SetConfig>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e022      	b.n	8004a40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fb34 	bl	8005070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fbbb 	bl	80051b4 <UART_CheckIdleState>
 8004a3e:	4603      	mov	r3, r0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a4c:	b08a      	sub	sp, #40	; 0x28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4bbc      	ldr	r3, [pc, #752]	; (8004d70 <UART_SetConfig+0x328>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a86:	430b      	orrs	r3, r1
 8004a88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4ab2      	ldr	r2, [pc, #712]	; (8004d74 <UART_SetConfig+0x32c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4aa9      	ldr	r2, [pc, #676]	; (8004d78 <UART_SetConfig+0x330>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d126      	bne.n	8004b26 <UART_SetConfig+0xde>
 8004ad8:	4ba8      	ldr	r3, [pc, #672]	; (8004d7c <UART_SetConfig+0x334>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d81a      	bhi.n	8004b1c <UART_SetConfig+0xd4>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0xa4>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b15 	.word	0x08004b15
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e0ab      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b04:	2302      	movs	r3, #2
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0a:	e0a7      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b12:	e0a3      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b14:	2308      	movs	r3, #8
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1a:	e09f      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b22:	bf00      	nop
 8004b24:	e09a      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a95      	ldr	r2, [pc, #596]	; (8004d80 <UART_SetConfig+0x338>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d138      	bne.n	8004ba2 <UART_SetConfig+0x15a>
 8004b30:	4b92      	ldr	r3, [pc, #584]	; (8004d7c <UART_SetConfig+0x334>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d82c      	bhi.n	8004b98 <UART_SetConfig+0x150>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0xfc>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004b99 	.word	0x08004b99
 8004b50:	08004b99 	.word	0x08004b99
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004b99 	.word	0x08004b99
 8004b5c:	08004b99 	.word	0x08004b99
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004b91 	.word	0x08004b91
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e06d      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e069      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e065      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	e061      	b.n	8004c5c <UART_SetConfig+0x214>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9e:	bf00      	nop
 8004ba0:	e05c      	b.n	8004c5c <UART_SetConfig+0x214>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a77      	ldr	r2, [pc, #476]	; (8004d84 <UART_SetConfig+0x33c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d125      	bne.n	8004bf8 <UART_SetConfig+0x1b0>
 8004bac:	4b73      	ldr	r3, [pc, #460]	; (8004d7c <UART_SetConfig+0x334>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d011      	beq.n	8004bde <UART_SetConfig+0x196>
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d802      	bhi.n	8004bc4 <UART_SetConfig+0x17c>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <UART_SetConfig+0x186>
 8004bc2:	e014      	b.n	8004bee <UART_SetConfig+0x1a6>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d006      	beq.n	8004bd6 <UART_SetConfig+0x18e>
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d00c      	beq.n	8004be6 <UART_SetConfig+0x19e>
 8004bcc:	e00f      	b.n	8004bee <UART_SetConfig+0x1a6>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd4:	e042      	b.n	8004c5c <UART_SetConfig+0x214>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bdc:	e03e      	b.n	8004c5c <UART_SetConfig+0x214>
 8004bde:	2304      	movs	r3, #4
 8004be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be4:	e03a      	b.n	8004c5c <UART_SetConfig+0x214>
 8004be6:	2308      	movs	r3, #8
 8004be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bec:	e036      	b.n	8004c5c <UART_SetConfig+0x214>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf4:	bf00      	nop
 8004bf6:	e031      	b.n	8004c5c <UART_SetConfig+0x214>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5d      	ldr	r2, [pc, #372]	; (8004d74 <UART_SetConfig+0x32c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d129      	bne.n	8004c56 <UART_SetConfig+0x20e>
 8004c02:	4b5e      	ldr	r3, [pc, #376]	; (8004d7c <UART_SetConfig+0x334>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c10:	d014      	beq.n	8004c3c <UART_SetConfig+0x1f4>
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d802      	bhi.n	8004c1e <UART_SetConfig+0x1d6>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <UART_SetConfig+0x1e4>
 8004c1c:	e016      	b.n	8004c4c <UART_SetConfig+0x204>
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	d007      	beq.n	8004c34 <UART_SetConfig+0x1ec>
 8004c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c28:	d00c      	beq.n	8004c44 <UART_SetConfig+0x1fc>
 8004c2a:	e00f      	b.n	8004c4c <UART_SetConfig+0x204>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e013      	b.n	8004c5c <UART_SetConfig+0x214>
 8004c34:	2302      	movs	r3, #2
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e00f      	b.n	8004c5c <UART_SetConfig+0x214>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e00b      	b.n	8004c5c <UART_SetConfig+0x214>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e007      	b.n	8004c5c <UART_SetConfig+0x214>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <UART_SetConfig+0x214>
 8004c56:	2310      	movs	r3, #16
 8004c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a44      	ldr	r2, [pc, #272]	; (8004d74 <UART_SetConfig+0x32c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	f040 80fb 	bne.w	8004e5e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d824      	bhi.n	8004cba <UART_SetConfig+0x272>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x230>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004cbb 	.word	0x08004cbb
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cbb 	.word	0x08004cbb
 8004c88:	08004cab 	.word	0x08004cab
 8004c8c:	08004cbb 	.word	0x08004cbb
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004cbb 	.word	0x08004cbb
 8004c98:	08004cb3 	.word	0x08004cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7ff f882 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004ca0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ca2:	e00d      	b.n	8004cc0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004ca4:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <UART_SetConfig+0x340>)
 8004ca6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ca8:	e00a      	b.n	8004cc0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004caa:	f7fe ffe5 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8004cae:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cb0:	e006      	b.n	8004cc0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cb8:	e002      	b.n	8004cc0 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	76fb      	strb	r3, [r7, #27]
        break;
 8004cbe:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 81c8 	beq.w	8005058 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d305      	bcc.n	8004ce4 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d902      	bls.n	8004cea <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	76fb      	strb	r3, [r7, #27]
 8004ce8:	e1b6      	b.n	8005058 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8004cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	f200 80a2 	bhi.w	8004e38 <UART_SetConfig+0x3f0>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0x2b4>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004e39 	.word	0x08004e39
 8004d04:	08004d8d 	.word	0x08004d8d
 8004d08:	08004e39 	.word	0x08004e39
 8004d0c:	08004dc1 	.word	0x08004dc1
 8004d10:	08004e39 	.word	0x08004e39
 8004d14:	08004e39 	.word	0x08004e39
 8004d18:	08004e39 	.word	0x08004e39
 8004d1c:	08004e0f 	.word	0x08004e0f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7ff f840 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004d24:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	f04f 0400 	mov.w	r4, #0
 8004d36:	0214      	lsls	r4, r2, #8
 8004d38:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d3c:	020b      	lsls	r3, r1, #8
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6852      	ldr	r2, [r2, #4]
 8004d42:	0852      	lsrs	r2, r2, #1
 8004d44:	4611      	mov	r1, r2
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	eb13 0b01 	adds.w	fp, r3, r1
 8004d4e:	eb44 0c02 	adc.w	ip, r4, r2
 8004d52:	4658      	mov	r0, fp
 8004d54:	4661      	mov	r1, ip
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb ff91 	bl	8000c88 <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d6c:	e067      	b.n	8004e3e <UART_SetConfig+0x3f6>
 8004d6e:	bf00      	nop
 8004d70:	efff69f3 	.word	0xefff69f3
 8004d74:	40008000 	.word	0x40008000
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40004800 	.word	0x40004800
 8004d88:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	f04f 0400 	mov.w	r4, #0
 8004d96:	49ae      	ldr	r1, [pc, #696]	; (8005050 <UART_SetConfig+0x608>)
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	eb13 0b01 	adds.w	fp, r3, r1
 8004da0:	eb44 0c02 	adc.w	ip, r4, r2
 8004da4:	4658      	mov	r0, fp
 8004da6:	4661      	mov	r1, ip
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f04f 0400 	mov.w	r4, #0
 8004db0:	461a      	mov	r2, r3
 8004db2:	4623      	mov	r3, r4
 8004db4:	f7fb ff68 	bl	8000c88 <__aeabi_uldivmod>
 8004db8:	4603      	mov	r3, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004dbe:	e03e      	b.n	8004e3e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004dc0:	f7fe ff5a 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8004dc4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	f04f 0400 	mov.w	r4, #0
 8004dd6:	0214      	lsls	r4, r2, #8
 8004dd8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004ddc:	020b      	lsls	r3, r1, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6852      	ldr	r2, [r2, #4]
 8004de2:	0852      	lsrs	r2, r2, #1
 8004de4:	4611      	mov	r1, r2
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	eb13 0b01 	adds.w	fp, r3, r1
 8004dee:	eb44 0c02 	adc.w	ip, r4, r2
 8004df2:	4658      	mov	r0, fp
 8004df4:	4661      	mov	r1, ip
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f04f 0400 	mov.w	r4, #0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4623      	mov	r3, r4
 8004e02:	f7fb ff41 	bl	8000c88 <__aeabi_uldivmod>
 8004e06:	4603      	mov	r3, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e0c:	e017      	b.n	8004e3e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004e1c:	f144 0100 	adc.w	r1, r4, #0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f04f 0400 	mov.w	r4, #0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	f7fb ff2c 	bl	8000c88 <__aeabi_uldivmod>
 8004e30:	4603      	mov	r3, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e36:	e002      	b.n	8004e3e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	76fb      	strb	r3, [r7, #27]
            break;
 8004e3c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e44:	d308      	bcc.n	8004e58 <UART_SetConfig+0x410>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4c:	d204      	bcs.n	8004e58 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	e0ff      	b.n	8005058 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	76fb      	strb	r3, [r7, #27]
 8004e5c:	e0fc      	b.n	8005058 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e66:	f040 8083 	bne.w	8004f70 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8004e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d85e      	bhi.n	8004f30 <UART_SetConfig+0x4e8>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x430>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ebd 	.word	0x08004ebd
 8004e80:	08004edd 	.word	0x08004edd
 8004e84:	08004f31 	.word	0x08004f31
 8004e88:	08004ef9 	.word	0x08004ef9
 8004e8c:	08004f31 	.word	0x08004f31
 8004e90:	08004f31 	.word	0x08004f31
 8004e94:	08004f31 	.word	0x08004f31
 8004e98:	08004f19 	.word	0x08004f19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fe ff82 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004ea0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	005a      	lsls	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eba:	e03c      	b.n	8004f36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fe ff88 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	005a      	lsls	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	441a      	add	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eda:	e02c      	b.n	8004f36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004ee6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6852      	ldr	r2, [r2, #4]
 8004eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ef6:	e01e      	b.n	8004f36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef8:	f7fe febe 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8004efc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	005a      	lsls	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f16:	e00e      	b.n	8004f36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f2e:	e002      	b.n	8004f36 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	76fb      	strb	r3, [r7, #27]
        break;
 8004f34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b0f      	cmp	r3, #15
 8004f3a:	d916      	bls.n	8004f6a <UART_SetConfig+0x522>
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d212      	bcs.n	8004f6a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f023 030f 	bic.w	r3, r3, #15
 8004f4c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	89fb      	ldrh	r3, [r7, #14]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	89fa      	ldrh	r2, [r7, #14]
 8004f66:	60da      	str	r2, [r3, #12]
 8004f68:	e076      	b.n	8005058 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	76fb      	strb	r3, [r7, #27]
 8004f6e:	e073      	b.n	8005058 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8004f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d85c      	bhi.n	8005032 <UART_SetConfig+0x5ea>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x538>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fc3 	.word	0x08004fc3
 8004f88:	08004fe1 	.word	0x08004fe1
 8004f8c:	08005033 	.word	0x08005033
 8004f90:	08004ffd 	.word	0x08004ffd
 8004f94:	08005033 	.word	0x08005033
 8004f98:	08005033 	.word	0x08005033
 8004f9c:	08005033 	.word	0x08005033
 8004fa0:	0800501b 	.word	0x0800501b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7fe fefe 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085a      	lsrs	r2, r3, #1
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	441a      	add	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fc0:	e03a      	b.n	8005038 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc2:	f7fe ff05 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8004fc6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085a      	lsrs	r2, r3, #1
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fde:	e02b      	b.n	8005038 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004fea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6852      	ldr	r2, [r2, #4]
 8004ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ffa:	e01d      	b.n	8005038 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffc:	f7fe fe3c 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8005000:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	085a      	lsrs	r2, r3, #1
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	441a      	add	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	b29b      	uxth	r3, r3
 8005016:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005018:	e00e      	b.n	8005038 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	b29b      	uxth	r3, r3
 800502e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005030:	e002      	b.n	8005038 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	76fb      	strb	r3, [r7, #27]
        break;
 8005036:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b0f      	cmp	r3, #15
 800503c:	d90a      	bls.n	8005054 <UART_SetConfig+0x60c>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d206      	bcs.n	8005054 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e003      	b.n	8005058 <UART_SetConfig+0x610>
 8005050:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005064:	7efb      	ldrb	r3, [r7, #27]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3728      	adds	r7, #40	; 0x28
 800506a:	46bd      	mov	sp, r7
 800506c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01a      	beq.n	8005186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516e:	d10a      	bne.n	8005186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051c2:	f7fd fa35 	bl	8002630 <HAL_GetTick>
 80051c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d10e      	bne.n	80051f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f82a 	bl	800523e <UART_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e020      	b.n	8005236 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d10e      	bne.n	8005220 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005202:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f814 	bl	800523e <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e00a      	b.n	8005236 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4613      	mov	r3, r2
 800524c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524e:	e05d      	b.n	800530c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005256:	d059      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005258:	f7fd f9ea 	bl	8002630 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	d302      	bcc.n	800526e <UART_WaitOnFlagUntilTimeout+0x30>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d11b      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800527c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e042      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d02b      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c2:	d123      	bne.n	800530c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052cc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052dc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e00f      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	d092      	beq.n	8005250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <__errno>:
 8005334:	4b01      	ldr	r3, [pc, #4]	; (800533c <__errno+0x8>)
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000010 	.word	0x20000010

08005340 <__libc_init_array>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4e0d      	ldr	r6, [pc, #52]	; (8005378 <__libc_init_array+0x38>)
 8005344:	4c0d      	ldr	r4, [pc, #52]	; (800537c <__libc_init_array+0x3c>)
 8005346:	1ba4      	subs	r4, r4, r6
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	2500      	movs	r5, #0
 800534c:	42a5      	cmp	r5, r4
 800534e:	d109      	bne.n	8005364 <__libc_init_array+0x24>
 8005350:	4e0b      	ldr	r6, [pc, #44]	; (8005380 <__libc_init_array+0x40>)
 8005352:	4c0c      	ldr	r4, [pc, #48]	; (8005384 <__libc_init_array+0x44>)
 8005354:	f003 fd56 	bl	8008e04 <_init>
 8005358:	1ba4      	subs	r4, r4, r6
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	2500      	movs	r5, #0
 800535e:	42a5      	cmp	r5, r4
 8005360:	d105      	bne.n	800536e <__libc_init_array+0x2e>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005368:	4798      	blx	r3
 800536a:	3501      	adds	r5, #1
 800536c:	e7ee      	b.n	800534c <__libc_init_array+0xc>
 800536e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005372:	4798      	blx	r3
 8005374:	3501      	adds	r5, #1
 8005376:	e7f2      	b.n	800535e <__libc_init_array+0x1e>
 8005378:	08009128 	.word	0x08009128
 800537c:	08009128 	.word	0x08009128
 8005380:	08009128 	.word	0x08009128
 8005384:	0800912c 	.word	0x0800912c

08005388 <memset>:
 8005388:	4402      	add	r2, r0
 800538a:	4603      	mov	r3, r0
 800538c:	4293      	cmp	r3, r2
 800538e:	d100      	bne.n	8005392 <memset+0xa>
 8005390:	4770      	bx	lr
 8005392:	f803 1b01 	strb.w	r1, [r3], #1
 8005396:	e7f9      	b.n	800538c <memset+0x4>

08005398 <__cvt>:
 8005398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	ec55 4b10 	vmov	r4, r5, d0
 80053a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80053a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	460e      	mov	r6, r1
 80053aa:	4691      	mov	r9, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	bfb8      	it	lt
 80053b0:	4622      	movlt	r2, r4
 80053b2:	462b      	mov	r3, r5
 80053b4:	f027 0720 	bic.w	r7, r7, #32
 80053b8:	bfbb      	ittet	lt
 80053ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053be:	461d      	movlt	r5, r3
 80053c0:	2300      	movge	r3, #0
 80053c2:	232d      	movlt	r3, #45	; 0x2d
 80053c4:	bfb8      	it	lt
 80053c6:	4614      	movlt	r4, r2
 80053c8:	2f46      	cmp	r7, #70	; 0x46
 80053ca:	700b      	strb	r3, [r1, #0]
 80053cc:	d004      	beq.n	80053d8 <__cvt+0x40>
 80053ce:	2f45      	cmp	r7, #69	; 0x45
 80053d0:	d100      	bne.n	80053d4 <__cvt+0x3c>
 80053d2:	3601      	adds	r6, #1
 80053d4:	2102      	movs	r1, #2
 80053d6:	e000      	b.n	80053da <__cvt+0x42>
 80053d8:	2103      	movs	r1, #3
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	ab02      	add	r3, sp, #8
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4632      	mov	r2, r6
 80053e4:	4653      	mov	r3, sl
 80053e6:	ec45 4b10 	vmov	d0, r4, r5
 80053ea:	f001 fd75 	bl	8006ed8 <_dtoa_r>
 80053ee:	2f47      	cmp	r7, #71	; 0x47
 80053f0:	4680      	mov	r8, r0
 80053f2:	d102      	bne.n	80053fa <__cvt+0x62>
 80053f4:	f019 0f01 	tst.w	r9, #1
 80053f8:	d026      	beq.n	8005448 <__cvt+0xb0>
 80053fa:	2f46      	cmp	r7, #70	; 0x46
 80053fc:	eb08 0906 	add.w	r9, r8, r6
 8005400:	d111      	bne.n	8005426 <__cvt+0x8e>
 8005402:	f898 3000 	ldrb.w	r3, [r8]
 8005406:	2b30      	cmp	r3, #48	; 0x30
 8005408:	d10a      	bne.n	8005420 <__cvt+0x88>
 800540a:	2200      	movs	r2, #0
 800540c:	2300      	movs	r3, #0
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	f7fb fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 8005416:	b918      	cbnz	r0, 8005420 <__cvt+0x88>
 8005418:	f1c6 0601 	rsb	r6, r6, #1
 800541c:	f8ca 6000 	str.w	r6, [sl]
 8005420:	f8da 3000 	ldr.w	r3, [sl]
 8005424:	4499      	add	r9, r3
 8005426:	2200      	movs	r2, #0
 8005428:	2300      	movs	r3, #0
 800542a:	4620      	mov	r0, r4
 800542c:	4629      	mov	r1, r5
 800542e:	f7fb fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005432:	b938      	cbnz	r0, 8005444 <__cvt+0xac>
 8005434:	2230      	movs	r2, #48	; 0x30
 8005436:	9b03      	ldr	r3, [sp, #12]
 8005438:	454b      	cmp	r3, r9
 800543a:	d205      	bcs.n	8005448 <__cvt+0xb0>
 800543c:	1c59      	adds	r1, r3, #1
 800543e:	9103      	str	r1, [sp, #12]
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	e7f8      	b.n	8005436 <__cvt+0x9e>
 8005444:	f8cd 900c 	str.w	r9, [sp, #12]
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800544c:	eba3 0308 	sub.w	r3, r3, r8
 8005450:	4640      	mov	r0, r8
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	b004      	add	sp, #16
 8005456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800545a <__exponent>:
 800545a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800545c:	2900      	cmp	r1, #0
 800545e:	4604      	mov	r4, r0
 8005460:	bfba      	itte	lt
 8005462:	4249      	neglt	r1, r1
 8005464:	232d      	movlt	r3, #45	; 0x2d
 8005466:	232b      	movge	r3, #43	; 0x2b
 8005468:	2909      	cmp	r1, #9
 800546a:	f804 2b02 	strb.w	r2, [r4], #2
 800546e:	7043      	strb	r3, [r0, #1]
 8005470:	dd20      	ble.n	80054b4 <__exponent+0x5a>
 8005472:	f10d 0307 	add.w	r3, sp, #7
 8005476:	461f      	mov	r7, r3
 8005478:	260a      	movs	r6, #10
 800547a:	fb91 f5f6 	sdiv	r5, r1, r6
 800547e:	fb06 1115 	mls	r1, r6, r5, r1
 8005482:	3130      	adds	r1, #48	; 0x30
 8005484:	2d09      	cmp	r5, #9
 8005486:	f803 1c01 	strb.w	r1, [r3, #-1]
 800548a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800548e:	4629      	mov	r1, r5
 8005490:	dc09      	bgt.n	80054a6 <__exponent+0x4c>
 8005492:	3130      	adds	r1, #48	; 0x30
 8005494:	3b02      	subs	r3, #2
 8005496:	f802 1c01 	strb.w	r1, [r2, #-1]
 800549a:	42bb      	cmp	r3, r7
 800549c:	4622      	mov	r2, r4
 800549e:	d304      	bcc.n	80054aa <__exponent+0x50>
 80054a0:	1a10      	subs	r0, r2, r0
 80054a2:	b003      	add	sp, #12
 80054a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a6:	4613      	mov	r3, r2
 80054a8:	e7e7      	b.n	800547a <__exponent+0x20>
 80054aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ae:	f804 2b01 	strb.w	r2, [r4], #1
 80054b2:	e7f2      	b.n	800549a <__exponent+0x40>
 80054b4:	2330      	movs	r3, #48	; 0x30
 80054b6:	4419      	add	r1, r3
 80054b8:	7083      	strb	r3, [r0, #2]
 80054ba:	1d02      	adds	r2, r0, #4
 80054bc:	70c1      	strb	r1, [r0, #3]
 80054be:	e7ef      	b.n	80054a0 <__exponent+0x46>

080054c0 <_printf_float>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	b08d      	sub	sp, #52	; 0x34
 80054c6:	460c      	mov	r4, r1
 80054c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80054cc:	4616      	mov	r6, r2
 80054ce:	461f      	mov	r7, r3
 80054d0:	4605      	mov	r5, r0
 80054d2:	f002 fde5 	bl	80080a0 <_localeconv_r>
 80054d6:	6803      	ldr	r3, [r0, #0]
 80054d8:	9304      	str	r3, [sp, #16]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fa fe78 	bl	80001d0 <strlen>
 80054e0:	2300      	movs	r3, #0
 80054e2:	930a      	str	r3, [sp, #40]	; 0x28
 80054e4:	f8d8 3000 	ldr.w	r3, [r8]
 80054e8:	9005      	str	r0, [sp, #20]
 80054ea:	3307      	adds	r3, #7
 80054ec:	f023 0307 	bic.w	r3, r3, #7
 80054f0:	f103 0208 	add.w	r2, r3, #8
 80054f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054f8:	f8d4 b000 	ldr.w	fp, [r4]
 80054fc:	f8c8 2000 	str.w	r2, [r8]
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005508:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800550c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005510:	9307      	str	r3, [sp, #28]
 8005512:	f8cd 8018 	str.w	r8, [sp, #24]
 8005516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800551a:	4ba7      	ldr	r3, [pc, #668]	; (80057b8 <_printf_float+0x2f8>)
 800551c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005520:	f7fb fb04 	bl	8000b2c <__aeabi_dcmpun>
 8005524:	bb70      	cbnz	r0, 8005584 <_printf_float+0xc4>
 8005526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800552a:	4ba3      	ldr	r3, [pc, #652]	; (80057b8 <_printf_float+0x2f8>)
 800552c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005530:	f7fb fade 	bl	8000af0 <__aeabi_dcmple>
 8005534:	bb30      	cbnz	r0, 8005584 <_printf_float+0xc4>
 8005536:	2200      	movs	r2, #0
 8005538:	2300      	movs	r3, #0
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fb facd 	bl	8000adc <__aeabi_dcmplt>
 8005542:	b110      	cbz	r0, 800554a <_printf_float+0x8a>
 8005544:	232d      	movs	r3, #45	; 0x2d
 8005546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554a:	4a9c      	ldr	r2, [pc, #624]	; (80057bc <_printf_float+0x2fc>)
 800554c:	4b9c      	ldr	r3, [pc, #624]	; (80057c0 <_printf_float+0x300>)
 800554e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005552:	bf8c      	ite	hi
 8005554:	4690      	movhi	r8, r2
 8005556:	4698      	movls	r8, r3
 8005558:	2303      	movs	r3, #3
 800555a:	f02b 0204 	bic.w	r2, fp, #4
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	6022      	str	r2, [r4, #0]
 8005562:	f04f 0900 	mov.w	r9, #0
 8005566:	9700      	str	r7, [sp, #0]
 8005568:	4633      	mov	r3, r6
 800556a:	aa0b      	add	r2, sp, #44	; 0x2c
 800556c:	4621      	mov	r1, r4
 800556e:	4628      	mov	r0, r5
 8005570:	f000 f9e6 	bl	8005940 <_printf_common>
 8005574:	3001      	adds	r0, #1
 8005576:	f040 808d 	bne.w	8005694 <_printf_float+0x1d4>
 800557a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800557e:	b00d      	add	sp, #52	; 0x34
 8005580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005584:	4642      	mov	r2, r8
 8005586:	464b      	mov	r3, r9
 8005588:	4640      	mov	r0, r8
 800558a:	4649      	mov	r1, r9
 800558c:	f7fb face 	bl	8000b2c <__aeabi_dcmpun>
 8005590:	b110      	cbz	r0, 8005598 <_printf_float+0xd8>
 8005592:	4a8c      	ldr	r2, [pc, #560]	; (80057c4 <_printf_float+0x304>)
 8005594:	4b8c      	ldr	r3, [pc, #560]	; (80057c8 <_printf_float+0x308>)
 8005596:	e7da      	b.n	800554e <_printf_float+0x8e>
 8005598:	6861      	ldr	r1, [r4, #4]
 800559a:	1c4b      	adds	r3, r1, #1
 800559c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80055a0:	a80a      	add	r0, sp, #40	; 0x28
 80055a2:	d13e      	bne.n	8005622 <_printf_float+0x162>
 80055a4:	2306      	movs	r3, #6
 80055a6:	6063      	str	r3, [r4, #4]
 80055a8:	2300      	movs	r3, #0
 80055aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80055ae:	ab09      	add	r3, sp, #36	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	ec49 8b10 	vmov	d0, r8, r9
 80055b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055ba:	6022      	str	r2, [r4, #0]
 80055bc:	f8cd a004 	str.w	sl, [sp, #4]
 80055c0:	6861      	ldr	r1, [r4, #4]
 80055c2:	4628      	mov	r0, r5
 80055c4:	f7ff fee8 	bl	8005398 <__cvt>
 80055c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80055cc:	2b47      	cmp	r3, #71	; 0x47
 80055ce:	4680      	mov	r8, r0
 80055d0:	d109      	bne.n	80055e6 <_printf_float+0x126>
 80055d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d4:	1cd8      	adds	r0, r3, #3
 80055d6:	db02      	blt.n	80055de <_printf_float+0x11e>
 80055d8:	6862      	ldr	r2, [r4, #4]
 80055da:	4293      	cmp	r3, r2
 80055dc:	dd47      	ble.n	800566e <_printf_float+0x1ae>
 80055de:	f1aa 0a02 	sub.w	sl, sl, #2
 80055e2:	fa5f fa8a 	uxtb.w	sl, sl
 80055e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80055ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ec:	d824      	bhi.n	8005638 <_printf_float+0x178>
 80055ee:	3901      	subs	r1, #1
 80055f0:	4652      	mov	r2, sl
 80055f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055f6:	9109      	str	r1, [sp, #36]	; 0x24
 80055f8:	f7ff ff2f 	bl	800545a <__exponent>
 80055fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055fe:	1813      	adds	r3, r2, r0
 8005600:	2a01      	cmp	r2, #1
 8005602:	4681      	mov	r9, r0
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	dc02      	bgt.n	800560e <_printf_float+0x14e>
 8005608:	6822      	ldr	r2, [r4, #0]
 800560a:	07d1      	lsls	r1, r2, #31
 800560c:	d501      	bpl.n	8005612 <_printf_float+0x152>
 800560e:	3301      	adds	r3, #1
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0a5      	beq.n	8005566 <_printf_float+0xa6>
 800561a:	232d      	movs	r3, #45	; 0x2d
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005620:	e7a1      	b.n	8005566 <_printf_float+0xa6>
 8005622:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005626:	f000 8177 	beq.w	8005918 <_printf_float+0x458>
 800562a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800562e:	d1bb      	bne.n	80055a8 <_printf_float+0xe8>
 8005630:	2900      	cmp	r1, #0
 8005632:	d1b9      	bne.n	80055a8 <_printf_float+0xe8>
 8005634:	2301      	movs	r3, #1
 8005636:	e7b6      	b.n	80055a6 <_printf_float+0xe6>
 8005638:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800563c:	d119      	bne.n	8005672 <_printf_float+0x1b2>
 800563e:	2900      	cmp	r1, #0
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	dd0c      	ble.n	800565e <_printf_float+0x19e>
 8005644:	6121      	str	r1, [r4, #16]
 8005646:	b913      	cbnz	r3, 800564e <_printf_float+0x18e>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	07d2      	lsls	r2, r2, #31
 800564c:	d502      	bpl.n	8005654 <_printf_float+0x194>
 800564e:	3301      	adds	r3, #1
 8005650:	440b      	add	r3, r1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005656:	65a3      	str	r3, [r4, #88]	; 0x58
 8005658:	f04f 0900 	mov.w	r9, #0
 800565c:	e7d9      	b.n	8005612 <_printf_float+0x152>
 800565e:	b913      	cbnz	r3, 8005666 <_printf_float+0x1a6>
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	07d0      	lsls	r0, r2, #31
 8005664:	d501      	bpl.n	800566a <_printf_float+0x1aa>
 8005666:	3302      	adds	r3, #2
 8005668:	e7f3      	b.n	8005652 <_printf_float+0x192>
 800566a:	2301      	movs	r3, #1
 800566c:	e7f1      	b.n	8005652 <_printf_float+0x192>
 800566e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005672:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005676:	4293      	cmp	r3, r2
 8005678:	db05      	blt.n	8005686 <_printf_float+0x1c6>
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	07d1      	lsls	r1, r2, #31
 8005680:	d5e8      	bpl.n	8005654 <_printf_float+0x194>
 8005682:	3301      	adds	r3, #1
 8005684:	e7e5      	b.n	8005652 <_printf_float+0x192>
 8005686:	2b00      	cmp	r3, #0
 8005688:	bfd4      	ite	le
 800568a:	f1c3 0302 	rsble	r3, r3, #2
 800568e:	2301      	movgt	r3, #1
 8005690:	4413      	add	r3, r2
 8005692:	e7de      	b.n	8005652 <_printf_float+0x192>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	055a      	lsls	r2, r3, #21
 8005698:	d407      	bmi.n	80056aa <_printf_float+0x1ea>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	4642      	mov	r2, r8
 800569e:	4631      	mov	r1, r6
 80056a0:	4628      	mov	r0, r5
 80056a2:	47b8      	blx	r7
 80056a4:	3001      	adds	r0, #1
 80056a6:	d12b      	bne.n	8005700 <_printf_float+0x240>
 80056a8:	e767      	b.n	800557a <_printf_float+0xba>
 80056aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80056ae:	f240 80dc 	bls.w	800586a <_printf_float+0x3aa>
 80056b2:	2200      	movs	r2, #0
 80056b4:	2300      	movs	r3, #0
 80056b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056ba:	f7fb fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d033      	beq.n	800572a <_printf_float+0x26a>
 80056c2:	2301      	movs	r3, #1
 80056c4:	4a41      	ldr	r2, [pc, #260]	; (80057cc <_printf_float+0x30c>)
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f af54 	beq.w	800557a <_printf_float+0xba>
 80056d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d6:	429a      	cmp	r2, r3
 80056d8:	db02      	blt.n	80056e0 <_printf_float+0x220>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	07d8      	lsls	r0, r3, #31
 80056de:	d50f      	bpl.n	8005700 <_printf_float+0x240>
 80056e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e4:	4631      	mov	r1, r6
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b8      	blx	r7
 80056ea:	3001      	adds	r0, #1
 80056ec:	f43f af45 	beq.w	800557a <_printf_float+0xba>
 80056f0:	f04f 0800 	mov.w	r8, #0
 80056f4:	f104 091a 	add.w	r9, r4, #26
 80056f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fa:	3b01      	subs	r3, #1
 80056fc:	4543      	cmp	r3, r8
 80056fe:	dc09      	bgt.n	8005714 <_printf_float+0x254>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	079b      	lsls	r3, r3, #30
 8005704:	f100 8103 	bmi.w	800590e <_printf_float+0x44e>
 8005708:	68e0      	ldr	r0, [r4, #12]
 800570a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800570c:	4298      	cmp	r0, r3
 800570e:	bfb8      	it	lt
 8005710:	4618      	movlt	r0, r3
 8005712:	e734      	b.n	800557e <_printf_float+0xbe>
 8005714:	2301      	movs	r3, #1
 8005716:	464a      	mov	r2, r9
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	47b8      	blx	r7
 800571e:	3001      	adds	r0, #1
 8005720:	f43f af2b 	beq.w	800557a <_printf_float+0xba>
 8005724:	f108 0801 	add.w	r8, r8, #1
 8005728:	e7e6      	b.n	80056f8 <_printf_float+0x238>
 800572a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	dc2b      	bgt.n	8005788 <_printf_float+0x2c8>
 8005730:	2301      	movs	r3, #1
 8005732:	4a26      	ldr	r2, [pc, #152]	; (80057cc <_printf_float+0x30c>)
 8005734:	4631      	mov	r1, r6
 8005736:	4628      	mov	r0, r5
 8005738:	47b8      	blx	r7
 800573a:	3001      	adds	r0, #1
 800573c:	f43f af1d 	beq.w	800557a <_printf_float+0xba>
 8005740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005742:	b923      	cbnz	r3, 800574e <_printf_float+0x28e>
 8005744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005746:	b913      	cbnz	r3, 800574e <_printf_float+0x28e>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	07d9      	lsls	r1, r3, #31
 800574c:	d5d8      	bpl.n	8005700 <_printf_float+0x240>
 800574e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f af0e 	beq.w	800557a <_printf_float+0xba>
 800575e:	f04f 0900 	mov.w	r9, #0
 8005762:	f104 0a1a 	add.w	sl, r4, #26
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	425b      	negs	r3, r3
 800576a:	454b      	cmp	r3, r9
 800576c:	dc01      	bgt.n	8005772 <_printf_float+0x2b2>
 800576e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005770:	e794      	b.n	800569c <_printf_float+0x1dc>
 8005772:	2301      	movs	r3, #1
 8005774:	4652      	mov	r2, sl
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	f43f aefc 	beq.w	800557a <_printf_float+0xba>
 8005782:	f109 0901 	add.w	r9, r9, #1
 8005786:	e7ee      	b.n	8005766 <_printf_float+0x2a6>
 8005788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800578a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800578c:	429a      	cmp	r2, r3
 800578e:	bfa8      	it	ge
 8005790:	461a      	movge	r2, r3
 8005792:	2a00      	cmp	r2, #0
 8005794:	4691      	mov	r9, r2
 8005796:	dd07      	ble.n	80057a8 <_printf_float+0x2e8>
 8005798:	4613      	mov	r3, r2
 800579a:	4631      	mov	r1, r6
 800579c:	4642      	mov	r2, r8
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	f43f aee9 	beq.w	800557a <_printf_float+0xba>
 80057a8:	f104 031a 	add.w	r3, r4, #26
 80057ac:	f04f 0b00 	mov.w	fp, #0
 80057b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057b4:	9306      	str	r3, [sp, #24]
 80057b6:	e015      	b.n	80057e4 <_printf_float+0x324>
 80057b8:	7fefffff 	.word	0x7fefffff
 80057bc:	08008e6c 	.word	0x08008e6c
 80057c0:	08008e68 	.word	0x08008e68
 80057c4:	08008e74 	.word	0x08008e74
 80057c8:	08008e70 	.word	0x08008e70
 80057cc:	08008e78 	.word	0x08008e78
 80057d0:	2301      	movs	r3, #1
 80057d2:	9a06      	ldr	r2, [sp, #24]
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f aecd 	beq.w	800557a <_printf_float+0xba>
 80057e0:	f10b 0b01 	add.w	fp, fp, #1
 80057e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80057e8:	ebaa 0309 	sub.w	r3, sl, r9
 80057ec:	455b      	cmp	r3, fp
 80057ee:	dcef      	bgt.n	80057d0 <_printf_float+0x310>
 80057f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f4:	429a      	cmp	r2, r3
 80057f6:	44d0      	add	r8, sl
 80057f8:	db15      	blt.n	8005826 <_printf_float+0x366>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	07da      	lsls	r2, r3, #31
 80057fe:	d412      	bmi.n	8005826 <_printf_float+0x366>
 8005800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005804:	eba3 020a 	sub.w	r2, r3, sl
 8005808:	eba3 0a01 	sub.w	sl, r3, r1
 800580c:	4592      	cmp	sl, r2
 800580e:	bfa8      	it	ge
 8005810:	4692      	movge	sl, r2
 8005812:	f1ba 0f00 	cmp.w	sl, #0
 8005816:	dc0e      	bgt.n	8005836 <_printf_float+0x376>
 8005818:	f04f 0800 	mov.w	r8, #0
 800581c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005820:	f104 091a 	add.w	r9, r4, #26
 8005824:	e019      	b.n	800585a <_printf_float+0x39a>
 8005826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800582a:	4631      	mov	r1, r6
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	d1e5      	bne.n	8005800 <_printf_float+0x340>
 8005834:	e6a1      	b.n	800557a <_printf_float+0xba>
 8005836:	4653      	mov	r3, sl
 8005838:	4642      	mov	r2, r8
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	d1e9      	bne.n	8005818 <_printf_float+0x358>
 8005844:	e699      	b.n	800557a <_printf_float+0xba>
 8005846:	2301      	movs	r3, #1
 8005848:	464a      	mov	r2, r9
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f ae92 	beq.w	800557a <_printf_float+0xba>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	eba3 030a 	sub.w	r3, r3, sl
 8005864:	4543      	cmp	r3, r8
 8005866:	dcee      	bgt.n	8005846 <_printf_float+0x386>
 8005868:	e74a      	b.n	8005700 <_printf_float+0x240>
 800586a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800586c:	2a01      	cmp	r2, #1
 800586e:	dc01      	bgt.n	8005874 <_printf_float+0x3b4>
 8005870:	07db      	lsls	r3, r3, #31
 8005872:	d53a      	bpl.n	80058ea <_printf_float+0x42a>
 8005874:	2301      	movs	r3, #1
 8005876:	4642      	mov	r2, r8
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	f43f ae7b 	beq.w	800557a <_printf_float+0xba>
 8005884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f108 0801 	add.w	r8, r8, #1
 8005894:	f43f ae71 	beq.w	800557a <_printf_float+0xba>
 8005898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589a:	2200      	movs	r2, #0
 800589c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80058a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058a4:	2300      	movs	r3, #0
 80058a6:	f7fb f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 80058aa:	b9c8      	cbnz	r0, 80058e0 <_printf_float+0x420>
 80058ac:	4653      	mov	r3, sl
 80058ae:	4642      	mov	r2, r8
 80058b0:	4631      	mov	r1, r6
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b8      	blx	r7
 80058b6:	3001      	adds	r0, #1
 80058b8:	d10e      	bne.n	80058d8 <_printf_float+0x418>
 80058ba:	e65e      	b.n	800557a <_printf_float+0xba>
 80058bc:	2301      	movs	r3, #1
 80058be:	4652      	mov	r2, sl
 80058c0:	4631      	mov	r1, r6
 80058c2:	4628      	mov	r0, r5
 80058c4:	47b8      	blx	r7
 80058c6:	3001      	adds	r0, #1
 80058c8:	f43f ae57 	beq.w	800557a <_printf_float+0xba>
 80058cc:	f108 0801 	add.w	r8, r8, #1
 80058d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d2:	3b01      	subs	r3, #1
 80058d4:	4543      	cmp	r3, r8
 80058d6:	dcf1      	bgt.n	80058bc <_printf_float+0x3fc>
 80058d8:	464b      	mov	r3, r9
 80058da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058de:	e6de      	b.n	800569e <_printf_float+0x1de>
 80058e0:	f04f 0800 	mov.w	r8, #0
 80058e4:	f104 0a1a 	add.w	sl, r4, #26
 80058e8:	e7f2      	b.n	80058d0 <_printf_float+0x410>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e7df      	b.n	80058ae <_printf_float+0x3ee>
 80058ee:	2301      	movs	r3, #1
 80058f0:	464a      	mov	r2, r9
 80058f2:	4631      	mov	r1, r6
 80058f4:	4628      	mov	r0, r5
 80058f6:	47b8      	blx	r7
 80058f8:	3001      	adds	r0, #1
 80058fa:	f43f ae3e 	beq.w	800557a <_printf_float+0xba>
 80058fe:	f108 0801 	add.w	r8, r8, #1
 8005902:	68e3      	ldr	r3, [r4, #12]
 8005904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	4543      	cmp	r3, r8
 800590a:	dcf0      	bgt.n	80058ee <_printf_float+0x42e>
 800590c:	e6fc      	b.n	8005708 <_printf_float+0x248>
 800590e:	f04f 0800 	mov.w	r8, #0
 8005912:	f104 0919 	add.w	r9, r4, #25
 8005916:	e7f4      	b.n	8005902 <_printf_float+0x442>
 8005918:	2900      	cmp	r1, #0
 800591a:	f43f ae8b 	beq.w	8005634 <_printf_float+0x174>
 800591e:	2300      	movs	r3, #0
 8005920:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005924:	ab09      	add	r3, sp, #36	; 0x24
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	ec49 8b10 	vmov	d0, r8, r9
 800592c:	6022      	str	r2, [r4, #0]
 800592e:	f8cd a004 	str.w	sl, [sp, #4]
 8005932:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005936:	4628      	mov	r0, r5
 8005938:	f7ff fd2e 	bl	8005398 <__cvt>
 800593c:	4680      	mov	r8, r0
 800593e:	e648      	b.n	80055d2 <_printf_float+0x112>

08005940 <_printf_common>:
 8005940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	4691      	mov	r9, r2
 8005946:	461f      	mov	r7, r3
 8005948:	688a      	ldr	r2, [r1, #8]
 800594a:	690b      	ldr	r3, [r1, #16]
 800594c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005950:	4293      	cmp	r3, r2
 8005952:	bfb8      	it	lt
 8005954:	4613      	movlt	r3, r2
 8005956:	f8c9 3000 	str.w	r3, [r9]
 800595a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800595e:	4606      	mov	r6, r0
 8005960:	460c      	mov	r4, r1
 8005962:	b112      	cbz	r2, 800596a <_printf_common+0x2a>
 8005964:	3301      	adds	r3, #1
 8005966:	f8c9 3000 	str.w	r3, [r9]
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	0699      	lsls	r1, r3, #26
 800596e:	bf42      	ittt	mi
 8005970:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005974:	3302      	addmi	r3, #2
 8005976:	f8c9 3000 	strmi.w	r3, [r9]
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	f015 0506 	ands.w	r5, r5, #6
 8005980:	d107      	bne.n	8005992 <_printf_common+0x52>
 8005982:	f104 0a19 	add.w	sl, r4, #25
 8005986:	68e3      	ldr	r3, [r4, #12]
 8005988:	f8d9 2000 	ldr.w	r2, [r9]
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	42ab      	cmp	r3, r5
 8005990:	dc28      	bgt.n	80059e4 <_printf_common+0xa4>
 8005992:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	3300      	adds	r3, #0
 800599a:	bf18      	it	ne
 800599c:	2301      	movne	r3, #1
 800599e:	0692      	lsls	r2, r2, #26
 80059a0:	d42d      	bmi.n	80059fe <_printf_common+0xbe>
 80059a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a6:	4639      	mov	r1, r7
 80059a8:	4630      	mov	r0, r6
 80059aa:	47c0      	blx	r8
 80059ac:	3001      	adds	r0, #1
 80059ae:	d020      	beq.n	80059f2 <_printf_common+0xb2>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	68e5      	ldr	r5, [r4, #12]
 80059b4:	f8d9 2000 	ldr.w	r2, [r9]
 80059b8:	f003 0306 	and.w	r3, r3, #6
 80059bc:	2b04      	cmp	r3, #4
 80059be:	bf08      	it	eq
 80059c0:	1aad      	subeq	r5, r5, r2
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	6922      	ldr	r2, [r4, #16]
 80059c6:	bf0c      	ite	eq
 80059c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059cc:	2500      	movne	r5, #0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	bfc4      	itt	gt
 80059d2:	1a9b      	subgt	r3, r3, r2
 80059d4:	18ed      	addgt	r5, r5, r3
 80059d6:	f04f 0900 	mov.w	r9, #0
 80059da:	341a      	adds	r4, #26
 80059dc:	454d      	cmp	r5, r9
 80059de:	d11a      	bne.n	8005a16 <_printf_common+0xd6>
 80059e0:	2000      	movs	r0, #0
 80059e2:	e008      	b.n	80059f6 <_printf_common+0xb6>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4652      	mov	r2, sl
 80059e8:	4639      	mov	r1, r7
 80059ea:	4630      	mov	r0, r6
 80059ec:	47c0      	blx	r8
 80059ee:	3001      	adds	r0, #1
 80059f0:	d103      	bne.n	80059fa <_printf_common+0xba>
 80059f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fa:	3501      	adds	r5, #1
 80059fc:	e7c3      	b.n	8005986 <_printf_common+0x46>
 80059fe:	18e1      	adds	r1, r4, r3
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	2030      	movs	r0, #48	; 0x30
 8005a04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a08:	4422      	add	r2, r4
 8005a0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a12:	3302      	adds	r3, #2
 8005a14:	e7c5      	b.n	80059a2 <_printf_common+0x62>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4622      	mov	r2, r4
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	47c0      	blx	r8
 8005a20:	3001      	adds	r0, #1
 8005a22:	d0e6      	beq.n	80059f2 <_printf_common+0xb2>
 8005a24:	f109 0901 	add.w	r9, r9, #1
 8005a28:	e7d8      	b.n	80059dc <_printf_common+0x9c>
	...

08005a2c <_printf_i>:
 8005a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a34:	460c      	mov	r4, r1
 8005a36:	7e09      	ldrb	r1, [r1, #24]
 8005a38:	b085      	sub	sp, #20
 8005a3a:	296e      	cmp	r1, #110	; 0x6e
 8005a3c:	4617      	mov	r7, r2
 8005a3e:	4606      	mov	r6, r0
 8005a40:	4698      	mov	r8, r3
 8005a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a44:	f000 80b3 	beq.w	8005bae <_printf_i+0x182>
 8005a48:	d822      	bhi.n	8005a90 <_printf_i+0x64>
 8005a4a:	2963      	cmp	r1, #99	; 0x63
 8005a4c:	d036      	beq.n	8005abc <_printf_i+0x90>
 8005a4e:	d80a      	bhi.n	8005a66 <_printf_i+0x3a>
 8005a50:	2900      	cmp	r1, #0
 8005a52:	f000 80b9 	beq.w	8005bc8 <_printf_i+0x19c>
 8005a56:	2958      	cmp	r1, #88	; 0x58
 8005a58:	f000 8083 	beq.w	8005b62 <_printf_i+0x136>
 8005a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a64:	e032      	b.n	8005acc <_printf_i+0xa0>
 8005a66:	2964      	cmp	r1, #100	; 0x64
 8005a68:	d001      	beq.n	8005a6e <_printf_i+0x42>
 8005a6a:	2969      	cmp	r1, #105	; 0x69
 8005a6c:	d1f6      	bne.n	8005a5c <_printf_i+0x30>
 8005a6e:	6820      	ldr	r0, [r4, #0]
 8005a70:	6813      	ldr	r3, [r2, #0]
 8005a72:	0605      	lsls	r5, r0, #24
 8005a74:	f103 0104 	add.w	r1, r3, #4
 8005a78:	d52a      	bpl.n	8005ad0 <_printf_i+0xa4>
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da03      	bge.n	8005a8a <_printf_i+0x5e>
 8005a82:	222d      	movs	r2, #45	; 0x2d
 8005a84:	425b      	negs	r3, r3
 8005a86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a8a:	486f      	ldr	r0, [pc, #444]	; (8005c48 <_printf_i+0x21c>)
 8005a8c:	220a      	movs	r2, #10
 8005a8e:	e039      	b.n	8005b04 <_printf_i+0xd8>
 8005a90:	2973      	cmp	r1, #115	; 0x73
 8005a92:	f000 809d 	beq.w	8005bd0 <_printf_i+0x1a4>
 8005a96:	d808      	bhi.n	8005aaa <_printf_i+0x7e>
 8005a98:	296f      	cmp	r1, #111	; 0x6f
 8005a9a:	d020      	beq.n	8005ade <_printf_i+0xb2>
 8005a9c:	2970      	cmp	r1, #112	; 0x70
 8005a9e:	d1dd      	bne.n	8005a5c <_printf_i+0x30>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	f043 0320 	orr.w	r3, r3, #32
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	e003      	b.n	8005ab2 <_printf_i+0x86>
 8005aaa:	2975      	cmp	r1, #117	; 0x75
 8005aac:	d017      	beq.n	8005ade <_printf_i+0xb2>
 8005aae:	2978      	cmp	r1, #120	; 0x78
 8005ab0:	d1d4      	bne.n	8005a5c <_printf_i+0x30>
 8005ab2:	2378      	movs	r3, #120	; 0x78
 8005ab4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ab8:	4864      	ldr	r0, [pc, #400]	; (8005c4c <_printf_i+0x220>)
 8005aba:	e055      	b.n	8005b68 <_printf_i+0x13c>
 8005abc:	6813      	ldr	r3, [r2, #0]
 8005abe:	1d19      	adds	r1, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6011      	str	r1, [r2, #0]
 8005ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005acc:	2301      	movs	r3, #1
 8005ace:	e08c      	b.n	8005bea <_printf_i+0x1be>
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6011      	str	r1, [r2, #0]
 8005ad4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ad8:	bf18      	it	ne
 8005ada:	b21b      	sxthne	r3, r3
 8005adc:	e7cf      	b.n	8005a7e <_printf_i+0x52>
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	6825      	ldr	r5, [r4, #0]
 8005ae2:	1d18      	adds	r0, r3, #4
 8005ae4:	6010      	str	r0, [r2, #0]
 8005ae6:	0628      	lsls	r0, r5, #24
 8005ae8:	d501      	bpl.n	8005aee <_printf_i+0xc2>
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	e002      	b.n	8005af4 <_printf_i+0xc8>
 8005aee:	0668      	lsls	r0, r5, #25
 8005af0:	d5fb      	bpl.n	8005aea <_printf_i+0xbe>
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	4854      	ldr	r0, [pc, #336]	; (8005c48 <_printf_i+0x21c>)
 8005af6:	296f      	cmp	r1, #111	; 0x6f
 8005af8:	bf14      	ite	ne
 8005afa:	220a      	movne	r2, #10
 8005afc:	2208      	moveq	r2, #8
 8005afe:	2100      	movs	r1, #0
 8005b00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b04:	6865      	ldr	r5, [r4, #4]
 8005b06:	60a5      	str	r5, [r4, #8]
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	f2c0 8095 	blt.w	8005c38 <_printf_i+0x20c>
 8005b0e:	6821      	ldr	r1, [r4, #0]
 8005b10:	f021 0104 	bic.w	r1, r1, #4
 8005b14:	6021      	str	r1, [r4, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d13d      	bne.n	8005b96 <_printf_i+0x16a>
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	f040 808e 	bne.w	8005c3c <_printf_i+0x210>
 8005b20:	4665      	mov	r5, ip
 8005b22:	2a08      	cmp	r2, #8
 8005b24:	d10b      	bne.n	8005b3e <_printf_i+0x112>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	07db      	lsls	r3, r3, #31
 8005b2a:	d508      	bpl.n	8005b3e <_printf_i+0x112>
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	6862      	ldr	r2, [r4, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	bfde      	ittt	le
 8005b34:	2330      	movle	r3, #48	; 0x30
 8005b36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b3e:	ebac 0305 	sub.w	r3, ip, r5
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	f8cd 8000 	str.w	r8, [sp]
 8005b48:	463b      	mov	r3, r7
 8005b4a:	aa03      	add	r2, sp, #12
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7ff fef6 	bl	8005940 <_printf_common>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d14d      	bne.n	8005bf4 <_printf_i+0x1c8>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5c:	b005      	add	sp, #20
 8005b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b62:	4839      	ldr	r0, [pc, #228]	; (8005c48 <_printf_i+0x21c>)
 8005b64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b68:	6813      	ldr	r3, [r2, #0]
 8005b6a:	6821      	ldr	r1, [r4, #0]
 8005b6c:	1d1d      	adds	r5, r3, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6015      	str	r5, [r2, #0]
 8005b72:	060a      	lsls	r2, r1, #24
 8005b74:	d50b      	bpl.n	8005b8e <_printf_i+0x162>
 8005b76:	07ca      	lsls	r2, r1, #31
 8005b78:	bf44      	itt	mi
 8005b7a:	f041 0120 	orrmi.w	r1, r1, #32
 8005b7e:	6021      	strmi	r1, [r4, #0]
 8005b80:	b91b      	cbnz	r3, 8005b8a <_printf_i+0x15e>
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	f022 0220 	bic.w	r2, r2, #32
 8005b88:	6022      	str	r2, [r4, #0]
 8005b8a:	2210      	movs	r2, #16
 8005b8c:	e7b7      	b.n	8005afe <_printf_i+0xd2>
 8005b8e:	064d      	lsls	r5, r1, #25
 8005b90:	bf48      	it	mi
 8005b92:	b29b      	uxthmi	r3, r3
 8005b94:	e7ef      	b.n	8005b76 <_printf_i+0x14a>
 8005b96:	4665      	mov	r5, ip
 8005b98:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b9c:	fb02 3311 	mls	r3, r2, r1, r3
 8005ba0:	5cc3      	ldrb	r3, [r0, r3]
 8005ba2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d1f5      	bne.n	8005b98 <_printf_i+0x16c>
 8005bac:	e7b9      	b.n	8005b22 <_printf_i+0xf6>
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	6825      	ldr	r5, [r4, #0]
 8005bb2:	6961      	ldr	r1, [r4, #20]
 8005bb4:	1d18      	adds	r0, r3, #4
 8005bb6:	6010      	str	r0, [r2, #0]
 8005bb8:	0628      	lsls	r0, r5, #24
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	d501      	bpl.n	8005bc2 <_printf_i+0x196>
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	e002      	b.n	8005bc8 <_printf_i+0x19c>
 8005bc2:	066a      	lsls	r2, r5, #25
 8005bc4:	d5fb      	bpl.n	8005bbe <_printf_i+0x192>
 8005bc6:	8019      	strh	r1, [r3, #0]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6123      	str	r3, [r4, #16]
 8005bcc:	4665      	mov	r5, ip
 8005bce:	e7b9      	b.n	8005b44 <_printf_i+0x118>
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	1d19      	adds	r1, r3, #4
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	681d      	ldr	r5, [r3, #0]
 8005bd8:	6862      	ldr	r2, [r4, #4]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f7fa faff 	bl	80001e0 <memchr>
 8005be2:	b108      	cbz	r0, 8005be8 <_printf_i+0x1bc>
 8005be4:	1b40      	subs	r0, r0, r5
 8005be6:	6060      	str	r0, [r4, #4]
 8005be8:	6863      	ldr	r3, [r4, #4]
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	2300      	movs	r3, #0
 8005bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf2:	e7a7      	b.n	8005b44 <_printf_i+0x118>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	462a      	mov	r2, r5
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	47c0      	blx	r8
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d0aa      	beq.n	8005b58 <_printf_i+0x12c>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	079b      	lsls	r3, r3, #30
 8005c06:	d413      	bmi.n	8005c30 <_printf_i+0x204>
 8005c08:	68e0      	ldr	r0, [r4, #12]
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	4298      	cmp	r0, r3
 8005c0e:	bfb8      	it	lt
 8005c10:	4618      	movlt	r0, r3
 8005c12:	e7a3      	b.n	8005b5c <_printf_i+0x130>
 8005c14:	2301      	movs	r3, #1
 8005c16:	464a      	mov	r2, r9
 8005c18:	4639      	mov	r1, r7
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	47c0      	blx	r8
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d09a      	beq.n	8005b58 <_printf_i+0x12c>
 8005c22:	3501      	adds	r5, #1
 8005c24:	68e3      	ldr	r3, [r4, #12]
 8005c26:	9a03      	ldr	r2, [sp, #12]
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	42ab      	cmp	r3, r5
 8005c2c:	dcf2      	bgt.n	8005c14 <_printf_i+0x1e8>
 8005c2e:	e7eb      	b.n	8005c08 <_printf_i+0x1dc>
 8005c30:	2500      	movs	r5, #0
 8005c32:	f104 0919 	add.w	r9, r4, #25
 8005c36:	e7f5      	b.n	8005c24 <_printf_i+0x1f8>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1ac      	bne.n	8005b96 <_printf_i+0x16a>
 8005c3c:	7803      	ldrb	r3, [r0, #0]
 8005c3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c46:	e76c      	b.n	8005b22 <_printf_i+0xf6>
 8005c48:	08008e7a 	.word	0x08008e7a
 8005c4c:	08008e8b 	.word	0x08008e8b

08005c50 <_scanf_float>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	469a      	mov	sl, r3
 8005c56:	688b      	ldr	r3, [r1, #8]
 8005c58:	4616      	mov	r6, r2
 8005c5a:	1e5a      	subs	r2, r3, #1
 8005c5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c60:	b087      	sub	sp, #28
 8005c62:	bf83      	ittte	hi
 8005c64:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005c68:	189b      	addhi	r3, r3, r2
 8005c6a:	9301      	strhi	r3, [sp, #4]
 8005c6c:	2300      	movls	r3, #0
 8005c6e:	bf86      	itte	hi
 8005c70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c74:	608b      	strhi	r3, [r1, #8]
 8005c76:	9301      	strls	r3, [sp, #4]
 8005c78:	680b      	ldr	r3, [r1, #0]
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	f04f 0b00 	mov.w	fp, #0
 8005c80:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005c84:	f848 3b1c 	str.w	r3, [r8], #28
 8005c88:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4645      	mov	r5, r8
 8005c92:	465a      	mov	r2, fp
 8005c94:	46d9      	mov	r9, fp
 8005c96:	f8cd b008 	str.w	fp, [sp, #8]
 8005c9a:	68a1      	ldr	r1, [r4, #8]
 8005c9c:	b181      	cbz	r1, 8005cc0 <_scanf_float+0x70>
 8005c9e:	6833      	ldr	r3, [r6, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b49      	cmp	r3, #73	; 0x49
 8005ca4:	d071      	beq.n	8005d8a <_scanf_float+0x13a>
 8005ca6:	d84d      	bhi.n	8005d44 <_scanf_float+0xf4>
 8005ca8:	2b39      	cmp	r3, #57	; 0x39
 8005caa:	d840      	bhi.n	8005d2e <_scanf_float+0xde>
 8005cac:	2b31      	cmp	r3, #49	; 0x31
 8005cae:	f080 8088 	bcs.w	8005dc2 <_scanf_float+0x172>
 8005cb2:	2b2d      	cmp	r3, #45	; 0x2d
 8005cb4:	f000 8090 	beq.w	8005dd8 <_scanf_float+0x188>
 8005cb8:	d815      	bhi.n	8005ce6 <_scanf_float+0x96>
 8005cba:	2b2b      	cmp	r3, #43	; 0x2b
 8005cbc:	f000 808c 	beq.w	8005dd8 <_scanf_float+0x188>
 8005cc0:	f1b9 0f00 	cmp.w	r9, #0
 8005cc4:	d003      	beq.n	8005cce <_scanf_float+0x7e>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	2a01      	cmp	r2, #1
 8005cd2:	f200 80ea 	bhi.w	8005eaa <_scanf_float+0x25a>
 8005cd6:	4545      	cmp	r5, r8
 8005cd8:	f200 80dc 	bhi.w	8005e94 <_scanf_float+0x244>
 8005cdc:	2601      	movs	r6, #1
 8005cde:	4630      	mov	r0, r6
 8005ce0:	b007      	add	sp, #28
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce8:	f000 809f 	beq.w	8005e2a <_scanf_float+0x1da>
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d1e7      	bne.n	8005cc0 <_scanf_float+0x70>
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005cf6:	d064      	beq.n	8005dc2 <_scanf_float+0x172>
 8005cf8:	9b01      	ldr	r3, [sp, #4]
 8005cfa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005cfe:	6020      	str	r0, [r4, #0]
 8005d00:	f109 0901 	add.w	r9, r9, #1
 8005d04:	b11b      	cbz	r3, 8005d0e <_scanf_float+0xbe>
 8005d06:	3b01      	subs	r3, #1
 8005d08:	3101      	adds	r1, #1
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	60a1      	str	r1, [r4, #8]
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	60a3      	str	r3, [r4, #8]
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	3301      	adds	r3, #1
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	6873      	ldr	r3, [r6, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	6073      	str	r3, [r6, #4]
 8005d22:	f340 80ac 	ble.w	8005e7e <_scanf_float+0x22e>
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	6033      	str	r3, [r6, #0]
 8005d2c:	e7b5      	b.n	8005c9a <_scanf_float+0x4a>
 8005d2e:	2b45      	cmp	r3, #69	; 0x45
 8005d30:	f000 8085 	beq.w	8005e3e <_scanf_float+0x1ee>
 8005d34:	2b46      	cmp	r3, #70	; 0x46
 8005d36:	d06a      	beq.n	8005e0e <_scanf_float+0x1be>
 8005d38:	2b41      	cmp	r3, #65	; 0x41
 8005d3a:	d1c1      	bne.n	8005cc0 <_scanf_float+0x70>
 8005d3c:	2a01      	cmp	r2, #1
 8005d3e:	d1bf      	bne.n	8005cc0 <_scanf_float+0x70>
 8005d40:	2202      	movs	r2, #2
 8005d42:	e046      	b.n	8005dd2 <_scanf_float+0x182>
 8005d44:	2b65      	cmp	r3, #101	; 0x65
 8005d46:	d07a      	beq.n	8005e3e <_scanf_float+0x1ee>
 8005d48:	d818      	bhi.n	8005d7c <_scanf_float+0x12c>
 8005d4a:	2b54      	cmp	r3, #84	; 0x54
 8005d4c:	d066      	beq.n	8005e1c <_scanf_float+0x1cc>
 8005d4e:	d811      	bhi.n	8005d74 <_scanf_float+0x124>
 8005d50:	2b4e      	cmp	r3, #78	; 0x4e
 8005d52:	d1b5      	bne.n	8005cc0 <_scanf_float+0x70>
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	d146      	bne.n	8005de6 <_scanf_float+0x196>
 8005d58:	f1b9 0f00 	cmp.w	r9, #0
 8005d5c:	d145      	bne.n	8005dea <_scanf_float+0x19a>
 8005d5e:	6821      	ldr	r1, [r4, #0]
 8005d60:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005d64:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005d68:	d13f      	bne.n	8005dea <_scanf_float+0x19a>
 8005d6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005d6e:	6021      	str	r1, [r4, #0]
 8005d70:	2201      	movs	r2, #1
 8005d72:	e02e      	b.n	8005dd2 <_scanf_float+0x182>
 8005d74:	2b59      	cmp	r3, #89	; 0x59
 8005d76:	d01e      	beq.n	8005db6 <_scanf_float+0x166>
 8005d78:	2b61      	cmp	r3, #97	; 0x61
 8005d7a:	e7de      	b.n	8005d3a <_scanf_float+0xea>
 8005d7c:	2b6e      	cmp	r3, #110	; 0x6e
 8005d7e:	d0e9      	beq.n	8005d54 <_scanf_float+0x104>
 8005d80:	d815      	bhi.n	8005dae <_scanf_float+0x15e>
 8005d82:	2b66      	cmp	r3, #102	; 0x66
 8005d84:	d043      	beq.n	8005e0e <_scanf_float+0x1be>
 8005d86:	2b69      	cmp	r3, #105	; 0x69
 8005d88:	d19a      	bne.n	8005cc0 <_scanf_float+0x70>
 8005d8a:	f1bb 0f00 	cmp.w	fp, #0
 8005d8e:	d138      	bne.n	8005e02 <_scanf_float+0x1b2>
 8005d90:	f1b9 0f00 	cmp.w	r9, #0
 8005d94:	d197      	bne.n	8005cc6 <_scanf_float+0x76>
 8005d96:	6821      	ldr	r1, [r4, #0]
 8005d98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005d9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005da0:	d195      	bne.n	8005cce <_scanf_float+0x7e>
 8005da2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005da6:	6021      	str	r1, [r4, #0]
 8005da8:	f04f 0b01 	mov.w	fp, #1
 8005dac:	e011      	b.n	8005dd2 <_scanf_float+0x182>
 8005dae:	2b74      	cmp	r3, #116	; 0x74
 8005db0:	d034      	beq.n	8005e1c <_scanf_float+0x1cc>
 8005db2:	2b79      	cmp	r3, #121	; 0x79
 8005db4:	d184      	bne.n	8005cc0 <_scanf_float+0x70>
 8005db6:	f1bb 0f07 	cmp.w	fp, #7
 8005dba:	d181      	bne.n	8005cc0 <_scanf_float+0x70>
 8005dbc:	f04f 0b08 	mov.w	fp, #8
 8005dc0:	e007      	b.n	8005dd2 <_scanf_float+0x182>
 8005dc2:	eb12 0f0b 	cmn.w	r2, fp
 8005dc6:	f47f af7b 	bne.w	8005cc0 <_scanf_float+0x70>
 8005dca:	6821      	ldr	r1, [r4, #0]
 8005dcc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005dd0:	6021      	str	r1, [r4, #0]
 8005dd2:	702b      	strb	r3, [r5, #0]
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e79a      	b.n	8005d0e <_scanf_float+0xbe>
 8005dd8:	6821      	ldr	r1, [r4, #0]
 8005dda:	0608      	lsls	r0, r1, #24
 8005ddc:	f57f af70 	bpl.w	8005cc0 <_scanf_float+0x70>
 8005de0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005de4:	e7f4      	b.n	8005dd0 <_scanf_float+0x180>
 8005de6:	2a02      	cmp	r2, #2
 8005de8:	d047      	beq.n	8005e7a <_scanf_float+0x22a>
 8005dea:	f1bb 0f01 	cmp.w	fp, #1
 8005dee:	d003      	beq.n	8005df8 <_scanf_float+0x1a8>
 8005df0:	f1bb 0f04 	cmp.w	fp, #4
 8005df4:	f47f af64 	bne.w	8005cc0 <_scanf_float+0x70>
 8005df8:	f10b 0b01 	add.w	fp, fp, #1
 8005dfc:	fa5f fb8b 	uxtb.w	fp, fp
 8005e00:	e7e7      	b.n	8005dd2 <_scanf_float+0x182>
 8005e02:	f1bb 0f03 	cmp.w	fp, #3
 8005e06:	d0f7      	beq.n	8005df8 <_scanf_float+0x1a8>
 8005e08:	f1bb 0f05 	cmp.w	fp, #5
 8005e0c:	e7f2      	b.n	8005df4 <_scanf_float+0x1a4>
 8005e0e:	f1bb 0f02 	cmp.w	fp, #2
 8005e12:	f47f af55 	bne.w	8005cc0 <_scanf_float+0x70>
 8005e16:	f04f 0b03 	mov.w	fp, #3
 8005e1a:	e7da      	b.n	8005dd2 <_scanf_float+0x182>
 8005e1c:	f1bb 0f06 	cmp.w	fp, #6
 8005e20:	f47f af4e 	bne.w	8005cc0 <_scanf_float+0x70>
 8005e24:	f04f 0b07 	mov.w	fp, #7
 8005e28:	e7d3      	b.n	8005dd2 <_scanf_float+0x182>
 8005e2a:	6821      	ldr	r1, [r4, #0]
 8005e2c:	0588      	lsls	r0, r1, #22
 8005e2e:	f57f af47 	bpl.w	8005cc0 <_scanf_float+0x70>
 8005e32:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005e36:	6021      	str	r1, [r4, #0]
 8005e38:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e3c:	e7c9      	b.n	8005dd2 <_scanf_float+0x182>
 8005e3e:	6821      	ldr	r1, [r4, #0]
 8005e40:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005e44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005e48:	d006      	beq.n	8005e58 <_scanf_float+0x208>
 8005e4a:	0548      	lsls	r0, r1, #21
 8005e4c:	f57f af38 	bpl.w	8005cc0 <_scanf_float+0x70>
 8005e50:	f1b9 0f00 	cmp.w	r9, #0
 8005e54:	f43f af3b 	beq.w	8005cce <_scanf_float+0x7e>
 8005e58:	0588      	lsls	r0, r1, #22
 8005e5a:	bf58      	it	pl
 8005e5c:	9802      	ldrpl	r0, [sp, #8]
 8005e5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005e62:	bf58      	it	pl
 8005e64:	eba9 0000 	subpl.w	r0, r9, r0
 8005e68:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005e6c:	bf58      	it	pl
 8005e6e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005e72:	6021      	str	r1, [r4, #0]
 8005e74:	f04f 0900 	mov.w	r9, #0
 8005e78:	e7ab      	b.n	8005dd2 <_scanf_float+0x182>
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	e7a9      	b.n	8005dd2 <_scanf_float+0x182>
 8005e7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e82:	9205      	str	r2, [sp, #20]
 8005e84:	4631      	mov	r1, r6
 8005e86:	4638      	mov	r0, r7
 8005e88:	4798      	blx	r3
 8005e8a:	9a05      	ldr	r2, [sp, #20]
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	f43f af04 	beq.w	8005c9a <_scanf_float+0x4a>
 8005e92:	e715      	b.n	8005cc0 <_scanf_float+0x70>
 8005e94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	4798      	blx	r3
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	e715      	b.n	8005cd6 <_scanf_float+0x86>
 8005eaa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005eae:	2b06      	cmp	r3, #6
 8005eb0:	d80a      	bhi.n	8005ec8 <_scanf_float+0x278>
 8005eb2:	f1bb 0f02 	cmp.w	fp, #2
 8005eb6:	d968      	bls.n	8005f8a <_scanf_float+0x33a>
 8005eb8:	f1ab 0b03 	sub.w	fp, fp, #3
 8005ebc:	fa5f fb8b 	uxtb.w	fp, fp
 8005ec0:	eba5 0b0b 	sub.w	fp, r5, fp
 8005ec4:	455d      	cmp	r5, fp
 8005ec6:	d14b      	bne.n	8005f60 <_scanf_float+0x310>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	05da      	lsls	r2, r3, #23
 8005ecc:	d51f      	bpl.n	8005f0e <_scanf_float+0x2be>
 8005ece:	055b      	lsls	r3, r3, #21
 8005ed0:	d468      	bmi.n	8005fa4 <_scanf_float+0x354>
 8005ed2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	2965      	cmp	r1, #101	; 0x65
 8005eda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005ede:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	d00d      	beq.n	8005f02 <_scanf_float+0x2b2>
 8005ee6:	2945      	cmp	r1, #69	; 0x45
 8005ee8:	d00b      	beq.n	8005f02 <_scanf_float+0x2b2>
 8005eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005eee:	4632      	mov	r2, r6
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	4798      	blx	r3
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	f1a5 0b02 	sub.w	fp, r5, #2
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f06:	4632      	mov	r2, r6
 8005f08:	4638      	mov	r0, r7
 8005f0a:	4798      	blx	r3
 8005f0c:	465d      	mov	r5, fp
 8005f0e:	6826      	ldr	r6, [r4, #0]
 8005f10:	f016 0610 	ands.w	r6, r6, #16
 8005f14:	d17a      	bne.n	800600c <_scanf_float+0x3bc>
 8005f16:	702e      	strb	r6, [r5, #0]
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f22:	d142      	bne.n	8005faa <_scanf_float+0x35a>
 8005f24:	9b02      	ldr	r3, [sp, #8]
 8005f26:	eba9 0303 	sub.w	r3, r9, r3
 8005f2a:	425a      	negs	r2, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d149      	bne.n	8005fc4 <_scanf_float+0x374>
 8005f30:	2200      	movs	r2, #0
 8005f32:	4641      	mov	r1, r8
 8005f34:	4638      	mov	r0, r7
 8005f36:	f000 fea3 	bl	8006c80 <_strtod_r>
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	f8da 3000 	ldr.w	r3, [sl]
 8005f40:	f015 0f02 	tst.w	r5, #2
 8005f44:	f103 0204 	add.w	r2, r3, #4
 8005f48:	ec59 8b10 	vmov	r8, r9, d0
 8005f4c:	f8ca 2000 	str.w	r2, [sl]
 8005f50:	d043      	beq.n	8005fda <_scanf_float+0x38a>
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	e9c3 8900 	strd	r8, r9, [r3]
 8005f58:	68e3      	ldr	r3, [r4, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60e3      	str	r3, [r4, #12]
 8005f5e:	e6be      	b.n	8005cde <_scanf_float+0x8e>
 8005f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005f68:	4632      	mov	r2, r6
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	4798      	blx	r3
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	e7a6      	b.n	8005ec4 <_scanf_float+0x274>
 8005f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4638      	mov	r0, r7
 8005f82:	4798      	blx	r3
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	4545      	cmp	r5, r8
 8005f8c:	d8f3      	bhi.n	8005f76 <_scanf_float+0x326>
 8005f8e:	e6a5      	b.n	8005cdc <_scanf_float+0x8c>
 8005f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005f98:	4632      	mov	r2, r6
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	4798      	blx	r3
 8005f9e:	6923      	ldr	r3, [r4, #16]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	4545      	cmp	r5, r8
 8005fa6:	d8f3      	bhi.n	8005f90 <_scanf_float+0x340>
 8005fa8:	e698      	b.n	8005cdc <_scanf_float+0x8c>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0bf      	beq.n	8005f30 <_scanf_float+0x2e0>
 8005fb0:	9904      	ldr	r1, [sp, #16]
 8005fb2:	230a      	movs	r3, #10
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	3101      	adds	r1, #1
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f000 feed 	bl	8006d98 <_strtol_r>
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	9d04      	ldr	r5, [sp, #16]
 8005fc2:	1ac2      	subs	r2, r0, r3
 8005fc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005fc8:	429d      	cmp	r5, r3
 8005fca:	bf28      	it	cs
 8005fcc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005fd0:	490f      	ldr	r1, [pc, #60]	; (8006010 <_scanf_float+0x3c0>)
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f824 	bl	8006020 <siprintf>
 8005fd8:	e7aa      	b.n	8005f30 <_scanf_float+0x2e0>
 8005fda:	f015 0504 	ands.w	r5, r5, #4
 8005fde:	d1b8      	bne.n	8005f52 <_scanf_float+0x302>
 8005fe0:	681f      	ldr	r7, [r3, #0]
 8005fe2:	ee10 2a10 	vmov	r2, s0
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	ee10 0a10 	vmov	r0, s0
 8005fec:	4649      	mov	r1, r9
 8005fee:	f7fa fd9d 	bl	8000b2c <__aeabi_dcmpun>
 8005ff2:	b128      	cbz	r0, 8006000 <_scanf_float+0x3b0>
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f80d 	bl	8006014 <nanf>
 8005ffa:	ed87 0a00 	vstr	s0, [r7]
 8005ffe:	e7ab      	b.n	8005f58 <_scanf_float+0x308>
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa fdf0 	bl	8000be8 <__aeabi_d2f>
 8006008:	6038      	str	r0, [r7, #0]
 800600a:	e7a5      	b.n	8005f58 <_scanf_float+0x308>
 800600c:	2600      	movs	r6, #0
 800600e:	e666      	b.n	8005cde <_scanf_float+0x8e>
 8006010:	08008e9c 	.word	0x08008e9c

08006014 <nanf>:
 8006014:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800601c <nanf+0x8>
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	7fc00000 	.word	0x7fc00000

08006020 <siprintf>:
 8006020:	b40e      	push	{r1, r2, r3}
 8006022:	b500      	push	{lr}
 8006024:	b09c      	sub	sp, #112	; 0x70
 8006026:	ab1d      	add	r3, sp, #116	; 0x74
 8006028:	9002      	str	r0, [sp, #8]
 800602a:	9006      	str	r0, [sp, #24]
 800602c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006030:	4809      	ldr	r0, [pc, #36]	; (8006058 <siprintf+0x38>)
 8006032:	9107      	str	r1, [sp, #28]
 8006034:	9104      	str	r1, [sp, #16]
 8006036:	4909      	ldr	r1, [pc, #36]	; (800605c <siprintf+0x3c>)
 8006038:	f853 2b04 	ldr.w	r2, [r3], #4
 800603c:	9105      	str	r1, [sp, #20]
 800603e:	6800      	ldr	r0, [r0, #0]
 8006040:	9301      	str	r3, [sp, #4]
 8006042:	a902      	add	r1, sp, #8
 8006044:	f002 fd6e 	bl	8008b24 <_svfiprintf_r>
 8006048:	9b02      	ldr	r3, [sp, #8]
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	b01c      	add	sp, #112	; 0x70
 8006050:	f85d eb04 	ldr.w	lr, [sp], #4
 8006054:	b003      	add	sp, #12
 8006056:	4770      	bx	lr
 8006058:	20000010 	.word	0x20000010
 800605c:	ffff0208 	.word	0xffff0208

08006060 <sulp>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	460d      	mov	r5, r1
 8006066:	ec45 4b10 	vmov	d0, r4, r5
 800606a:	4616      	mov	r6, r2
 800606c:	f002 fb16 	bl	800869c <__ulp>
 8006070:	ec51 0b10 	vmov	r0, r1, d0
 8006074:	b17e      	cbz	r6, 8006096 <sulp+0x36>
 8006076:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800607a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800607e:	2b00      	cmp	r3, #0
 8006080:	dd09      	ble.n	8006096 <sulp+0x36>
 8006082:	051b      	lsls	r3, r3, #20
 8006084:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006088:	2400      	movs	r4, #0
 800608a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f7fa fab1 	bl	80005f8 <__aeabi_dmul>
 8006096:	bd70      	pop	{r4, r5, r6, pc}

08006098 <_strtod_l>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	461f      	mov	r7, r3
 800609e:	b0a1      	sub	sp, #132	; 0x84
 80060a0:	2300      	movs	r3, #0
 80060a2:	4681      	mov	r9, r0
 80060a4:	4638      	mov	r0, r7
 80060a6:	460e      	mov	r6, r1
 80060a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80060aa:	931c      	str	r3, [sp, #112]	; 0x70
 80060ac:	f001 fff5 	bl	800809a <__localeconv_l>
 80060b0:	4680      	mov	r8, r0
 80060b2:	6800      	ldr	r0, [r0, #0]
 80060b4:	f7fa f88c 	bl	80001d0 <strlen>
 80060b8:	f04f 0a00 	mov.w	sl, #0
 80060bc:	4604      	mov	r4, r0
 80060be:	f04f 0b00 	mov.w	fp, #0
 80060c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80060c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	2a0d      	cmp	r2, #13
 80060ca:	d832      	bhi.n	8006132 <_strtod_l+0x9a>
 80060cc:	2a09      	cmp	r2, #9
 80060ce:	d236      	bcs.n	800613e <_strtod_l+0xa6>
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	d03e      	beq.n	8006152 <_strtod_l+0xba>
 80060d4:	2300      	movs	r3, #0
 80060d6:	930d      	str	r3, [sp, #52]	; 0x34
 80060d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80060da:	782b      	ldrb	r3, [r5, #0]
 80060dc:	2b30      	cmp	r3, #48	; 0x30
 80060de:	f040 80ac 	bne.w	800623a <_strtod_l+0x1a2>
 80060e2:	786b      	ldrb	r3, [r5, #1]
 80060e4:	2b58      	cmp	r3, #88	; 0x58
 80060e6:	d001      	beq.n	80060ec <_strtod_l+0x54>
 80060e8:	2b78      	cmp	r3, #120	; 0x78
 80060ea:	d167      	bne.n	80061bc <_strtod_l+0x124>
 80060ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	ab1c      	add	r3, sp, #112	; 0x70
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	9702      	str	r7, [sp, #8]
 80060f6:	ab1d      	add	r3, sp, #116	; 0x74
 80060f8:	4a88      	ldr	r2, [pc, #544]	; (800631c <_strtod_l+0x284>)
 80060fa:	a91b      	add	r1, sp, #108	; 0x6c
 80060fc:	4648      	mov	r0, r9
 80060fe:	f001 fcf2 	bl	8007ae6 <__gethex>
 8006102:	f010 0407 	ands.w	r4, r0, #7
 8006106:	4606      	mov	r6, r0
 8006108:	d005      	beq.n	8006116 <_strtod_l+0x7e>
 800610a:	2c06      	cmp	r4, #6
 800610c:	d12b      	bne.n	8006166 <_strtod_l+0xce>
 800610e:	3501      	adds	r5, #1
 8006110:	2300      	movs	r3, #0
 8006112:	951b      	str	r5, [sp, #108]	; 0x6c
 8006114:	930d      	str	r3, [sp, #52]	; 0x34
 8006116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 859a 	bne.w	8006c52 <_strtod_l+0xbba>
 800611e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006120:	b1e3      	cbz	r3, 800615c <_strtod_l+0xc4>
 8006122:	4652      	mov	r2, sl
 8006124:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006128:	ec43 2b10 	vmov	d0, r2, r3
 800612c:	b021      	add	sp, #132	; 0x84
 800612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006132:	2a2b      	cmp	r2, #43	; 0x2b
 8006134:	d015      	beq.n	8006162 <_strtod_l+0xca>
 8006136:	2a2d      	cmp	r2, #45	; 0x2d
 8006138:	d004      	beq.n	8006144 <_strtod_l+0xac>
 800613a:	2a20      	cmp	r2, #32
 800613c:	d1ca      	bne.n	80060d4 <_strtod_l+0x3c>
 800613e:	3301      	adds	r3, #1
 8006140:	931b      	str	r3, [sp, #108]	; 0x6c
 8006142:	e7bf      	b.n	80060c4 <_strtod_l+0x2c>
 8006144:	2201      	movs	r2, #1
 8006146:	920d      	str	r2, [sp, #52]	; 0x34
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	921b      	str	r2, [sp, #108]	; 0x6c
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1c2      	bne.n	80060d8 <_strtod_l+0x40>
 8006152:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006154:	961b      	str	r6, [sp, #108]	; 0x6c
 8006156:	2b00      	cmp	r3, #0
 8006158:	f040 8579 	bne.w	8006c4e <_strtod_l+0xbb6>
 800615c:	4652      	mov	r2, sl
 800615e:	465b      	mov	r3, fp
 8006160:	e7e2      	b.n	8006128 <_strtod_l+0x90>
 8006162:	2200      	movs	r2, #0
 8006164:	e7ef      	b.n	8006146 <_strtod_l+0xae>
 8006166:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006168:	b13a      	cbz	r2, 800617a <_strtod_l+0xe2>
 800616a:	2135      	movs	r1, #53	; 0x35
 800616c:	a81e      	add	r0, sp, #120	; 0x78
 800616e:	f002 fb8d 	bl	800888c <__copybits>
 8006172:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006174:	4648      	mov	r0, r9
 8006176:	f001 fffa 	bl	800816e <_Bfree>
 800617a:	3c01      	subs	r4, #1
 800617c:	2c04      	cmp	r4, #4
 800617e:	d806      	bhi.n	800618e <_strtod_l+0xf6>
 8006180:	e8df f004 	tbb	[pc, r4]
 8006184:	1714030a 	.word	0x1714030a
 8006188:	0a          	.byte	0x0a
 8006189:	00          	.byte	0x00
 800618a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800618e:	0730      	lsls	r0, r6, #28
 8006190:	d5c1      	bpl.n	8006116 <_strtod_l+0x7e>
 8006192:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006196:	e7be      	b.n	8006116 <_strtod_l+0x7e>
 8006198:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800619c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800619e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80061a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80061a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80061aa:	e7f0      	b.n	800618e <_strtod_l+0xf6>
 80061ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006320 <_strtod_l+0x288>
 80061b0:	e7ed      	b.n	800618e <_strtod_l+0xf6>
 80061b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80061b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80061ba:	e7e8      	b.n	800618e <_strtod_l+0xf6>
 80061bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b30      	cmp	r3, #48	; 0x30
 80061c6:	d0f9      	beq.n	80061bc <_strtod_l+0x124>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0a4      	beq.n	8006116 <_strtod_l+0x7e>
 80061cc:	2301      	movs	r3, #1
 80061ce:	2500      	movs	r5, #0
 80061d0:	9306      	str	r3, [sp, #24]
 80061d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061d4:	9308      	str	r3, [sp, #32]
 80061d6:	9507      	str	r5, [sp, #28]
 80061d8:	9505      	str	r5, [sp, #20]
 80061da:	220a      	movs	r2, #10
 80061dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80061de:	7807      	ldrb	r7, [r0, #0]
 80061e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80061e4:	b2d9      	uxtb	r1, r3
 80061e6:	2909      	cmp	r1, #9
 80061e8:	d929      	bls.n	800623e <_strtod_l+0x1a6>
 80061ea:	4622      	mov	r2, r4
 80061ec:	f8d8 1000 	ldr.w	r1, [r8]
 80061f0:	f002 fda0 	bl	8008d34 <strncmp>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d031      	beq.n	800625c <_strtod_l+0x1c4>
 80061f8:	2000      	movs	r0, #0
 80061fa:	9c05      	ldr	r4, [sp, #20]
 80061fc:	9004      	str	r0, [sp, #16]
 80061fe:	463b      	mov	r3, r7
 8006200:	4602      	mov	r2, r0
 8006202:	2b65      	cmp	r3, #101	; 0x65
 8006204:	d001      	beq.n	800620a <_strtod_l+0x172>
 8006206:	2b45      	cmp	r3, #69	; 0x45
 8006208:	d114      	bne.n	8006234 <_strtod_l+0x19c>
 800620a:	b924      	cbnz	r4, 8006216 <_strtod_l+0x17e>
 800620c:	b910      	cbnz	r0, 8006214 <_strtod_l+0x17c>
 800620e:	9b06      	ldr	r3, [sp, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d09e      	beq.n	8006152 <_strtod_l+0xba>
 8006214:	2400      	movs	r4, #0
 8006216:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006218:	1c73      	adds	r3, r6, #1
 800621a:	931b      	str	r3, [sp, #108]	; 0x6c
 800621c:	7873      	ldrb	r3, [r6, #1]
 800621e:	2b2b      	cmp	r3, #43	; 0x2b
 8006220:	d078      	beq.n	8006314 <_strtod_l+0x27c>
 8006222:	2b2d      	cmp	r3, #45	; 0x2d
 8006224:	d070      	beq.n	8006308 <_strtod_l+0x270>
 8006226:	f04f 0c00 	mov.w	ip, #0
 800622a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800622e:	2f09      	cmp	r7, #9
 8006230:	d97c      	bls.n	800632c <_strtod_l+0x294>
 8006232:	961b      	str	r6, [sp, #108]	; 0x6c
 8006234:	f04f 0e00 	mov.w	lr, #0
 8006238:	e09a      	b.n	8006370 <_strtod_l+0x2d8>
 800623a:	2300      	movs	r3, #0
 800623c:	e7c7      	b.n	80061ce <_strtod_l+0x136>
 800623e:	9905      	ldr	r1, [sp, #20]
 8006240:	2908      	cmp	r1, #8
 8006242:	bfdd      	ittte	le
 8006244:	9907      	ldrle	r1, [sp, #28]
 8006246:	fb02 3301 	mlale	r3, r2, r1, r3
 800624a:	9307      	strle	r3, [sp, #28]
 800624c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006250:	9b05      	ldr	r3, [sp, #20]
 8006252:	3001      	adds	r0, #1
 8006254:	3301      	adds	r3, #1
 8006256:	9305      	str	r3, [sp, #20]
 8006258:	901b      	str	r0, [sp, #108]	; 0x6c
 800625a:	e7bf      	b.n	80061dc <_strtod_l+0x144>
 800625c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800625e:	191a      	adds	r2, r3, r4
 8006260:	921b      	str	r2, [sp, #108]	; 0x6c
 8006262:	9a05      	ldr	r2, [sp, #20]
 8006264:	5d1b      	ldrb	r3, [r3, r4]
 8006266:	2a00      	cmp	r2, #0
 8006268:	d037      	beq.n	80062da <_strtod_l+0x242>
 800626a:	9c05      	ldr	r4, [sp, #20]
 800626c:	4602      	mov	r2, r0
 800626e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006272:	2909      	cmp	r1, #9
 8006274:	d913      	bls.n	800629e <_strtod_l+0x206>
 8006276:	2101      	movs	r1, #1
 8006278:	9104      	str	r1, [sp, #16]
 800627a:	e7c2      	b.n	8006202 <_strtod_l+0x16a>
 800627c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	921b      	str	r2, [sp, #108]	; 0x6c
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	3001      	adds	r0, #1
 8006286:	2b30      	cmp	r3, #48	; 0x30
 8006288:	d0f8      	beq.n	800627c <_strtod_l+0x1e4>
 800628a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800628e:	2a08      	cmp	r2, #8
 8006290:	f200 84e4 	bhi.w	8006c5c <_strtod_l+0xbc4>
 8006294:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006296:	9208      	str	r2, [sp, #32]
 8006298:	4602      	mov	r2, r0
 800629a:	2000      	movs	r0, #0
 800629c:	4604      	mov	r4, r0
 800629e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80062a2:	f100 0101 	add.w	r1, r0, #1
 80062a6:	d012      	beq.n	80062ce <_strtod_l+0x236>
 80062a8:	440a      	add	r2, r1
 80062aa:	eb00 0c04 	add.w	ip, r0, r4
 80062ae:	4621      	mov	r1, r4
 80062b0:	270a      	movs	r7, #10
 80062b2:	458c      	cmp	ip, r1
 80062b4:	d113      	bne.n	80062de <_strtod_l+0x246>
 80062b6:	1821      	adds	r1, r4, r0
 80062b8:	2908      	cmp	r1, #8
 80062ba:	f104 0401 	add.w	r4, r4, #1
 80062be:	4404      	add	r4, r0
 80062c0:	dc19      	bgt.n	80062f6 <_strtod_l+0x25e>
 80062c2:	9b07      	ldr	r3, [sp, #28]
 80062c4:	210a      	movs	r1, #10
 80062c6:	fb01 e303 	mla	r3, r1, r3, lr
 80062ca:	9307      	str	r3, [sp, #28]
 80062cc:	2100      	movs	r1, #0
 80062ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062d0:	1c58      	adds	r0, r3, #1
 80062d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	4608      	mov	r0, r1
 80062d8:	e7c9      	b.n	800626e <_strtod_l+0x1d6>
 80062da:	9805      	ldr	r0, [sp, #20]
 80062dc:	e7d3      	b.n	8006286 <_strtod_l+0x1ee>
 80062de:	2908      	cmp	r1, #8
 80062e0:	f101 0101 	add.w	r1, r1, #1
 80062e4:	dc03      	bgt.n	80062ee <_strtod_l+0x256>
 80062e6:	9b07      	ldr	r3, [sp, #28]
 80062e8:	437b      	muls	r3, r7
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	e7e1      	b.n	80062b2 <_strtod_l+0x21a>
 80062ee:	2910      	cmp	r1, #16
 80062f0:	bfd8      	it	le
 80062f2:	437d      	mulle	r5, r7
 80062f4:	e7dd      	b.n	80062b2 <_strtod_l+0x21a>
 80062f6:	2c10      	cmp	r4, #16
 80062f8:	bfdc      	itt	le
 80062fa:	210a      	movle	r1, #10
 80062fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8006300:	e7e4      	b.n	80062cc <_strtod_l+0x234>
 8006302:	2301      	movs	r3, #1
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	e781      	b.n	800620c <_strtod_l+0x174>
 8006308:	f04f 0c01 	mov.w	ip, #1
 800630c:	1cb3      	adds	r3, r6, #2
 800630e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006310:	78b3      	ldrb	r3, [r6, #2]
 8006312:	e78a      	b.n	800622a <_strtod_l+0x192>
 8006314:	f04f 0c00 	mov.w	ip, #0
 8006318:	e7f8      	b.n	800630c <_strtod_l+0x274>
 800631a:	bf00      	nop
 800631c:	08008ea4 	.word	0x08008ea4
 8006320:	7ff00000 	.word	0x7ff00000
 8006324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006326:	1c5f      	adds	r7, r3, #1
 8006328:	971b      	str	r7, [sp, #108]	; 0x6c
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b30      	cmp	r3, #48	; 0x30
 800632e:	d0f9      	beq.n	8006324 <_strtod_l+0x28c>
 8006330:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006334:	2f08      	cmp	r7, #8
 8006336:	f63f af7d 	bhi.w	8006234 <_strtod_l+0x19c>
 800633a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800633e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006340:	930a      	str	r3, [sp, #40]	; 0x28
 8006342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006344:	1c5f      	adds	r7, r3, #1
 8006346:	971b      	str	r7, [sp, #108]	; 0x6c
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800634e:	f1b8 0f09 	cmp.w	r8, #9
 8006352:	d937      	bls.n	80063c4 <_strtod_l+0x32c>
 8006354:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006356:	1a7f      	subs	r7, r7, r1
 8006358:	2f08      	cmp	r7, #8
 800635a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800635e:	dc37      	bgt.n	80063d0 <_strtod_l+0x338>
 8006360:	45be      	cmp	lr, r7
 8006362:	bfa8      	it	ge
 8006364:	46be      	movge	lr, r7
 8006366:	f1bc 0f00 	cmp.w	ip, #0
 800636a:	d001      	beq.n	8006370 <_strtod_l+0x2d8>
 800636c:	f1ce 0e00 	rsb	lr, lr, #0
 8006370:	2c00      	cmp	r4, #0
 8006372:	d151      	bne.n	8006418 <_strtod_l+0x380>
 8006374:	2800      	cmp	r0, #0
 8006376:	f47f aece 	bne.w	8006116 <_strtod_l+0x7e>
 800637a:	9a06      	ldr	r2, [sp, #24]
 800637c:	2a00      	cmp	r2, #0
 800637e:	f47f aeca 	bne.w	8006116 <_strtod_l+0x7e>
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	2a00      	cmp	r2, #0
 8006386:	f47f aee4 	bne.w	8006152 <_strtod_l+0xba>
 800638a:	2b4e      	cmp	r3, #78	; 0x4e
 800638c:	d027      	beq.n	80063de <_strtod_l+0x346>
 800638e:	dc21      	bgt.n	80063d4 <_strtod_l+0x33c>
 8006390:	2b49      	cmp	r3, #73	; 0x49
 8006392:	f47f aede 	bne.w	8006152 <_strtod_l+0xba>
 8006396:	49a0      	ldr	r1, [pc, #640]	; (8006618 <_strtod_l+0x580>)
 8006398:	a81b      	add	r0, sp, #108	; 0x6c
 800639a:	f001 fdd7 	bl	8007f4c <__match>
 800639e:	2800      	cmp	r0, #0
 80063a0:	f43f aed7 	beq.w	8006152 <_strtod_l+0xba>
 80063a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063a6:	499d      	ldr	r1, [pc, #628]	; (800661c <_strtod_l+0x584>)
 80063a8:	3b01      	subs	r3, #1
 80063aa:	a81b      	add	r0, sp, #108	; 0x6c
 80063ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80063ae:	f001 fdcd 	bl	8007f4c <__match>
 80063b2:	b910      	cbnz	r0, 80063ba <_strtod_l+0x322>
 80063b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063b6:	3301      	adds	r3, #1
 80063b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80063ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006630 <_strtod_l+0x598>
 80063be:	f04f 0a00 	mov.w	sl, #0
 80063c2:	e6a8      	b.n	8006116 <_strtod_l+0x7e>
 80063c4:	210a      	movs	r1, #10
 80063c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80063ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80063ce:	e7b8      	b.n	8006342 <_strtod_l+0x2aa>
 80063d0:	46be      	mov	lr, r7
 80063d2:	e7c8      	b.n	8006366 <_strtod_l+0x2ce>
 80063d4:	2b69      	cmp	r3, #105	; 0x69
 80063d6:	d0de      	beq.n	8006396 <_strtod_l+0x2fe>
 80063d8:	2b6e      	cmp	r3, #110	; 0x6e
 80063da:	f47f aeba 	bne.w	8006152 <_strtod_l+0xba>
 80063de:	4990      	ldr	r1, [pc, #576]	; (8006620 <_strtod_l+0x588>)
 80063e0:	a81b      	add	r0, sp, #108	; 0x6c
 80063e2:	f001 fdb3 	bl	8007f4c <__match>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f43f aeb3 	beq.w	8006152 <_strtod_l+0xba>
 80063ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b28      	cmp	r3, #40	; 0x28
 80063f2:	d10e      	bne.n	8006412 <_strtod_l+0x37a>
 80063f4:	aa1e      	add	r2, sp, #120	; 0x78
 80063f6:	498b      	ldr	r1, [pc, #556]	; (8006624 <_strtod_l+0x58c>)
 80063f8:	a81b      	add	r0, sp, #108	; 0x6c
 80063fa:	f001 fdbb 	bl	8007f74 <__hexnan>
 80063fe:	2805      	cmp	r0, #5
 8006400:	d107      	bne.n	8006412 <_strtod_l+0x37a>
 8006402:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006404:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006408:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800640c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006410:	e681      	b.n	8006116 <_strtod_l+0x7e>
 8006412:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006638 <_strtod_l+0x5a0>
 8006416:	e7d2      	b.n	80063be <_strtod_l+0x326>
 8006418:	ebae 0302 	sub.w	r3, lr, r2
 800641c:	9306      	str	r3, [sp, #24]
 800641e:	9b05      	ldr	r3, [sp, #20]
 8006420:	9807      	ldr	r0, [sp, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf08      	it	eq
 8006426:	4623      	moveq	r3, r4
 8006428:	2c10      	cmp	r4, #16
 800642a:	9305      	str	r3, [sp, #20]
 800642c:	46a0      	mov	r8, r4
 800642e:	bfa8      	it	ge
 8006430:	f04f 0810 	movge.w	r8, #16
 8006434:	f7fa f866 	bl	8000504 <__aeabi_ui2d>
 8006438:	2c09      	cmp	r4, #9
 800643a:	4682      	mov	sl, r0
 800643c:	468b      	mov	fp, r1
 800643e:	dc13      	bgt.n	8006468 <_strtod_l+0x3d0>
 8006440:	9b06      	ldr	r3, [sp, #24]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f43f ae67 	beq.w	8006116 <_strtod_l+0x7e>
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	dd7a      	ble.n	8006542 <_strtod_l+0x4aa>
 800644c:	2b16      	cmp	r3, #22
 800644e:	dc61      	bgt.n	8006514 <_strtod_l+0x47c>
 8006450:	4a75      	ldr	r2, [pc, #468]	; (8006628 <_strtod_l+0x590>)
 8006452:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006456:	e9de 0100 	ldrd	r0, r1, [lr]
 800645a:	4652      	mov	r2, sl
 800645c:	465b      	mov	r3, fp
 800645e:	f7fa f8cb 	bl	80005f8 <__aeabi_dmul>
 8006462:	4682      	mov	sl, r0
 8006464:	468b      	mov	fp, r1
 8006466:	e656      	b.n	8006116 <_strtod_l+0x7e>
 8006468:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <_strtod_l+0x590>)
 800646a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800646e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006472:	f7fa f8c1 	bl	80005f8 <__aeabi_dmul>
 8006476:	4606      	mov	r6, r0
 8006478:	4628      	mov	r0, r5
 800647a:	460f      	mov	r7, r1
 800647c:	f7fa f842 	bl	8000504 <__aeabi_ui2d>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4630      	mov	r0, r6
 8006486:	4639      	mov	r1, r7
 8006488:	f7f9 ff00 	bl	800028c <__adddf3>
 800648c:	2c0f      	cmp	r4, #15
 800648e:	4682      	mov	sl, r0
 8006490:	468b      	mov	fp, r1
 8006492:	ddd5      	ble.n	8006440 <_strtod_l+0x3a8>
 8006494:	9b06      	ldr	r3, [sp, #24]
 8006496:	eba4 0808 	sub.w	r8, r4, r8
 800649a:	4498      	add	r8, r3
 800649c:	f1b8 0f00 	cmp.w	r8, #0
 80064a0:	f340 8096 	ble.w	80065d0 <_strtod_l+0x538>
 80064a4:	f018 030f 	ands.w	r3, r8, #15
 80064a8:	d00a      	beq.n	80064c0 <_strtod_l+0x428>
 80064aa:	495f      	ldr	r1, [pc, #380]	; (8006628 <_strtod_l+0x590>)
 80064ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80064b0:	4652      	mov	r2, sl
 80064b2:	465b      	mov	r3, fp
 80064b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b8:	f7fa f89e 	bl	80005f8 <__aeabi_dmul>
 80064bc:	4682      	mov	sl, r0
 80064be:	468b      	mov	fp, r1
 80064c0:	f038 080f 	bics.w	r8, r8, #15
 80064c4:	d073      	beq.n	80065ae <_strtod_l+0x516>
 80064c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80064ca:	dd47      	ble.n	800655c <_strtod_l+0x4c4>
 80064cc:	2400      	movs	r4, #0
 80064ce:	46a0      	mov	r8, r4
 80064d0:	9407      	str	r4, [sp, #28]
 80064d2:	9405      	str	r4, [sp, #20]
 80064d4:	2322      	movs	r3, #34	; 0x22
 80064d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006630 <_strtod_l+0x598>
 80064da:	f8c9 3000 	str.w	r3, [r9]
 80064de:	f04f 0a00 	mov.w	sl, #0
 80064e2:	9b07      	ldr	r3, [sp, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f43f ae16 	beq.w	8006116 <_strtod_l+0x7e>
 80064ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064ec:	4648      	mov	r0, r9
 80064ee:	f001 fe3e 	bl	800816e <_Bfree>
 80064f2:	9905      	ldr	r1, [sp, #20]
 80064f4:	4648      	mov	r0, r9
 80064f6:	f001 fe3a 	bl	800816e <_Bfree>
 80064fa:	4641      	mov	r1, r8
 80064fc:	4648      	mov	r0, r9
 80064fe:	f001 fe36 	bl	800816e <_Bfree>
 8006502:	9907      	ldr	r1, [sp, #28]
 8006504:	4648      	mov	r0, r9
 8006506:	f001 fe32 	bl	800816e <_Bfree>
 800650a:	4621      	mov	r1, r4
 800650c:	4648      	mov	r0, r9
 800650e:	f001 fe2e 	bl	800816e <_Bfree>
 8006512:	e600      	b.n	8006116 <_strtod_l+0x7e>
 8006514:	9a06      	ldr	r2, [sp, #24]
 8006516:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800651a:	4293      	cmp	r3, r2
 800651c:	dbba      	blt.n	8006494 <_strtod_l+0x3fc>
 800651e:	4d42      	ldr	r5, [pc, #264]	; (8006628 <_strtod_l+0x590>)
 8006520:	f1c4 040f 	rsb	r4, r4, #15
 8006524:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006528:	4652      	mov	r2, sl
 800652a:	465b      	mov	r3, fp
 800652c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	9b06      	ldr	r3, [sp, #24]
 8006536:	1b1c      	subs	r4, r3, r4
 8006538:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800653c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006540:	e78d      	b.n	800645e <_strtod_l+0x3c6>
 8006542:	f113 0f16 	cmn.w	r3, #22
 8006546:	dba5      	blt.n	8006494 <_strtod_l+0x3fc>
 8006548:	4a37      	ldr	r2, [pc, #220]	; (8006628 <_strtod_l+0x590>)
 800654a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800654e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006552:	4650      	mov	r0, sl
 8006554:	4659      	mov	r1, fp
 8006556:	f7fa f979 	bl	800084c <__aeabi_ddiv>
 800655a:	e782      	b.n	8006462 <_strtod_l+0x3ca>
 800655c:	2300      	movs	r3, #0
 800655e:	4e33      	ldr	r6, [pc, #204]	; (800662c <_strtod_l+0x594>)
 8006560:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006564:	4650      	mov	r0, sl
 8006566:	4659      	mov	r1, fp
 8006568:	461d      	mov	r5, r3
 800656a:	f1b8 0f01 	cmp.w	r8, #1
 800656e:	dc21      	bgt.n	80065b4 <_strtod_l+0x51c>
 8006570:	b10b      	cbz	r3, 8006576 <_strtod_l+0x4de>
 8006572:	4682      	mov	sl, r0
 8006574:	468b      	mov	fp, r1
 8006576:	4b2d      	ldr	r3, [pc, #180]	; (800662c <_strtod_l+0x594>)
 8006578:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800657c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006580:	4652      	mov	r2, sl
 8006582:	465b      	mov	r3, fp
 8006584:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006588:	f7fa f836 	bl	80005f8 <__aeabi_dmul>
 800658c:	4b28      	ldr	r3, [pc, #160]	; (8006630 <_strtod_l+0x598>)
 800658e:	460a      	mov	r2, r1
 8006590:	400b      	ands	r3, r1
 8006592:	4928      	ldr	r1, [pc, #160]	; (8006634 <_strtod_l+0x59c>)
 8006594:	428b      	cmp	r3, r1
 8006596:	4682      	mov	sl, r0
 8006598:	d898      	bhi.n	80064cc <_strtod_l+0x434>
 800659a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800659e:	428b      	cmp	r3, r1
 80065a0:	bf86      	itte	hi
 80065a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800663c <_strtod_l+0x5a4>
 80065a6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80065aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80065ae:	2300      	movs	r3, #0
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	e077      	b.n	80066a4 <_strtod_l+0x60c>
 80065b4:	f018 0f01 	tst.w	r8, #1
 80065b8:	d006      	beq.n	80065c8 <_strtod_l+0x530>
 80065ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7fa f819 	bl	80005f8 <__aeabi_dmul>
 80065c6:	2301      	movs	r3, #1
 80065c8:	3501      	adds	r5, #1
 80065ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80065ce:	e7cc      	b.n	800656a <_strtod_l+0x4d2>
 80065d0:	d0ed      	beq.n	80065ae <_strtod_l+0x516>
 80065d2:	f1c8 0800 	rsb	r8, r8, #0
 80065d6:	f018 020f 	ands.w	r2, r8, #15
 80065da:	d00a      	beq.n	80065f2 <_strtod_l+0x55a>
 80065dc:	4b12      	ldr	r3, [pc, #72]	; (8006628 <_strtod_l+0x590>)
 80065de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e2:	4650      	mov	r0, sl
 80065e4:	4659      	mov	r1, fp
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7fa f92f 	bl	800084c <__aeabi_ddiv>
 80065ee:	4682      	mov	sl, r0
 80065f0:	468b      	mov	fp, r1
 80065f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80065f6:	d0da      	beq.n	80065ae <_strtod_l+0x516>
 80065f8:	f1b8 0f1f 	cmp.w	r8, #31
 80065fc:	dd20      	ble.n	8006640 <_strtod_l+0x5a8>
 80065fe:	2400      	movs	r4, #0
 8006600:	46a0      	mov	r8, r4
 8006602:	9407      	str	r4, [sp, #28]
 8006604:	9405      	str	r4, [sp, #20]
 8006606:	2322      	movs	r3, #34	; 0x22
 8006608:	f04f 0a00 	mov.w	sl, #0
 800660c:	f04f 0b00 	mov.w	fp, #0
 8006610:	f8c9 3000 	str.w	r3, [r9]
 8006614:	e765      	b.n	80064e2 <_strtod_l+0x44a>
 8006616:	bf00      	nop
 8006618:	08008e6d 	.word	0x08008e6d
 800661c:	08008efb 	.word	0x08008efb
 8006620:	08008e75 	.word	0x08008e75
 8006624:	08008eb8 	.word	0x08008eb8
 8006628:	08008f38 	.word	0x08008f38
 800662c:	08008f10 	.word	0x08008f10
 8006630:	7ff00000 	.word	0x7ff00000
 8006634:	7ca00000 	.word	0x7ca00000
 8006638:	fff80000 	.word	0xfff80000
 800663c:	7fefffff 	.word	0x7fefffff
 8006640:	f018 0310 	ands.w	r3, r8, #16
 8006644:	bf18      	it	ne
 8006646:	236a      	movne	r3, #106	; 0x6a
 8006648:	4da0      	ldr	r5, [pc, #640]	; (80068cc <_strtod_l+0x834>)
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	4650      	mov	r0, sl
 800664e:	4659      	mov	r1, fp
 8006650:	2300      	movs	r3, #0
 8006652:	f1b8 0f00 	cmp.w	r8, #0
 8006656:	f300 810a 	bgt.w	800686e <_strtod_l+0x7d6>
 800665a:	b10b      	cbz	r3, 8006660 <_strtod_l+0x5c8>
 800665c:	4682      	mov	sl, r0
 800665e:	468b      	mov	fp, r1
 8006660:	9b04      	ldr	r3, [sp, #16]
 8006662:	b1bb      	cbz	r3, 8006694 <_strtod_l+0x5fc>
 8006664:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006668:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800666c:	2b00      	cmp	r3, #0
 800666e:	4659      	mov	r1, fp
 8006670:	dd10      	ble.n	8006694 <_strtod_l+0x5fc>
 8006672:	2b1f      	cmp	r3, #31
 8006674:	f340 8107 	ble.w	8006886 <_strtod_l+0x7ee>
 8006678:	2b34      	cmp	r3, #52	; 0x34
 800667a:	bfde      	ittt	le
 800667c:	3b20      	suble	r3, #32
 800667e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006682:	fa02 f303 	lslle.w	r3, r2, r3
 8006686:	f04f 0a00 	mov.w	sl, #0
 800668a:	bfcc      	ite	gt
 800668c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006690:	ea03 0b01 	andle.w	fp, r3, r1
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	4650      	mov	r0, sl
 800669a:	4659      	mov	r1, fp
 800669c:	f7fa fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d1ac      	bne.n	80065fe <_strtod_l+0x566>
 80066a4:	9b07      	ldr	r3, [sp, #28]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	9a05      	ldr	r2, [sp, #20]
 80066aa:	9908      	ldr	r1, [sp, #32]
 80066ac:	4623      	mov	r3, r4
 80066ae:	4648      	mov	r0, r9
 80066b0:	f001 fdaf 	bl	8008212 <__s2b>
 80066b4:	9007      	str	r0, [sp, #28]
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f af08 	beq.w	80064cc <_strtod_l+0x434>
 80066bc:	9a06      	ldr	r2, [sp, #24]
 80066be:	9b06      	ldr	r3, [sp, #24]
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	f1c3 0300 	rsb	r3, r3, #0
 80066c6:	bfa8      	it	ge
 80066c8:	2300      	movge	r3, #0
 80066ca:	930e      	str	r3, [sp, #56]	; 0x38
 80066cc:	2400      	movs	r4, #0
 80066ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80066d2:	9316      	str	r3, [sp, #88]	; 0x58
 80066d4:	46a0      	mov	r8, r4
 80066d6:	9b07      	ldr	r3, [sp, #28]
 80066d8:	4648      	mov	r0, r9
 80066da:	6859      	ldr	r1, [r3, #4]
 80066dc:	f001 fd13 	bl	8008106 <_Balloc>
 80066e0:	9005      	str	r0, [sp, #20]
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f43f aef6 	beq.w	80064d4 <_strtod_l+0x43c>
 80066e8:	9b07      	ldr	r3, [sp, #28]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	3202      	adds	r2, #2
 80066ee:	f103 010c 	add.w	r1, r3, #12
 80066f2:	0092      	lsls	r2, r2, #2
 80066f4:	300c      	adds	r0, #12
 80066f6:	f001 fcfb 	bl	80080f0 <memcpy>
 80066fa:	aa1e      	add	r2, sp, #120	; 0x78
 80066fc:	a91d      	add	r1, sp, #116	; 0x74
 80066fe:	ec4b ab10 	vmov	d0, sl, fp
 8006702:	4648      	mov	r0, r9
 8006704:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006708:	f002 f83e 	bl	8008788 <__d2b>
 800670c:	901c      	str	r0, [sp, #112]	; 0x70
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f aee0 	beq.w	80064d4 <_strtod_l+0x43c>
 8006714:	2101      	movs	r1, #1
 8006716:	4648      	mov	r0, r9
 8006718:	f001 fe07 	bl	800832a <__i2b>
 800671c:	4680      	mov	r8, r0
 800671e:	2800      	cmp	r0, #0
 8006720:	f43f aed8 	beq.w	80064d4 <_strtod_l+0x43c>
 8006724:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006726:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006728:	2e00      	cmp	r6, #0
 800672a:	bfab      	itete	ge
 800672c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800672e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006730:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006732:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006734:	bfac      	ite	ge
 8006736:	18f7      	addge	r7, r6, r3
 8006738:	1b9d      	sublt	r5, r3, r6
 800673a:	9b04      	ldr	r3, [sp, #16]
 800673c:	1af6      	subs	r6, r6, r3
 800673e:	4416      	add	r6, r2
 8006740:	4b63      	ldr	r3, [pc, #396]	; (80068d0 <_strtod_l+0x838>)
 8006742:	3e01      	subs	r6, #1
 8006744:	429e      	cmp	r6, r3
 8006746:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800674a:	f280 80af 	bge.w	80068ac <_strtod_l+0x814>
 800674e:	1b9b      	subs	r3, r3, r6
 8006750:	2b1f      	cmp	r3, #31
 8006752:	eba2 0203 	sub.w	r2, r2, r3
 8006756:	f04f 0101 	mov.w	r1, #1
 800675a:	f300 809b 	bgt.w	8006894 <_strtod_l+0x7fc>
 800675e:	fa01 f303 	lsl.w	r3, r1, r3
 8006762:	930f      	str	r3, [sp, #60]	; 0x3c
 8006764:	2300      	movs	r3, #0
 8006766:	930a      	str	r3, [sp, #40]	; 0x28
 8006768:	18be      	adds	r6, r7, r2
 800676a:	9b04      	ldr	r3, [sp, #16]
 800676c:	42b7      	cmp	r7, r6
 800676e:	4415      	add	r5, r2
 8006770:	441d      	add	r5, r3
 8006772:	463b      	mov	r3, r7
 8006774:	bfa8      	it	ge
 8006776:	4633      	movge	r3, r6
 8006778:	42ab      	cmp	r3, r5
 800677a:	bfa8      	it	ge
 800677c:	462b      	movge	r3, r5
 800677e:	2b00      	cmp	r3, #0
 8006780:	bfc2      	ittt	gt
 8006782:	1af6      	subgt	r6, r6, r3
 8006784:	1aed      	subgt	r5, r5, r3
 8006786:	1aff      	subgt	r7, r7, r3
 8006788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800678a:	b1bb      	cbz	r3, 80067bc <_strtod_l+0x724>
 800678c:	4641      	mov	r1, r8
 800678e:	461a      	mov	r2, r3
 8006790:	4648      	mov	r0, r9
 8006792:	f001 fe69 	bl	8008468 <__pow5mult>
 8006796:	4680      	mov	r8, r0
 8006798:	2800      	cmp	r0, #0
 800679a:	f43f ae9b 	beq.w	80064d4 <_strtod_l+0x43c>
 800679e:	4601      	mov	r1, r0
 80067a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80067a2:	4648      	mov	r0, r9
 80067a4:	f001 fdca 	bl	800833c <__multiply>
 80067a8:	900c      	str	r0, [sp, #48]	; 0x30
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f43f ae92 	beq.w	80064d4 <_strtod_l+0x43c>
 80067b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067b2:	4648      	mov	r0, r9
 80067b4:	f001 fcdb 	bl	800816e <_Bfree>
 80067b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067ba:	931c      	str	r3, [sp, #112]	; 0x70
 80067bc:	2e00      	cmp	r6, #0
 80067be:	dc7a      	bgt.n	80068b6 <_strtod_l+0x81e>
 80067c0:	9b06      	ldr	r3, [sp, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd08      	ble.n	80067d8 <_strtod_l+0x740>
 80067c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80067c8:	9905      	ldr	r1, [sp, #20]
 80067ca:	4648      	mov	r0, r9
 80067cc:	f001 fe4c 	bl	8008468 <__pow5mult>
 80067d0:	9005      	str	r0, [sp, #20]
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f43f ae7e 	beq.w	80064d4 <_strtod_l+0x43c>
 80067d8:	2d00      	cmp	r5, #0
 80067da:	dd08      	ble.n	80067ee <_strtod_l+0x756>
 80067dc:	462a      	mov	r2, r5
 80067de:	9905      	ldr	r1, [sp, #20]
 80067e0:	4648      	mov	r0, r9
 80067e2:	f001 fe8f 	bl	8008504 <__lshift>
 80067e6:	9005      	str	r0, [sp, #20]
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f43f ae73 	beq.w	80064d4 <_strtod_l+0x43c>
 80067ee:	2f00      	cmp	r7, #0
 80067f0:	dd08      	ble.n	8006804 <_strtod_l+0x76c>
 80067f2:	4641      	mov	r1, r8
 80067f4:	463a      	mov	r2, r7
 80067f6:	4648      	mov	r0, r9
 80067f8:	f001 fe84 	bl	8008504 <__lshift>
 80067fc:	4680      	mov	r8, r0
 80067fe:	2800      	cmp	r0, #0
 8006800:	f43f ae68 	beq.w	80064d4 <_strtod_l+0x43c>
 8006804:	9a05      	ldr	r2, [sp, #20]
 8006806:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006808:	4648      	mov	r0, r9
 800680a:	f001 fee9 	bl	80085e0 <__mdiff>
 800680e:	4604      	mov	r4, r0
 8006810:	2800      	cmp	r0, #0
 8006812:	f43f ae5f 	beq.w	80064d4 <_strtod_l+0x43c>
 8006816:	68c3      	ldr	r3, [r0, #12]
 8006818:	930c      	str	r3, [sp, #48]	; 0x30
 800681a:	2300      	movs	r3, #0
 800681c:	60c3      	str	r3, [r0, #12]
 800681e:	4641      	mov	r1, r8
 8006820:	f001 fec4 	bl	80085ac <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	da55      	bge.n	80068d4 <_strtod_l+0x83c>
 8006828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800682a:	b9e3      	cbnz	r3, 8006866 <_strtod_l+0x7ce>
 800682c:	f1ba 0f00 	cmp.w	sl, #0
 8006830:	d119      	bne.n	8006866 <_strtod_l+0x7ce>
 8006832:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006836:	b9b3      	cbnz	r3, 8006866 <_strtod_l+0x7ce>
 8006838:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800683c:	0d1b      	lsrs	r3, r3, #20
 800683e:	051b      	lsls	r3, r3, #20
 8006840:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006844:	d90f      	bls.n	8006866 <_strtod_l+0x7ce>
 8006846:	6963      	ldr	r3, [r4, #20]
 8006848:	b913      	cbnz	r3, 8006850 <_strtod_l+0x7b8>
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	2b01      	cmp	r3, #1
 800684e:	dd0a      	ble.n	8006866 <_strtod_l+0x7ce>
 8006850:	4621      	mov	r1, r4
 8006852:	2201      	movs	r2, #1
 8006854:	4648      	mov	r0, r9
 8006856:	f001 fe55 	bl	8008504 <__lshift>
 800685a:	4641      	mov	r1, r8
 800685c:	4604      	mov	r4, r0
 800685e:	f001 fea5 	bl	80085ac <__mcmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	dc67      	bgt.n	8006936 <_strtod_l+0x89e>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d171      	bne.n	8006950 <_strtod_l+0x8b8>
 800686c:	e63d      	b.n	80064ea <_strtod_l+0x452>
 800686e:	f018 0f01 	tst.w	r8, #1
 8006872:	d004      	beq.n	800687e <_strtod_l+0x7e6>
 8006874:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006878:	f7f9 febe 	bl	80005f8 <__aeabi_dmul>
 800687c:	2301      	movs	r3, #1
 800687e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006882:	3508      	adds	r5, #8
 8006884:	e6e5      	b.n	8006652 <_strtod_l+0x5ba>
 8006886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	ea03 0a0a 	and.w	sl, r3, sl
 8006892:	e6ff      	b.n	8006694 <_strtod_l+0x5fc>
 8006894:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006898:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800689c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80068a0:	36e2      	adds	r6, #226	; 0xe2
 80068a2:	fa01 f306 	lsl.w	r3, r1, r6
 80068a6:	930a      	str	r3, [sp, #40]	; 0x28
 80068a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80068aa:	e75d      	b.n	8006768 <_strtod_l+0x6d0>
 80068ac:	2300      	movs	r3, #0
 80068ae:	930a      	str	r3, [sp, #40]	; 0x28
 80068b0:	2301      	movs	r3, #1
 80068b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80068b4:	e758      	b.n	8006768 <_strtod_l+0x6d0>
 80068b6:	4632      	mov	r2, r6
 80068b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068ba:	4648      	mov	r0, r9
 80068bc:	f001 fe22 	bl	8008504 <__lshift>
 80068c0:	901c      	str	r0, [sp, #112]	; 0x70
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f47f af7c 	bne.w	80067c0 <_strtod_l+0x728>
 80068c8:	e604      	b.n	80064d4 <_strtod_l+0x43c>
 80068ca:	bf00      	nop
 80068cc:	08008ed0 	.word	0x08008ed0
 80068d0:	fffffc02 	.word	0xfffffc02
 80068d4:	465d      	mov	r5, fp
 80068d6:	f040 8086 	bne.w	80069e6 <_strtod_l+0x94e>
 80068da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068e0:	b32a      	cbz	r2, 800692e <_strtod_l+0x896>
 80068e2:	4aaf      	ldr	r2, [pc, #700]	; (8006ba0 <_strtod_l+0xb08>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d153      	bne.n	8006990 <_strtod_l+0x8f8>
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	4650      	mov	r0, sl
 80068ec:	b1d3      	cbz	r3, 8006924 <_strtod_l+0x88c>
 80068ee:	4aad      	ldr	r2, [pc, #692]	; (8006ba4 <_strtod_l+0xb0c>)
 80068f0:	402a      	ands	r2, r5
 80068f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80068f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068fa:	d816      	bhi.n	800692a <_strtod_l+0x892>
 80068fc:	0d12      	lsrs	r2, r2, #20
 80068fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006902:	fa01 f303 	lsl.w	r3, r1, r3
 8006906:	4298      	cmp	r0, r3
 8006908:	d142      	bne.n	8006990 <_strtod_l+0x8f8>
 800690a:	4ba7      	ldr	r3, [pc, #668]	; (8006ba8 <_strtod_l+0xb10>)
 800690c:	429d      	cmp	r5, r3
 800690e:	d102      	bne.n	8006916 <_strtod_l+0x87e>
 8006910:	3001      	adds	r0, #1
 8006912:	f43f addf 	beq.w	80064d4 <_strtod_l+0x43c>
 8006916:	4ba3      	ldr	r3, [pc, #652]	; (8006ba4 <_strtod_l+0xb0c>)
 8006918:	402b      	ands	r3, r5
 800691a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800691e:	f04f 0a00 	mov.w	sl, #0
 8006922:	e7a0      	b.n	8006866 <_strtod_l+0x7ce>
 8006924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006928:	e7ed      	b.n	8006906 <_strtod_l+0x86e>
 800692a:	460b      	mov	r3, r1
 800692c:	e7eb      	b.n	8006906 <_strtod_l+0x86e>
 800692e:	bb7b      	cbnz	r3, 8006990 <_strtod_l+0x8f8>
 8006930:	f1ba 0f00 	cmp.w	sl, #0
 8006934:	d12c      	bne.n	8006990 <_strtod_l+0x8f8>
 8006936:	9904      	ldr	r1, [sp, #16]
 8006938:	4a9a      	ldr	r2, [pc, #616]	; (8006ba4 <_strtod_l+0xb0c>)
 800693a:	465b      	mov	r3, fp
 800693c:	b1f1      	cbz	r1, 800697c <_strtod_l+0x8e4>
 800693e:	ea02 010b 	and.w	r1, r2, fp
 8006942:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006946:	dc19      	bgt.n	800697c <_strtod_l+0x8e4>
 8006948:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800694c:	f77f ae5b 	ble.w	8006606 <_strtod_l+0x56e>
 8006950:	4a96      	ldr	r2, [pc, #600]	; (8006bac <_strtod_l+0xb14>)
 8006952:	2300      	movs	r3, #0
 8006954:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006958:	4650      	mov	r0, sl
 800695a:	4659      	mov	r1, fp
 800695c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006960:	f7f9 fe4a 	bl	80005f8 <__aeabi_dmul>
 8006964:	4682      	mov	sl, r0
 8006966:	468b      	mov	fp, r1
 8006968:	2900      	cmp	r1, #0
 800696a:	f47f adbe 	bne.w	80064ea <_strtod_l+0x452>
 800696e:	2800      	cmp	r0, #0
 8006970:	f47f adbb 	bne.w	80064ea <_strtod_l+0x452>
 8006974:	2322      	movs	r3, #34	; 0x22
 8006976:	f8c9 3000 	str.w	r3, [r9]
 800697a:	e5b6      	b.n	80064ea <_strtod_l+0x452>
 800697c:	4013      	ands	r3, r2
 800697e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006982:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006986:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800698a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800698e:	e76a      	b.n	8006866 <_strtod_l+0x7ce>
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	b193      	cbz	r3, 80069ba <_strtod_l+0x922>
 8006994:	422b      	tst	r3, r5
 8006996:	f43f af66 	beq.w	8006866 <_strtod_l+0x7ce>
 800699a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800699c:	9a04      	ldr	r2, [sp, #16]
 800699e:	4650      	mov	r0, sl
 80069a0:	4659      	mov	r1, fp
 80069a2:	b173      	cbz	r3, 80069c2 <_strtod_l+0x92a>
 80069a4:	f7ff fb5c 	bl	8006060 <sulp>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069b0:	f7f9 fc6c 	bl	800028c <__adddf3>
 80069b4:	4682      	mov	sl, r0
 80069b6:	468b      	mov	fp, r1
 80069b8:	e755      	b.n	8006866 <_strtod_l+0x7ce>
 80069ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069bc:	ea13 0f0a 	tst.w	r3, sl
 80069c0:	e7e9      	b.n	8006996 <_strtod_l+0x8fe>
 80069c2:	f7ff fb4d 	bl	8006060 <sulp>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069ce:	f7f9 fc5b 	bl	8000288 <__aeabi_dsub>
 80069d2:	2200      	movs	r2, #0
 80069d4:	2300      	movs	r3, #0
 80069d6:	4682      	mov	sl, r0
 80069d8:	468b      	mov	fp, r1
 80069da:	f7fa f875 	bl	8000ac8 <__aeabi_dcmpeq>
 80069de:	2800      	cmp	r0, #0
 80069e0:	f47f ae11 	bne.w	8006606 <_strtod_l+0x56e>
 80069e4:	e73f      	b.n	8006866 <_strtod_l+0x7ce>
 80069e6:	4641      	mov	r1, r8
 80069e8:	4620      	mov	r0, r4
 80069ea:	f001 ff1c 	bl	8008826 <__ratio>
 80069ee:	ec57 6b10 	vmov	r6, r7, d0
 80069f2:	2200      	movs	r2, #0
 80069f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069f8:	ee10 0a10 	vmov	r0, s0
 80069fc:	4639      	mov	r1, r7
 80069fe:	f7fa f877 	bl	8000af0 <__aeabi_dcmple>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d077      	beq.n	8006af6 <_strtod_l+0xa5e>
 8006a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d04a      	beq.n	8006aa2 <_strtod_l+0xa0a>
 8006a0c:	4b68      	ldr	r3, [pc, #416]	; (8006bb0 <_strtod_l+0xb18>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a14:	4f66      	ldr	r7, [pc, #408]	; (8006bb0 <_strtod_l+0xb18>)
 8006a16:	2600      	movs	r6, #0
 8006a18:	4b62      	ldr	r3, [pc, #392]	; (8006ba4 <_strtod_l+0xb0c>)
 8006a1a:	402b      	ands	r3, r5
 8006a1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a20:	4b64      	ldr	r3, [pc, #400]	; (8006bb4 <_strtod_l+0xb1c>)
 8006a22:	429a      	cmp	r2, r3
 8006a24:	f040 80ce 	bne.w	8006bc4 <_strtod_l+0xb2c>
 8006a28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a30:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006a34:	ec4b ab10 	vmov	d0, sl, fp
 8006a38:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006a3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a40:	f001 fe2c 	bl	800869c <__ulp>
 8006a44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a48:	ec53 2b10 	vmov	r2, r3, d0
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4652      	mov	r2, sl
 8006a52:	465b      	mov	r3, fp
 8006a54:	f7f9 fc1a 	bl	800028c <__adddf3>
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4952      	ldr	r1, [pc, #328]	; (8006ba4 <_strtod_l+0xb0c>)
 8006a5c:	4a56      	ldr	r2, [pc, #344]	; (8006bb8 <_strtod_l+0xb20>)
 8006a5e:	4019      	ands	r1, r3
 8006a60:	4291      	cmp	r1, r2
 8006a62:	4682      	mov	sl, r0
 8006a64:	d95b      	bls.n	8006b1e <_strtod_l+0xa86>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d103      	bne.n	8006a78 <_strtod_l+0x9e0>
 8006a70:	9b08      	ldr	r3, [sp, #32]
 8006a72:	3301      	adds	r3, #1
 8006a74:	f43f ad2e 	beq.w	80064d4 <_strtod_l+0x43c>
 8006a78:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006ba8 <_strtod_l+0xb10>
 8006a7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006a80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a82:	4648      	mov	r0, r9
 8006a84:	f001 fb73 	bl	800816e <_Bfree>
 8006a88:	9905      	ldr	r1, [sp, #20]
 8006a8a:	4648      	mov	r0, r9
 8006a8c:	f001 fb6f 	bl	800816e <_Bfree>
 8006a90:	4641      	mov	r1, r8
 8006a92:	4648      	mov	r0, r9
 8006a94:	f001 fb6b 	bl	800816e <_Bfree>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4648      	mov	r0, r9
 8006a9c:	f001 fb67 	bl	800816e <_Bfree>
 8006aa0:	e619      	b.n	80066d6 <_strtod_l+0x63e>
 8006aa2:	f1ba 0f00 	cmp.w	sl, #0
 8006aa6:	d11a      	bne.n	8006ade <_strtod_l+0xa46>
 8006aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006aac:	b9eb      	cbnz	r3, 8006aea <_strtod_l+0xa52>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4b3f      	ldr	r3, [pc, #252]	; (8006bb0 <_strtod_l+0xb18>)
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	f7fa f811 	bl	8000adc <__aeabi_dcmplt>
 8006aba:	b9c8      	cbnz	r0, 8006af0 <_strtod_l+0xa58>
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4b3e      	ldr	r3, [pc, #248]	; (8006bbc <_strtod_l+0xb24>)
 8006ac4:	f7f9 fd98 	bl	80005f8 <__aeabi_dmul>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
 8006acc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006ad0:	9618      	str	r6, [sp, #96]	; 0x60
 8006ad2:	9319      	str	r3, [sp, #100]	; 0x64
 8006ad4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006ad8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006adc:	e79c      	b.n	8006a18 <_strtod_l+0x980>
 8006ade:	f1ba 0f01 	cmp.w	sl, #1
 8006ae2:	d102      	bne.n	8006aea <_strtod_l+0xa52>
 8006ae4:	2d00      	cmp	r5, #0
 8006ae6:	f43f ad8e 	beq.w	8006606 <_strtod_l+0x56e>
 8006aea:	2200      	movs	r2, #0
 8006aec:	4b34      	ldr	r3, [pc, #208]	; (8006bc0 <_strtod_l+0xb28>)
 8006aee:	e78f      	b.n	8006a10 <_strtod_l+0x978>
 8006af0:	2600      	movs	r6, #0
 8006af2:	4f32      	ldr	r7, [pc, #200]	; (8006bbc <_strtod_l+0xb24>)
 8006af4:	e7ea      	b.n	8006acc <_strtod_l+0xa34>
 8006af6:	4b31      	ldr	r3, [pc, #196]	; (8006bbc <_strtod_l+0xb24>)
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	2200      	movs	r2, #0
 8006afe:	f7f9 fd7b 	bl	80005f8 <__aeabi_dmul>
 8006b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b04:	4606      	mov	r6, r0
 8006b06:	460f      	mov	r7, r1
 8006b08:	b933      	cbnz	r3, 8006b18 <_strtod_l+0xa80>
 8006b0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b0e:	9010      	str	r0, [sp, #64]	; 0x40
 8006b10:	9311      	str	r3, [sp, #68]	; 0x44
 8006b12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b16:	e7df      	b.n	8006ad8 <_strtod_l+0xa40>
 8006b18:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006b1c:	e7f9      	b.n	8006b12 <_strtod_l+0xa7a>
 8006b1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006b22:	9b04      	ldr	r3, [sp, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1ab      	bne.n	8006a80 <_strtod_l+0x9e8>
 8006b28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b2c:	0d1b      	lsrs	r3, r3, #20
 8006b2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b30:	051b      	lsls	r3, r3, #20
 8006b32:	429a      	cmp	r2, r3
 8006b34:	465d      	mov	r5, fp
 8006b36:	d1a3      	bne.n	8006a80 <_strtod_l+0x9e8>
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7fa f80c 	bl	8000b58 <__aeabi_d2iz>
 8006b40:	f7f9 fcf0 	bl	8000524 <__aeabi_i2d>
 8006b44:	460b      	mov	r3, r1
 8006b46:	4602      	mov	r2, r0
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7f9 fb9c 	bl	8000288 <__aeabi_dsub>
 8006b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b52:	4606      	mov	r6, r0
 8006b54:	460f      	mov	r7, r1
 8006b56:	b933      	cbnz	r3, 8006b66 <_strtod_l+0xace>
 8006b58:	f1ba 0f00 	cmp.w	sl, #0
 8006b5c:	d103      	bne.n	8006b66 <_strtod_l+0xace>
 8006b5e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	d06d      	beq.n	8006c42 <_strtod_l+0xbaa>
 8006b66:	a30a      	add	r3, pc, #40	; (adr r3, 8006b90 <_strtod_l+0xaf8>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f47f acb8 	bne.w	80064ea <_strtod_l+0x452>
 8006b7a:	a307      	add	r3, pc, #28	; (adr r3, 8006b98 <_strtod_l+0xb00>)
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	4630      	mov	r0, r6
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7f9 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f43f af79 	beq.w	8006a80 <_strtod_l+0x9e8>
 8006b8e:	e4ac      	b.n	80064ea <_strtod_l+0x452>
 8006b90:	94a03595 	.word	0x94a03595
 8006b94:	3fdfffff 	.word	0x3fdfffff
 8006b98:	35afe535 	.word	0x35afe535
 8006b9c:	3fe00000 	.word	0x3fe00000
 8006ba0:	000fffff 	.word	0x000fffff
 8006ba4:	7ff00000 	.word	0x7ff00000
 8006ba8:	7fefffff 	.word	0x7fefffff
 8006bac:	39500000 	.word	0x39500000
 8006bb0:	3ff00000 	.word	0x3ff00000
 8006bb4:	7fe00000 	.word	0x7fe00000
 8006bb8:	7c9fffff 	.word	0x7c9fffff
 8006bbc:	3fe00000 	.word	0x3fe00000
 8006bc0:	bff00000 	.word	0xbff00000
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	b333      	cbz	r3, 8006c16 <_strtod_l+0xb7e>
 8006bc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006bce:	d822      	bhi.n	8006c16 <_strtod_l+0xb7e>
 8006bd0:	a327      	add	r3, pc, #156	; (adr r3, 8006c70 <_strtod_l+0xbd8>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	4639      	mov	r1, r7
 8006bda:	f7f9 ff89 	bl	8000af0 <__aeabi_dcmple>
 8006bde:	b1a0      	cbz	r0, 8006c0a <_strtod_l+0xb72>
 8006be0:	4639      	mov	r1, r7
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7f9 ffe0 	bl	8000ba8 <__aeabi_d2uiz>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	bf08      	it	eq
 8006bec:	2001      	moveq	r0, #1
 8006bee:	f7f9 fc89 	bl	8000504 <__aeabi_ui2d>
 8006bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	460f      	mov	r7, r1
 8006bf8:	bb03      	cbnz	r3, 8006c3c <_strtod_l+0xba4>
 8006bfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bfe:	9012      	str	r0, [sp, #72]	; 0x48
 8006c00:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006c06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c0e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c16:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006c1a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006c1e:	f001 fd3d 	bl	800869c <__ulp>
 8006c22:	4650      	mov	r0, sl
 8006c24:	ec53 2b10 	vmov	r2, r3, d0
 8006c28:	4659      	mov	r1, fp
 8006c2a:	f7f9 fce5 	bl	80005f8 <__aeabi_dmul>
 8006c2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c32:	f7f9 fb2b 	bl	800028c <__adddf3>
 8006c36:	4682      	mov	sl, r0
 8006c38:	468b      	mov	fp, r1
 8006c3a:	e772      	b.n	8006b22 <_strtod_l+0xa8a>
 8006c3c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006c40:	e7df      	b.n	8006c02 <_strtod_l+0xb6a>
 8006c42:	a30d      	add	r3, pc, #52	; (adr r3, 8006c78 <_strtod_l+0xbe0>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 ff48 	bl	8000adc <__aeabi_dcmplt>
 8006c4c:	e79c      	b.n	8006b88 <_strtod_l+0xaf0>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	930d      	str	r3, [sp, #52]	; 0x34
 8006c52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	f7ff ba61 	b.w	800611e <_strtod_l+0x86>
 8006c5c:	2b65      	cmp	r3, #101	; 0x65
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f43f ab4e 	beq.w	8006302 <_strtod_l+0x26a>
 8006c66:	2101      	movs	r1, #1
 8006c68:	4614      	mov	r4, r2
 8006c6a:	9104      	str	r1, [sp, #16]
 8006c6c:	f7ff bacb 	b.w	8006206 <_strtod_l+0x16e>
 8006c70:	ffc00000 	.word	0xffc00000
 8006c74:	41dfffff 	.word	0x41dfffff
 8006c78:	94a03595 	.word	0x94a03595
 8006c7c:	3fcfffff 	.word	0x3fcfffff

08006c80 <_strtod_r>:
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <_strtod_r+0x18>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	b410      	push	{r4}
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	4c04      	ldr	r4, [pc, #16]	; (8006c9c <_strtod_r+0x1c>)
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf08      	it	eq
 8006c8e:	4623      	moveq	r3, r4
 8006c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c94:	f7ff ba00 	b.w	8006098 <_strtod_l>
 8006c98:	20000010 	.word	0x20000010
 8006c9c:	20000074 	.word	0x20000074

08006ca0 <_strtol_l.isra.0>:
 8006ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	4689      	mov	r9, r1
 8006ca8:	4692      	mov	sl, r2
 8006caa:	461e      	mov	r6, r3
 8006cac:	460f      	mov	r7, r1
 8006cae:	463d      	mov	r5, r7
 8006cb0:	9808      	ldr	r0, [sp, #32]
 8006cb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cb6:	f001 f9ed 	bl	8008094 <__locale_ctype_ptr_l>
 8006cba:	4420      	add	r0, r4
 8006cbc:	7843      	ldrb	r3, [r0, #1]
 8006cbe:	f013 0308 	ands.w	r3, r3, #8
 8006cc2:	d132      	bne.n	8006d2a <_strtol_l.isra.0+0x8a>
 8006cc4:	2c2d      	cmp	r4, #45	; 0x2d
 8006cc6:	d132      	bne.n	8006d2e <_strtol_l.isra.0+0x8e>
 8006cc8:	787c      	ldrb	r4, [r7, #1]
 8006cca:	1cbd      	adds	r5, r7, #2
 8006ccc:	2201      	movs	r2, #1
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d05d      	beq.n	8006d8e <_strtol_l.isra.0+0xee>
 8006cd2:	2e10      	cmp	r6, #16
 8006cd4:	d109      	bne.n	8006cea <_strtol_l.isra.0+0x4a>
 8006cd6:	2c30      	cmp	r4, #48	; 0x30
 8006cd8:	d107      	bne.n	8006cea <_strtol_l.isra.0+0x4a>
 8006cda:	782b      	ldrb	r3, [r5, #0]
 8006cdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ce0:	2b58      	cmp	r3, #88	; 0x58
 8006ce2:	d14f      	bne.n	8006d84 <_strtol_l.isra.0+0xe4>
 8006ce4:	786c      	ldrb	r4, [r5, #1]
 8006ce6:	2610      	movs	r6, #16
 8006ce8:	3502      	adds	r5, #2
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	bf14      	ite	ne
 8006cee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006cf2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006cf6:	2700      	movs	r7, #0
 8006cf8:	fbb1 fcf6 	udiv	ip, r1, r6
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006d02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d817      	bhi.n	8006d3a <_strtol_l.isra.0+0x9a>
 8006d0a:	461c      	mov	r4, r3
 8006d0c:	42a6      	cmp	r6, r4
 8006d0e:	dd23      	ble.n	8006d58 <_strtol_l.isra.0+0xb8>
 8006d10:	1c7b      	adds	r3, r7, #1
 8006d12:	d007      	beq.n	8006d24 <_strtol_l.isra.0+0x84>
 8006d14:	4584      	cmp	ip, r0
 8006d16:	d31c      	bcc.n	8006d52 <_strtol_l.isra.0+0xb2>
 8006d18:	d101      	bne.n	8006d1e <_strtol_l.isra.0+0x7e>
 8006d1a:	45a6      	cmp	lr, r4
 8006d1c:	db19      	blt.n	8006d52 <_strtol_l.isra.0+0xb2>
 8006d1e:	fb00 4006 	mla	r0, r0, r6, r4
 8006d22:	2701      	movs	r7, #1
 8006d24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d28:	e7eb      	b.n	8006d02 <_strtol_l.isra.0+0x62>
 8006d2a:	462f      	mov	r7, r5
 8006d2c:	e7bf      	b.n	8006cae <_strtol_l.isra.0+0xe>
 8006d2e:	2c2b      	cmp	r4, #43	; 0x2b
 8006d30:	bf04      	itt	eq
 8006d32:	1cbd      	addeq	r5, r7, #2
 8006d34:	787c      	ldrbeq	r4, [r7, #1]
 8006d36:	461a      	mov	r2, r3
 8006d38:	e7c9      	b.n	8006cce <_strtol_l.isra.0+0x2e>
 8006d3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006d3e:	2b19      	cmp	r3, #25
 8006d40:	d801      	bhi.n	8006d46 <_strtol_l.isra.0+0xa6>
 8006d42:	3c37      	subs	r4, #55	; 0x37
 8006d44:	e7e2      	b.n	8006d0c <_strtol_l.isra.0+0x6c>
 8006d46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006d4a:	2b19      	cmp	r3, #25
 8006d4c:	d804      	bhi.n	8006d58 <_strtol_l.isra.0+0xb8>
 8006d4e:	3c57      	subs	r4, #87	; 0x57
 8006d50:	e7dc      	b.n	8006d0c <_strtol_l.isra.0+0x6c>
 8006d52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d56:	e7e5      	b.n	8006d24 <_strtol_l.isra.0+0x84>
 8006d58:	1c7b      	adds	r3, r7, #1
 8006d5a:	d108      	bne.n	8006d6e <_strtol_l.isra.0+0xce>
 8006d5c:	2322      	movs	r3, #34	; 0x22
 8006d5e:	f8c8 3000 	str.w	r3, [r8]
 8006d62:	4608      	mov	r0, r1
 8006d64:	f1ba 0f00 	cmp.w	sl, #0
 8006d68:	d107      	bne.n	8006d7a <_strtol_l.isra.0+0xda>
 8006d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6e:	b102      	cbz	r2, 8006d72 <_strtol_l.isra.0+0xd2>
 8006d70:	4240      	negs	r0, r0
 8006d72:	f1ba 0f00 	cmp.w	sl, #0
 8006d76:	d0f8      	beq.n	8006d6a <_strtol_l.isra.0+0xca>
 8006d78:	b10f      	cbz	r7, 8006d7e <_strtol_l.isra.0+0xde>
 8006d7a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006d7e:	f8ca 9000 	str.w	r9, [sl]
 8006d82:	e7f2      	b.n	8006d6a <_strtol_l.isra.0+0xca>
 8006d84:	2430      	movs	r4, #48	; 0x30
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d1af      	bne.n	8006cea <_strtol_l.isra.0+0x4a>
 8006d8a:	2608      	movs	r6, #8
 8006d8c:	e7ad      	b.n	8006cea <_strtol_l.isra.0+0x4a>
 8006d8e:	2c30      	cmp	r4, #48	; 0x30
 8006d90:	d0a3      	beq.n	8006cda <_strtol_l.isra.0+0x3a>
 8006d92:	260a      	movs	r6, #10
 8006d94:	e7a9      	b.n	8006cea <_strtol_l.isra.0+0x4a>
	...

08006d98 <_strtol_r>:
 8006d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d9a:	4c06      	ldr	r4, [pc, #24]	; (8006db4 <_strtol_r+0x1c>)
 8006d9c:	4d06      	ldr	r5, [pc, #24]	; (8006db8 <_strtol_r+0x20>)
 8006d9e:	6824      	ldr	r4, [r4, #0]
 8006da0:	6a24      	ldr	r4, [r4, #32]
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	bf08      	it	eq
 8006da6:	462c      	moveq	r4, r5
 8006da8:	9400      	str	r4, [sp, #0]
 8006daa:	f7ff ff79 	bl	8006ca0 <_strtol_l.isra.0>
 8006dae:	b003      	add	sp, #12
 8006db0:	bd30      	pop	{r4, r5, pc}
 8006db2:	bf00      	nop
 8006db4:	20000010 	.word	0x20000010
 8006db8:	20000074 	.word	0x20000074

08006dbc <quorem>:
 8006dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc0:	6903      	ldr	r3, [r0, #16]
 8006dc2:	690c      	ldr	r4, [r1, #16]
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	f2c0 8082 	blt.w	8006ed0 <quorem+0x114>
 8006dcc:	3c01      	subs	r4, #1
 8006dce:	f101 0714 	add.w	r7, r1, #20
 8006dd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006dd6:	f100 0614 	add.w	r6, r0, #20
 8006dda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006dde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006de2:	eb06 030c 	add.w	r3, r6, ip
 8006de6:	3501      	adds	r5, #1
 8006de8:	eb07 090c 	add.w	r9, r7, ip
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	fbb0 f5f5 	udiv	r5, r0, r5
 8006df2:	b395      	cbz	r5, 8006e5a <quorem+0x9e>
 8006df4:	f04f 0a00 	mov.w	sl, #0
 8006df8:	4638      	mov	r0, r7
 8006dfa:	46b6      	mov	lr, r6
 8006dfc:	46d3      	mov	fp, sl
 8006dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e02:	b293      	uxth	r3, r2
 8006e04:	fb05 a303 	mla	r3, r5, r3, sl
 8006e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	ebab 0303 	sub.w	r3, fp, r3
 8006e12:	0c12      	lsrs	r2, r2, #16
 8006e14:	f8de b000 	ldr.w	fp, [lr]
 8006e18:	fb05 a202 	mla	r2, r5, r2, sl
 8006e1c:	fa13 f38b 	uxtah	r3, r3, fp
 8006e20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006e24:	fa1f fb82 	uxth.w	fp, r2
 8006e28:	f8de 2000 	ldr.w	r2, [lr]
 8006e2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3a:	4581      	cmp	r9, r0
 8006e3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006e40:	f84e 3b04 	str.w	r3, [lr], #4
 8006e44:	d2db      	bcs.n	8006dfe <quorem+0x42>
 8006e46:	f856 300c 	ldr.w	r3, [r6, ip]
 8006e4a:	b933      	cbnz	r3, 8006e5a <quorem+0x9e>
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	3b04      	subs	r3, #4
 8006e50:	429e      	cmp	r6, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	d330      	bcc.n	8006eb8 <quorem+0xfc>
 8006e56:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f001 fba6 	bl	80085ac <__mcmp>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	db25      	blt.n	8006eb0 <quorem+0xf4>
 8006e64:	3501      	adds	r5, #1
 8006e66:	4630      	mov	r0, r6
 8006e68:	f04f 0c00 	mov.w	ip, #0
 8006e6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006e70:	f8d0 e000 	ldr.w	lr, [r0]
 8006e74:	b293      	uxth	r3, r2
 8006e76:	ebac 0303 	sub.w	r3, ip, r3
 8006e7a:	0c12      	lsrs	r2, r2, #16
 8006e7c:	fa13 f38e 	uxtah	r3, r3, lr
 8006e80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e8e:	45b9      	cmp	r9, r7
 8006e90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e94:	f840 3b04 	str.w	r3, [r0], #4
 8006e98:	d2e8      	bcs.n	8006e6c <quorem+0xb0>
 8006e9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006e9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ea2:	b92a      	cbnz	r2, 8006eb0 <quorem+0xf4>
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	429e      	cmp	r6, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	d30b      	bcc.n	8006ec4 <quorem+0x108>
 8006eac:	f8c8 4010 	str.w	r4, [r8, #16]
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	b003      	add	sp, #12
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	3b04      	subs	r3, #4
 8006ebc:	2a00      	cmp	r2, #0
 8006ebe:	d1ca      	bne.n	8006e56 <quorem+0x9a>
 8006ec0:	3c01      	subs	r4, #1
 8006ec2:	e7c5      	b.n	8006e50 <quorem+0x94>
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	3b04      	subs	r3, #4
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	d1ef      	bne.n	8006eac <quorem+0xf0>
 8006ecc:	3c01      	subs	r4, #1
 8006ece:	e7ea      	b.n	8006ea6 <quorem+0xea>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e7ee      	b.n	8006eb2 <quorem+0xf6>
 8006ed4:	0000      	movs	r0, r0
	...

08006ed8 <_dtoa_r>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	ec57 6b10 	vmov	r6, r7, d0
 8006ee0:	b097      	sub	sp, #92	; 0x5c
 8006ee2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ee4:	9106      	str	r1, [sp, #24]
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	920b      	str	r2, [sp, #44]	; 0x2c
 8006eea:	9312      	str	r3, [sp, #72]	; 0x48
 8006eec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ef0:	e9cd 6700 	strd	r6, r7, [sp]
 8006ef4:	b93d      	cbnz	r5, 8006f06 <_dtoa_r+0x2e>
 8006ef6:	2010      	movs	r0, #16
 8006ef8:	f001 f8e0 	bl	80080bc <malloc>
 8006efc:	6260      	str	r0, [r4, #36]	; 0x24
 8006efe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f02:	6005      	str	r5, [r0, #0]
 8006f04:	60c5      	str	r5, [r0, #12]
 8006f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f08:	6819      	ldr	r1, [r3, #0]
 8006f0a:	b151      	cbz	r1, 8006f22 <_dtoa_r+0x4a>
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	604a      	str	r2, [r1, #4]
 8006f10:	2301      	movs	r3, #1
 8006f12:	4093      	lsls	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f001 f929 	bl	800816e <_Bfree>
 8006f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	1e3b      	subs	r3, r7, #0
 8006f24:	bfbb      	ittet	lt
 8006f26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f2a:	9301      	strlt	r3, [sp, #4]
 8006f2c:	2300      	movge	r3, #0
 8006f2e:	2201      	movlt	r2, #1
 8006f30:	bfac      	ite	ge
 8006f32:	f8c8 3000 	strge.w	r3, [r8]
 8006f36:	f8c8 2000 	strlt.w	r2, [r8]
 8006f3a:	4baf      	ldr	r3, [pc, #700]	; (80071f8 <_dtoa_r+0x320>)
 8006f3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f40:	ea33 0308 	bics.w	r3, r3, r8
 8006f44:	d114      	bne.n	8006f70 <_dtoa_r+0x98>
 8006f46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	9b00      	ldr	r3, [sp, #0]
 8006f50:	b923      	cbnz	r3, 8006f5c <_dtoa_r+0x84>
 8006f52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f000 8542 	beq.w	80079e0 <_dtoa_r+0xb08>
 8006f5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800720c <_dtoa_r+0x334>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8544 	beq.w	80079f0 <_dtoa_r+0xb18>
 8006f68:	f10b 0303 	add.w	r3, fp, #3
 8006f6c:	f000 bd3e 	b.w	80079ec <_dtoa_r+0xb14>
 8006f70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2300      	movs	r3, #0
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f80:	4681      	mov	r9, r0
 8006f82:	b168      	cbz	r0, 8006fa0 <_dtoa_r+0xc8>
 8006f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f86:	2301      	movs	r3, #1
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8524 	beq.w	80079da <_dtoa_r+0xb02>
 8006f92:	4b9a      	ldr	r3, [pc, #616]	; (80071fc <_dtoa_r+0x324>)
 8006f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f96:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	f000 bd28 	b.w	80079f0 <_dtoa_r+0xb18>
 8006fa0:	aa14      	add	r2, sp, #80	; 0x50
 8006fa2:	a915      	add	r1, sp, #84	; 0x54
 8006fa4:	ec47 6b10 	vmov	d0, r6, r7
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f001 fbed 	bl	8008788 <__d2b>
 8006fae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006fb2:	9004      	str	r0, [sp, #16]
 8006fb4:	2d00      	cmp	r5, #0
 8006fb6:	d07c      	beq.n	80070b2 <_dtoa_r+0x1da>
 8006fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006fc0:	46b2      	mov	sl, r6
 8006fc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006fca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4b8b      	ldr	r3, [pc, #556]	; (8007200 <_dtoa_r+0x328>)
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	f7f9 f957 	bl	8000288 <__aeabi_dsub>
 8006fda:	a381      	add	r3, pc, #516	; (adr r3, 80071e0 <_dtoa_r+0x308>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7f9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8006fe4:	a380      	add	r3, pc, #512	; (adr r3, 80071e8 <_dtoa_r+0x310>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f7f9 f94f 	bl	800028c <__adddf3>
 8006fee:	4606      	mov	r6, r0
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	460f      	mov	r7, r1
 8006ff4:	f7f9 fa96 	bl	8000524 <__aeabi_i2d>
 8006ff8:	a37d      	add	r3, pc, #500	; (adr r3, 80071f0 <_dtoa_r+0x318>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fafb 	bl	80005f8 <__aeabi_dmul>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4630      	mov	r0, r6
 8007008:	4639      	mov	r1, r7
 800700a:	f7f9 f93f 	bl	800028c <__adddf3>
 800700e:	4606      	mov	r6, r0
 8007010:	460f      	mov	r7, r1
 8007012:	f7f9 fda1 	bl	8000b58 <__aeabi_d2iz>
 8007016:	2200      	movs	r2, #0
 8007018:	4682      	mov	sl, r0
 800701a:	2300      	movs	r3, #0
 800701c:	4630      	mov	r0, r6
 800701e:	4639      	mov	r1, r7
 8007020:	f7f9 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8007024:	b148      	cbz	r0, 800703a <_dtoa_r+0x162>
 8007026:	4650      	mov	r0, sl
 8007028:	f7f9 fa7c 	bl	8000524 <__aeabi_i2d>
 800702c:	4632      	mov	r2, r6
 800702e:	463b      	mov	r3, r7
 8007030:	f7f9 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007034:	b908      	cbnz	r0, 800703a <_dtoa_r+0x162>
 8007036:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800703a:	f1ba 0f16 	cmp.w	sl, #22
 800703e:	d859      	bhi.n	80070f4 <_dtoa_r+0x21c>
 8007040:	4970      	ldr	r1, [pc, #448]	; (8007204 <_dtoa_r+0x32c>)
 8007042:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800704e:	f7f9 fd63 	bl	8000b18 <__aeabi_dcmpgt>
 8007052:	2800      	cmp	r0, #0
 8007054:	d050      	beq.n	80070f8 <_dtoa_r+0x220>
 8007056:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800705a:	2300      	movs	r3, #0
 800705c:	930f      	str	r3, [sp, #60]	; 0x3c
 800705e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007060:	1b5d      	subs	r5, r3, r5
 8007062:	f1b5 0801 	subs.w	r8, r5, #1
 8007066:	bf49      	itett	mi
 8007068:	f1c5 0301 	rsbmi	r3, r5, #1
 800706c:	2300      	movpl	r3, #0
 800706e:	9305      	strmi	r3, [sp, #20]
 8007070:	f04f 0800 	movmi.w	r8, #0
 8007074:	bf58      	it	pl
 8007076:	9305      	strpl	r3, [sp, #20]
 8007078:	f1ba 0f00 	cmp.w	sl, #0
 800707c:	db3e      	blt.n	80070fc <_dtoa_r+0x224>
 800707e:	2300      	movs	r3, #0
 8007080:	44d0      	add	r8, sl
 8007082:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	9b06      	ldr	r3, [sp, #24]
 800708a:	2b09      	cmp	r3, #9
 800708c:	f200 8090 	bhi.w	80071b0 <_dtoa_r+0x2d8>
 8007090:	2b05      	cmp	r3, #5
 8007092:	bfc4      	itt	gt
 8007094:	3b04      	subgt	r3, #4
 8007096:	9306      	strgt	r3, [sp, #24]
 8007098:	9b06      	ldr	r3, [sp, #24]
 800709a:	f1a3 0302 	sub.w	r3, r3, #2
 800709e:	bfcc      	ite	gt
 80070a0:	2500      	movgt	r5, #0
 80070a2:	2501      	movle	r5, #1
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	f200 808f 	bhi.w	80071c8 <_dtoa_r+0x2f0>
 80070aa:	e8df f003 	tbb	[pc, r3]
 80070ae:	7f7d      	.short	0x7f7d
 80070b0:	7131      	.short	0x7131
 80070b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80070b6:	441d      	add	r5, r3
 80070b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80070bc:	2820      	cmp	r0, #32
 80070be:	dd13      	ble.n	80070e8 <_dtoa_r+0x210>
 80070c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80070c4:	9b00      	ldr	r3, [sp, #0]
 80070c6:	fa08 f800 	lsl.w	r8, r8, r0
 80070ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80070ce:	fa23 f000 	lsr.w	r0, r3, r0
 80070d2:	ea48 0000 	orr.w	r0, r8, r0
 80070d6:	f7f9 fa15 	bl	8000504 <__aeabi_ui2d>
 80070da:	2301      	movs	r3, #1
 80070dc:	4682      	mov	sl, r0
 80070de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80070e2:	3d01      	subs	r5, #1
 80070e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80070e6:	e772      	b.n	8006fce <_dtoa_r+0xf6>
 80070e8:	9b00      	ldr	r3, [sp, #0]
 80070ea:	f1c0 0020 	rsb	r0, r0, #32
 80070ee:	fa03 f000 	lsl.w	r0, r3, r0
 80070f2:	e7f0      	b.n	80070d6 <_dtoa_r+0x1fe>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e7b1      	b.n	800705c <_dtoa_r+0x184>
 80070f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80070fa:	e7b0      	b.n	800705e <_dtoa_r+0x186>
 80070fc:	9b05      	ldr	r3, [sp, #20]
 80070fe:	eba3 030a 	sub.w	r3, r3, sl
 8007102:	9305      	str	r3, [sp, #20]
 8007104:	f1ca 0300 	rsb	r3, sl, #0
 8007108:	9307      	str	r3, [sp, #28]
 800710a:	2300      	movs	r3, #0
 800710c:	930e      	str	r3, [sp, #56]	; 0x38
 800710e:	e7bb      	b.n	8007088 <_dtoa_r+0x1b0>
 8007110:	2301      	movs	r3, #1
 8007112:	930a      	str	r3, [sp, #40]	; 0x28
 8007114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007116:	2b00      	cmp	r3, #0
 8007118:	dd59      	ble.n	80071ce <_dtoa_r+0x2f6>
 800711a:	9302      	str	r3, [sp, #8]
 800711c:	4699      	mov	r9, r3
 800711e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007120:	2200      	movs	r2, #0
 8007122:	6072      	str	r2, [r6, #4]
 8007124:	2204      	movs	r2, #4
 8007126:	f102 0014 	add.w	r0, r2, #20
 800712a:	4298      	cmp	r0, r3
 800712c:	6871      	ldr	r1, [r6, #4]
 800712e:	d953      	bls.n	80071d8 <_dtoa_r+0x300>
 8007130:	4620      	mov	r0, r4
 8007132:	f000 ffe8 	bl	8008106 <_Balloc>
 8007136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007138:	6030      	str	r0, [r6, #0]
 800713a:	f1b9 0f0e 	cmp.w	r9, #14
 800713e:	f8d3 b000 	ldr.w	fp, [r3]
 8007142:	f200 80e6 	bhi.w	8007312 <_dtoa_r+0x43a>
 8007146:	2d00      	cmp	r5, #0
 8007148:	f000 80e3 	beq.w	8007312 <_dtoa_r+0x43a>
 800714c:	ed9d 7b00 	vldr	d7, [sp]
 8007150:	f1ba 0f00 	cmp.w	sl, #0
 8007154:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007158:	dd74      	ble.n	8007244 <_dtoa_r+0x36c>
 800715a:	4a2a      	ldr	r2, [pc, #168]	; (8007204 <_dtoa_r+0x32c>)
 800715c:	f00a 030f 	and.w	r3, sl, #15
 8007160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007164:	ed93 7b00 	vldr	d7, [r3]
 8007168:	ea4f 162a 	mov.w	r6, sl, asr #4
 800716c:	06f0      	lsls	r0, r6, #27
 800716e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007172:	d565      	bpl.n	8007240 <_dtoa_r+0x368>
 8007174:	4b24      	ldr	r3, [pc, #144]	; (8007208 <_dtoa_r+0x330>)
 8007176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800717a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800717e:	f7f9 fb65 	bl	800084c <__aeabi_ddiv>
 8007182:	e9cd 0100 	strd	r0, r1, [sp]
 8007186:	f006 060f 	and.w	r6, r6, #15
 800718a:	2503      	movs	r5, #3
 800718c:	4f1e      	ldr	r7, [pc, #120]	; (8007208 <_dtoa_r+0x330>)
 800718e:	e04c      	b.n	800722a <_dtoa_r+0x352>
 8007190:	2301      	movs	r3, #1
 8007192:	930a      	str	r3, [sp, #40]	; 0x28
 8007194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007196:	4453      	add	r3, sl
 8007198:	f103 0901 	add.w	r9, r3, #1
 800719c:	9302      	str	r3, [sp, #8]
 800719e:	464b      	mov	r3, r9
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	bfb8      	it	lt
 80071a4:	2301      	movlt	r3, #1
 80071a6:	e7ba      	b.n	800711e <_dtoa_r+0x246>
 80071a8:	2300      	movs	r3, #0
 80071aa:	e7b2      	b.n	8007112 <_dtoa_r+0x23a>
 80071ac:	2300      	movs	r3, #0
 80071ae:	e7f0      	b.n	8007192 <_dtoa_r+0x2ba>
 80071b0:	2501      	movs	r5, #1
 80071b2:	2300      	movs	r3, #0
 80071b4:	9306      	str	r3, [sp, #24]
 80071b6:	950a      	str	r5, [sp, #40]	; 0x28
 80071b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	4699      	mov	r9, r3
 80071c0:	2200      	movs	r2, #0
 80071c2:	2312      	movs	r3, #18
 80071c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80071c6:	e7aa      	b.n	800711e <_dtoa_r+0x246>
 80071c8:	2301      	movs	r3, #1
 80071ca:	930a      	str	r3, [sp, #40]	; 0x28
 80071cc:	e7f4      	b.n	80071b8 <_dtoa_r+0x2e0>
 80071ce:	2301      	movs	r3, #1
 80071d0:	9302      	str	r3, [sp, #8]
 80071d2:	4699      	mov	r9, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	e7f5      	b.n	80071c4 <_dtoa_r+0x2ec>
 80071d8:	3101      	adds	r1, #1
 80071da:	6071      	str	r1, [r6, #4]
 80071dc:	0052      	lsls	r2, r2, #1
 80071de:	e7a2      	b.n	8007126 <_dtoa_r+0x24e>
 80071e0:	636f4361 	.word	0x636f4361
 80071e4:	3fd287a7 	.word	0x3fd287a7
 80071e8:	8b60c8b3 	.word	0x8b60c8b3
 80071ec:	3fc68a28 	.word	0x3fc68a28
 80071f0:	509f79fb 	.word	0x509f79fb
 80071f4:	3fd34413 	.word	0x3fd34413
 80071f8:	7ff00000 	.word	0x7ff00000
 80071fc:	08008e79 	.word	0x08008e79
 8007200:	3ff80000 	.word	0x3ff80000
 8007204:	08008f38 	.word	0x08008f38
 8007208:	08008f10 	.word	0x08008f10
 800720c:	08008f01 	.word	0x08008f01
 8007210:	07f1      	lsls	r1, r6, #31
 8007212:	d508      	bpl.n	8007226 <_dtoa_r+0x34e>
 8007214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007224:	3501      	adds	r5, #1
 8007226:	1076      	asrs	r6, r6, #1
 8007228:	3708      	adds	r7, #8
 800722a:	2e00      	cmp	r6, #0
 800722c:	d1f0      	bne.n	8007210 <_dtoa_r+0x338>
 800722e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007236:	f7f9 fb09 	bl	800084c <__aeabi_ddiv>
 800723a:	e9cd 0100 	strd	r0, r1, [sp]
 800723e:	e01a      	b.n	8007276 <_dtoa_r+0x39e>
 8007240:	2502      	movs	r5, #2
 8007242:	e7a3      	b.n	800718c <_dtoa_r+0x2b4>
 8007244:	f000 80a0 	beq.w	8007388 <_dtoa_r+0x4b0>
 8007248:	f1ca 0600 	rsb	r6, sl, #0
 800724c:	4b9f      	ldr	r3, [pc, #636]	; (80074cc <_dtoa_r+0x5f4>)
 800724e:	4fa0      	ldr	r7, [pc, #640]	; (80074d0 <_dtoa_r+0x5f8>)
 8007250:	f006 020f 	and.w	r2, r6, #15
 8007254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007260:	f7f9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8007264:	e9cd 0100 	strd	r0, r1, [sp]
 8007268:	1136      	asrs	r6, r6, #4
 800726a:	2300      	movs	r3, #0
 800726c:	2502      	movs	r5, #2
 800726e:	2e00      	cmp	r6, #0
 8007270:	d17f      	bne.n	8007372 <_dtoa_r+0x49a>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e1      	bne.n	800723a <_dtoa_r+0x362>
 8007276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8087 	beq.w	800738c <_dtoa_r+0x4b4>
 800727e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007282:	2200      	movs	r2, #0
 8007284:	4b93      	ldr	r3, [pc, #588]	; (80074d4 <_dtoa_r+0x5fc>)
 8007286:	4630      	mov	r0, r6
 8007288:	4639      	mov	r1, r7
 800728a:	f7f9 fc27 	bl	8000adc <__aeabi_dcmplt>
 800728e:	2800      	cmp	r0, #0
 8007290:	d07c      	beq.n	800738c <_dtoa_r+0x4b4>
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d079      	beq.n	800738c <_dtoa_r+0x4b4>
 8007298:	9b02      	ldr	r3, [sp, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	dd35      	ble.n	800730a <_dtoa_r+0x432>
 800729e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80072a2:	9308      	str	r3, [sp, #32]
 80072a4:	4639      	mov	r1, r7
 80072a6:	2200      	movs	r2, #0
 80072a8:	4b8b      	ldr	r3, [pc, #556]	; (80074d8 <_dtoa_r+0x600>)
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7f9 f9a4 	bl	80005f8 <__aeabi_dmul>
 80072b0:	e9cd 0100 	strd	r0, r1, [sp]
 80072b4:	9f02      	ldr	r7, [sp, #8]
 80072b6:	3501      	adds	r5, #1
 80072b8:	4628      	mov	r0, r5
 80072ba:	f7f9 f933 	bl	8000524 <__aeabi_i2d>
 80072be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072c2:	f7f9 f999 	bl	80005f8 <__aeabi_dmul>
 80072c6:	2200      	movs	r2, #0
 80072c8:	4b84      	ldr	r3, [pc, #528]	; (80074dc <_dtoa_r+0x604>)
 80072ca:	f7f8 ffdf 	bl	800028c <__adddf3>
 80072ce:	4605      	mov	r5, r0
 80072d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	d15d      	bne.n	8007394 <_dtoa_r+0x4bc>
 80072d8:	2200      	movs	r2, #0
 80072da:	4b81      	ldr	r3, [pc, #516]	; (80074e0 <_dtoa_r+0x608>)
 80072dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072e0:	f7f8 ffd2 	bl	8000288 <__aeabi_dsub>
 80072e4:	462a      	mov	r2, r5
 80072e6:	4633      	mov	r3, r6
 80072e8:	e9cd 0100 	strd	r0, r1, [sp]
 80072ec:	f7f9 fc14 	bl	8000b18 <__aeabi_dcmpgt>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	f040 8288 	bne.w	8007806 <_dtoa_r+0x92e>
 80072f6:	462a      	mov	r2, r5
 80072f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007300:	f7f9 fbec 	bl	8000adc <__aeabi_dcmplt>
 8007304:	2800      	cmp	r0, #0
 8007306:	f040 827c 	bne.w	8007802 <_dtoa_r+0x92a>
 800730a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800730e:	e9cd 2300 	strd	r2, r3, [sp]
 8007312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007314:	2b00      	cmp	r3, #0
 8007316:	f2c0 8150 	blt.w	80075ba <_dtoa_r+0x6e2>
 800731a:	f1ba 0f0e 	cmp.w	sl, #14
 800731e:	f300 814c 	bgt.w	80075ba <_dtoa_r+0x6e2>
 8007322:	4b6a      	ldr	r3, [pc, #424]	; (80074cc <_dtoa_r+0x5f4>)
 8007324:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007328:	ed93 7b00 	vldr	d7, [r3]
 800732c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800732e:	2b00      	cmp	r3, #0
 8007330:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007334:	f280 80d8 	bge.w	80074e8 <_dtoa_r+0x610>
 8007338:	f1b9 0f00 	cmp.w	r9, #0
 800733c:	f300 80d4 	bgt.w	80074e8 <_dtoa_r+0x610>
 8007340:	f040 825e 	bne.w	8007800 <_dtoa_r+0x928>
 8007344:	2200      	movs	r2, #0
 8007346:	4b66      	ldr	r3, [pc, #408]	; (80074e0 <_dtoa_r+0x608>)
 8007348:	ec51 0b17 	vmov	r0, r1, d7
 800734c:	f7f9 f954 	bl	80005f8 <__aeabi_dmul>
 8007350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007354:	f7f9 fbd6 	bl	8000b04 <__aeabi_dcmpge>
 8007358:	464f      	mov	r7, r9
 800735a:	464e      	mov	r6, r9
 800735c:	2800      	cmp	r0, #0
 800735e:	f040 8234 	bne.w	80077ca <_dtoa_r+0x8f2>
 8007362:	2331      	movs	r3, #49	; 0x31
 8007364:	f10b 0501 	add.w	r5, fp, #1
 8007368:	f88b 3000 	strb.w	r3, [fp]
 800736c:	f10a 0a01 	add.w	sl, sl, #1
 8007370:	e22f      	b.n	80077d2 <_dtoa_r+0x8fa>
 8007372:	07f2      	lsls	r2, r6, #31
 8007374:	d505      	bpl.n	8007382 <_dtoa_r+0x4aa>
 8007376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737a:	f7f9 f93d 	bl	80005f8 <__aeabi_dmul>
 800737e:	3501      	adds	r5, #1
 8007380:	2301      	movs	r3, #1
 8007382:	1076      	asrs	r6, r6, #1
 8007384:	3708      	adds	r7, #8
 8007386:	e772      	b.n	800726e <_dtoa_r+0x396>
 8007388:	2502      	movs	r5, #2
 800738a:	e774      	b.n	8007276 <_dtoa_r+0x39e>
 800738c:	f8cd a020 	str.w	sl, [sp, #32]
 8007390:	464f      	mov	r7, r9
 8007392:	e791      	b.n	80072b8 <_dtoa_r+0x3e0>
 8007394:	4b4d      	ldr	r3, [pc, #308]	; (80074cc <_dtoa_r+0x5f4>)
 8007396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800739a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800739e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d047      	beq.n	8007434 <_dtoa_r+0x55c>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	2000      	movs	r0, #0
 80073aa:	494e      	ldr	r1, [pc, #312]	; (80074e4 <_dtoa_r+0x60c>)
 80073ac:	f7f9 fa4e 	bl	800084c <__aeabi_ddiv>
 80073b0:	462a      	mov	r2, r5
 80073b2:	4633      	mov	r3, r6
 80073b4:	f7f8 ff68 	bl	8000288 <__aeabi_dsub>
 80073b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073bc:	465d      	mov	r5, fp
 80073be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c2:	f7f9 fbc9 	bl	8000b58 <__aeabi_d2iz>
 80073c6:	4606      	mov	r6, r0
 80073c8:	f7f9 f8ac 	bl	8000524 <__aeabi_i2d>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073d4:	f7f8 ff58 	bl	8000288 <__aeabi_dsub>
 80073d8:	3630      	adds	r6, #48	; 0x30
 80073da:	f805 6b01 	strb.w	r6, [r5], #1
 80073de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073e2:	e9cd 0100 	strd	r0, r1, [sp]
 80073e6:	f7f9 fb79 	bl	8000adc <__aeabi_dcmplt>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d163      	bne.n	80074b6 <_dtoa_r+0x5de>
 80073ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f2:	2000      	movs	r0, #0
 80073f4:	4937      	ldr	r1, [pc, #220]	; (80074d4 <_dtoa_r+0x5fc>)
 80073f6:	f7f8 ff47 	bl	8000288 <__aeabi_dsub>
 80073fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073fe:	f7f9 fb6d 	bl	8000adc <__aeabi_dcmplt>
 8007402:	2800      	cmp	r0, #0
 8007404:	f040 80b7 	bne.w	8007576 <_dtoa_r+0x69e>
 8007408:	eba5 030b 	sub.w	r3, r5, fp
 800740c:	429f      	cmp	r7, r3
 800740e:	f77f af7c 	ble.w	800730a <_dtoa_r+0x432>
 8007412:	2200      	movs	r2, #0
 8007414:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <_dtoa_r+0x600>)
 8007416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800741a:	f7f9 f8ed 	bl	80005f8 <__aeabi_dmul>
 800741e:	2200      	movs	r2, #0
 8007420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007424:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <_dtoa_r+0x600>)
 8007426:	e9dd 0100 	ldrd	r0, r1, [sp]
 800742a:	f7f9 f8e5 	bl	80005f8 <__aeabi_dmul>
 800742e:	e9cd 0100 	strd	r0, r1, [sp]
 8007432:	e7c4      	b.n	80073be <_dtoa_r+0x4e6>
 8007434:	462a      	mov	r2, r5
 8007436:	4633      	mov	r3, r6
 8007438:	f7f9 f8de 	bl	80005f8 <__aeabi_dmul>
 800743c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007440:	eb0b 0507 	add.w	r5, fp, r7
 8007444:	465e      	mov	r6, fp
 8007446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800744a:	f7f9 fb85 	bl	8000b58 <__aeabi_d2iz>
 800744e:	4607      	mov	r7, r0
 8007450:	f7f9 f868 	bl	8000524 <__aeabi_i2d>
 8007454:	3730      	adds	r7, #48	; 0x30
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800745e:	f7f8 ff13 	bl	8000288 <__aeabi_dsub>
 8007462:	f806 7b01 	strb.w	r7, [r6], #1
 8007466:	42ae      	cmp	r6, r5
 8007468:	e9cd 0100 	strd	r0, r1, [sp]
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	d126      	bne.n	80074c0 <_dtoa_r+0x5e8>
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <_dtoa_r+0x60c>)
 8007474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007478:	f7f8 ff08 	bl	800028c <__adddf3>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007484:	f7f9 fb48 	bl	8000b18 <__aeabi_dcmpgt>
 8007488:	2800      	cmp	r0, #0
 800748a:	d174      	bne.n	8007576 <_dtoa_r+0x69e>
 800748c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007490:	2000      	movs	r0, #0
 8007492:	4914      	ldr	r1, [pc, #80]	; (80074e4 <_dtoa_r+0x60c>)
 8007494:	f7f8 fef8 	bl	8000288 <__aeabi_dsub>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a0:	f7f9 fb1c 	bl	8000adc <__aeabi_dcmplt>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f43f af30 	beq.w	800730a <_dtoa_r+0x432>
 80074aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074ae:	2b30      	cmp	r3, #48	; 0x30
 80074b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80074b4:	d002      	beq.n	80074bc <_dtoa_r+0x5e4>
 80074b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80074ba:	e04a      	b.n	8007552 <_dtoa_r+0x67a>
 80074bc:	4615      	mov	r5, r2
 80074be:	e7f4      	b.n	80074aa <_dtoa_r+0x5d2>
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <_dtoa_r+0x600>)
 80074c2:	f7f9 f899 	bl	80005f8 <__aeabi_dmul>
 80074c6:	e9cd 0100 	strd	r0, r1, [sp]
 80074ca:	e7bc      	b.n	8007446 <_dtoa_r+0x56e>
 80074cc:	08008f38 	.word	0x08008f38
 80074d0:	08008f10 	.word	0x08008f10
 80074d4:	3ff00000 	.word	0x3ff00000
 80074d8:	40240000 	.word	0x40240000
 80074dc:	401c0000 	.word	0x401c0000
 80074e0:	40140000 	.word	0x40140000
 80074e4:	3fe00000 	.word	0x3fe00000
 80074e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80074ec:	465d      	mov	r5, fp
 80074ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074f2:	4630      	mov	r0, r6
 80074f4:	4639      	mov	r1, r7
 80074f6:	f7f9 f9a9 	bl	800084c <__aeabi_ddiv>
 80074fa:	f7f9 fb2d 	bl	8000b58 <__aeabi_d2iz>
 80074fe:	4680      	mov	r8, r0
 8007500:	f7f9 f810 	bl	8000524 <__aeabi_i2d>
 8007504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007508:	f7f9 f876 	bl	80005f8 <__aeabi_dmul>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4630      	mov	r0, r6
 8007512:	4639      	mov	r1, r7
 8007514:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007518:	f7f8 feb6 	bl	8000288 <__aeabi_dsub>
 800751c:	f805 6b01 	strb.w	r6, [r5], #1
 8007520:	eba5 060b 	sub.w	r6, r5, fp
 8007524:	45b1      	cmp	r9, r6
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	d139      	bne.n	80075a0 <_dtoa_r+0x6c8>
 800752c:	f7f8 feae 	bl	800028c <__adddf3>
 8007530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007534:	4606      	mov	r6, r0
 8007536:	460f      	mov	r7, r1
 8007538:	f7f9 faee 	bl	8000b18 <__aeabi_dcmpgt>
 800753c:	b9c8      	cbnz	r0, 8007572 <_dtoa_r+0x69a>
 800753e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007542:	4630      	mov	r0, r6
 8007544:	4639      	mov	r1, r7
 8007546:	f7f9 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800754a:	b110      	cbz	r0, 8007552 <_dtoa_r+0x67a>
 800754c:	f018 0f01 	tst.w	r8, #1
 8007550:	d10f      	bne.n	8007572 <_dtoa_r+0x69a>
 8007552:	9904      	ldr	r1, [sp, #16]
 8007554:	4620      	mov	r0, r4
 8007556:	f000 fe0a 	bl	800816e <_Bfree>
 800755a:	2300      	movs	r3, #0
 800755c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800755e:	702b      	strb	r3, [r5, #0]
 8007560:	f10a 0301 	add.w	r3, sl, #1
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8241 	beq.w	80079f0 <_dtoa_r+0xb18>
 800756e:	601d      	str	r5, [r3, #0]
 8007570:	e23e      	b.n	80079f0 <_dtoa_r+0xb18>
 8007572:	f8cd a020 	str.w	sl, [sp, #32]
 8007576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800757a:	2a39      	cmp	r2, #57	; 0x39
 800757c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007580:	d108      	bne.n	8007594 <_dtoa_r+0x6bc>
 8007582:	459b      	cmp	fp, r3
 8007584:	d10a      	bne.n	800759c <_dtoa_r+0x6c4>
 8007586:	9b08      	ldr	r3, [sp, #32]
 8007588:	3301      	adds	r3, #1
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	2330      	movs	r3, #48	; 0x30
 800758e:	f88b 3000 	strb.w	r3, [fp]
 8007592:	465b      	mov	r3, fp
 8007594:	781a      	ldrb	r2, [r3, #0]
 8007596:	3201      	adds	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e78c      	b.n	80074b6 <_dtoa_r+0x5de>
 800759c:	461d      	mov	r5, r3
 800759e:	e7ea      	b.n	8007576 <_dtoa_r+0x69e>
 80075a0:	2200      	movs	r2, #0
 80075a2:	4b9b      	ldr	r3, [pc, #620]	; (8007810 <_dtoa_r+0x938>)
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	2200      	movs	r2, #0
 80075aa:	2300      	movs	r3, #0
 80075ac:	4606      	mov	r6, r0
 80075ae:	460f      	mov	r7, r1
 80075b0:	f7f9 fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d09a      	beq.n	80074ee <_dtoa_r+0x616>
 80075b8:	e7cb      	b.n	8007552 <_dtoa_r+0x67a>
 80075ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075bc:	2a00      	cmp	r2, #0
 80075be:	f000 808b 	beq.w	80076d8 <_dtoa_r+0x800>
 80075c2:	9a06      	ldr	r2, [sp, #24]
 80075c4:	2a01      	cmp	r2, #1
 80075c6:	dc6e      	bgt.n	80076a6 <_dtoa_r+0x7ce>
 80075c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	d067      	beq.n	800769e <_dtoa_r+0x7c6>
 80075ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075d2:	9f07      	ldr	r7, [sp, #28]
 80075d4:	9d05      	ldr	r5, [sp, #20]
 80075d6:	9a05      	ldr	r2, [sp, #20]
 80075d8:	2101      	movs	r1, #1
 80075da:	441a      	add	r2, r3
 80075dc:	4620      	mov	r0, r4
 80075de:	9205      	str	r2, [sp, #20]
 80075e0:	4498      	add	r8, r3
 80075e2:	f000 fea2 	bl	800832a <__i2b>
 80075e6:	4606      	mov	r6, r0
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	dd0c      	ble.n	8007606 <_dtoa_r+0x72e>
 80075ec:	f1b8 0f00 	cmp.w	r8, #0
 80075f0:	dd09      	ble.n	8007606 <_dtoa_r+0x72e>
 80075f2:	4545      	cmp	r5, r8
 80075f4:	9a05      	ldr	r2, [sp, #20]
 80075f6:	462b      	mov	r3, r5
 80075f8:	bfa8      	it	ge
 80075fa:	4643      	movge	r3, r8
 80075fc:	1ad2      	subs	r2, r2, r3
 80075fe:	9205      	str	r2, [sp, #20]
 8007600:	1aed      	subs	r5, r5, r3
 8007602:	eba8 0803 	sub.w	r8, r8, r3
 8007606:	9b07      	ldr	r3, [sp, #28]
 8007608:	b1eb      	cbz	r3, 8007646 <_dtoa_r+0x76e>
 800760a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760c:	2b00      	cmp	r3, #0
 800760e:	d067      	beq.n	80076e0 <_dtoa_r+0x808>
 8007610:	b18f      	cbz	r7, 8007636 <_dtoa_r+0x75e>
 8007612:	4631      	mov	r1, r6
 8007614:	463a      	mov	r2, r7
 8007616:	4620      	mov	r0, r4
 8007618:	f000 ff26 	bl	8008468 <__pow5mult>
 800761c:	9a04      	ldr	r2, [sp, #16]
 800761e:	4601      	mov	r1, r0
 8007620:	4606      	mov	r6, r0
 8007622:	4620      	mov	r0, r4
 8007624:	f000 fe8a 	bl	800833c <__multiply>
 8007628:	9904      	ldr	r1, [sp, #16]
 800762a:	9008      	str	r0, [sp, #32]
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fd9e 	bl	800816e <_Bfree>
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	9b07      	ldr	r3, [sp, #28]
 8007638:	1bda      	subs	r2, r3, r7
 800763a:	d004      	beq.n	8007646 <_dtoa_r+0x76e>
 800763c:	9904      	ldr	r1, [sp, #16]
 800763e:	4620      	mov	r0, r4
 8007640:	f000 ff12 	bl	8008468 <__pow5mult>
 8007644:	9004      	str	r0, [sp, #16]
 8007646:	2101      	movs	r1, #1
 8007648:	4620      	mov	r0, r4
 800764a:	f000 fe6e 	bl	800832a <__i2b>
 800764e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007650:	4607      	mov	r7, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 81d0 	beq.w	80079f8 <_dtoa_r+0xb20>
 8007658:	461a      	mov	r2, r3
 800765a:	4601      	mov	r1, r0
 800765c:	4620      	mov	r0, r4
 800765e:	f000 ff03 	bl	8008468 <__pow5mult>
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	2b01      	cmp	r3, #1
 8007666:	4607      	mov	r7, r0
 8007668:	dc40      	bgt.n	80076ec <_dtoa_r+0x814>
 800766a:	9b00      	ldr	r3, [sp, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d139      	bne.n	80076e4 <_dtoa_r+0x80c>
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007676:	2b00      	cmp	r3, #0
 8007678:	d136      	bne.n	80076e8 <_dtoa_r+0x810>
 800767a:	9b01      	ldr	r3, [sp, #4]
 800767c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007680:	0d1b      	lsrs	r3, r3, #20
 8007682:	051b      	lsls	r3, r3, #20
 8007684:	b12b      	cbz	r3, 8007692 <_dtoa_r+0x7ba>
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	3301      	adds	r3, #1
 800768a:	9305      	str	r3, [sp, #20]
 800768c:	f108 0801 	add.w	r8, r8, #1
 8007690:	2301      	movs	r3, #1
 8007692:	9307      	str	r3, [sp, #28]
 8007694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007696:	2b00      	cmp	r3, #0
 8007698:	d12a      	bne.n	80076f0 <_dtoa_r+0x818>
 800769a:	2001      	movs	r0, #1
 800769c:	e030      	b.n	8007700 <_dtoa_r+0x828>
 800769e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076a4:	e795      	b.n	80075d2 <_dtoa_r+0x6fa>
 80076a6:	9b07      	ldr	r3, [sp, #28]
 80076a8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80076ac:	42bb      	cmp	r3, r7
 80076ae:	bfbf      	itttt	lt
 80076b0:	9b07      	ldrlt	r3, [sp, #28]
 80076b2:	9707      	strlt	r7, [sp, #28]
 80076b4:	1afa      	sublt	r2, r7, r3
 80076b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80076b8:	bfbb      	ittet	lt
 80076ba:	189b      	addlt	r3, r3, r2
 80076bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80076be:	1bdf      	subge	r7, r3, r7
 80076c0:	2700      	movlt	r7, #0
 80076c2:	f1b9 0f00 	cmp.w	r9, #0
 80076c6:	bfb5      	itete	lt
 80076c8:	9b05      	ldrlt	r3, [sp, #20]
 80076ca:	9d05      	ldrge	r5, [sp, #20]
 80076cc:	eba3 0509 	sublt.w	r5, r3, r9
 80076d0:	464b      	movge	r3, r9
 80076d2:	bfb8      	it	lt
 80076d4:	2300      	movlt	r3, #0
 80076d6:	e77e      	b.n	80075d6 <_dtoa_r+0x6fe>
 80076d8:	9f07      	ldr	r7, [sp, #28]
 80076da:	9d05      	ldr	r5, [sp, #20]
 80076dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80076de:	e783      	b.n	80075e8 <_dtoa_r+0x710>
 80076e0:	9a07      	ldr	r2, [sp, #28]
 80076e2:	e7ab      	b.n	800763c <_dtoa_r+0x764>
 80076e4:	2300      	movs	r3, #0
 80076e6:	e7d4      	b.n	8007692 <_dtoa_r+0x7ba>
 80076e8:	9b00      	ldr	r3, [sp, #0]
 80076ea:	e7d2      	b.n	8007692 <_dtoa_r+0x7ba>
 80076ec:	2300      	movs	r3, #0
 80076ee:	9307      	str	r3, [sp, #28]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80076f6:	6918      	ldr	r0, [r3, #16]
 80076f8:	f000 fdc9 	bl	800828e <__hi0bits>
 80076fc:	f1c0 0020 	rsb	r0, r0, #32
 8007700:	4440      	add	r0, r8
 8007702:	f010 001f 	ands.w	r0, r0, #31
 8007706:	d047      	beq.n	8007798 <_dtoa_r+0x8c0>
 8007708:	f1c0 0320 	rsb	r3, r0, #32
 800770c:	2b04      	cmp	r3, #4
 800770e:	dd3b      	ble.n	8007788 <_dtoa_r+0x8b0>
 8007710:	9b05      	ldr	r3, [sp, #20]
 8007712:	f1c0 001c 	rsb	r0, r0, #28
 8007716:	4403      	add	r3, r0
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	4405      	add	r5, r0
 800771c:	4480      	add	r8, r0
 800771e:	9b05      	ldr	r3, [sp, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	dd05      	ble.n	8007730 <_dtoa_r+0x858>
 8007724:	461a      	mov	r2, r3
 8007726:	9904      	ldr	r1, [sp, #16]
 8007728:	4620      	mov	r0, r4
 800772a:	f000 feeb 	bl	8008504 <__lshift>
 800772e:	9004      	str	r0, [sp, #16]
 8007730:	f1b8 0f00 	cmp.w	r8, #0
 8007734:	dd05      	ble.n	8007742 <_dtoa_r+0x86a>
 8007736:	4639      	mov	r1, r7
 8007738:	4642      	mov	r2, r8
 800773a:	4620      	mov	r0, r4
 800773c:	f000 fee2 	bl	8008504 <__lshift>
 8007740:	4607      	mov	r7, r0
 8007742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007744:	b353      	cbz	r3, 800779c <_dtoa_r+0x8c4>
 8007746:	4639      	mov	r1, r7
 8007748:	9804      	ldr	r0, [sp, #16]
 800774a:	f000 ff2f 	bl	80085ac <__mcmp>
 800774e:	2800      	cmp	r0, #0
 8007750:	da24      	bge.n	800779c <_dtoa_r+0x8c4>
 8007752:	2300      	movs	r3, #0
 8007754:	220a      	movs	r2, #10
 8007756:	9904      	ldr	r1, [sp, #16]
 8007758:	4620      	mov	r0, r4
 800775a:	f000 fd1f 	bl	800819c <__multadd>
 800775e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007760:	9004      	str	r0, [sp, #16]
 8007762:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 814d 	beq.w	8007a06 <_dtoa_r+0xb2e>
 800776c:	2300      	movs	r3, #0
 800776e:	4631      	mov	r1, r6
 8007770:	220a      	movs	r2, #10
 8007772:	4620      	mov	r0, r4
 8007774:	f000 fd12 	bl	800819c <__multadd>
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	4606      	mov	r6, r0
 800777e:	dc4f      	bgt.n	8007820 <_dtoa_r+0x948>
 8007780:	9b06      	ldr	r3, [sp, #24]
 8007782:	2b02      	cmp	r3, #2
 8007784:	dd4c      	ble.n	8007820 <_dtoa_r+0x948>
 8007786:	e011      	b.n	80077ac <_dtoa_r+0x8d4>
 8007788:	d0c9      	beq.n	800771e <_dtoa_r+0x846>
 800778a:	9a05      	ldr	r2, [sp, #20]
 800778c:	331c      	adds	r3, #28
 800778e:	441a      	add	r2, r3
 8007790:	9205      	str	r2, [sp, #20]
 8007792:	441d      	add	r5, r3
 8007794:	4498      	add	r8, r3
 8007796:	e7c2      	b.n	800771e <_dtoa_r+0x846>
 8007798:	4603      	mov	r3, r0
 800779a:	e7f6      	b.n	800778a <_dtoa_r+0x8b2>
 800779c:	f1b9 0f00 	cmp.w	r9, #0
 80077a0:	dc38      	bgt.n	8007814 <_dtoa_r+0x93c>
 80077a2:	9b06      	ldr	r3, [sp, #24]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	dd35      	ble.n	8007814 <_dtoa_r+0x93c>
 80077a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80077ac:	9b02      	ldr	r3, [sp, #8]
 80077ae:	b963      	cbnz	r3, 80077ca <_dtoa_r+0x8f2>
 80077b0:	4639      	mov	r1, r7
 80077b2:	2205      	movs	r2, #5
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 fcf1 	bl	800819c <__multadd>
 80077ba:	4601      	mov	r1, r0
 80077bc:	4607      	mov	r7, r0
 80077be:	9804      	ldr	r0, [sp, #16]
 80077c0:	f000 fef4 	bl	80085ac <__mcmp>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	f73f adcc 	bgt.w	8007362 <_dtoa_r+0x48a>
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	465d      	mov	r5, fp
 80077ce:	ea6f 0a03 	mvn.w	sl, r3
 80077d2:	f04f 0900 	mov.w	r9, #0
 80077d6:	4639      	mov	r1, r7
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fcc8 	bl	800816e <_Bfree>
 80077de:	2e00      	cmp	r6, #0
 80077e0:	f43f aeb7 	beq.w	8007552 <_dtoa_r+0x67a>
 80077e4:	f1b9 0f00 	cmp.w	r9, #0
 80077e8:	d005      	beq.n	80077f6 <_dtoa_r+0x91e>
 80077ea:	45b1      	cmp	r9, r6
 80077ec:	d003      	beq.n	80077f6 <_dtoa_r+0x91e>
 80077ee:	4649      	mov	r1, r9
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fcbc 	bl	800816e <_Bfree>
 80077f6:	4631      	mov	r1, r6
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fcb8 	bl	800816e <_Bfree>
 80077fe:	e6a8      	b.n	8007552 <_dtoa_r+0x67a>
 8007800:	2700      	movs	r7, #0
 8007802:	463e      	mov	r6, r7
 8007804:	e7e1      	b.n	80077ca <_dtoa_r+0x8f2>
 8007806:	f8dd a020 	ldr.w	sl, [sp, #32]
 800780a:	463e      	mov	r6, r7
 800780c:	e5a9      	b.n	8007362 <_dtoa_r+0x48a>
 800780e:	bf00      	nop
 8007810:	40240000 	.word	0x40240000
 8007814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007816:	f8cd 9008 	str.w	r9, [sp, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80fa 	beq.w	8007a14 <_dtoa_r+0xb3c>
 8007820:	2d00      	cmp	r5, #0
 8007822:	dd05      	ble.n	8007830 <_dtoa_r+0x958>
 8007824:	4631      	mov	r1, r6
 8007826:	462a      	mov	r2, r5
 8007828:	4620      	mov	r0, r4
 800782a:	f000 fe6b 	bl	8008504 <__lshift>
 800782e:	4606      	mov	r6, r0
 8007830:	9b07      	ldr	r3, [sp, #28]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d04c      	beq.n	80078d0 <_dtoa_r+0x9f8>
 8007836:	6871      	ldr	r1, [r6, #4]
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fc64 	bl	8008106 <_Balloc>
 800783e:	6932      	ldr	r2, [r6, #16]
 8007840:	3202      	adds	r2, #2
 8007842:	4605      	mov	r5, r0
 8007844:	0092      	lsls	r2, r2, #2
 8007846:	f106 010c 	add.w	r1, r6, #12
 800784a:	300c      	adds	r0, #12
 800784c:	f000 fc50 	bl	80080f0 <memcpy>
 8007850:	2201      	movs	r2, #1
 8007852:	4629      	mov	r1, r5
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fe55 	bl	8008504 <__lshift>
 800785a:	9b00      	ldr	r3, [sp, #0]
 800785c:	f8cd b014 	str.w	fp, [sp, #20]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	46b1      	mov	r9, r6
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	4606      	mov	r6, r0
 800786a:	4639      	mov	r1, r7
 800786c:	9804      	ldr	r0, [sp, #16]
 800786e:	f7ff faa5 	bl	8006dbc <quorem>
 8007872:	4649      	mov	r1, r9
 8007874:	4605      	mov	r5, r0
 8007876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800787a:	9804      	ldr	r0, [sp, #16]
 800787c:	f000 fe96 	bl	80085ac <__mcmp>
 8007880:	4632      	mov	r2, r6
 8007882:	9000      	str	r0, [sp, #0]
 8007884:	4639      	mov	r1, r7
 8007886:	4620      	mov	r0, r4
 8007888:	f000 feaa 	bl	80085e0 <__mdiff>
 800788c:	68c3      	ldr	r3, [r0, #12]
 800788e:	4602      	mov	r2, r0
 8007890:	bb03      	cbnz	r3, 80078d4 <_dtoa_r+0x9fc>
 8007892:	4601      	mov	r1, r0
 8007894:	9008      	str	r0, [sp, #32]
 8007896:	9804      	ldr	r0, [sp, #16]
 8007898:	f000 fe88 	bl	80085ac <__mcmp>
 800789c:	9a08      	ldr	r2, [sp, #32]
 800789e:	4603      	mov	r3, r0
 80078a0:	4611      	mov	r1, r2
 80078a2:	4620      	mov	r0, r4
 80078a4:	9308      	str	r3, [sp, #32]
 80078a6:	f000 fc62 	bl	800816e <_Bfree>
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	b9a3      	cbnz	r3, 80078d8 <_dtoa_r+0xa00>
 80078ae:	9a06      	ldr	r2, [sp, #24]
 80078b0:	b992      	cbnz	r2, 80078d8 <_dtoa_r+0xa00>
 80078b2:	9a07      	ldr	r2, [sp, #28]
 80078b4:	b982      	cbnz	r2, 80078d8 <_dtoa_r+0xa00>
 80078b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80078ba:	d029      	beq.n	8007910 <_dtoa_r+0xa38>
 80078bc:	9b00      	ldr	r3, [sp, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd01      	ble.n	80078c6 <_dtoa_r+0x9ee>
 80078c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80078c6:	9b05      	ldr	r3, [sp, #20]
 80078c8:	1c5d      	adds	r5, r3, #1
 80078ca:	f883 8000 	strb.w	r8, [r3]
 80078ce:	e782      	b.n	80077d6 <_dtoa_r+0x8fe>
 80078d0:	4630      	mov	r0, r6
 80078d2:	e7c2      	b.n	800785a <_dtoa_r+0x982>
 80078d4:	2301      	movs	r3, #1
 80078d6:	e7e3      	b.n	80078a0 <_dtoa_r+0x9c8>
 80078d8:	9a00      	ldr	r2, [sp, #0]
 80078da:	2a00      	cmp	r2, #0
 80078dc:	db04      	blt.n	80078e8 <_dtoa_r+0xa10>
 80078de:	d125      	bne.n	800792c <_dtoa_r+0xa54>
 80078e0:	9a06      	ldr	r2, [sp, #24]
 80078e2:	bb1a      	cbnz	r2, 800792c <_dtoa_r+0xa54>
 80078e4:	9a07      	ldr	r2, [sp, #28]
 80078e6:	bb0a      	cbnz	r2, 800792c <_dtoa_r+0xa54>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	ddec      	ble.n	80078c6 <_dtoa_r+0x9ee>
 80078ec:	2201      	movs	r2, #1
 80078ee:	9904      	ldr	r1, [sp, #16]
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fe07 	bl	8008504 <__lshift>
 80078f6:	4639      	mov	r1, r7
 80078f8:	9004      	str	r0, [sp, #16]
 80078fa:	f000 fe57 	bl	80085ac <__mcmp>
 80078fe:	2800      	cmp	r0, #0
 8007900:	dc03      	bgt.n	800790a <_dtoa_r+0xa32>
 8007902:	d1e0      	bne.n	80078c6 <_dtoa_r+0x9ee>
 8007904:	f018 0f01 	tst.w	r8, #1
 8007908:	d0dd      	beq.n	80078c6 <_dtoa_r+0x9ee>
 800790a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800790e:	d1d8      	bne.n	80078c2 <_dtoa_r+0x9ea>
 8007910:	9b05      	ldr	r3, [sp, #20]
 8007912:	9a05      	ldr	r2, [sp, #20]
 8007914:	1c5d      	adds	r5, r3, #1
 8007916:	2339      	movs	r3, #57	; 0x39
 8007918:	7013      	strb	r3, [r2, #0]
 800791a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800791e:	2b39      	cmp	r3, #57	; 0x39
 8007920:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007924:	d04f      	beq.n	80079c6 <_dtoa_r+0xaee>
 8007926:	3301      	adds	r3, #1
 8007928:	7013      	strb	r3, [r2, #0]
 800792a:	e754      	b.n	80077d6 <_dtoa_r+0x8fe>
 800792c:	9a05      	ldr	r2, [sp, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f102 0501 	add.w	r5, r2, #1
 8007934:	dd06      	ble.n	8007944 <_dtoa_r+0xa6c>
 8007936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800793a:	d0e9      	beq.n	8007910 <_dtoa_r+0xa38>
 800793c:	f108 0801 	add.w	r8, r8, #1
 8007940:	9b05      	ldr	r3, [sp, #20]
 8007942:	e7c2      	b.n	80078ca <_dtoa_r+0x9f2>
 8007944:	9a02      	ldr	r2, [sp, #8]
 8007946:	f805 8c01 	strb.w	r8, [r5, #-1]
 800794a:	eba5 030b 	sub.w	r3, r5, fp
 800794e:	4293      	cmp	r3, r2
 8007950:	d021      	beq.n	8007996 <_dtoa_r+0xabe>
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	9904      	ldr	r1, [sp, #16]
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fc1f 	bl	800819c <__multadd>
 800795e:	45b1      	cmp	r9, r6
 8007960:	9004      	str	r0, [sp, #16]
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	f04f 020a 	mov.w	r2, #10
 800796a:	4649      	mov	r1, r9
 800796c:	4620      	mov	r0, r4
 800796e:	d105      	bne.n	800797c <_dtoa_r+0xaa4>
 8007970:	f000 fc14 	bl	800819c <__multadd>
 8007974:	4681      	mov	r9, r0
 8007976:	4606      	mov	r6, r0
 8007978:	9505      	str	r5, [sp, #20]
 800797a:	e776      	b.n	800786a <_dtoa_r+0x992>
 800797c:	f000 fc0e 	bl	800819c <__multadd>
 8007980:	4631      	mov	r1, r6
 8007982:	4681      	mov	r9, r0
 8007984:	2300      	movs	r3, #0
 8007986:	220a      	movs	r2, #10
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fc07 	bl	800819c <__multadd>
 800798e:	4606      	mov	r6, r0
 8007990:	e7f2      	b.n	8007978 <_dtoa_r+0xaa0>
 8007992:	f04f 0900 	mov.w	r9, #0
 8007996:	2201      	movs	r2, #1
 8007998:	9904      	ldr	r1, [sp, #16]
 800799a:	4620      	mov	r0, r4
 800799c:	f000 fdb2 	bl	8008504 <__lshift>
 80079a0:	4639      	mov	r1, r7
 80079a2:	9004      	str	r0, [sp, #16]
 80079a4:	f000 fe02 	bl	80085ac <__mcmp>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	dcb6      	bgt.n	800791a <_dtoa_r+0xa42>
 80079ac:	d102      	bne.n	80079b4 <_dtoa_r+0xadc>
 80079ae:	f018 0f01 	tst.w	r8, #1
 80079b2:	d1b2      	bne.n	800791a <_dtoa_r+0xa42>
 80079b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079b8:	2b30      	cmp	r3, #48	; 0x30
 80079ba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80079be:	f47f af0a 	bne.w	80077d6 <_dtoa_r+0x8fe>
 80079c2:	4615      	mov	r5, r2
 80079c4:	e7f6      	b.n	80079b4 <_dtoa_r+0xadc>
 80079c6:	4593      	cmp	fp, r2
 80079c8:	d105      	bne.n	80079d6 <_dtoa_r+0xafe>
 80079ca:	2331      	movs	r3, #49	; 0x31
 80079cc:	f10a 0a01 	add.w	sl, sl, #1
 80079d0:	f88b 3000 	strb.w	r3, [fp]
 80079d4:	e6ff      	b.n	80077d6 <_dtoa_r+0x8fe>
 80079d6:	4615      	mov	r5, r2
 80079d8:	e79f      	b.n	800791a <_dtoa_r+0xa42>
 80079da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007a40 <_dtoa_r+0xb68>
 80079de:	e007      	b.n	80079f0 <_dtoa_r+0xb18>
 80079e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007a44 <_dtoa_r+0xb6c>
 80079e6:	b11b      	cbz	r3, 80079f0 <_dtoa_r+0xb18>
 80079e8:	f10b 0308 	add.w	r3, fp, #8
 80079ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	4658      	mov	r0, fp
 80079f2:	b017      	add	sp, #92	; 0x5c
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	f77f ae35 	ble.w	800766a <_dtoa_r+0x792>
 8007a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a02:	9307      	str	r3, [sp, #28]
 8007a04:	e649      	b.n	800769a <_dtoa_r+0x7c2>
 8007a06:	9b02      	ldr	r3, [sp, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dc03      	bgt.n	8007a14 <_dtoa_r+0xb3c>
 8007a0c:	9b06      	ldr	r3, [sp, #24]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	f73f aecc 	bgt.w	80077ac <_dtoa_r+0x8d4>
 8007a14:	465d      	mov	r5, fp
 8007a16:	4639      	mov	r1, r7
 8007a18:	9804      	ldr	r0, [sp, #16]
 8007a1a:	f7ff f9cf 	bl	8006dbc <quorem>
 8007a1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a22:	f805 8b01 	strb.w	r8, [r5], #1
 8007a26:	9a02      	ldr	r2, [sp, #8]
 8007a28:	eba5 030b 	sub.w	r3, r5, fp
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	ddb0      	ble.n	8007992 <_dtoa_r+0xaba>
 8007a30:	2300      	movs	r3, #0
 8007a32:	220a      	movs	r2, #10
 8007a34:	9904      	ldr	r1, [sp, #16]
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 fbb0 	bl	800819c <__multadd>
 8007a3c:	9004      	str	r0, [sp, #16]
 8007a3e:	e7ea      	b.n	8007a16 <_dtoa_r+0xb3e>
 8007a40:	08008e78 	.word	0x08008e78
 8007a44:	08008ef8 	.word	0x08008ef8

08007a48 <rshift>:
 8007a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a4a:	6906      	ldr	r6, [r0, #16]
 8007a4c:	114b      	asrs	r3, r1, #5
 8007a4e:	429e      	cmp	r6, r3
 8007a50:	f100 0414 	add.w	r4, r0, #20
 8007a54:	dd30      	ble.n	8007ab8 <rshift+0x70>
 8007a56:	f011 011f 	ands.w	r1, r1, #31
 8007a5a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007a5e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007a62:	d108      	bne.n	8007a76 <rshift+0x2e>
 8007a64:	4621      	mov	r1, r4
 8007a66:	42b2      	cmp	r2, r6
 8007a68:	460b      	mov	r3, r1
 8007a6a:	d211      	bcs.n	8007a90 <rshift+0x48>
 8007a6c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007a70:	f841 3b04 	str.w	r3, [r1], #4
 8007a74:	e7f7      	b.n	8007a66 <rshift+0x1e>
 8007a76:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007a7a:	f1c1 0c20 	rsb	ip, r1, #32
 8007a7e:	40cd      	lsrs	r5, r1
 8007a80:	3204      	adds	r2, #4
 8007a82:	4623      	mov	r3, r4
 8007a84:	42b2      	cmp	r2, r6
 8007a86:	4617      	mov	r7, r2
 8007a88:	d30c      	bcc.n	8007aa4 <rshift+0x5c>
 8007a8a:	601d      	str	r5, [r3, #0]
 8007a8c:	b105      	cbz	r5, 8007a90 <rshift+0x48>
 8007a8e:	3304      	adds	r3, #4
 8007a90:	1b1a      	subs	r2, r3, r4
 8007a92:	42a3      	cmp	r3, r4
 8007a94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a98:	bf08      	it	eq
 8007a9a:	2300      	moveq	r3, #0
 8007a9c:	6102      	str	r2, [r0, #16]
 8007a9e:	bf08      	it	eq
 8007aa0:	6143      	streq	r3, [r0, #20]
 8007aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa4:	683f      	ldr	r7, [r7, #0]
 8007aa6:	fa07 f70c 	lsl.w	r7, r7, ip
 8007aaa:	433d      	orrs	r5, r7
 8007aac:	f843 5b04 	str.w	r5, [r3], #4
 8007ab0:	f852 5b04 	ldr.w	r5, [r2], #4
 8007ab4:	40cd      	lsrs	r5, r1
 8007ab6:	e7e5      	b.n	8007a84 <rshift+0x3c>
 8007ab8:	4623      	mov	r3, r4
 8007aba:	e7e9      	b.n	8007a90 <rshift+0x48>

08007abc <__hexdig_fun>:
 8007abc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ac0:	2b09      	cmp	r3, #9
 8007ac2:	d802      	bhi.n	8007aca <__hexdig_fun+0xe>
 8007ac4:	3820      	subs	r0, #32
 8007ac6:	b2c0      	uxtb	r0, r0
 8007ac8:	4770      	bx	lr
 8007aca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d801      	bhi.n	8007ad6 <__hexdig_fun+0x1a>
 8007ad2:	3847      	subs	r0, #71	; 0x47
 8007ad4:	e7f7      	b.n	8007ac6 <__hexdig_fun+0xa>
 8007ad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d801      	bhi.n	8007ae2 <__hexdig_fun+0x26>
 8007ade:	3827      	subs	r0, #39	; 0x27
 8007ae0:	e7f1      	b.n	8007ac6 <__hexdig_fun+0xa>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	4770      	bx	lr

08007ae6 <__gethex>:
 8007ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aea:	b08b      	sub	sp, #44	; 0x2c
 8007aec:	468a      	mov	sl, r1
 8007aee:	9002      	str	r0, [sp, #8]
 8007af0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007af2:	9306      	str	r3, [sp, #24]
 8007af4:	4690      	mov	r8, r2
 8007af6:	f000 fad0 	bl	800809a <__localeconv_l>
 8007afa:	6803      	ldr	r3, [r0, #0]
 8007afc:	9303      	str	r3, [sp, #12]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7f8 fb66 	bl	80001d0 <strlen>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	9001      	str	r0, [sp, #4]
 8007b08:	4403      	add	r3, r0
 8007b0a:	f04f 0b00 	mov.w	fp, #0
 8007b0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007b12:	9307      	str	r3, [sp, #28]
 8007b14:	f8da 3000 	ldr.w	r3, [sl]
 8007b18:	3302      	adds	r3, #2
 8007b1a:	461f      	mov	r7, r3
 8007b1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007b20:	2830      	cmp	r0, #48	; 0x30
 8007b22:	d06c      	beq.n	8007bfe <__gethex+0x118>
 8007b24:	f7ff ffca 	bl	8007abc <__hexdig_fun>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d16a      	bne.n	8007c04 <__gethex+0x11e>
 8007b2e:	9a01      	ldr	r2, [sp, #4]
 8007b30:	9903      	ldr	r1, [sp, #12]
 8007b32:	4638      	mov	r0, r7
 8007b34:	f001 f8fe 	bl	8008d34 <strncmp>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d166      	bne.n	8007c0a <__gethex+0x124>
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	5cf8      	ldrb	r0, [r7, r3]
 8007b40:	18fe      	adds	r6, r7, r3
 8007b42:	f7ff ffbb 	bl	8007abc <__hexdig_fun>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d062      	beq.n	8007c10 <__gethex+0x12a>
 8007b4a:	4633      	mov	r3, r6
 8007b4c:	7818      	ldrb	r0, [r3, #0]
 8007b4e:	2830      	cmp	r0, #48	; 0x30
 8007b50:	461f      	mov	r7, r3
 8007b52:	f103 0301 	add.w	r3, r3, #1
 8007b56:	d0f9      	beq.n	8007b4c <__gethex+0x66>
 8007b58:	f7ff ffb0 	bl	8007abc <__hexdig_fun>
 8007b5c:	fab0 f580 	clz	r5, r0
 8007b60:	096d      	lsrs	r5, r5, #5
 8007b62:	4634      	mov	r4, r6
 8007b64:	f04f 0b01 	mov.w	fp, #1
 8007b68:	463a      	mov	r2, r7
 8007b6a:	4616      	mov	r6, r2
 8007b6c:	3201      	adds	r2, #1
 8007b6e:	7830      	ldrb	r0, [r6, #0]
 8007b70:	f7ff ffa4 	bl	8007abc <__hexdig_fun>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d1f8      	bne.n	8007b6a <__gethex+0x84>
 8007b78:	9a01      	ldr	r2, [sp, #4]
 8007b7a:	9903      	ldr	r1, [sp, #12]
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f001 f8d9 	bl	8008d34 <strncmp>
 8007b82:	b950      	cbnz	r0, 8007b9a <__gethex+0xb4>
 8007b84:	b954      	cbnz	r4, 8007b9c <__gethex+0xb6>
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	18f4      	adds	r4, r6, r3
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	4616      	mov	r6, r2
 8007b8e:	3201      	adds	r2, #1
 8007b90:	7830      	ldrb	r0, [r6, #0]
 8007b92:	f7ff ff93 	bl	8007abc <__hexdig_fun>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d1f8      	bne.n	8007b8c <__gethex+0xa6>
 8007b9a:	b10c      	cbz	r4, 8007ba0 <__gethex+0xba>
 8007b9c:	1ba4      	subs	r4, r4, r6
 8007b9e:	00a4      	lsls	r4, r4, #2
 8007ba0:	7833      	ldrb	r3, [r6, #0]
 8007ba2:	2b50      	cmp	r3, #80	; 0x50
 8007ba4:	d001      	beq.n	8007baa <__gethex+0xc4>
 8007ba6:	2b70      	cmp	r3, #112	; 0x70
 8007ba8:	d140      	bne.n	8007c2c <__gethex+0x146>
 8007baa:	7873      	ldrb	r3, [r6, #1]
 8007bac:	2b2b      	cmp	r3, #43	; 0x2b
 8007bae:	d031      	beq.n	8007c14 <__gethex+0x12e>
 8007bb0:	2b2d      	cmp	r3, #45	; 0x2d
 8007bb2:	d033      	beq.n	8007c1c <__gethex+0x136>
 8007bb4:	1c71      	adds	r1, r6, #1
 8007bb6:	f04f 0900 	mov.w	r9, #0
 8007bba:	7808      	ldrb	r0, [r1, #0]
 8007bbc:	f7ff ff7e 	bl	8007abc <__hexdig_fun>
 8007bc0:	1e43      	subs	r3, r0, #1
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b18      	cmp	r3, #24
 8007bc6:	d831      	bhi.n	8007c2c <__gethex+0x146>
 8007bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8007bcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007bd0:	f7ff ff74 	bl	8007abc <__hexdig_fun>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b18      	cmp	r3, #24
 8007bda:	d922      	bls.n	8007c22 <__gethex+0x13c>
 8007bdc:	f1b9 0f00 	cmp.w	r9, #0
 8007be0:	d000      	beq.n	8007be4 <__gethex+0xfe>
 8007be2:	4252      	negs	r2, r2
 8007be4:	4414      	add	r4, r2
 8007be6:	f8ca 1000 	str.w	r1, [sl]
 8007bea:	b30d      	cbz	r5, 8007c30 <__gethex+0x14a>
 8007bec:	f1bb 0f00 	cmp.w	fp, #0
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2706      	moveq	r7, #6
 8007bf4:	2700      	movne	r7, #0
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	b00b      	add	sp, #44	; 0x2c
 8007bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfe:	f10b 0b01 	add.w	fp, fp, #1
 8007c02:	e78a      	b.n	8007b1a <__gethex+0x34>
 8007c04:	2500      	movs	r5, #0
 8007c06:	462c      	mov	r4, r5
 8007c08:	e7ae      	b.n	8007b68 <__gethex+0x82>
 8007c0a:	463e      	mov	r6, r7
 8007c0c:	2501      	movs	r5, #1
 8007c0e:	e7c7      	b.n	8007ba0 <__gethex+0xba>
 8007c10:	4604      	mov	r4, r0
 8007c12:	e7fb      	b.n	8007c0c <__gethex+0x126>
 8007c14:	f04f 0900 	mov.w	r9, #0
 8007c18:	1cb1      	adds	r1, r6, #2
 8007c1a:	e7ce      	b.n	8007bba <__gethex+0xd4>
 8007c1c:	f04f 0901 	mov.w	r9, #1
 8007c20:	e7fa      	b.n	8007c18 <__gethex+0x132>
 8007c22:	230a      	movs	r3, #10
 8007c24:	fb03 0202 	mla	r2, r3, r2, r0
 8007c28:	3a10      	subs	r2, #16
 8007c2a:	e7cf      	b.n	8007bcc <__gethex+0xe6>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	e7da      	b.n	8007be6 <__gethex+0x100>
 8007c30:	1bf3      	subs	r3, r6, r7
 8007c32:	3b01      	subs	r3, #1
 8007c34:	4629      	mov	r1, r5
 8007c36:	2b07      	cmp	r3, #7
 8007c38:	dc49      	bgt.n	8007cce <__gethex+0x1e8>
 8007c3a:	9802      	ldr	r0, [sp, #8]
 8007c3c:	f000 fa63 	bl	8008106 <_Balloc>
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	f100 0914 	add.w	r9, r0, #20
 8007c46:	f04f 0b00 	mov.w	fp, #0
 8007c4a:	f1c3 0301 	rsb	r3, r3, #1
 8007c4e:	4605      	mov	r5, r0
 8007c50:	f8cd 9010 	str.w	r9, [sp, #16]
 8007c54:	46da      	mov	sl, fp
 8007c56:	9308      	str	r3, [sp, #32]
 8007c58:	42b7      	cmp	r7, r6
 8007c5a:	d33b      	bcc.n	8007cd4 <__gethex+0x1ee>
 8007c5c:	9804      	ldr	r0, [sp, #16]
 8007c5e:	f840 ab04 	str.w	sl, [r0], #4
 8007c62:	eba0 0009 	sub.w	r0, r0, r9
 8007c66:	1080      	asrs	r0, r0, #2
 8007c68:	6128      	str	r0, [r5, #16]
 8007c6a:	0147      	lsls	r7, r0, #5
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	f000 fb0e 	bl	800828e <__hi0bits>
 8007c72:	f8d8 6000 	ldr.w	r6, [r8]
 8007c76:	1a3f      	subs	r7, r7, r0
 8007c78:	42b7      	cmp	r7, r6
 8007c7a:	dd64      	ble.n	8007d46 <__gethex+0x260>
 8007c7c:	1bbf      	subs	r7, r7, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4628      	mov	r0, r5
 8007c82:	f000 fe1d 	bl	80088c0 <__any_on>
 8007c86:	4682      	mov	sl, r0
 8007c88:	b178      	cbz	r0, 8007caa <__gethex+0x1c4>
 8007c8a:	1e7b      	subs	r3, r7, #1
 8007c8c:	1159      	asrs	r1, r3, #5
 8007c8e:	f003 021f 	and.w	r2, r3, #31
 8007c92:	f04f 0a01 	mov.w	sl, #1
 8007c96:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007c9a:	fa0a f202 	lsl.w	r2, sl, r2
 8007c9e:	420a      	tst	r2, r1
 8007ca0:	d003      	beq.n	8007caa <__gethex+0x1c4>
 8007ca2:	4553      	cmp	r3, sl
 8007ca4:	dc46      	bgt.n	8007d34 <__gethex+0x24e>
 8007ca6:	f04f 0a02 	mov.w	sl, #2
 8007caa:	4639      	mov	r1, r7
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7ff fecb 	bl	8007a48 <rshift>
 8007cb2:	443c      	add	r4, r7
 8007cb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	da52      	bge.n	8007d62 <__gethex+0x27c>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	9802      	ldr	r0, [sp, #8]
 8007cc0:	f000 fa55 	bl	800816e <_Bfree>
 8007cc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	27a3      	movs	r7, #163	; 0xa3
 8007ccc:	e793      	b.n	8007bf6 <__gethex+0x110>
 8007cce:	3101      	adds	r1, #1
 8007cd0:	105b      	asrs	r3, r3, #1
 8007cd2:	e7b0      	b.n	8007c36 <__gethex+0x150>
 8007cd4:	1e73      	subs	r3, r6, #1
 8007cd6:	9305      	str	r3, [sp, #20]
 8007cd8:	9a07      	ldr	r2, [sp, #28]
 8007cda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d018      	beq.n	8007d14 <__gethex+0x22e>
 8007ce2:	f1bb 0f20 	cmp.w	fp, #32
 8007ce6:	d107      	bne.n	8007cf8 <__gethex+0x212>
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	f8c3 a000 	str.w	sl, [r3]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	f04f 0a00 	mov.w	sl, #0
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	46d3      	mov	fp, sl
 8007cf8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007cfc:	f7ff fede 	bl	8007abc <__hexdig_fun>
 8007d00:	f000 000f 	and.w	r0, r0, #15
 8007d04:	fa00 f00b 	lsl.w	r0, r0, fp
 8007d08:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d0c:	f10b 0b04 	add.w	fp, fp, #4
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	e00d      	b.n	8007d30 <__gethex+0x24a>
 8007d14:	9b05      	ldr	r3, [sp, #20]
 8007d16:	9a08      	ldr	r2, [sp, #32]
 8007d18:	4413      	add	r3, r2
 8007d1a:	42bb      	cmp	r3, r7
 8007d1c:	d3e1      	bcc.n	8007ce2 <__gethex+0x1fc>
 8007d1e:	4618      	mov	r0, r3
 8007d20:	9a01      	ldr	r2, [sp, #4]
 8007d22:	9903      	ldr	r1, [sp, #12]
 8007d24:	9309      	str	r3, [sp, #36]	; 0x24
 8007d26:	f001 f805 	bl	8008d34 <strncmp>
 8007d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1d8      	bne.n	8007ce2 <__gethex+0x1fc>
 8007d30:	461e      	mov	r6, r3
 8007d32:	e791      	b.n	8007c58 <__gethex+0x172>
 8007d34:	1eb9      	subs	r1, r7, #2
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 fdc2 	bl	80088c0 <__any_on>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d0b2      	beq.n	8007ca6 <__gethex+0x1c0>
 8007d40:	f04f 0a03 	mov.w	sl, #3
 8007d44:	e7b1      	b.n	8007caa <__gethex+0x1c4>
 8007d46:	da09      	bge.n	8007d5c <__gethex+0x276>
 8007d48:	1bf7      	subs	r7, r6, r7
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	463a      	mov	r2, r7
 8007d4e:	9802      	ldr	r0, [sp, #8]
 8007d50:	f000 fbd8 	bl	8008504 <__lshift>
 8007d54:	1be4      	subs	r4, r4, r7
 8007d56:	4605      	mov	r5, r0
 8007d58:	f100 0914 	add.w	r9, r0, #20
 8007d5c:	f04f 0a00 	mov.w	sl, #0
 8007d60:	e7a8      	b.n	8007cb4 <__gethex+0x1ce>
 8007d62:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d66:	42a0      	cmp	r0, r4
 8007d68:	dd6a      	ble.n	8007e40 <__gethex+0x35a>
 8007d6a:	1b04      	subs	r4, r0, r4
 8007d6c:	42a6      	cmp	r6, r4
 8007d6e:	dc2e      	bgt.n	8007dce <__gethex+0x2e8>
 8007d70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d022      	beq.n	8007dbe <__gethex+0x2d8>
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d024      	beq.n	8007dc6 <__gethex+0x2e0>
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d115      	bne.n	8007dac <__gethex+0x2c6>
 8007d80:	42a6      	cmp	r6, r4
 8007d82:	d113      	bne.n	8007dac <__gethex+0x2c6>
 8007d84:	2e01      	cmp	r6, #1
 8007d86:	dc0b      	bgt.n	8007da0 <__gethex+0x2ba>
 8007d88:	9a06      	ldr	r2, [sp, #24]
 8007d8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	2301      	movs	r3, #1
 8007d92:	612b      	str	r3, [r5, #16]
 8007d94:	f8c9 3000 	str.w	r3, [r9]
 8007d98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d9a:	2762      	movs	r7, #98	; 0x62
 8007d9c:	601d      	str	r5, [r3, #0]
 8007d9e:	e72a      	b.n	8007bf6 <__gethex+0x110>
 8007da0:	1e71      	subs	r1, r6, #1
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fd8c 	bl	80088c0 <__any_on>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d1ed      	bne.n	8007d88 <__gethex+0x2a2>
 8007dac:	4629      	mov	r1, r5
 8007dae:	9802      	ldr	r0, [sp, #8]
 8007db0:	f000 f9dd 	bl	800816e <_Bfree>
 8007db4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007db6:	2300      	movs	r3, #0
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	2750      	movs	r7, #80	; 0x50
 8007dbc:	e71b      	b.n	8007bf6 <__gethex+0x110>
 8007dbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0e1      	beq.n	8007d88 <__gethex+0x2a2>
 8007dc4:	e7f2      	b.n	8007dac <__gethex+0x2c6>
 8007dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1dd      	bne.n	8007d88 <__gethex+0x2a2>
 8007dcc:	e7ee      	b.n	8007dac <__gethex+0x2c6>
 8007dce:	1e67      	subs	r7, r4, #1
 8007dd0:	f1ba 0f00 	cmp.w	sl, #0
 8007dd4:	d131      	bne.n	8007e3a <__gethex+0x354>
 8007dd6:	b127      	cbz	r7, 8007de2 <__gethex+0x2fc>
 8007dd8:	4639      	mov	r1, r7
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 fd70 	bl	80088c0 <__any_on>
 8007de0:	4682      	mov	sl, r0
 8007de2:	117a      	asrs	r2, r7, #5
 8007de4:	2301      	movs	r3, #1
 8007de6:	f007 071f 	and.w	r7, r7, #31
 8007dea:	fa03 f707 	lsl.w	r7, r3, r7
 8007dee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007df2:	4621      	mov	r1, r4
 8007df4:	421f      	tst	r7, r3
 8007df6:	4628      	mov	r0, r5
 8007df8:	bf18      	it	ne
 8007dfa:	f04a 0a02 	orrne.w	sl, sl, #2
 8007dfe:	1b36      	subs	r6, r6, r4
 8007e00:	f7ff fe22 	bl	8007a48 <rshift>
 8007e04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007e08:	2702      	movs	r7, #2
 8007e0a:	f1ba 0f00 	cmp.w	sl, #0
 8007e0e:	d048      	beq.n	8007ea2 <__gethex+0x3bc>
 8007e10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d015      	beq.n	8007e44 <__gethex+0x35e>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d017      	beq.n	8007e4c <__gethex+0x366>
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d109      	bne.n	8007e34 <__gethex+0x34e>
 8007e20:	f01a 0f02 	tst.w	sl, #2
 8007e24:	d006      	beq.n	8007e34 <__gethex+0x34e>
 8007e26:	f8d9 3000 	ldr.w	r3, [r9]
 8007e2a:	ea4a 0a03 	orr.w	sl, sl, r3
 8007e2e:	f01a 0f01 	tst.w	sl, #1
 8007e32:	d10e      	bne.n	8007e52 <__gethex+0x36c>
 8007e34:	f047 0710 	orr.w	r7, r7, #16
 8007e38:	e033      	b.n	8007ea2 <__gethex+0x3bc>
 8007e3a:	f04f 0a01 	mov.w	sl, #1
 8007e3e:	e7d0      	b.n	8007de2 <__gethex+0x2fc>
 8007e40:	2701      	movs	r7, #1
 8007e42:	e7e2      	b.n	8007e0a <__gethex+0x324>
 8007e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e46:	f1c3 0301 	rsb	r3, r3, #1
 8007e4a:	9315      	str	r3, [sp, #84]	; 0x54
 8007e4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0f0      	beq.n	8007e34 <__gethex+0x34e>
 8007e52:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007e56:	f105 0314 	add.w	r3, r5, #20
 8007e5a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007e5e:	eb03 010a 	add.w	r1, r3, sl
 8007e62:	f04f 0c00 	mov.w	ip, #0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007e70:	d01c      	beq.n	8007eac <__gethex+0x3c6>
 8007e72:	3201      	adds	r2, #1
 8007e74:	6002      	str	r2, [r0, #0]
 8007e76:	2f02      	cmp	r7, #2
 8007e78:	f105 0314 	add.w	r3, r5, #20
 8007e7c:	d138      	bne.n	8007ef0 <__gethex+0x40a>
 8007e7e:	f8d8 2000 	ldr.w	r2, [r8]
 8007e82:	3a01      	subs	r2, #1
 8007e84:	42b2      	cmp	r2, r6
 8007e86:	d10a      	bne.n	8007e9e <__gethex+0x3b8>
 8007e88:	1171      	asrs	r1, r6, #5
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f006 061f 	and.w	r6, r6, #31
 8007e90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e94:	fa02 f606 	lsl.w	r6, r2, r6
 8007e98:	421e      	tst	r6, r3
 8007e9a:	bf18      	it	ne
 8007e9c:	4617      	movne	r7, r2
 8007e9e:	f047 0720 	orr.w	r7, r7, #32
 8007ea2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ea4:	601d      	str	r5, [r3, #0]
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	601c      	str	r4, [r3, #0]
 8007eaa:	e6a4      	b.n	8007bf6 <__gethex+0x110>
 8007eac:	4299      	cmp	r1, r3
 8007eae:	f843 cc04 	str.w	ip, [r3, #-4]
 8007eb2:	d8d8      	bhi.n	8007e66 <__gethex+0x380>
 8007eb4:	68ab      	ldr	r3, [r5, #8]
 8007eb6:	4599      	cmp	r9, r3
 8007eb8:	db12      	blt.n	8007ee0 <__gethex+0x3fa>
 8007eba:	6869      	ldr	r1, [r5, #4]
 8007ebc:	9802      	ldr	r0, [sp, #8]
 8007ebe:	3101      	adds	r1, #1
 8007ec0:	f000 f921 	bl	8008106 <_Balloc>
 8007ec4:	692a      	ldr	r2, [r5, #16]
 8007ec6:	3202      	adds	r2, #2
 8007ec8:	f105 010c 	add.w	r1, r5, #12
 8007ecc:	4683      	mov	fp, r0
 8007ece:	0092      	lsls	r2, r2, #2
 8007ed0:	300c      	adds	r0, #12
 8007ed2:	f000 f90d 	bl	80080f0 <memcpy>
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	9802      	ldr	r0, [sp, #8]
 8007eda:	f000 f948 	bl	800816e <_Bfree>
 8007ede:	465d      	mov	r5, fp
 8007ee0:	692b      	ldr	r3, [r5, #16]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007ee8:	612a      	str	r2, [r5, #16]
 8007eea:	2201      	movs	r2, #1
 8007eec:	615a      	str	r2, [r3, #20]
 8007eee:	e7c2      	b.n	8007e76 <__gethex+0x390>
 8007ef0:	692a      	ldr	r2, [r5, #16]
 8007ef2:	454a      	cmp	r2, r9
 8007ef4:	dd0b      	ble.n	8007f0e <__gethex+0x428>
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff fda5 	bl	8007a48 <rshift>
 8007efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f02:	3401      	adds	r4, #1
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	f6ff aed9 	blt.w	8007cbc <__gethex+0x1d6>
 8007f0a:	2701      	movs	r7, #1
 8007f0c:	e7c7      	b.n	8007e9e <__gethex+0x3b8>
 8007f0e:	f016 061f 	ands.w	r6, r6, #31
 8007f12:	d0fa      	beq.n	8007f0a <__gethex+0x424>
 8007f14:	449a      	add	sl, r3
 8007f16:	f1c6 0620 	rsb	r6, r6, #32
 8007f1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007f1e:	f000 f9b6 	bl	800828e <__hi0bits>
 8007f22:	42b0      	cmp	r0, r6
 8007f24:	dbe7      	blt.n	8007ef6 <__gethex+0x410>
 8007f26:	e7f0      	b.n	8007f0a <__gethex+0x424>

08007f28 <L_shift>:
 8007f28:	f1c2 0208 	rsb	r2, r2, #8
 8007f2c:	0092      	lsls	r2, r2, #2
 8007f2e:	b570      	push	{r4, r5, r6, lr}
 8007f30:	f1c2 0620 	rsb	r6, r2, #32
 8007f34:	6843      	ldr	r3, [r0, #4]
 8007f36:	6804      	ldr	r4, [r0, #0]
 8007f38:	fa03 f506 	lsl.w	r5, r3, r6
 8007f3c:	432c      	orrs	r4, r5
 8007f3e:	40d3      	lsrs	r3, r2
 8007f40:	6004      	str	r4, [r0, #0]
 8007f42:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f46:	4288      	cmp	r0, r1
 8007f48:	d3f4      	bcc.n	8007f34 <L_shift+0xc>
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}

08007f4c <__match>:
 8007f4c:	b530      	push	{r4, r5, lr}
 8007f4e:	6803      	ldr	r3, [r0, #0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f56:	b914      	cbnz	r4, 8007f5e <__match+0x12>
 8007f58:	6003      	str	r3, [r0, #0]
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	bd30      	pop	{r4, r5, pc}
 8007f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f66:	2d19      	cmp	r5, #25
 8007f68:	bf98      	it	ls
 8007f6a:	3220      	addls	r2, #32
 8007f6c:	42a2      	cmp	r2, r4
 8007f6e:	d0f0      	beq.n	8007f52 <__match+0x6>
 8007f70:	2000      	movs	r0, #0
 8007f72:	e7f3      	b.n	8007f5c <__match+0x10>

08007f74 <__hexnan>:
 8007f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	680b      	ldr	r3, [r1, #0]
 8007f7a:	6801      	ldr	r1, [r0, #0]
 8007f7c:	115f      	asrs	r7, r3, #5
 8007f7e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007f82:	f013 031f 	ands.w	r3, r3, #31
 8007f86:	b087      	sub	sp, #28
 8007f88:	bf18      	it	ne
 8007f8a:	3704      	addne	r7, #4
 8007f8c:	2500      	movs	r5, #0
 8007f8e:	1f3e      	subs	r6, r7, #4
 8007f90:	4682      	mov	sl, r0
 8007f92:	4690      	mov	r8, r2
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	f847 5c04 	str.w	r5, [r7, #-4]
 8007f9a:	46b1      	mov	r9, r6
 8007f9c:	4634      	mov	r4, r6
 8007f9e:	9502      	str	r5, [sp, #8]
 8007fa0:	46ab      	mov	fp, r5
 8007fa2:	784a      	ldrb	r2, [r1, #1]
 8007fa4:	1c4b      	adds	r3, r1, #1
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	b342      	cbz	r2, 8007ffc <__hexnan+0x88>
 8007faa:	4610      	mov	r0, r2
 8007fac:	9105      	str	r1, [sp, #20]
 8007fae:	9204      	str	r2, [sp, #16]
 8007fb0:	f7ff fd84 	bl	8007abc <__hexdig_fun>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d143      	bne.n	8008040 <__hexnan+0xcc>
 8007fb8:	9a04      	ldr	r2, [sp, #16]
 8007fba:	9905      	ldr	r1, [sp, #20]
 8007fbc:	2a20      	cmp	r2, #32
 8007fbe:	d818      	bhi.n	8007ff2 <__hexnan+0x7e>
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	459b      	cmp	fp, r3
 8007fc4:	dd13      	ble.n	8007fee <__hexnan+0x7a>
 8007fc6:	454c      	cmp	r4, r9
 8007fc8:	d206      	bcs.n	8007fd8 <__hexnan+0x64>
 8007fca:	2d07      	cmp	r5, #7
 8007fcc:	dc04      	bgt.n	8007fd8 <__hexnan+0x64>
 8007fce:	462a      	mov	r2, r5
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f7ff ffa8 	bl	8007f28 <L_shift>
 8007fd8:	4544      	cmp	r4, r8
 8007fda:	d944      	bls.n	8008066 <__hexnan+0xf2>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f1a4 0904 	sub.w	r9, r4, #4
 8007fe2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fe6:	f8cd b008 	str.w	fp, [sp, #8]
 8007fea:	464c      	mov	r4, r9
 8007fec:	461d      	mov	r5, r3
 8007fee:	9903      	ldr	r1, [sp, #12]
 8007ff0:	e7d7      	b.n	8007fa2 <__hexnan+0x2e>
 8007ff2:	2a29      	cmp	r2, #41	; 0x29
 8007ff4:	d14a      	bne.n	800808c <__hexnan+0x118>
 8007ff6:	3102      	adds	r1, #2
 8007ff8:	f8ca 1000 	str.w	r1, [sl]
 8007ffc:	f1bb 0f00 	cmp.w	fp, #0
 8008000:	d044      	beq.n	800808c <__hexnan+0x118>
 8008002:	454c      	cmp	r4, r9
 8008004:	d206      	bcs.n	8008014 <__hexnan+0xa0>
 8008006:	2d07      	cmp	r5, #7
 8008008:	dc04      	bgt.n	8008014 <__hexnan+0xa0>
 800800a:	462a      	mov	r2, r5
 800800c:	4649      	mov	r1, r9
 800800e:	4620      	mov	r0, r4
 8008010:	f7ff ff8a 	bl	8007f28 <L_shift>
 8008014:	4544      	cmp	r4, r8
 8008016:	d928      	bls.n	800806a <__hexnan+0xf6>
 8008018:	4643      	mov	r3, r8
 800801a:	f854 2b04 	ldr.w	r2, [r4], #4
 800801e:	f843 2b04 	str.w	r2, [r3], #4
 8008022:	42a6      	cmp	r6, r4
 8008024:	d2f9      	bcs.n	800801a <__hexnan+0xa6>
 8008026:	2200      	movs	r2, #0
 8008028:	f843 2b04 	str.w	r2, [r3], #4
 800802c:	429e      	cmp	r6, r3
 800802e:	d2fb      	bcs.n	8008028 <__hexnan+0xb4>
 8008030:	6833      	ldr	r3, [r6, #0]
 8008032:	b91b      	cbnz	r3, 800803c <__hexnan+0xc8>
 8008034:	4546      	cmp	r6, r8
 8008036:	d127      	bne.n	8008088 <__hexnan+0x114>
 8008038:	2301      	movs	r3, #1
 800803a:	6033      	str	r3, [r6, #0]
 800803c:	2005      	movs	r0, #5
 800803e:	e026      	b.n	800808e <__hexnan+0x11a>
 8008040:	3501      	adds	r5, #1
 8008042:	2d08      	cmp	r5, #8
 8008044:	f10b 0b01 	add.w	fp, fp, #1
 8008048:	dd06      	ble.n	8008058 <__hexnan+0xe4>
 800804a:	4544      	cmp	r4, r8
 800804c:	d9cf      	bls.n	8007fee <__hexnan+0x7a>
 800804e:	2300      	movs	r3, #0
 8008050:	f844 3c04 	str.w	r3, [r4, #-4]
 8008054:	2501      	movs	r5, #1
 8008056:	3c04      	subs	r4, #4
 8008058:	6822      	ldr	r2, [r4, #0]
 800805a:	f000 000f 	and.w	r0, r0, #15
 800805e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008062:	6020      	str	r0, [r4, #0]
 8008064:	e7c3      	b.n	8007fee <__hexnan+0x7a>
 8008066:	2508      	movs	r5, #8
 8008068:	e7c1      	b.n	8007fee <__hexnan+0x7a>
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0df      	beq.n	8008030 <__hexnan+0xbc>
 8008070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008074:	f1c3 0320 	rsb	r3, r3, #32
 8008078:	fa22 f303 	lsr.w	r3, r2, r3
 800807c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008080:	401a      	ands	r2, r3
 8008082:	f847 2c04 	str.w	r2, [r7, #-4]
 8008086:	e7d3      	b.n	8008030 <__hexnan+0xbc>
 8008088:	3e04      	subs	r6, #4
 800808a:	e7d1      	b.n	8008030 <__hexnan+0xbc>
 800808c:	2004      	movs	r0, #4
 800808e:	b007      	add	sp, #28
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008094 <__locale_ctype_ptr_l>:
 8008094:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008098:	4770      	bx	lr

0800809a <__localeconv_l>:
 800809a:	30f0      	adds	r0, #240	; 0xf0
 800809c:	4770      	bx	lr
	...

080080a0 <_localeconv_r>:
 80080a0:	4b04      	ldr	r3, [pc, #16]	; (80080b4 <_localeconv_r+0x14>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6a18      	ldr	r0, [r3, #32]
 80080a6:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <_localeconv_r+0x18>)
 80080a8:	2800      	cmp	r0, #0
 80080aa:	bf08      	it	eq
 80080ac:	4618      	moveq	r0, r3
 80080ae:	30f0      	adds	r0, #240	; 0xf0
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000010 	.word	0x20000010
 80080b8:	20000074 	.word	0x20000074

080080bc <malloc>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <malloc+0xc>)
 80080be:	4601      	mov	r1, r0
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f000 bc7b 	b.w	80089bc <_malloc_r>
 80080c6:	bf00      	nop
 80080c8:	20000010 	.word	0x20000010

080080cc <__ascii_mbtowc>:
 80080cc:	b082      	sub	sp, #8
 80080ce:	b901      	cbnz	r1, 80080d2 <__ascii_mbtowc+0x6>
 80080d0:	a901      	add	r1, sp, #4
 80080d2:	b142      	cbz	r2, 80080e6 <__ascii_mbtowc+0x1a>
 80080d4:	b14b      	cbz	r3, 80080ea <__ascii_mbtowc+0x1e>
 80080d6:	7813      	ldrb	r3, [r2, #0]
 80080d8:	600b      	str	r3, [r1, #0]
 80080da:	7812      	ldrb	r2, [r2, #0]
 80080dc:	1c10      	adds	r0, r2, #0
 80080de:	bf18      	it	ne
 80080e0:	2001      	movne	r0, #1
 80080e2:	b002      	add	sp, #8
 80080e4:	4770      	bx	lr
 80080e6:	4610      	mov	r0, r2
 80080e8:	e7fb      	b.n	80080e2 <__ascii_mbtowc+0x16>
 80080ea:	f06f 0001 	mvn.w	r0, #1
 80080ee:	e7f8      	b.n	80080e2 <__ascii_mbtowc+0x16>

080080f0 <memcpy>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	1e43      	subs	r3, r0, #1
 80080f4:	440a      	add	r2, r1
 80080f6:	4291      	cmp	r1, r2
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	bd10      	pop	{r4, pc}
 80080fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008104:	e7f7      	b.n	80080f6 <memcpy+0x6>

08008106 <_Balloc>:
 8008106:	b570      	push	{r4, r5, r6, lr}
 8008108:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800810a:	4604      	mov	r4, r0
 800810c:	460e      	mov	r6, r1
 800810e:	b93d      	cbnz	r5, 8008120 <_Balloc+0x1a>
 8008110:	2010      	movs	r0, #16
 8008112:	f7ff ffd3 	bl	80080bc <malloc>
 8008116:	6260      	str	r0, [r4, #36]	; 0x24
 8008118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800811c:	6005      	str	r5, [r0, #0]
 800811e:	60c5      	str	r5, [r0, #12]
 8008120:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008122:	68eb      	ldr	r3, [r5, #12]
 8008124:	b183      	cbz	r3, 8008148 <_Balloc+0x42>
 8008126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800812e:	b9b8      	cbnz	r0, 8008160 <_Balloc+0x5a>
 8008130:	2101      	movs	r1, #1
 8008132:	fa01 f506 	lsl.w	r5, r1, r6
 8008136:	1d6a      	adds	r2, r5, #5
 8008138:	0092      	lsls	r2, r2, #2
 800813a:	4620      	mov	r0, r4
 800813c:	f000 fbe1 	bl	8008902 <_calloc_r>
 8008140:	b160      	cbz	r0, 800815c <_Balloc+0x56>
 8008142:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008146:	e00e      	b.n	8008166 <_Balloc+0x60>
 8008148:	2221      	movs	r2, #33	; 0x21
 800814a:	2104      	movs	r1, #4
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fbd8 	bl	8008902 <_calloc_r>
 8008152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008154:	60e8      	str	r0, [r5, #12]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e4      	bne.n	8008126 <_Balloc+0x20>
 800815c:	2000      	movs	r0, #0
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	6802      	ldr	r2, [r0, #0]
 8008162:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008166:	2300      	movs	r3, #0
 8008168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800816c:	e7f7      	b.n	800815e <_Balloc+0x58>

0800816e <_Bfree>:
 800816e:	b570      	push	{r4, r5, r6, lr}
 8008170:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008172:	4606      	mov	r6, r0
 8008174:	460d      	mov	r5, r1
 8008176:	b93c      	cbnz	r4, 8008188 <_Bfree+0x1a>
 8008178:	2010      	movs	r0, #16
 800817a:	f7ff ff9f 	bl	80080bc <malloc>
 800817e:	6270      	str	r0, [r6, #36]	; 0x24
 8008180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008184:	6004      	str	r4, [r0, #0]
 8008186:	60c4      	str	r4, [r0, #12]
 8008188:	b13d      	cbz	r5, 800819a <_Bfree+0x2c>
 800818a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800818c:	686a      	ldr	r2, [r5, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008194:	6029      	str	r1, [r5, #0]
 8008196:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800819a:	bd70      	pop	{r4, r5, r6, pc}

0800819c <__multadd>:
 800819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a0:	690d      	ldr	r5, [r1, #16]
 80081a2:	461f      	mov	r7, r3
 80081a4:	4606      	mov	r6, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	f101 0c14 	add.w	ip, r1, #20
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8dc 0000 	ldr.w	r0, [ip]
 80081b2:	b281      	uxth	r1, r0
 80081b4:	fb02 7101 	mla	r1, r2, r1, r7
 80081b8:	0c0f      	lsrs	r7, r1, #16
 80081ba:	0c00      	lsrs	r0, r0, #16
 80081bc:	fb02 7000 	mla	r0, r2, r0, r7
 80081c0:	b289      	uxth	r1, r1
 80081c2:	3301      	adds	r3, #1
 80081c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80081c8:	429d      	cmp	r5, r3
 80081ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80081ce:	f84c 1b04 	str.w	r1, [ip], #4
 80081d2:	dcec      	bgt.n	80081ae <__multadd+0x12>
 80081d4:	b1d7      	cbz	r7, 800820c <__multadd+0x70>
 80081d6:	68a3      	ldr	r3, [r4, #8]
 80081d8:	42ab      	cmp	r3, r5
 80081da:	dc12      	bgt.n	8008202 <__multadd+0x66>
 80081dc:	6861      	ldr	r1, [r4, #4]
 80081de:	4630      	mov	r0, r6
 80081e0:	3101      	adds	r1, #1
 80081e2:	f7ff ff90 	bl	8008106 <_Balloc>
 80081e6:	6922      	ldr	r2, [r4, #16]
 80081e8:	3202      	adds	r2, #2
 80081ea:	f104 010c 	add.w	r1, r4, #12
 80081ee:	4680      	mov	r8, r0
 80081f0:	0092      	lsls	r2, r2, #2
 80081f2:	300c      	adds	r0, #12
 80081f4:	f7ff ff7c 	bl	80080f0 <memcpy>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff ffb7 	bl	800816e <_Bfree>
 8008200:	4644      	mov	r4, r8
 8008202:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008206:	3501      	adds	r5, #1
 8008208:	615f      	str	r7, [r3, #20]
 800820a:	6125      	str	r5, [r4, #16]
 800820c:	4620      	mov	r0, r4
 800820e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008212 <__s2b>:
 8008212:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008216:	460c      	mov	r4, r1
 8008218:	4615      	mov	r5, r2
 800821a:	461f      	mov	r7, r3
 800821c:	2209      	movs	r2, #9
 800821e:	3308      	adds	r3, #8
 8008220:	4606      	mov	r6, r0
 8008222:	fb93 f3f2 	sdiv	r3, r3, r2
 8008226:	2100      	movs	r1, #0
 8008228:	2201      	movs	r2, #1
 800822a:	429a      	cmp	r2, r3
 800822c:	db20      	blt.n	8008270 <__s2b+0x5e>
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff ff69 	bl	8008106 <_Balloc>
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	6143      	str	r3, [r0, #20]
 8008238:	2d09      	cmp	r5, #9
 800823a:	f04f 0301 	mov.w	r3, #1
 800823e:	6103      	str	r3, [r0, #16]
 8008240:	dd19      	ble.n	8008276 <__s2b+0x64>
 8008242:	f104 0809 	add.w	r8, r4, #9
 8008246:	46c1      	mov	r9, r8
 8008248:	442c      	add	r4, r5
 800824a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800824e:	4601      	mov	r1, r0
 8008250:	3b30      	subs	r3, #48	; 0x30
 8008252:	220a      	movs	r2, #10
 8008254:	4630      	mov	r0, r6
 8008256:	f7ff ffa1 	bl	800819c <__multadd>
 800825a:	45a1      	cmp	r9, r4
 800825c:	d1f5      	bne.n	800824a <__s2b+0x38>
 800825e:	eb08 0405 	add.w	r4, r8, r5
 8008262:	3c08      	subs	r4, #8
 8008264:	1b2d      	subs	r5, r5, r4
 8008266:	1963      	adds	r3, r4, r5
 8008268:	42bb      	cmp	r3, r7
 800826a:	db07      	blt.n	800827c <__s2b+0x6a>
 800826c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008270:	0052      	lsls	r2, r2, #1
 8008272:	3101      	adds	r1, #1
 8008274:	e7d9      	b.n	800822a <__s2b+0x18>
 8008276:	340a      	adds	r4, #10
 8008278:	2509      	movs	r5, #9
 800827a:	e7f3      	b.n	8008264 <__s2b+0x52>
 800827c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008280:	4601      	mov	r1, r0
 8008282:	3b30      	subs	r3, #48	; 0x30
 8008284:	220a      	movs	r2, #10
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ff88 	bl	800819c <__multadd>
 800828c:	e7eb      	b.n	8008266 <__s2b+0x54>

0800828e <__hi0bits>:
 800828e:	0c02      	lsrs	r2, r0, #16
 8008290:	0412      	lsls	r2, r2, #16
 8008292:	4603      	mov	r3, r0
 8008294:	b9b2      	cbnz	r2, 80082c4 <__hi0bits+0x36>
 8008296:	0403      	lsls	r3, r0, #16
 8008298:	2010      	movs	r0, #16
 800829a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800829e:	bf04      	itt	eq
 80082a0:	021b      	lsleq	r3, r3, #8
 80082a2:	3008      	addeq	r0, #8
 80082a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80082a8:	bf04      	itt	eq
 80082aa:	011b      	lsleq	r3, r3, #4
 80082ac:	3004      	addeq	r0, #4
 80082ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80082b2:	bf04      	itt	eq
 80082b4:	009b      	lsleq	r3, r3, #2
 80082b6:	3002      	addeq	r0, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	db06      	blt.n	80082ca <__hi0bits+0x3c>
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	d503      	bpl.n	80082c8 <__hi0bits+0x3a>
 80082c0:	3001      	adds	r0, #1
 80082c2:	4770      	bx	lr
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7e8      	b.n	800829a <__hi0bits+0xc>
 80082c8:	2020      	movs	r0, #32
 80082ca:	4770      	bx	lr

080082cc <__lo0bits>:
 80082cc:	6803      	ldr	r3, [r0, #0]
 80082ce:	f013 0207 	ands.w	r2, r3, #7
 80082d2:	4601      	mov	r1, r0
 80082d4:	d00b      	beq.n	80082ee <__lo0bits+0x22>
 80082d6:	07da      	lsls	r2, r3, #31
 80082d8:	d423      	bmi.n	8008322 <__lo0bits+0x56>
 80082da:	0798      	lsls	r0, r3, #30
 80082dc:	bf49      	itett	mi
 80082de:	085b      	lsrmi	r3, r3, #1
 80082e0:	089b      	lsrpl	r3, r3, #2
 80082e2:	2001      	movmi	r0, #1
 80082e4:	600b      	strmi	r3, [r1, #0]
 80082e6:	bf5c      	itt	pl
 80082e8:	600b      	strpl	r3, [r1, #0]
 80082ea:	2002      	movpl	r0, #2
 80082ec:	4770      	bx	lr
 80082ee:	b298      	uxth	r0, r3
 80082f0:	b9a8      	cbnz	r0, 800831e <__lo0bits+0x52>
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	2010      	movs	r0, #16
 80082f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082fa:	bf04      	itt	eq
 80082fc:	0a1b      	lsreq	r3, r3, #8
 80082fe:	3008      	addeq	r0, #8
 8008300:	071a      	lsls	r2, r3, #28
 8008302:	bf04      	itt	eq
 8008304:	091b      	lsreq	r3, r3, #4
 8008306:	3004      	addeq	r0, #4
 8008308:	079a      	lsls	r2, r3, #30
 800830a:	bf04      	itt	eq
 800830c:	089b      	lsreq	r3, r3, #2
 800830e:	3002      	addeq	r0, #2
 8008310:	07da      	lsls	r2, r3, #31
 8008312:	d402      	bmi.n	800831a <__lo0bits+0x4e>
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	d006      	beq.n	8008326 <__lo0bits+0x5a>
 8008318:	3001      	adds	r0, #1
 800831a:	600b      	str	r3, [r1, #0]
 800831c:	4770      	bx	lr
 800831e:	4610      	mov	r0, r2
 8008320:	e7e9      	b.n	80082f6 <__lo0bits+0x2a>
 8008322:	2000      	movs	r0, #0
 8008324:	4770      	bx	lr
 8008326:	2020      	movs	r0, #32
 8008328:	4770      	bx	lr

0800832a <__i2b>:
 800832a:	b510      	push	{r4, lr}
 800832c:	460c      	mov	r4, r1
 800832e:	2101      	movs	r1, #1
 8008330:	f7ff fee9 	bl	8008106 <_Balloc>
 8008334:	2201      	movs	r2, #1
 8008336:	6144      	str	r4, [r0, #20]
 8008338:	6102      	str	r2, [r0, #16]
 800833a:	bd10      	pop	{r4, pc}

0800833c <__multiply>:
 800833c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	4614      	mov	r4, r2
 8008342:	690a      	ldr	r2, [r1, #16]
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	429a      	cmp	r2, r3
 8008348:	bfb8      	it	lt
 800834a:	460b      	movlt	r3, r1
 800834c:	4688      	mov	r8, r1
 800834e:	bfbc      	itt	lt
 8008350:	46a0      	movlt	r8, r4
 8008352:	461c      	movlt	r4, r3
 8008354:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008358:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800835c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008360:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008364:	eb07 0609 	add.w	r6, r7, r9
 8008368:	42b3      	cmp	r3, r6
 800836a:	bfb8      	it	lt
 800836c:	3101      	addlt	r1, #1
 800836e:	f7ff feca 	bl	8008106 <_Balloc>
 8008372:	f100 0514 	add.w	r5, r0, #20
 8008376:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800837a:	462b      	mov	r3, r5
 800837c:	2200      	movs	r2, #0
 800837e:	4573      	cmp	r3, lr
 8008380:	d316      	bcc.n	80083b0 <__multiply+0x74>
 8008382:	f104 0214 	add.w	r2, r4, #20
 8008386:	f108 0114 	add.w	r1, r8, #20
 800838a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800838e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	9b00      	ldr	r3, [sp, #0]
 8008396:	9201      	str	r2, [sp, #4]
 8008398:	4293      	cmp	r3, r2
 800839a:	d80c      	bhi.n	80083b6 <__multiply+0x7a>
 800839c:	2e00      	cmp	r6, #0
 800839e:	dd03      	ble.n	80083a8 <__multiply+0x6c>
 80083a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d05d      	beq.n	8008464 <__multiply+0x128>
 80083a8:	6106      	str	r6, [r0, #16]
 80083aa:	b003      	add	sp, #12
 80083ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b0:	f843 2b04 	str.w	r2, [r3], #4
 80083b4:	e7e3      	b.n	800837e <__multiply+0x42>
 80083b6:	f8b2 b000 	ldrh.w	fp, [r2]
 80083ba:	f1bb 0f00 	cmp.w	fp, #0
 80083be:	d023      	beq.n	8008408 <__multiply+0xcc>
 80083c0:	4689      	mov	r9, r1
 80083c2:	46ac      	mov	ip, r5
 80083c4:	f04f 0800 	mov.w	r8, #0
 80083c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80083cc:	f8dc a000 	ldr.w	sl, [ip]
 80083d0:	b2a3      	uxth	r3, r4
 80083d2:	fa1f fa8a 	uxth.w	sl, sl
 80083d6:	fb0b a303 	mla	r3, fp, r3, sl
 80083da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083de:	f8dc 4000 	ldr.w	r4, [ip]
 80083e2:	4443      	add	r3, r8
 80083e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083e8:	fb0b 840a 	mla	r4, fp, sl, r8
 80083ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80083f0:	46e2      	mov	sl, ip
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083f8:	454f      	cmp	r7, r9
 80083fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008402:	d82b      	bhi.n	800845c <__multiply+0x120>
 8008404:	f8cc 8004 	str.w	r8, [ip, #4]
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800840e:	3204      	adds	r2, #4
 8008410:	f1ba 0f00 	cmp.w	sl, #0
 8008414:	d020      	beq.n	8008458 <__multiply+0x11c>
 8008416:	682b      	ldr	r3, [r5, #0]
 8008418:	4689      	mov	r9, r1
 800841a:	46a8      	mov	r8, r5
 800841c:	f04f 0b00 	mov.w	fp, #0
 8008420:	f8b9 c000 	ldrh.w	ip, [r9]
 8008424:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008428:	fb0a 440c 	mla	r4, sl, ip, r4
 800842c:	445c      	add	r4, fp
 800842e:	46c4      	mov	ip, r8
 8008430:	b29b      	uxth	r3, r3
 8008432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008436:	f84c 3b04 	str.w	r3, [ip], #4
 800843a:	f859 3b04 	ldr.w	r3, [r9], #4
 800843e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008442:	0c1b      	lsrs	r3, r3, #16
 8008444:	fb0a b303 	mla	r3, sl, r3, fp
 8008448:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800844c:	454f      	cmp	r7, r9
 800844e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008452:	d805      	bhi.n	8008460 <__multiply+0x124>
 8008454:	f8c8 3004 	str.w	r3, [r8, #4]
 8008458:	3504      	adds	r5, #4
 800845a:	e79b      	b.n	8008394 <__multiply+0x58>
 800845c:	46d4      	mov	ip, sl
 800845e:	e7b3      	b.n	80083c8 <__multiply+0x8c>
 8008460:	46e0      	mov	r8, ip
 8008462:	e7dd      	b.n	8008420 <__multiply+0xe4>
 8008464:	3e01      	subs	r6, #1
 8008466:	e799      	b.n	800839c <__multiply+0x60>

08008468 <__pow5mult>:
 8008468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800846c:	4615      	mov	r5, r2
 800846e:	f012 0203 	ands.w	r2, r2, #3
 8008472:	4606      	mov	r6, r0
 8008474:	460f      	mov	r7, r1
 8008476:	d007      	beq.n	8008488 <__pow5mult+0x20>
 8008478:	3a01      	subs	r2, #1
 800847a:	4c21      	ldr	r4, [pc, #132]	; (8008500 <__pow5mult+0x98>)
 800847c:	2300      	movs	r3, #0
 800847e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008482:	f7ff fe8b 	bl	800819c <__multadd>
 8008486:	4607      	mov	r7, r0
 8008488:	10ad      	asrs	r5, r5, #2
 800848a:	d035      	beq.n	80084f8 <__pow5mult+0x90>
 800848c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800848e:	b93c      	cbnz	r4, 80084a0 <__pow5mult+0x38>
 8008490:	2010      	movs	r0, #16
 8008492:	f7ff fe13 	bl	80080bc <malloc>
 8008496:	6270      	str	r0, [r6, #36]	; 0x24
 8008498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800849c:	6004      	str	r4, [r0, #0]
 800849e:	60c4      	str	r4, [r0, #12]
 80084a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084a8:	b94c      	cbnz	r4, 80084be <__pow5mult+0x56>
 80084aa:	f240 2171 	movw	r1, #625	; 0x271
 80084ae:	4630      	mov	r0, r6
 80084b0:	f7ff ff3b 	bl	800832a <__i2b>
 80084b4:	2300      	movs	r3, #0
 80084b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ba:	4604      	mov	r4, r0
 80084bc:	6003      	str	r3, [r0, #0]
 80084be:	f04f 0800 	mov.w	r8, #0
 80084c2:	07eb      	lsls	r3, r5, #31
 80084c4:	d50a      	bpl.n	80084dc <__pow5mult+0x74>
 80084c6:	4639      	mov	r1, r7
 80084c8:	4622      	mov	r2, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ff36 	bl	800833c <__multiply>
 80084d0:	4639      	mov	r1, r7
 80084d2:	4681      	mov	r9, r0
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7ff fe4a 	bl	800816e <_Bfree>
 80084da:	464f      	mov	r7, r9
 80084dc:	106d      	asrs	r5, r5, #1
 80084de:	d00b      	beq.n	80084f8 <__pow5mult+0x90>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	b938      	cbnz	r0, 80084f4 <__pow5mult+0x8c>
 80084e4:	4622      	mov	r2, r4
 80084e6:	4621      	mov	r1, r4
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff ff27 	bl	800833c <__multiply>
 80084ee:	6020      	str	r0, [r4, #0]
 80084f0:	f8c0 8000 	str.w	r8, [r0]
 80084f4:	4604      	mov	r4, r0
 80084f6:	e7e4      	b.n	80084c2 <__pow5mult+0x5a>
 80084f8:	4638      	mov	r0, r7
 80084fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fe:	bf00      	nop
 8008500:	08009000 	.word	0x08009000

08008504 <__lshift>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	460c      	mov	r4, r1
 800850a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	6849      	ldr	r1, [r1, #4]
 8008512:	eb0a 0903 	add.w	r9, sl, r3
 8008516:	68a3      	ldr	r3, [r4, #8]
 8008518:	4607      	mov	r7, r0
 800851a:	4616      	mov	r6, r2
 800851c:	f109 0501 	add.w	r5, r9, #1
 8008520:	42ab      	cmp	r3, r5
 8008522:	db32      	blt.n	800858a <__lshift+0x86>
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff fdee 	bl	8008106 <_Balloc>
 800852a:	2300      	movs	r3, #0
 800852c:	4680      	mov	r8, r0
 800852e:	f100 0114 	add.w	r1, r0, #20
 8008532:	461a      	mov	r2, r3
 8008534:	4553      	cmp	r3, sl
 8008536:	db2b      	blt.n	8008590 <__lshift+0x8c>
 8008538:	6920      	ldr	r0, [r4, #16]
 800853a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800853e:	f104 0314 	add.w	r3, r4, #20
 8008542:	f016 021f 	ands.w	r2, r6, #31
 8008546:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800854a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800854e:	d025      	beq.n	800859c <__lshift+0x98>
 8008550:	f1c2 0e20 	rsb	lr, r2, #32
 8008554:	2000      	movs	r0, #0
 8008556:	681e      	ldr	r6, [r3, #0]
 8008558:	468a      	mov	sl, r1
 800855a:	4096      	lsls	r6, r2
 800855c:	4330      	orrs	r0, r6
 800855e:	f84a 0b04 	str.w	r0, [sl], #4
 8008562:	f853 0b04 	ldr.w	r0, [r3], #4
 8008566:	459c      	cmp	ip, r3
 8008568:	fa20 f00e 	lsr.w	r0, r0, lr
 800856c:	d814      	bhi.n	8008598 <__lshift+0x94>
 800856e:	6048      	str	r0, [r1, #4]
 8008570:	b108      	cbz	r0, 8008576 <__lshift+0x72>
 8008572:	f109 0502 	add.w	r5, r9, #2
 8008576:	3d01      	subs	r5, #1
 8008578:	4638      	mov	r0, r7
 800857a:	f8c8 5010 	str.w	r5, [r8, #16]
 800857e:	4621      	mov	r1, r4
 8008580:	f7ff fdf5 	bl	800816e <_Bfree>
 8008584:	4640      	mov	r0, r8
 8008586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858a:	3101      	adds	r1, #1
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	e7c7      	b.n	8008520 <__lshift+0x1c>
 8008590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008594:	3301      	adds	r3, #1
 8008596:	e7cd      	b.n	8008534 <__lshift+0x30>
 8008598:	4651      	mov	r1, sl
 800859a:	e7dc      	b.n	8008556 <__lshift+0x52>
 800859c:	3904      	subs	r1, #4
 800859e:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80085a6:	459c      	cmp	ip, r3
 80085a8:	d8f9      	bhi.n	800859e <__lshift+0x9a>
 80085aa:	e7e4      	b.n	8008576 <__lshift+0x72>

080085ac <__mcmp>:
 80085ac:	6903      	ldr	r3, [r0, #16]
 80085ae:	690a      	ldr	r2, [r1, #16]
 80085b0:	1a9b      	subs	r3, r3, r2
 80085b2:	b530      	push	{r4, r5, lr}
 80085b4:	d10c      	bne.n	80085d0 <__mcmp+0x24>
 80085b6:	0092      	lsls	r2, r2, #2
 80085b8:	3014      	adds	r0, #20
 80085ba:	3114      	adds	r1, #20
 80085bc:	1884      	adds	r4, r0, r2
 80085be:	4411      	add	r1, r2
 80085c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085c8:	4295      	cmp	r5, r2
 80085ca:	d003      	beq.n	80085d4 <__mcmp+0x28>
 80085cc:	d305      	bcc.n	80085da <__mcmp+0x2e>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd30      	pop	{r4, r5, pc}
 80085d4:	42a0      	cmp	r0, r4
 80085d6:	d3f3      	bcc.n	80085c0 <__mcmp+0x14>
 80085d8:	e7fa      	b.n	80085d0 <__mcmp+0x24>
 80085da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085de:	e7f7      	b.n	80085d0 <__mcmp+0x24>

080085e0 <__mdiff>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	460d      	mov	r5, r1
 80085e6:	4607      	mov	r7, r0
 80085e8:	4611      	mov	r1, r2
 80085ea:	4628      	mov	r0, r5
 80085ec:	4614      	mov	r4, r2
 80085ee:	f7ff ffdd 	bl	80085ac <__mcmp>
 80085f2:	1e06      	subs	r6, r0, #0
 80085f4:	d108      	bne.n	8008608 <__mdiff+0x28>
 80085f6:	4631      	mov	r1, r6
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff fd84 	bl	8008106 <_Balloc>
 80085fe:	2301      	movs	r3, #1
 8008600:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008608:	bfa4      	itt	ge
 800860a:	4623      	movge	r3, r4
 800860c:	462c      	movge	r4, r5
 800860e:	4638      	mov	r0, r7
 8008610:	6861      	ldr	r1, [r4, #4]
 8008612:	bfa6      	itte	ge
 8008614:	461d      	movge	r5, r3
 8008616:	2600      	movge	r6, #0
 8008618:	2601      	movlt	r6, #1
 800861a:	f7ff fd74 	bl	8008106 <_Balloc>
 800861e:	692b      	ldr	r3, [r5, #16]
 8008620:	60c6      	str	r6, [r0, #12]
 8008622:	6926      	ldr	r6, [r4, #16]
 8008624:	f105 0914 	add.w	r9, r5, #20
 8008628:	f104 0214 	add.w	r2, r4, #20
 800862c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008630:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008634:	f100 0514 	add.w	r5, r0, #20
 8008638:	f04f 0e00 	mov.w	lr, #0
 800863c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008640:	f859 4b04 	ldr.w	r4, [r9], #4
 8008644:	fa1e f18a 	uxtah	r1, lr, sl
 8008648:	b2a3      	uxth	r3, r4
 800864a:	1ac9      	subs	r1, r1, r3
 800864c:	0c23      	lsrs	r3, r4, #16
 800864e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008652:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008656:	b289      	uxth	r1, r1
 8008658:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800865c:	45c8      	cmp	r8, r9
 800865e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008662:	4694      	mov	ip, r2
 8008664:	f845 3b04 	str.w	r3, [r5], #4
 8008668:	d8e8      	bhi.n	800863c <__mdiff+0x5c>
 800866a:	45bc      	cmp	ip, r7
 800866c:	d304      	bcc.n	8008678 <__mdiff+0x98>
 800866e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008672:	b183      	cbz	r3, 8008696 <__mdiff+0xb6>
 8008674:	6106      	str	r6, [r0, #16]
 8008676:	e7c5      	b.n	8008604 <__mdiff+0x24>
 8008678:	f85c 1b04 	ldr.w	r1, [ip], #4
 800867c:	fa1e f381 	uxtah	r3, lr, r1
 8008680:	141a      	asrs	r2, r3, #16
 8008682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008686:	b29b      	uxth	r3, r3
 8008688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800868c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008690:	f845 3b04 	str.w	r3, [r5], #4
 8008694:	e7e9      	b.n	800866a <__mdiff+0x8a>
 8008696:	3e01      	subs	r6, #1
 8008698:	e7e9      	b.n	800866e <__mdiff+0x8e>
	...

0800869c <__ulp>:
 800869c:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <__ulp+0x4c>)
 800869e:	ee10 2a90 	vmov	r2, s1
 80086a2:	401a      	ands	r2, r3
 80086a4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dd04      	ble.n	80086b6 <__ulp+0x1a>
 80086ac:	2000      	movs	r0, #0
 80086ae:	4619      	mov	r1, r3
 80086b0:	ec41 0b10 	vmov	d0, r0, r1
 80086b4:	4770      	bx	lr
 80086b6:	425b      	negs	r3, r3
 80086b8:	151b      	asrs	r3, r3, #20
 80086ba:	2b13      	cmp	r3, #19
 80086bc:	f04f 0000 	mov.w	r0, #0
 80086c0:	f04f 0100 	mov.w	r1, #0
 80086c4:	dc04      	bgt.n	80086d0 <__ulp+0x34>
 80086c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80086ca:	fa42 f103 	asr.w	r1, r2, r3
 80086ce:	e7ef      	b.n	80086b0 <__ulp+0x14>
 80086d0:	3b14      	subs	r3, #20
 80086d2:	2b1e      	cmp	r3, #30
 80086d4:	f04f 0201 	mov.w	r2, #1
 80086d8:	bfda      	itte	le
 80086da:	f1c3 031f 	rsble	r3, r3, #31
 80086de:	fa02 f303 	lslle.w	r3, r2, r3
 80086e2:	4613      	movgt	r3, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	e7e3      	b.n	80086b0 <__ulp+0x14>
 80086e8:	7ff00000 	.word	0x7ff00000

080086ec <__b2d>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	6905      	ldr	r5, [r0, #16]
 80086f0:	f100 0714 	add.w	r7, r0, #20
 80086f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80086f8:	1f2e      	subs	r6, r5, #4
 80086fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80086fe:	4620      	mov	r0, r4
 8008700:	f7ff fdc5 	bl	800828e <__hi0bits>
 8008704:	f1c0 0320 	rsb	r3, r0, #32
 8008708:	280a      	cmp	r0, #10
 800870a:	600b      	str	r3, [r1, #0]
 800870c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008784 <__b2d+0x98>
 8008710:	dc14      	bgt.n	800873c <__b2d+0x50>
 8008712:	f1c0 0e0b 	rsb	lr, r0, #11
 8008716:	fa24 f10e 	lsr.w	r1, r4, lr
 800871a:	42b7      	cmp	r7, r6
 800871c:	ea41 030c 	orr.w	r3, r1, ip
 8008720:	bf34      	ite	cc
 8008722:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008726:	2100      	movcs	r1, #0
 8008728:	3015      	adds	r0, #21
 800872a:	fa04 f000 	lsl.w	r0, r4, r0
 800872e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008732:	ea40 0201 	orr.w	r2, r0, r1
 8008736:	ec43 2b10 	vmov	d0, r2, r3
 800873a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800873c:	42b7      	cmp	r7, r6
 800873e:	bf3a      	itte	cc
 8008740:	f1a5 0608 	subcc.w	r6, r5, #8
 8008744:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008748:	2100      	movcs	r1, #0
 800874a:	380b      	subs	r0, #11
 800874c:	d015      	beq.n	800877a <__b2d+0x8e>
 800874e:	4084      	lsls	r4, r0
 8008750:	f1c0 0520 	rsb	r5, r0, #32
 8008754:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008758:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800875c:	42be      	cmp	r6, r7
 800875e:	fa21 fc05 	lsr.w	ip, r1, r5
 8008762:	ea44 030c 	orr.w	r3, r4, ip
 8008766:	bf8c      	ite	hi
 8008768:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800876c:	2400      	movls	r4, #0
 800876e:	fa01 f000 	lsl.w	r0, r1, r0
 8008772:	40ec      	lsrs	r4, r5
 8008774:	ea40 0204 	orr.w	r2, r0, r4
 8008778:	e7dd      	b.n	8008736 <__b2d+0x4a>
 800877a:	ea44 030c 	orr.w	r3, r4, ip
 800877e:	460a      	mov	r2, r1
 8008780:	e7d9      	b.n	8008736 <__b2d+0x4a>
 8008782:	bf00      	nop
 8008784:	3ff00000 	.word	0x3ff00000

08008788 <__d2b>:
 8008788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800878c:	460e      	mov	r6, r1
 800878e:	2101      	movs	r1, #1
 8008790:	ec59 8b10 	vmov	r8, r9, d0
 8008794:	4615      	mov	r5, r2
 8008796:	f7ff fcb6 	bl	8008106 <_Balloc>
 800879a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800879e:	4607      	mov	r7, r0
 80087a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087a4:	bb34      	cbnz	r4, 80087f4 <__d2b+0x6c>
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	f1b8 0300 	subs.w	r3, r8, #0
 80087ac:	d027      	beq.n	80087fe <__d2b+0x76>
 80087ae:	a802      	add	r0, sp, #8
 80087b0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80087b4:	f7ff fd8a 	bl	80082cc <__lo0bits>
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	b1f0      	cbz	r0, 80087fa <__d2b+0x72>
 80087bc:	9a01      	ldr	r2, [sp, #4]
 80087be:	f1c0 0320 	rsb	r3, r0, #32
 80087c2:	fa02 f303 	lsl.w	r3, r2, r3
 80087c6:	430b      	orrs	r3, r1
 80087c8:	40c2      	lsrs	r2, r0
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	9201      	str	r2, [sp, #4]
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2102      	movne	r1, #2
 80087d8:	2101      	moveq	r1, #1
 80087da:	6139      	str	r1, [r7, #16]
 80087dc:	b1c4      	cbz	r4, 8008810 <__d2b+0x88>
 80087de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80087e2:	4404      	add	r4, r0
 80087e4:	6034      	str	r4, [r6, #0]
 80087e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087ea:	6028      	str	r0, [r5, #0]
 80087ec:	4638      	mov	r0, r7
 80087ee:	b003      	add	sp, #12
 80087f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087f8:	e7d5      	b.n	80087a6 <__d2b+0x1e>
 80087fa:	6179      	str	r1, [r7, #20]
 80087fc:	e7e7      	b.n	80087ce <__d2b+0x46>
 80087fe:	a801      	add	r0, sp, #4
 8008800:	f7ff fd64 	bl	80082cc <__lo0bits>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	2101      	movs	r1, #1
 800880a:	6139      	str	r1, [r7, #16]
 800880c:	3020      	adds	r0, #32
 800880e:	e7e5      	b.n	80087dc <__d2b+0x54>
 8008810:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008814:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008818:	6030      	str	r0, [r6, #0]
 800881a:	6918      	ldr	r0, [r3, #16]
 800881c:	f7ff fd37 	bl	800828e <__hi0bits>
 8008820:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008824:	e7e1      	b.n	80087ea <__d2b+0x62>

08008826 <__ratio>:
 8008826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	4688      	mov	r8, r1
 800882c:	4669      	mov	r1, sp
 800882e:	4681      	mov	r9, r0
 8008830:	f7ff ff5c 	bl	80086ec <__b2d>
 8008834:	a901      	add	r1, sp, #4
 8008836:	4640      	mov	r0, r8
 8008838:	ec57 6b10 	vmov	r6, r7, d0
 800883c:	f7ff ff56 	bl	80086ec <__b2d>
 8008840:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008844:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008848:	eba3 0c02 	sub.w	ip, r3, r2
 800884c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008856:	ec5b ab10 	vmov	sl, fp, d0
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfce      	itee	gt
 800885e:	463a      	movgt	r2, r7
 8008860:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008864:	465a      	movle	r2, fp
 8008866:	4659      	mov	r1, fp
 8008868:	463d      	mov	r5, r7
 800886a:	bfd4      	ite	le
 800886c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008870:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008874:	4630      	mov	r0, r6
 8008876:	ee10 2a10 	vmov	r2, s0
 800887a:	460b      	mov	r3, r1
 800887c:	4629      	mov	r1, r5
 800887e:	f7f7 ffe5 	bl	800084c <__aeabi_ddiv>
 8008882:	ec41 0b10 	vmov	d0, r0, r1
 8008886:	b003      	add	sp, #12
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800888c <__copybits>:
 800888c:	3901      	subs	r1, #1
 800888e:	b510      	push	{r4, lr}
 8008890:	1149      	asrs	r1, r1, #5
 8008892:	6914      	ldr	r4, [r2, #16]
 8008894:	3101      	adds	r1, #1
 8008896:	f102 0314 	add.w	r3, r2, #20
 800889a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800889e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	4602      	mov	r2, r0
 80088a6:	d303      	bcc.n	80088b0 <__copybits+0x24>
 80088a8:	2300      	movs	r3, #0
 80088aa:	428a      	cmp	r2, r1
 80088ac:	d305      	bcc.n	80088ba <__copybits+0x2e>
 80088ae:	bd10      	pop	{r4, pc}
 80088b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b4:	f840 2b04 	str.w	r2, [r0], #4
 80088b8:	e7f3      	b.n	80088a2 <__copybits+0x16>
 80088ba:	f842 3b04 	str.w	r3, [r2], #4
 80088be:	e7f4      	b.n	80088aa <__copybits+0x1e>

080088c0 <__any_on>:
 80088c0:	f100 0214 	add.w	r2, r0, #20
 80088c4:	6900      	ldr	r0, [r0, #16]
 80088c6:	114b      	asrs	r3, r1, #5
 80088c8:	4298      	cmp	r0, r3
 80088ca:	b510      	push	{r4, lr}
 80088cc:	db11      	blt.n	80088f2 <__any_on+0x32>
 80088ce:	dd0a      	ble.n	80088e6 <__any_on+0x26>
 80088d0:	f011 011f 	ands.w	r1, r1, #31
 80088d4:	d007      	beq.n	80088e6 <__any_on+0x26>
 80088d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088da:	fa24 f001 	lsr.w	r0, r4, r1
 80088de:	fa00 f101 	lsl.w	r1, r0, r1
 80088e2:	428c      	cmp	r4, r1
 80088e4:	d10b      	bne.n	80088fe <__any_on+0x3e>
 80088e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d803      	bhi.n	80088f6 <__any_on+0x36>
 80088ee:	2000      	movs	r0, #0
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	4603      	mov	r3, r0
 80088f4:	e7f7      	b.n	80088e6 <__any_on+0x26>
 80088f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088fa:	2900      	cmp	r1, #0
 80088fc:	d0f5      	beq.n	80088ea <__any_on+0x2a>
 80088fe:	2001      	movs	r0, #1
 8008900:	e7f6      	b.n	80088f0 <__any_on+0x30>

08008902 <_calloc_r>:
 8008902:	b538      	push	{r3, r4, r5, lr}
 8008904:	fb02 f401 	mul.w	r4, r2, r1
 8008908:	4621      	mov	r1, r4
 800890a:	f000 f857 	bl	80089bc <_malloc_r>
 800890e:	4605      	mov	r5, r0
 8008910:	b118      	cbz	r0, 800891a <_calloc_r+0x18>
 8008912:	4622      	mov	r2, r4
 8008914:	2100      	movs	r1, #0
 8008916:	f7fc fd37 	bl	8005388 <memset>
 800891a:	4628      	mov	r0, r5
 800891c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008920 <_free_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4605      	mov	r5, r0
 8008924:	2900      	cmp	r1, #0
 8008926:	d045      	beq.n	80089b4 <_free_r+0x94>
 8008928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800892c:	1f0c      	subs	r4, r1, #4
 800892e:	2b00      	cmp	r3, #0
 8008930:	bfb8      	it	lt
 8008932:	18e4      	addlt	r4, r4, r3
 8008934:	f000 fa36 	bl	8008da4 <__malloc_lock>
 8008938:	4a1f      	ldr	r2, [pc, #124]	; (80089b8 <_free_r+0x98>)
 800893a:	6813      	ldr	r3, [r2, #0]
 800893c:	4610      	mov	r0, r2
 800893e:	b933      	cbnz	r3, 800894e <_free_r+0x2e>
 8008940:	6063      	str	r3, [r4, #4]
 8008942:	6014      	str	r4, [r2, #0]
 8008944:	4628      	mov	r0, r5
 8008946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894a:	f000 ba2c 	b.w	8008da6 <__malloc_unlock>
 800894e:	42a3      	cmp	r3, r4
 8008950:	d90c      	bls.n	800896c <_free_r+0x4c>
 8008952:	6821      	ldr	r1, [r4, #0]
 8008954:	1862      	adds	r2, r4, r1
 8008956:	4293      	cmp	r3, r2
 8008958:	bf04      	itt	eq
 800895a:	681a      	ldreq	r2, [r3, #0]
 800895c:	685b      	ldreq	r3, [r3, #4]
 800895e:	6063      	str	r3, [r4, #4]
 8008960:	bf04      	itt	eq
 8008962:	1852      	addeq	r2, r2, r1
 8008964:	6022      	streq	r2, [r4, #0]
 8008966:	6004      	str	r4, [r0, #0]
 8008968:	e7ec      	b.n	8008944 <_free_r+0x24>
 800896a:	4613      	mov	r3, r2
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	b10a      	cbz	r2, 8008974 <_free_r+0x54>
 8008970:	42a2      	cmp	r2, r4
 8008972:	d9fa      	bls.n	800896a <_free_r+0x4a>
 8008974:	6819      	ldr	r1, [r3, #0]
 8008976:	1858      	adds	r0, r3, r1
 8008978:	42a0      	cmp	r0, r4
 800897a:	d10b      	bne.n	8008994 <_free_r+0x74>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	4401      	add	r1, r0
 8008980:	1858      	adds	r0, r3, r1
 8008982:	4282      	cmp	r2, r0
 8008984:	6019      	str	r1, [r3, #0]
 8008986:	d1dd      	bne.n	8008944 <_free_r+0x24>
 8008988:	6810      	ldr	r0, [r2, #0]
 800898a:	6852      	ldr	r2, [r2, #4]
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	4401      	add	r1, r0
 8008990:	6019      	str	r1, [r3, #0]
 8008992:	e7d7      	b.n	8008944 <_free_r+0x24>
 8008994:	d902      	bls.n	800899c <_free_r+0x7c>
 8008996:	230c      	movs	r3, #12
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	e7d3      	b.n	8008944 <_free_r+0x24>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	1821      	adds	r1, r4, r0
 80089a0:	428a      	cmp	r2, r1
 80089a2:	bf04      	itt	eq
 80089a4:	6811      	ldreq	r1, [r2, #0]
 80089a6:	6852      	ldreq	r2, [r2, #4]
 80089a8:	6062      	str	r2, [r4, #4]
 80089aa:	bf04      	itt	eq
 80089ac:	1809      	addeq	r1, r1, r0
 80089ae:	6021      	streq	r1, [r4, #0]
 80089b0:	605c      	str	r4, [r3, #4]
 80089b2:	e7c7      	b.n	8008944 <_free_r+0x24>
 80089b4:	bd38      	pop	{r3, r4, r5, pc}
 80089b6:	bf00      	nop
 80089b8:	20000214 	.word	0x20000214

080089bc <_malloc_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	1ccd      	adds	r5, r1, #3
 80089c0:	f025 0503 	bic.w	r5, r5, #3
 80089c4:	3508      	adds	r5, #8
 80089c6:	2d0c      	cmp	r5, #12
 80089c8:	bf38      	it	cc
 80089ca:	250c      	movcc	r5, #12
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	4606      	mov	r6, r0
 80089d0:	db01      	blt.n	80089d6 <_malloc_r+0x1a>
 80089d2:	42a9      	cmp	r1, r5
 80089d4:	d903      	bls.n	80089de <_malloc_r+0x22>
 80089d6:	230c      	movs	r3, #12
 80089d8:	6033      	str	r3, [r6, #0]
 80089da:	2000      	movs	r0, #0
 80089dc:	bd70      	pop	{r4, r5, r6, pc}
 80089de:	f000 f9e1 	bl	8008da4 <__malloc_lock>
 80089e2:	4a21      	ldr	r2, [pc, #132]	; (8008a68 <_malloc_r+0xac>)
 80089e4:	6814      	ldr	r4, [r2, #0]
 80089e6:	4621      	mov	r1, r4
 80089e8:	b991      	cbnz	r1, 8008a10 <_malloc_r+0x54>
 80089ea:	4c20      	ldr	r4, [pc, #128]	; (8008a6c <_malloc_r+0xb0>)
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	b91b      	cbnz	r3, 80089f8 <_malloc_r+0x3c>
 80089f0:	4630      	mov	r0, r6
 80089f2:	f000 f98f 	bl	8008d14 <_sbrk_r>
 80089f6:	6020      	str	r0, [r4, #0]
 80089f8:	4629      	mov	r1, r5
 80089fa:	4630      	mov	r0, r6
 80089fc:	f000 f98a 	bl	8008d14 <_sbrk_r>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d124      	bne.n	8008a4e <_malloc_r+0x92>
 8008a04:	230c      	movs	r3, #12
 8008a06:	6033      	str	r3, [r6, #0]
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 f9cc 	bl	8008da6 <__malloc_unlock>
 8008a0e:	e7e4      	b.n	80089da <_malloc_r+0x1e>
 8008a10:	680b      	ldr	r3, [r1, #0]
 8008a12:	1b5b      	subs	r3, r3, r5
 8008a14:	d418      	bmi.n	8008a48 <_malloc_r+0x8c>
 8008a16:	2b0b      	cmp	r3, #11
 8008a18:	d90f      	bls.n	8008a3a <_malloc_r+0x7e>
 8008a1a:	600b      	str	r3, [r1, #0]
 8008a1c:	50cd      	str	r5, [r1, r3]
 8008a1e:	18cc      	adds	r4, r1, r3
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 f9c0 	bl	8008da6 <__malloc_unlock>
 8008a26:	f104 000b 	add.w	r0, r4, #11
 8008a2a:	1d23      	adds	r3, r4, #4
 8008a2c:	f020 0007 	bic.w	r0, r0, #7
 8008a30:	1ac3      	subs	r3, r0, r3
 8008a32:	d0d3      	beq.n	80089dc <_malloc_r+0x20>
 8008a34:	425a      	negs	r2, r3
 8008a36:	50e2      	str	r2, [r4, r3]
 8008a38:	e7d0      	b.n	80089dc <_malloc_r+0x20>
 8008a3a:	428c      	cmp	r4, r1
 8008a3c:	684b      	ldr	r3, [r1, #4]
 8008a3e:	bf16      	itet	ne
 8008a40:	6063      	strne	r3, [r4, #4]
 8008a42:	6013      	streq	r3, [r2, #0]
 8008a44:	460c      	movne	r4, r1
 8008a46:	e7eb      	b.n	8008a20 <_malloc_r+0x64>
 8008a48:	460c      	mov	r4, r1
 8008a4a:	6849      	ldr	r1, [r1, #4]
 8008a4c:	e7cc      	b.n	80089e8 <_malloc_r+0x2c>
 8008a4e:	1cc4      	adds	r4, r0, #3
 8008a50:	f024 0403 	bic.w	r4, r4, #3
 8008a54:	42a0      	cmp	r0, r4
 8008a56:	d005      	beq.n	8008a64 <_malloc_r+0xa8>
 8008a58:	1a21      	subs	r1, r4, r0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f000 f95a 	bl	8008d14 <_sbrk_r>
 8008a60:	3001      	adds	r0, #1
 8008a62:	d0cf      	beq.n	8008a04 <_malloc_r+0x48>
 8008a64:	6025      	str	r5, [r4, #0]
 8008a66:	e7db      	b.n	8008a20 <_malloc_r+0x64>
 8008a68:	20000214 	.word	0x20000214
 8008a6c:	20000218 	.word	0x20000218

08008a70 <__ssputs_r>:
 8008a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	688e      	ldr	r6, [r1, #8]
 8008a76:	429e      	cmp	r6, r3
 8008a78:	4682      	mov	sl, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4690      	mov	r8, r2
 8008a7e:	4699      	mov	r9, r3
 8008a80:	d837      	bhi.n	8008af2 <__ssputs_r+0x82>
 8008a82:	898a      	ldrh	r2, [r1, #12]
 8008a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a88:	d031      	beq.n	8008aee <__ssputs_r+0x7e>
 8008a8a:	6825      	ldr	r5, [r4, #0]
 8008a8c:	6909      	ldr	r1, [r1, #16]
 8008a8e:	1a6f      	subs	r7, r5, r1
 8008a90:	6965      	ldr	r5, [r4, #20]
 8008a92:	2302      	movs	r3, #2
 8008a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a98:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a9c:	f109 0301 	add.w	r3, r9, #1
 8008aa0:	443b      	add	r3, r7
 8008aa2:	429d      	cmp	r5, r3
 8008aa4:	bf38      	it	cc
 8008aa6:	461d      	movcc	r5, r3
 8008aa8:	0553      	lsls	r3, r2, #21
 8008aaa:	d530      	bpl.n	8008b0e <__ssputs_r+0x9e>
 8008aac:	4629      	mov	r1, r5
 8008aae:	f7ff ff85 	bl	80089bc <_malloc_r>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	b950      	cbnz	r0, 8008acc <__ssputs_r+0x5c>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	f8ca 3000 	str.w	r3, [sl]
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008acc:	463a      	mov	r2, r7
 8008ace:	6921      	ldr	r1, [r4, #16]
 8008ad0:	f7ff fb0e 	bl	80080f0 <memcpy>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	6126      	str	r6, [r4, #16]
 8008ae2:	6165      	str	r5, [r4, #20]
 8008ae4:	443e      	add	r6, r7
 8008ae6:	1bed      	subs	r5, r5, r7
 8008ae8:	6026      	str	r6, [r4, #0]
 8008aea:	60a5      	str	r5, [r4, #8]
 8008aec:	464e      	mov	r6, r9
 8008aee:	454e      	cmp	r6, r9
 8008af0:	d900      	bls.n	8008af4 <__ssputs_r+0x84>
 8008af2:	464e      	mov	r6, r9
 8008af4:	4632      	mov	r2, r6
 8008af6:	4641      	mov	r1, r8
 8008af8:	6820      	ldr	r0, [r4, #0]
 8008afa:	f000 f93a 	bl	8008d72 <memmove>
 8008afe:	68a3      	ldr	r3, [r4, #8]
 8008b00:	1b9b      	subs	r3, r3, r6
 8008b02:	60a3      	str	r3, [r4, #8]
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	441e      	add	r6, r3
 8008b08:	6026      	str	r6, [r4, #0]
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e7dc      	b.n	8008ac8 <__ssputs_r+0x58>
 8008b0e:	462a      	mov	r2, r5
 8008b10:	f000 f94a 	bl	8008da8 <_realloc_r>
 8008b14:	4606      	mov	r6, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d1e2      	bne.n	8008ae0 <__ssputs_r+0x70>
 8008b1a:	6921      	ldr	r1, [r4, #16]
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	f7ff feff 	bl	8008920 <_free_r>
 8008b22:	e7c8      	b.n	8008ab6 <__ssputs_r+0x46>

08008b24 <_svfiprintf_r>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	461d      	mov	r5, r3
 8008b2a:	898b      	ldrh	r3, [r1, #12]
 8008b2c:	061f      	lsls	r7, r3, #24
 8008b2e:	b09d      	sub	sp, #116	; 0x74
 8008b30:	4680      	mov	r8, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	4616      	mov	r6, r2
 8008b36:	d50f      	bpl.n	8008b58 <_svfiprintf_r+0x34>
 8008b38:	690b      	ldr	r3, [r1, #16]
 8008b3a:	b96b      	cbnz	r3, 8008b58 <_svfiprintf_r+0x34>
 8008b3c:	2140      	movs	r1, #64	; 0x40
 8008b3e:	f7ff ff3d 	bl	80089bc <_malloc_r>
 8008b42:	6020      	str	r0, [r4, #0]
 8008b44:	6120      	str	r0, [r4, #16]
 8008b46:	b928      	cbnz	r0, 8008b54 <_svfiprintf_r+0x30>
 8008b48:	230c      	movs	r3, #12
 8008b4a:	f8c8 3000 	str.w	r3, [r8]
 8008b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b52:	e0c8      	b.n	8008ce6 <_svfiprintf_r+0x1c2>
 8008b54:	2340      	movs	r3, #64	; 0x40
 8008b56:	6163      	str	r3, [r4, #20]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b62:	2330      	movs	r3, #48	; 0x30
 8008b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b68:	9503      	str	r5, [sp, #12]
 8008b6a:	f04f 0b01 	mov.w	fp, #1
 8008b6e:	4637      	mov	r7, r6
 8008b70:	463d      	mov	r5, r7
 8008b72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b76:	b10b      	cbz	r3, 8008b7c <_svfiprintf_r+0x58>
 8008b78:	2b25      	cmp	r3, #37	; 0x25
 8008b7a:	d13e      	bne.n	8008bfa <_svfiprintf_r+0xd6>
 8008b7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b80:	d00b      	beq.n	8008b9a <_svfiprintf_r+0x76>
 8008b82:	4653      	mov	r3, sl
 8008b84:	4632      	mov	r2, r6
 8008b86:	4621      	mov	r1, r4
 8008b88:	4640      	mov	r0, r8
 8008b8a:	f7ff ff71 	bl	8008a70 <__ssputs_r>
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f000 80a4 	beq.w	8008cdc <_svfiprintf_r+0x1b8>
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	4453      	add	r3, sl
 8008b98:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9a:	783b      	ldrb	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 809d 	beq.w	8008cdc <_svfiprintf_r+0x1b8>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bac:	9304      	str	r3, [sp, #16]
 8008bae:	9307      	str	r3, [sp, #28]
 8008bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8008bb6:	462f      	mov	r7, r5
 8008bb8:	2205      	movs	r2, #5
 8008bba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008bbe:	4850      	ldr	r0, [pc, #320]	; (8008d00 <_svfiprintf_r+0x1dc>)
 8008bc0:	f7f7 fb0e 	bl	80001e0 <memchr>
 8008bc4:	9b04      	ldr	r3, [sp, #16]
 8008bc6:	b9d0      	cbnz	r0, 8008bfe <_svfiprintf_r+0xda>
 8008bc8:	06d9      	lsls	r1, r3, #27
 8008bca:	bf44      	itt	mi
 8008bcc:	2220      	movmi	r2, #32
 8008bce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bd2:	071a      	lsls	r2, r3, #28
 8008bd4:	bf44      	itt	mi
 8008bd6:	222b      	movmi	r2, #43	; 0x2b
 8008bd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bdc:	782a      	ldrb	r2, [r5, #0]
 8008bde:	2a2a      	cmp	r2, #42	; 0x2a
 8008be0:	d015      	beq.n	8008c0e <_svfiprintf_r+0xea>
 8008be2:	9a07      	ldr	r2, [sp, #28]
 8008be4:	462f      	mov	r7, r5
 8008be6:	2000      	movs	r0, #0
 8008be8:	250a      	movs	r5, #10
 8008bea:	4639      	mov	r1, r7
 8008bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bf0:	3b30      	subs	r3, #48	; 0x30
 8008bf2:	2b09      	cmp	r3, #9
 8008bf4:	d94d      	bls.n	8008c92 <_svfiprintf_r+0x16e>
 8008bf6:	b1b8      	cbz	r0, 8008c28 <_svfiprintf_r+0x104>
 8008bf8:	e00f      	b.n	8008c1a <_svfiprintf_r+0xf6>
 8008bfa:	462f      	mov	r7, r5
 8008bfc:	e7b8      	b.n	8008b70 <_svfiprintf_r+0x4c>
 8008bfe:	4a40      	ldr	r2, [pc, #256]	; (8008d00 <_svfiprintf_r+0x1dc>)
 8008c00:	1a80      	subs	r0, r0, r2
 8008c02:	fa0b f000 	lsl.w	r0, fp, r0
 8008c06:	4318      	orrs	r0, r3
 8008c08:	9004      	str	r0, [sp, #16]
 8008c0a:	463d      	mov	r5, r7
 8008c0c:	e7d3      	b.n	8008bb6 <_svfiprintf_r+0x92>
 8008c0e:	9a03      	ldr	r2, [sp, #12]
 8008c10:	1d11      	adds	r1, r2, #4
 8008c12:	6812      	ldr	r2, [r2, #0]
 8008c14:	9103      	str	r1, [sp, #12]
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	db01      	blt.n	8008c1e <_svfiprintf_r+0xfa>
 8008c1a:	9207      	str	r2, [sp, #28]
 8008c1c:	e004      	b.n	8008c28 <_svfiprintf_r+0x104>
 8008c1e:	4252      	negs	r2, r2
 8008c20:	f043 0302 	orr.w	r3, r3, #2
 8008c24:	9207      	str	r2, [sp, #28]
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	783b      	ldrb	r3, [r7, #0]
 8008c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c2c:	d10c      	bne.n	8008c48 <_svfiprintf_r+0x124>
 8008c2e:	787b      	ldrb	r3, [r7, #1]
 8008c30:	2b2a      	cmp	r3, #42	; 0x2a
 8008c32:	d133      	bne.n	8008c9c <_svfiprintf_r+0x178>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	9203      	str	r2, [sp, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfb8      	it	lt
 8008c40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c44:	3702      	adds	r7, #2
 8008c46:	9305      	str	r3, [sp, #20]
 8008c48:	4d2e      	ldr	r5, [pc, #184]	; (8008d04 <_svfiprintf_r+0x1e0>)
 8008c4a:	7839      	ldrb	r1, [r7, #0]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f7f7 fac6 	bl	80001e0 <memchr>
 8008c54:	b138      	cbz	r0, 8008c66 <_svfiprintf_r+0x142>
 8008c56:	2340      	movs	r3, #64	; 0x40
 8008c58:	1b40      	subs	r0, r0, r5
 8008c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	4303      	orrs	r3, r0
 8008c62:	3701      	adds	r7, #1
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	7839      	ldrb	r1, [r7, #0]
 8008c68:	4827      	ldr	r0, [pc, #156]	; (8008d08 <_svfiprintf_r+0x1e4>)
 8008c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c6e:	2206      	movs	r2, #6
 8008c70:	1c7e      	adds	r6, r7, #1
 8008c72:	f7f7 fab5 	bl	80001e0 <memchr>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d038      	beq.n	8008cec <_svfiprintf_r+0x1c8>
 8008c7a:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <_svfiprintf_r+0x1e8>)
 8008c7c:	bb13      	cbnz	r3, 8008cc4 <_svfiprintf_r+0x1a0>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	3307      	adds	r3, #7
 8008c82:	f023 0307 	bic.w	r3, r3, #7
 8008c86:	3308      	adds	r3, #8
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8c:	444b      	add	r3, r9
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	e76d      	b.n	8008b6e <_svfiprintf_r+0x4a>
 8008c92:	fb05 3202 	mla	r2, r5, r2, r3
 8008c96:	2001      	movs	r0, #1
 8008c98:	460f      	mov	r7, r1
 8008c9a:	e7a6      	b.n	8008bea <_svfiprintf_r+0xc6>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	3701      	adds	r7, #1
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	250a      	movs	r5, #10
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cac:	3a30      	subs	r2, #48	; 0x30
 8008cae:	2a09      	cmp	r2, #9
 8008cb0:	d903      	bls.n	8008cba <_svfiprintf_r+0x196>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0c8      	beq.n	8008c48 <_svfiprintf_r+0x124>
 8008cb6:	9105      	str	r1, [sp, #20]
 8008cb8:	e7c6      	b.n	8008c48 <_svfiprintf_r+0x124>
 8008cba:	fb05 2101 	mla	r1, r5, r1, r2
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	e7f0      	b.n	8008ca6 <_svfiprintf_r+0x182>
 8008cc4:	ab03      	add	r3, sp, #12
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4b11      	ldr	r3, [pc, #68]	; (8008d10 <_svfiprintf_r+0x1ec>)
 8008ccc:	a904      	add	r1, sp, #16
 8008cce:	4640      	mov	r0, r8
 8008cd0:	f7fc fbf6 	bl	80054c0 <_printf_float>
 8008cd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008cd8:	4681      	mov	r9, r0
 8008cda:	d1d6      	bne.n	8008c8a <_svfiprintf_r+0x166>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	065b      	lsls	r3, r3, #25
 8008ce0:	f53f af35 	bmi.w	8008b4e <_svfiprintf_r+0x2a>
 8008ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce6:	b01d      	add	sp, #116	; 0x74
 8008ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <_svfiprintf_r+0x1ec>)
 8008cf4:	a904      	add	r1, sp, #16
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	f7fc fe98 	bl	8005a2c <_printf_i>
 8008cfc:	e7ea      	b.n	8008cd4 <_svfiprintf_r+0x1b0>
 8008cfe:	bf00      	nop
 8008d00:	0800900c 	.word	0x0800900c
 8008d04:	08009012 	.word	0x08009012
 8008d08:	08009016 	.word	0x08009016
 8008d0c:	080054c1 	.word	0x080054c1
 8008d10:	08008a71 	.word	0x08008a71

08008d14 <_sbrk_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4c06      	ldr	r4, [pc, #24]	; (8008d30 <_sbrk_r+0x1c>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	f7f9 fb96 	bl	8002450 <_sbrk>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_sbrk_r+0x1a>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_sbrk_r+0x1a>
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	20000334 	.word	0x20000334

08008d34 <strncmp>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	b16a      	cbz	r2, 8008d54 <strncmp+0x20>
 8008d38:	3901      	subs	r1, #1
 8008d3a:	1884      	adds	r4, r0, r2
 8008d3c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d103      	bne.n	8008d50 <strncmp+0x1c>
 8008d48:	42a0      	cmp	r0, r4
 8008d4a:	d001      	beq.n	8008d50 <strncmp+0x1c>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1f5      	bne.n	8008d3c <strncmp+0x8>
 8008d50:	1a98      	subs	r0, r3, r2
 8008d52:	bd10      	pop	{r4, pc}
 8008d54:	4610      	mov	r0, r2
 8008d56:	e7fc      	b.n	8008d52 <strncmp+0x1e>

08008d58 <__ascii_wctomb>:
 8008d58:	b149      	cbz	r1, 8008d6e <__ascii_wctomb+0x16>
 8008d5a:	2aff      	cmp	r2, #255	; 0xff
 8008d5c:	bf85      	ittet	hi
 8008d5e:	238a      	movhi	r3, #138	; 0x8a
 8008d60:	6003      	strhi	r3, [r0, #0]
 8008d62:	700a      	strbls	r2, [r1, #0]
 8008d64:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008d68:	bf98      	it	ls
 8008d6a:	2001      	movls	r0, #1
 8008d6c:	4770      	bx	lr
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4770      	bx	lr

08008d72 <memmove>:
 8008d72:	4288      	cmp	r0, r1
 8008d74:	b510      	push	{r4, lr}
 8008d76:	eb01 0302 	add.w	r3, r1, r2
 8008d7a:	d807      	bhi.n	8008d8c <memmove+0x1a>
 8008d7c:	1e42      	subs	r2, r0, #1
 8008d7e:	4299      	cmp	r1, r3
 8008d80:	d00a      	beq.n	8008d98 <memmove+0x26>
 8008d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d8a:	e7f8      	b.n	8008d7e <memmove+0xc>
 8008d8c:	4283      	cmp	r3, r0
 8008d8e:	d9f5      	bls.n	8008d7c <memmove+0xa>
 8008d90:	1881      	adds	r1, r0, r2
 8008d92:	1ad2      	subs	r2, r2, r3
 8008d94:	42d3      	cmn	r3, r2
 8008d96:	d100      	bne.n	8008d9a <memmove+0x28>
 8008d98:	bd10      	pop	{r4, pc}
 8008d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008da2:	e7f7      	b.n	8008d94 <memmove+0x22>

08008da4 <__malloc_lock>:
 8008da4:	4770      	bx	lr

08008da6 <__malloc_unlock>:
 8008da6:	4770      	bx	lr

08008da8 <_realloc_r>:
 8008da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008daa:	4607      	mov	r7, r0
 8008dac:	4614      	mov	r4, r2
 8008dae:	460e      	mov	r6, r1
 8008db0:	b921      	cbnz	r1, 8008dbc <_realloc_r+0x14>
 8008db2:	4611      	mov	r1, r2
 8008db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008db8:	f7ff be00 	b.w	80089bc <_malloc_r>
 8008dbc:	b922      	cbnz	r2, 8008dc8 <_realloc_r+0x20>
 8008dbe:	f7ff fdaf 	bl	8008920 <_free_r>
 8008dc2:	4625      	mov	r5, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc8:	f000 f814 	bl	8008df4 <_malloc_usable_size_r>
 8008dcc:	42a0      	cmp	r0, r4
 8008dce:	d20f      	bcs.n	8008df0 <_realloc_r+0x48>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	f7ff fdf2 	bl	80089bc <_malloc_r>
 8008dd8:	4605      	mov	r5, r0
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d0f2      	beq.n	8008dc4 <_realloc_r+0x1c>
 8008dde:	4631      	mov	r1, r6
 8008de0:	4622      	mov	r2, r4
 8008de2:	f7ff f985 	bl	80080f0 <memcpy>
 8008de6:	4631      	mov	r1, r6
 8008de8:	4638      	mov	r0, r7
 8008dea:	f7ff fd99 	bl	8008920 <_free_r>
 8008dee:	e7e9      	b.n	8008dc4 <_realloc_r+0x1c>
 8008df0:	4635      	mov	r5, r6
 8008df2:	e7e7      	b.n	8008dc4 <_realloc_r+0x1c>

08008df4 <_malloc_usable_size_r>:
 8008df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df8:	1f18      	subs	r0, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bfbc      	itt	lt
 8008dfe:	580b      	ldrlt	r3, [r1, r0]
 8008e00:	18c0      	addlt	r0, r0, r3
 8008e02:	4770      	bx	lr

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
