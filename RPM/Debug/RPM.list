
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b70  08003b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b78  08003b78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08003b8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003b8c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f333  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e3f  00000000  00000000  0002f36f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e70  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  00032020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b36d  00000000  00000000  00032d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000affa  00000000  00000000  0004e105  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9fd3  00000000  00000000  000590ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001030d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c18  00000000  00000000  00103150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b0c 	.word	0x08003b0c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003b0c 	.word	0x08003b0c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <app_SeleccionDisplay>:
}

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d86f      	bhi.n	80005bc <app_SeleccionDisplay+0xf0>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <app_SeleccionDisplay+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	080004f5 	.word	0x080004f5
 80004e8:	08000527 	.word	0x08000527
 80004ec:	08000559 	.word	0x08000559
 80004f0:	0800058b 	.word	0x0800058b
	{
		case 0:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fe:	f001 f9a7 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 f9a0 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	4837      	ldr	r0, [pc, #220]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000516:	f001 f99b 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4835      	ldr	r0, [pc, #212]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000520:	f001 f996 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000524:	e062      	b.n	80005ec <app_SeleccionDisplay+0x120>
		case 1:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f001 f98e 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f001 f987 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	482b      	ldr	r0, [pc, #172]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000548:	f001 f982 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	4828      	ldr	r0, [pc, #160]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000552:	f001 f97d 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000556:	e049      	b.n	80005ec <app_SeleccionDisplay+0x120>
		case 2:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f001 f975 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 f96e 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2120      	movs	r1, #32
 8000578:	481e      	ldr	r0, [pc, #120]	; (80005f4 <app_SeleccionDisplay+0x128>)
 800057a:	f001 f969 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2110      	movs	r1, #16
 8000582:	481c      	ldr	r0, [pc, #112]	; (80005f4 <app_SeleccionDisplay+0x128>)
 8000584:	f001 f964 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000588:	e030      	b.n	80005ec <app_SeleccionDisplay+0x120>
		case 3:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f001 f95c 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 f955 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	4812      	ldr	r0, [pc, #72]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005ac:	f001 f950 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2110      	movs	r1, #16
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005b6:	f001 f94b 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 80005ba:	e017      	b.n	80005ec <app_SeleccionDisplay+0x120>
		default:
		{
			/* Envia todos los displays a 1 logicos */
			HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f001 f943 	bl	8001850 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f001 f93c 	bl	8001850 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2120      	movs	r1, #32
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005de:	f001 f937 	bl	8001850 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2110      	movs	r1, #16
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <app_SeleccionDisplay+0x128>)
 80005e8:	f001 f932 	bl	8001850 <HAL_GPIO_WritePin>
		}
	}
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	48000400 	.word	0x48000400

080005f8 <app_LetrasADisplay>:

}

/* Impresion de letras en display de 7 segmentos */
void app_LetrasADisplay(char Letras)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	//volatile uint8_t i=0;
	switch(Letras)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3b61      	subs	r3, #97	; 0x61
 8000606:	2b18      	cmp	r3, #24
 8000608:	f200 82f7 	bhi.w	8000bfa <app_LetrasADisplay+0x602>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <app_LetrasADisplay+0x1c>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000679 	.word	0x08000679
 8000618:	080006c7 	.word	0x080006c7
 800061c:	08000715 	.word	0x08000715
 8000620:	08000763 	.word	0x08000763
 8000624:	080007b1 	.word	0x080007b1
 8000628:	080007ff 	.word	0x080007ff
 800062c:	0800084d 	.word	0x0800084d
 8000630:	0800089b 	.word	0x0800089b
 8000634:	080008e9 	.word	0x080008e9
 8000638:	08000937 	.word	0x08000937
 800063c:	08000bfb 	.word	0x08000bfb
 8000640:	08000985 	.word	0x08000985
 8000644:	08000bfb 	.word	0x08000bfb
 8000648:	080009d9 	.word	0x080009d9
 800064c:	08000a27 	.word	0x08000a27
 8000650:	08000bfb 	.word	0x08000bfb
 8000654:	08000bfb 	.word	0x08000bfb
 8000658:	08000a75 	.word	0x08000a75
 800065c:	08000ac3 	.word	0x08000ac3
 8000660:	08000bfb 	.word	0x08000bfb
 8000664:	08000b5f 	.word	0x08000b5f
 8000668:	08000b11 	.word	0x08000b11
 800066c:	08000bfb 	.word	0x08000bfb
 8000670:	08000bfb 	.word	0x08000bfb
 8000674:	08000bad 	.word	0x08000bad
		{
			case 'A' | 'a':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f001 f8e5 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2102      	movs	r1, #2
 800068a:	48d2      	ldr	r0, [pc, #840]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800068c:	f001 f8e0 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2104      	movs	r1, #4
 8000694:	48cf      	ldr	r0, [pc, #828]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000696:	f001 f8db 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2101      	movs	r1, #1
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f001 f8d5 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2110      	movs	r1, #16
 80006aa:	48ca      	ldr	r0, [pc, #808]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006ac:	f001 f8d0 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	48c7      	ldr	r0, [pc, #796]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006b6:	f001 f8cb 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	48c5      	ldr	r0, [pc, #788]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006c0:	f001 f8c6 	bl	8001850 <HAL_GPIO_WritePin>

			}break;
 80006c4:	e299      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'B' | 'b':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f001 f8be 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	48be      	ldr	r0, [pc, #760]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006da:	f001 f8b9 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2104      	movs	r1, #4
 80006e2:	48bc      	ldr	r0, [pc, #752]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006e4:	f001 f8b4 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2101      	movs	r1, #1
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f001 f8ae 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	48b6      	ldr	r0, [pc, #728]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80006fa:	f001 f8a9 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	48b4      	ldr	r0, [pc, #720]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000704:	f001 f8a4 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	48b1      	ldr	r0, [pc, #708]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800070e:	f001 f89f 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000712:	e272      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'C' | 'c':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 f897 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2102      	movs	r1, #2
 8000726:	48ab      	ldr	r0, [pc, #684]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000728:	f001 f892 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	48a8      	ldr	r0, [pc, #672]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000732:	f001 f88d 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	2101      	movs	r1, #1
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f001 f887 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	2110      	movs	r1, #16
 8000746:	48a3      	ldr	r0, [pc, #652]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000748:	f001 f882 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	48a0      	ldr	r0, [pc, #640]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000752:	f001 f87d 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	489e      	ldr	r0, [pc, #632]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800075c:	f001 f878 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000760:	e24b      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'D' | 'd':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f001 f870 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	4897      	ldr	r0, [pc, #604]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000776:	f001 f86b 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	2104      	movs	r1, #4
 800077e:	4895      	ldr	r0, [pc, #596]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000780:	f001 f866 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	2101      	movs	r1, #1
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f001 f860 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	488f      	ldr	r0, [pc, #572]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000796:	f001 f85b 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	488d      	ldr	r0, [pc, #564]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007a0:	f001 f856 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	488a      	ldr	r0, [pc, #552]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007aa:	f001 f851 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 80007ae:	e224      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'E' | 'e':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 f849 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	4884      	ldr	r0, [pc, #528]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007c4:	f001 f844 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2104      	movs	r1, #4
 80007cc:	4881      	ldr	r0, [pc, #516]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007ce:	f001 f83f 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2101      	movs	r1, #1
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 f839 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	487c      	ldr	r0, [pc, #496]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007e4:	f001 f834 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	4879      	ldr	r0, [pc, #484]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007ee:	f001 f82f 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	4877      	ldr	r0, [pc, #476]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80007f8:	f001 f82a 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 80007fc:	e1fd      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'F' | 'f':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f001 f822 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2102      	movs	r1, #2
 8000810:	4870      	ldr	r0, [pc, #448]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000812:	f001 f81d 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2104      	movs	r1, #4
 800081a:	486e      	ldr	r0, [pc, #440]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800081c:	f001 f818 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f001 f812 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2110      	movs	r1, #16
 8000830:	4868      	ldr	r0, [pc, #416]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000832:	f001 f80d 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4866      	ldr	r0, [pc, #408]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800083c:	f001 f808 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4863      	ldr	r0, [pc, #396]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000846:	f001 f803 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 800084a:	e1d6      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'G' | 'g':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f000 fffb 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	2102      	movs	r1, #2
 800085e:	485d      	ldr	r0, [pc, #372]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000860:	f000 fff6 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	2104      	movs	r1, #4
 8000868:	485a      	ldr	r0, [pc, #360]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800086a:	f000 fff1 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f000 ffeb 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2110      	movs	r1, #16
 800087e:	4855      	ldr	r0, [pc, #340]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000880:	f000 ffe6 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4852      	ldr	r0, [pc, #328]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800088a:	f000 ffe1 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800088e:	2201      	movs	r2, #1
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	4850      	ldr	r0, [pc, #320]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000894:	f000 ffdc 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000898:	e1af      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'H' | 'h':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 ffd4 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2102      	movs	r1, #2
 80008ac:	4849      	ldr	r0, [pc, #292]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008ae:	f000 ffcf 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2104      	movs	r1, #4
 80008b6:	4847      	ldr	r0, [pc, #284]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008b8:	f000 ffca 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f000 ffc4 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	4841      	ldr	r0, [pc, #260]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008ce:	f000 ffbf 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	483f      	ldr	r0, [pc, #252]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008d8:	f000 ffba 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80008dc:	2201      	movs	r2, #1
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008e2:	f000 ffb5 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 80008e6:	e188      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'I' | 'i':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 ffad 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	4836      	ldr	r0, [pc, #216]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80008fc:	f000 ffa8 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2104      	movs	r1, #4
 8000904:	4833      	ldr	r0, [pc, #204]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000906:	f000 ffa3 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2101      	movs	r1, #1
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 ff9d 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	2110      	movs	r1, #16
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800091c:	f000 ff98 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	482b      	ldr	r0, [pc, #172]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000926:	f000 ff93 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	4829      	ldr	r0, [pc, #164]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000930:	f000 ff8e 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000934:	e161      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'J' | 'j':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f000 ff86 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	2102      	movs	r1, #2
 8000948:	4822      	ldr	r0, [pc, #136]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800094a:	f000 ff81 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	4820      	ldr	r0, [pc, #128]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000954:	f000 ff7c 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 ff76 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2110      	movs	r1, #16
 8000968:	481a      	ldr	r0, [pc, #104]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800096a:	f000 ff71 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2140      	movs	r1, #64	; 0x40
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000974:	f000 ff6c 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 800097e:	f000 ff67 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000982:	e13a      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'L' | 'l':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f000 ff5f 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2102      	movs	r1, #2
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 8000998:	f000 ff5a 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009a2:	f000 ff55 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2101      	movs	r1, #1
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 ff4f 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2110      	movs	r1, #16
 80009b6:	4807      	ldr	r0, [pc, #28]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009b8:	f000 ff4a 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009c2:	f000 ff45 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	4802      	ldr	r0, [pc, #8]	; (80009d4 <app_LetrasADisplay+0x3dc>)
 80009cc:	f000 ff40 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 80009d0:	e113      	b.n	8000bfa <app_LetrasADisplay+0x602>
 80009d2:	bf00      	nop
 80009d4:	48000800 	.word	0x48000800
			case 'N' | 'n':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 ff35 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2102      	movs	r1, #2
 80009ea:	4886      	ldr	r0, [pc, #536]	; (8000c04 <app_LetrasADisplay+0x60c>)
 80009ec:	f000 ff30 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2104      	movs	r1, #4
 80009f4:	4883      	ldr	r0, [pc, #524]	; (8000c04 <app_LetrasADisplay+0x60c>)
 80009f6:	f000 ff2b 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 ff25 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2110      	movs	r1, #16
 8000a0a:	487e      	ldr	r0, [pc, #504]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a0c:	f000 ff20 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	487b      	ldr	r0, [pc, #492]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a16:	f000 ff1b 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4879      	ldr	r0, [pc, #484]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a20:	f000 ff16 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000a24:	e0e9      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'O' | 'o':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f000 ff0e 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	4872      	ldr	r0, [pc, #456]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a3a:	f000 ff09 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2104      	movs	r1, #4
 8000a42:	4870      	ldr	r0, [pc, #448]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a44:	f000 ff04 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f000 fefe 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	486a      	ldr	r0, [pc, #424]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a5a:	f000 fef9 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	4868      	ldr	r0, [pc, #416]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a64:	f000 fef4 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4865      	ldr	r0, [pc, #404]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a6e:	f000 feef 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000a72:	e0c2      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'R' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f000 fee7 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	485f      	ldr	r0, [pc, #380]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a88:	f000 fee2 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2104      	movs	r1, #4
 8000a90:	485c      	ldr	r0, [pc, #368]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000a92:	f000 fedd 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f000 fed7 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	4857      	ldr	r0, [pc, #348]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000aa8:	f000 fed2 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	4854      	ldr	r0, [pc, #336]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ab2:	f000 fecd 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	4852      	ldr	r0, [pc, #328]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000abc:	f000 fec8 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000ac0:	e09b      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'S' | 's':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fec0 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	484b      	ldr	r0, [pc, #300]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ad6:	f000 febb 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2104      	movs	r1, #4
 8000ade:	4849      	ldr	r0, [pc, #292]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ae0:	f000 feb6 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 feb0 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	4843      	ldr	r0, [pc, #268]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000af6:	f000 feab 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4841      	ldr	r0, [pc, #260]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b00:	f000 fea6 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	483e      	ldr	r0, [pc, #248]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b0a:	f000 fea1 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000b0e:	e074      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'T' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 fe99 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	4838      	ldr	r0, [pc, #224]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b24:	f000 fe94 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4835      	ldr	r0, [pc, #212]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b2e:	f000 fe8f 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2101      	movs	r1, #1
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f000 fe89 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2110      	movs	r1, #16
 8000b42:	4830      	ldr	r0, [pc, #192]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b44:	f000 fe84 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	482d      	ldr	r0, [pc, #180]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b4e:	f000 fe7f 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	482b      	ldr	r0, [pc, #172]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b58:	f000 fe7a 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000b5c:	e04d      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'U' | 'u':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fe72 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b72:	f000 fe6d 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b7c:	f000 fe68 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fe62 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	481c      	ldr	r0, [pc, #112]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b92:	f000 fe5d 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	481a      	ldr	r0, [pc, #104]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000b9c:	f000 fe58 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4817      	ldr	r0, [pc, #92]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000ba6:	f000 fe53 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000baa:	e026      	b.n	8000bfa <app_LetrasADisplay+0x602>
			case 'Y' | 'y':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f000 fe4b 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4811      	ldr	r0, [pc, #68]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bc0:	f000 fe46 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bca:	f000 fe41 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fe3b 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2110      	movs	r1, #16
 8000bde:	4809      	ldr	r0, [pc, #36]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000be0:	f000 fe36 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bea:	f000 fe31 	bl	8001850 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <app_LetrasADisplay+0x60c>)
 8000bf4:	f000 fe2c 	bl	8001850 <HAL_GPIO_WritePin>
			}break;
 8000bf8:	bf00      	nop
			default:
			{
				/*No hace nada */
			}
		}
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	48000800 	.word	0x48000800

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fb09 	bl	8001222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f80c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f902 	bl	8000e1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 f8d0 	bl	8000dbc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c1c:	f000 f880 	bl	8000d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <main+0x20>)
 8000c22:	f001 fecd 	bl	80029c0 <HAL_TIM_Base_Start_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <main+0x1e>
 8000c28:	20000028 	.word	0x20000028

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0a4      	sub	sp, #144	; 0x90
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c36:	2244      	movs	r2, #68	; 0x44
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 ff5e 	bl	8003afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2234      	movs	r2, #52	; 0x34
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 ff50 	bl	8003afc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000c5c:	f000 fe10 	bl	8001880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c60:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <SystemClock_Config+0xf0>)
 8000c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <SystemClock_Config+0xf0>)
 8000c68:	f023 0318 	bic.w	r3, r3, #24
 8000c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c74:	f000 fe22 	bl	80018bc <HAL_PWREx_ControlVoltageScaling>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000c7e:	f000 f97b 	bl	8000f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c82:	2314      	movs	r3, #20
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c86:	2301      	movs	r3, #1
 8000c88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c92:	2360      	movs	r3, #96	; 0x60
 8000c94:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ca4:	2328      	movs	r3, #40	; 0x28
 8000ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fe54 	bl	8001968 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cc6:	f000 f957 	bl	8000f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 faa5 	bl	8002234 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cf0:	f000 f942 	bl	8000f78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fc9c 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000d0a:	f000 f935 	bl	8000f78 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d0e:	f001 fe1b 	bl	8002948 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d12:	bf00      	nop
 8000d14:	3790      	adds	r7, #144	; 0x90
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d48:	224f      	movs	r2, #79	; 0x4f
 8000d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d68:	f001 fdfe 	bl	8002968 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d72:	f000 f901 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d84:	f001 ff65 	bl	8002c52 <HAL_TIM_ConfigClockSource>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d8e:	f000 f8f3 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000da0:	f002 f940 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000daa:	f000 f8e5 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000028 	.word	0x20000028

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <MX_USART2_UART_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000e00:	f002 f994 	bl	800312c <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f000 f8b5 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000068 	.word	0x20000068
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a4c      	ldr	r2, [pc, #304]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a40      	ldr	r2, [pc, #256]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a3a      	ldr	r2, [pc, #232]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <MX_GPIO_Init+0x14c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8000e98:	4834      	ldr	r0, [pc, #208]	; (8000f6c <MX_GPIO_Init+0x150>)
 8000e9a:	f000 fcd9 	bl	8001850 <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f241 5131 	movw	r1, #5425	; 0x1531
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f000 fcd2 	bl	8001850 <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Display_3_Pin|Display_2_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f242 0130 	movw	r1, #8240	; 0x2030
 8000eb2:	482f      	ldr	r0, [pc, #188]	; (8000f70 <MX_GPIO_Init+0x154>)
 8000eb4:	f000 fccc 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_GPIO_Init+0x158>)
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4827      	ldr	r0, [pc, #156]	; (8000f6c <MX_GPIO_Init+0x150>)
 8000ece:	f000 fb4d 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8000ed2:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8000ed6:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4820      	ldr	r0, [pc, #128]	; (8000f6c <MX_GPIO_Init+0x150>)
 8000eec:	f000 fb3e 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8000ef0:	f241 5331 	movw	r3, #5425	; 0x1531
 8000ef4:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f000 fb2e 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Display_3_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Display_3_Pin|Display_2_Pin;
 8000f10:	f242 0330 	movw	r3, #8240	; 0x2030
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_GPIO_Init+0x154>)
 8000f2a:	f000 fb1f 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480a      	ldr	r0, [pc, #40]	; (8000f6c <MX_GPIO_Init+0x150>)
 8000f44:	f000 fb12 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 8000f48:	2340      	movs	r3, #64	; 0x40
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_GPIO_Init+0x154>)
 8000f5c:	f000 fb06 	bl	800156c <HAL_GPIO_Init>

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48000400 	.word	0x48000400
 8000f74:	10210000 	.word	0x10210000

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_MspInit+0x44>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_MspInit+0x44>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe0:	d113      	bne.n	800100a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201c      	movs	r0, #28
 8001000:	f000 fa7d 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001004:	201c      	movs	r0, #28
 8001006:	f000 fa96 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_UART_MspInit+0x7c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d128      	bne.n	800108c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_UART_MspInit+0x80>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <HAL_UART_MspInit+0x80>)
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	6593      	str	r3, [r2, #88]	; 0x58
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_UART_MspInit+0x80>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_UART_MspInit+0x80>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_UART_MspInit+0x80>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_UART_MspInit+0x80>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800106a:	230c      	movs	r3, #12
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107a:	2307      	movs	r3, #7
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f000 fa70 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40004400 	.word	0x40004400
 8001098:	40021000 	.word	0x40021000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  char mensaje[]= {'e','r','r','o'};
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HardFault_Handler+0x58>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	607b      	str	r3, [r7, #4]
	  app_SeleccionDisplay(0);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fa07 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[0]);
 80010be:	793b      	ldrb	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa99 	bl	80005f8 <app_LetrasADisplay>
	  HAL_Delay(3);
 80010c6:	2003      	movs	r0, #3
 80010c8:	f000 f91c 	bl	8001304 <HAL_Delay>
	  app_SeleccionDisplay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff f9fd 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[1]);
 80010d2:	797b      	ldrb	r3, [r7, #5]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa8f 	bl	80005f8 <app_LetrasADisplay>
	  HAL_Delay(3);
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 f912 	bl	8001304 <HAL_Delay>
	  app_SeleccionDisplay(2);
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff f9f3 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[2]);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa85 	bl	80005f8 <app_LetrasADisplay>
	  HAL_Delay(3);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 f908 	bl	8001304 <HAL_Delay>
	  app_SeleccionDisplay(3);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff f9e9 	bl	80004cc <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[3]);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa7b 	bl	80005f8 <app_LetrasADisplay>
  {
 8001102:	e7d6      	b.n	80010b2 <HardFault_Handler+0x6>
 8001104:	08003b24 	.word	0x08003b24

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f8be 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <TIM2_IRQHandler+0x10>)
 8001156:	f001 fc5d 	bl	8002a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000028 	.word	0x20000028

08001164 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <SystemInit+0x64>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <SystemInit+0x64>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <SystemInit+0x68>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <SystemInit+0x68>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <SystemInit+0x68>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <SystemInit+0x68>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <SystemInit+0x68>)
 8001190:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001194:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001198:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <SystemInit+0x68>)
 800119c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <SystemInit+0x68>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <SystemInit+0x68>)
 80011a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <SystemInit+0x68>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SystemInit+0x64>)
 80011b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ba:	609a      	str	r2, [r3, #8]
#endif
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	40021000 	.word	0x40021000

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011d6:	e003      	b.n	80011e0 <LoopCopyDataInit>

080011d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011de:	3104      	adds	r1, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011e8:	d3f6      	bcc.n	80011d8 <CopyDataInit>
	ldr	r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011ec:	e002      	b.n	80011f4 <LoopFillZerobss>

080011ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011f0:	f842 3b04 	str.w	r3, [r2], #4

080011f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <LoopForever+0x16>)
	cmp	r2, r3
 80011f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011f8:	d3f9      	bcc.n	80011ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fa:	f7ff ffb3 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f002 fc59 	bl	8003ab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fd01 	bl	8000c08 <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800120c:	08003b80 	.word	0x08003b80
	ldr	r0, =_sdata
 8001210:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001214:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001218:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800121c:	200000ec 	.word	0x200000ec

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>

08001222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f95b 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f80e 	bl	8001254 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e001      	b.n	8001248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001244:	f7ff fea0 	bl	8000f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001248:	79fb      	ldrb	r3, [r7, #7]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_InitTick+0x68>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d022      	beq.n	80012ae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_InitTick+0x6c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_InitTick+0x68>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001274:	fbb1 f3f3 	udiv	r3, r1, r3
 8001278:	fbb2 f3f3 	udiv	r3, r2, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f968 	bl	8001552 <HAL_SYSTICK_Config>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10f      	bne.n	80012a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d809      	bhi.n	80012a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128e:	2200      	movs	r2, #0
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001296:	f000 f932 	bl	80014fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_InitTick+0x70>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e004      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x1c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x20>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_IncTick+0x1c>)
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	200000e8 	.word	0x200000e8
 80012e8:	20000008 	.word	0x20000008

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200000e8 	.word	0x200000e8

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800131c:	d004      	beq.n	8001328 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_Delay+0x40>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001328:	bf00      	nop
 800132a:	f7ff ffdf 	bl	80012ec <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d8f7      	bhi.n	800132a <HAL_Delay+0x26>
  {
  }
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff3e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff31 	bl	80013ac <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157a:	e14e      	b.n	800181a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8140 	beq.w	8001814 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d00b      	beq.n	80015b4 <HAL_GPIO_Init+0x48>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d130      	bne.n	8001616 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ea:	2201      	movs	r2, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 0201 	and.w	r2, r3, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0xea>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b12      	cmp	r3, #18
 8001654:	d123      	bne.n	800169e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0203 	and.w	r2, r3, #3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 809a 	beq.w	8001814 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <HAL_GPIO_Init+0x2cc>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e4:	4a54      	ldr	r2, [pc, #336]	; (8001838 <HAL_GPIO_Init+0x2cc>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6613      	str	r3, [r2, #96]	; 0x60
 80016ec:	4b52      	ldr	r3, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x2cc>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <HAL_GPIO_Init+0x2d0>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001722:	d013      	beq.n	800174c <HAL_GPIO_Init+0x1e0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a46      	ldr	r2, [pc, #280]	; (8001840 <HAL_GPIO_Init+0x2d4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00d      	beq.n	8001748 <HAL_GPIO_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a45      	ldr	r2, [pc, #276]	; (8001844 <HAL_GPIO_Init+0x2d8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d007      	beq.n	8001744 <HAL_GPIO_Init+0x1d8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_GPIO_Init+0x2dc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_GPIO_Init+0x1d4>
 800173c:	2303      	movs	r3, #3
 800173e:	e006      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 8001740:	2307      	movs	r3, #7
 8001742:	e004      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 8001744:	2302      	movs	r3, #2
 8001746:	e002      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 800174c:	2300      	movs	r3, #0
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	f002 0203 	and.w	r2, r2, #3
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	4093      	lsls	r3, r2
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800175e:	4937      	ldr	r1, [pc, #220]	; (800183c <HAL_GPIO_Init+0x2d0>)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <HAL_GPIO_Init+0x2e0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001790:	4a2e      	ldr	r2, [pc, #184]	; (800184c <HAL_GPIO_Init+0x2e0>)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_GPIO_Init+0x2e0>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ba:	4a24      	ldr	r2, [pc, #144]	; (800184c <HAL_GPIO_Init+0x2e0>)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_GPIO_Init+0x2e0>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_GPIO_Init+0x2e0>)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_GPIO_Init+0x2e0>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_GPIO_Init+0x2e0>)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	f47f aea9 	bne.w	800157c <HAL_GPIO_Init+0x10>
  }
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	48000400 	.word	0x48000400
 8001844:	48000800 	.word	0x48000800
 8001848:	48000c00 	.word	0x48000c00
 800184c:	40010400 	.word	0x40010400

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800186c:	e002      	b.n	8001874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40007000 	.word	0x40007000

080018a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40007000 	.word	0x40007000

080018bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ca:	d130      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d8:	d038      	beq.n	800194c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2232      	movs	r2, #50	; 0x32
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001900:	e002      	b.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3b01      	subs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001914:	d102      	bne.n	800191c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f2      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001928:	d110      	bne.n	800194c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e00f      	b.n	800194e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193a:	d007      	beq.n	800194c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40007000 	.word	0x40007000
 8001960:	20000000 	.word	0x20000000
 8001964:	431bde83 	.word	0x431bde83

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	f000 bc56 	b.w	8002228 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197c:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001986:	4b9f      	ldr	r3, [pc, #636]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80e6 	beq.w	8001b6a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4c>
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	f040 808d 	bne.w	8001ac6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f040 8089 	bne.w	8001ac6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b4:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_RCC_OscConfig+0x66>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f000 bc2d 	b.w	8002228 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d2:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <HAL_RCC_OscConfig+0x80>
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e6:	e005      	b.n	80019f4 <HAL_RCC_OscConfig+0x8c>
 80019e8:	4b86      	ldr	r3, [pc, #536]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d224      	bcs.n	8001a42 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fdbd 	bl	800257c <RCC_SetFlashLatencyFromMSIRange>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f000 bc0d 	b.w	8002228 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0e:	4b7d      	ldr	r3, [pc, #500]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7c      	ldr	r2, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	4977      	ldr	r1, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a2c:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	4972      	ldr	r1, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e025      	b.n	8001a8e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a42:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6f      	ldr	r2, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	496a      	ldr	r1, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	4965      	ldr	r1, [pc, #404]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fd7c 	bl	800257c <RCC_SetFlashLatencyFromMSIRange>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e3cc      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a8e:	f000 fcb3 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8001a92:	4601      	mov	r1, r0
 8001a94:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x2a0>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aaa:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_OscConfig+0x2a4>)
 8001aac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <HAL_RCC_OscConfig+0x2a8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fbce 	bl	8001254 <HAL_InitTick>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d052      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	e3b0      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d032      	beq.n	8001b34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ace:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a4c      	ldr	r2, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fc07 	bl	80012ec <HAL_GetTick>
 8001ade:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fc03 	bl	80012ec <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e399      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af4:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b00:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	493a      	ldr	r1, [pc, #232]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
 8001b32:	e01a      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b34:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fbd4 	bl	80012ec <HAL_GetTick>
 8001b44:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b48:	f7ff fbd0 	bl	80012ec <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e366      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1e0>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d073      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_OscConfig+0x220>
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d10e      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d063      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2f4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d15f      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e343      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x250>
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x274>
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_RCC_OscConfig+0x29c>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fb76 	bl	80012ec <HAL_GetTick>
 8001c00:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	e010      	b.n	8001c26 <HAL_RCC_OscConfig+0x2be>
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003b28 	.word	0x08003b28
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fb6a 	bl	80012ec <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e300      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c26:	4ba0      	ldr	r3, [pc, #640]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x2ac>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fb5a 	bl	80012ec <HAL_GetTick>
 8001c38:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fb56 	bl	80012ec <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e2ec      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4e:	4b96      	ldr	r3, [pc, #600]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2d4>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d060      	beq.n	8001d2c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x314>
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d119      	bne.n	8001caa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d116      	bne.n	8001caa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7c:	4b8a      	ldr	r3, [pc, #552]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_OscConfig+0x32c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e2c9      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b84      	ldr	r3, [pc, #528]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	4981      	ldr	r1, [pc, #516]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca8:	e040      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d023      	beq.n	8001cfa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb2:	4b7d      	ldr	r3, [pc, #500]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7c      	ldr	r2, [pc, #496]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fb15 	bl	80012ec <HAL_GetTick>
 8001cc2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fb11 	bl	80012ec <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e2a7      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd8:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	496d      	ldr	r1, [pc, #436]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e018      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6a      	ldr	r2, [pc, #424]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff faf1 	bl	80012ec <HAL_GetTick>
 8001d0a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff faed 	bl	80012ec <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e283      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d20:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d07f      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05f      	beq.n	8001e00 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001d40:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699a      	ldr	r2, [r3, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d037      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e25c      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d78:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d88:	f7ff fab0 	bl	80012ec <HAL_GetTick>
 8001d8c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff faac 	bl	80012ec <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e242      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ef      	bne.n	8001d90 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001db0:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	f023 0210 	bic.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	493a      	ldr	r1, [pc, #232]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dcc:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fa89 	bl	80012ec <HAL_GetTick>
 8001dda:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fa85 	bl	80012ec <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e21b      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ef      	beq.n	8001dde <HAL_RCC_OscConfig+0x476>
 8001dfe:	e01b      	b.n	8001e38 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7ff fa6c 	bl	80012ec <HAL_GetTick>
 8001e14:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fa68 	bl	80012ec <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b11      	cmp	r3, #17
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1fe      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ef      	bne.n	8001e18 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80c1 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10e      	bne.n	8001e76 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	; 0x58
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_RCC_OscConfig+0x540>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCC_OscConfig+0x544>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_RCC_OscConfig+0x544>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_RCC_OscConfig+0x544>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fa2d 	bl	80012ec <HAL_GetTick>
 8001e92:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e94:	e00c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff fa29 	bl	80012ec <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d905      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1bf      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb0:	4bb1      	ldr	r3, [pc, #708]	; (8002178 <HAL_RCC_OscConfig+0x810>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ec      	beq.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001ec8:	4bac      	ldr	r3, [pc, #688]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	49a8      	ldr	r1, [pc, #672]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d010      	beq.n	8001f10 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001eee:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	4aa1      	ldr	r2, [pc, #644]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001efe:	4b9f      	ldr	r3, [pc, #636]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	4a9d      	ldr	r2, [pc, #628]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0e:	e018      	b.n	8001f42 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f10:	4b9a      	ldr	r3, [pc, #616]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	4a99      	ldr	r2, [pc, #612]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f20:	e00f      	b.n	8001f42 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f22:	4b96      	ldr	r3, [pc, #600]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	4a94      	ldr	r2, [pc, #592]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f32:	4b92      	ldr	r3, [pc, #584]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f9cf 	bl	80012ec <HAL_GetTick>
 8001f4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff f9cb 	bl	80012ec <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e15f      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	4b84      	ldr	r3, [pc, #528]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ed      	beq.n	8001f52 <HAL_RCC_OscConfig+0x5ea>
 8001f76:	e01d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f9b8 	bl	80012ec <HAL_GetTick>
 8001f7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff f9b4 	bl	80012ec <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e148      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f96:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ed      	bne.n	8001f80 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001fa4:	4b75      	ldr	r3, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a74      	ldr	r2, [pc, #464]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	4a6e      	ldr	r2, [pc, #440]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d03c      	beq.n	800204e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01c      	beq.n	8002016 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fdc:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff f97e 	bl	80012ec <HAL_GetTick>
 8001ff0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff4:	f7ff f97a 	bl	80012ec <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e110      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ef      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x68c>
 8002014:	e01b      	b.n	800204e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002016:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201c:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x814>)
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff f961 	bl	80012ec <HAL_GetTick>
 800202a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202e:	f7ff f95d 	bl	80012ec <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0f3      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002040:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ef      	bne.n	800202e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80e7 	beq.w	8002226 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 80b7 	bne.w	80021d0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002062:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0203 	and.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	429a      	cmp	r2, r3
 8002074:	d124      	bne.n	80020c0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	3b01      	subs	r3, #1
 8002082:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d11b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d113      	bne.n	80020c0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	3b01      	subs	r3, #1
 80020a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d109      	bne.n	80020c0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d061      	beq.n	8002184 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d056      	beq.n	8002174 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCC_OscConfig+0x814>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2c      	ldr	r2, [pc, #176]	; (800217c <HAL_RCC_OscConfig+0x814>)
 80020cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d2:	f7ff f90b 	bl	80012ec <HAL_GetTick>
 80020d6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff f907 	bl	80012ec <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e09d      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_RCC_OscConfig+0x814>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_OscConfig+0x814>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_OscConfig+0x818>)
 80020fe:	4013      	ands	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002108:	3a01      	subs	r2, #1
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	4311      	orrs	r1, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002112:	0212      	lsls	r2, r2, #8
 8002114:	4311      	orrs	r1, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800211a:	0852      	lsrs	r2, r2, #1
 800211c:	3a01      	subs	r2, #1
 800211e:	0552      	lsls	r2, r2, #21
 8002120:	4311      	orrs	r1, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002126:	0852      	lsrs	r2, r2, #1
 8002128:	3a01      	subs	r2, #1
 800212a:	0652      	lsls	r2, r2, #25
 800212c:	430a      	orrs	r2, r1
 800212e:	4913      	ldr	r1, [pc, #76]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_RCC_OscConfig+0x814>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800214c:	f7ff f8ce 	bl	80012ec <HAL_GetTick>
 8002150:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f8ca 	bl	80012ec <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e060      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_OscConfig+0x814>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002172:	e058      	b.n	8002226 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e057      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
 8002178:	40007000 	.word	0x40007000
 800217c:	40021000 	.word	0x40021000
 8002180:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d14a      	bne.n	8002226 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a8:	f7ff f8a0 	bl	80012ec <HAL_GetTick>
 80021ac:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff f89c 	bl	80012ec <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e032      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x848>
 80021ce:	e02a      	b.n	8002226 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d025      	beq.n	8002222 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021e8:	f023 0303 	bic.w	r3, r3, #3
 80021ec:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 80021f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff f877 	bl	80012ec <HAL_GetTick>
 80021fe:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7ff f873 	bl	80012ec <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_OscConfig+0x8c8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x89a>
 8002220:	e001      	b.n	8002226 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0c8      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d910      	bls.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4961      	ldr	r1, [pc, #388]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b0      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d04c      	beq.n	800231e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228c:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d121      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e09e      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e092      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e086      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e07e      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 0203 	bic.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	493f      	ldr	r1, [pc, #252]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ee:	f7fe fffd 	bl	80012ec <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	e00a      	b.n	800230c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7fe fff9 	bl	80012ec <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e066      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 020c 	and.w	r2, r3, #12
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	429a      	cmp	r2, r3
 800231c:	d1eb      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	492c      	ldr	r1, [pc, #176]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4924      	ldr	r1, [pc, #144]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e036      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4918      	ldr	r1, [pc, #96]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4910      	ldr	r1, [pc, #64]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023aa:	f000 f825 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	5cd3      	ldrb	r3, [r2, r3]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	fa21 f303 	lsr.w	r3, r1, r3
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe ff40 	bl	8001254 <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80023d8:	7afb      	ldrb	r3, [r7, #11]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08003b28 	.word	0x08003b28
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x34>
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d121      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d11e      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800242c:	4b33      	ldr	r3, [pc, #204]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002438:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e005      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002454:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10d      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d102      	bne.n	8002476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002470:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e004      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d101      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 800247e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d133      	bne.n	80024ee <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d002      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0xa4>
 8002496:	2b03      	cmp	r3, #3
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0xaa>
 800249a:	e005      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_GetSysClockFreq+0x10c>)
 800249e:	617b      	str	r3, [r7, #20]
      break;
 80024a0:	e005      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 80024a4:	617b      	str	r3, [r7, #20]
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	617b      	str	r3, [r7, #20]
      break;
 80024ac:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	3301      	adds	r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	fb02 f203 	mul.w	r2, r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_GetSysClockFreq+0x104>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0e5b      	lsrs	r3, r3, #25
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024ee:	69bb      	ldr	r3, [r7, #24]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3724      	adds	r7, #36	; 0x24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000
 8002500:	08003b40 	.word	0x08003b40
 8002504:	00f42400 	.word	0x00f42400
 8002508:	007a1200 	.word	0x007a1200

0800250c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_GetHCLKFreq+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002528:	f7ff fff0 	bl	800250c <HAL_RCC_GetHCLKFreq>
 800252c:	4601      	mov	r1, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_RCC_GetPCLK1Freq+0x28>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	08003b38 	.word	0x08003b38

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002554:	f7ff ffda 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002558:	4601      	mov	r1, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	08003b38 	.word	0x08003b38

0800257c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002594:	f7ff f984 	bl	80018a0 <HAL_PWREx_GetVoltageRange>
 8002598:	6178      	str	r0, [r7, #20]
 800259a:	e014      	b.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	; 0x58
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025b4:	f7ff f974 	bl	80018a0 <HAL_PWREx_GetVoltageRange>
 80025b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025cc:	d10b      	bne.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d919      	bls.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2ba0      	cmp	r3, #160	; 0xa0
 80025d8:	d902      	bls.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025da:	2302      	movs	r3, #2
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	e013      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025e0:	2301      	movs	r3, #1
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e010      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d902      	bls.n	80025f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025ec:	2303      	movs	r3, #3
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	e00a      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d102      	bne.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f8:	2302      	movs	r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e004      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b70      	cmp	r3, #112	; 0x70
 8002602:	d101      	bne.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002604:	2301      	movs	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 0207 	bic.w	r2, r3, #7
 8002610:	4909      	ldr	r1, [pc, #36]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	40022000 	.word	0x40022000

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002644:	2300      	movs	r3, #0
 8002646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002648:	2300      	movs	r3, #0
 800264a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 809e 	beq.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268c:	2301      	movs	r3, #1
 800268e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800269c:	f7fe fe26 	bl	80012ec <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a2:	e009      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe fe22 	bl	80012ec <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d902      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	74fb      	strb	r3, [r7, #19]
        break;
 80026b6:	e005      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d15a      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ca:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01e      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d019      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002712:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fde2 	bl	80012ec <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272a:	e00b      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe fdde 	bl	80012ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d902      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	74fb      	strb	r3, [r7, #19]
            break;
 8002742:	e006      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ec      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4904      	ldr	r1, [pc, #16]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800276e:	e009      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
 8002774:	e006      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002784:	7c7b      	ldrb	r3, [r7, #17]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b6e      	ldr	r3, [pc, #440]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4a6d      	ldr	r2, [pc, #436]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a2:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 0203 	bic.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4964      	ldr	r1, [pc, #400]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c4:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 020c 	bic.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	495c      	ldr	r1, [pc, #368]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027e6:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4953      	ldr	r1, [pc, #332]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002808:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	494b      	ldr	r1, [pc, #300]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4942      	ldr	r1, [pc, #264]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	493a      	ldr	r1, [pc, #232]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4931      	ldr	r1, [pc, #196]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4929      	ldr	r1, [pc, #164]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4920      	ldr	r1, [pc, #128]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	4918      	ldr	r1, [pc, #96]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f2:	d105      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	490a      	ldr	r1, [pc, #40]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292a:	d105      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002936:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002938:	7cbb      	ldrb	r3, [r7, #18]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e01d      	b.n	80029b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fb1e 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fa3e 	bl	8002e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_TIM_Base_Start_IT+0x50>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d00b      	beq.n	8002a02 <HAL_TIM_Base_Start_IT+0x42>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d007      	beq.n	8002a02 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	00010007 	.word	0x00010007

08002a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0202 	mvn.w	r2, #2
 8002a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9c8 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f9ba 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f9cb 	bl	8002e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0204 	mvn.w	r2, #4
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f99e 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f990 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f9a1 	bl	8002e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0208 	mvn.w	r2, #8
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f974 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f966 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f977 	bl	8002e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2208      	movs	r2, #8
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f94a 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f93c 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f94d 	bl	8002e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0201 	mvn.w	r2, #1
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f916 	bl	8002dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 faa0 	bl	8003104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b80      	cmp	r3, #128	; 0x80
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fa93 	bl	8003118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d10e      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8fb 	bl	8002e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d10e      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0220 	mvn.w	r2, #32
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa53 	bl	80030f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_ConfigClockSource+0x18>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e0a8      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x16a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c94:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d067      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x124>
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d80b      	bhi.n	8002cc2 <HAL_TIM_ConfigClockSource+0x70>
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d073      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x144>
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x66>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d06f      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002cb6:	e078      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d06c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x144>
 8002cbc:	2b30      	cmp	r3, #48	; 0x30
 8002cbe:	d06a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002cc0:	e073      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002cc2:	2b70      	cmp	r3, #112	; 0x70
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x90>
 8002cc6:	2b70      	cmp	r3, #112	; 0x70
 8002cc8:	d804      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x82>
 8002cca:	2b50      	cmp	r3, #80	; 0x50
 8002ccc:	d033      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xe4>
 8002cce:	2b60      	cmp	r3, #96	; 0x60
 8002cd0:	d041      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002cd2:	e06a      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd8:	d066      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x156>
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d017      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ce0:	e063      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f000 f977 	bl	8002fe4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	609a      	str	r2, [r3, #8]
      break;
 8002d0e:	e04c      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f000 f960 	bl	8002fe4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d32:	609a      	str	r2, [r3, #8]
      break;
 8002d34:	e039      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8d4 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2150      	movs	r1, #80	; 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f92d 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d54:	e029      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8f3 	bl	8002f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2160      	movs	r1, #96	; 0x60
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f91d 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d74:	e019      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f8b4 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f90d 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d94:	e009      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 f904 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002da6:	e000      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002da8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <TIM_Base_SetConfig+0xbc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0x20>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e46:	d108      	bne.n	8002e5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <TIM_Base_SetConfig+0xbc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0x52>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0x52>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <TIM_Base_SetConfig+0xc0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0x52>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <TIM_Base_SetConfig+0xc4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <TIM_Base_SetConfig+0xbc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <TIM_Base_SetConfig+0xa0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <TIM_Base_SetConfig+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0xa0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <TIM_Base_SetConfig+0xc4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400

08002ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0201 	bic.w	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f023 030a 	bic.w	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	621a      	str	r2, [r3, #32]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f023 0210 	bic.w	r2, r3, #16
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	031b      	lsls	r3, r3, #12
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f043 0307 	orr.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	431a      	orrs	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e04f      	b.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d108      	bne.n	8003078 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800306c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a4:	d004      	beq.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10c      	bne.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40014000 	.word	0x40014000

080030f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e040      	b.n	80031c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd ff62 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f82c 	bl	80031c8 <UART_SetConfig>
 8003170:	4603      	mov	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e022      	b.n	80031c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fb34 	bl	80037f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fbbb 	bl	8003934 <UART_CheckIdleState>
 80031be:	4603      	mov	r3, r0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80031cc:	b08a      	sub	sp, #40	; 0x28
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4bbc      	ldr	r3, [pc, #752]	; (80034f0 <UART_SetConfig+0x328>)
 80031fe:	4013      	ands	r3, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003206:	430b      	orrs	r3, r1
 8003208:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4ab2      	ldr	r2, [pc, #712]	; (80034f4 <UART_SetConfig+0x32c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d004      	beq.n	800323a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	4313      	orrs	r3, r2
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4aa9      	ldr	r2, [pc, #676]	; (80034f8 <UART_SetConfig+0x330>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d126      	bne.n	80032a6 <UART_SetConfig+0xde>
 8003258:	4ba8      	ldr	r3, [pc, #672]	; (80034fc <UART_SetConfig+0x334>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b03      	cmp	r3, #3
 8003264:	d81a      	bhi.n	800329c <UART_SetConfig+0xd4>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0xa4>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	0800327d 	.word	0x0800327d
 8003270:	0800328d 	.word	0x0800328d
 8003274:	08003285 	.word	0x08003285
 8003278:	08003295 	.word	0x08003295
 800327c:	2301      	movs	r3, #1
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e0ab      	b.n	80033dc <UART_SetConfig+0x214>
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e0a7      	b.n	80033dc <UART_SetConfig+0x214>
 800328c:	2304      	movs	r3, #4
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e0a3      	b.n	80033dc <UART_SetConfig+0x214>
 8003294:	2308      	movs	r3, #8
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e09f      	b.n	80033dc <UART_SetConfig+0x214>
 800329c:	2310      	movs	r3, #16
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	bf00      	nop
 80032a4:	e09a      	b.n	80033dc <UART_SetConfig+0x214>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a95      	ldr	r2, [pc, #596]	; (8003500 <UART_SetConfig+0x338>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d138      	bne.n	8003322 <UART_SetConfig+0x15a>
 80032b0:	4b92      	ldr	r3, [pc, #584]	; (80034fc <UART_SetConfig+0x334>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d82c      	bhi.n	8003318 <UART_SetConfig+0x150>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0xfc>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003319 	.word	0x08003319
 80032cc:	08003319 	.word	0x08003319
 80032d0:	08003319 	.word	0x08003319
 80032d4:	08003309 	.word	0x08003309
 80032d8:	08003319 	.word	0x08003319
 80032dc:	08003319 	.word	0x08003319
 80032e0:	08003319 	.word	0x08003319
 80032e4:	08003301 	.word	0x08003301
 80032e8:	08003319 	.word	0x08003319
 80032ec:	08003319 	.word	0x08003319
 80032f0:	08003319 	.word	0x08003319
 80032f4:	08003311 	.word	0x08003311
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e06d      	b.n	80033dc <UART_SetConfig+0x214>
 8003300:	2302      	movs	r3, #2
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e069      	b.n	80033dc <UART_SetConfig+0x214>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e065      	b.n	80033dc <UART_SetConfig+0x214>
 8003310:	2308      	movs	r3, #8
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e061      	b.n	80033dc <UART_SetConfig+0x214>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	bf00      	nop
 8003320:	e05c      	b.n	80033dc <UART_SetConfig+0x214>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a77      	ldr	r2, [pc, #476]	; (8003504 <UART_SetConfig+0x33c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d125      	bne.n	8003378 <UART_SetConfig+0x1b0>
 800332c:	4b73      	ldr	r3, [pc, #460]	; (80034fc <UART_SetConfig+0x334>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003336:	2b10      	cmp	r3, #16
 8003338:	d011      	beq.n	800335e <UART_SetConfig+0x196>
 800333a:	2b10      	cmp	r3, #16
 800333c:	d802      	bhi.n	8003344 <UART_SetConfig+0x17c>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <UART_SetConfig+0x186>
 8003342:	e014      	b.n	800336e <UART_SetConfig+0x1a6>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d006      	beq.n	8003356 <UART_SetConfig+0x18e>
 8003348:	2b30      	cmp	r3, #48	; 0x30
 800334a:	d00c      	beq.n	8003366 <UART_SetConfig+0x19e>
 800334c:	e00f      	b.n	800336e <UART_SetConfig+0x1a6>
 800334e:	2300      	movs	r3, #0
 8003350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003354:	e042      	b.n	80033dc <UART_SetConfig+0x214>
 8003356:	2302      	movs	r3, #2
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335c:	e03e      	b.n	80033dc <UART_SetConfig+0x214>
 800335e:	2304      	movs	r3, #4
 8003360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003364:	e03a      	b.n	80033dc <UART_SetConfig+0x214>
 8003366:	2308      	movs	r3, #8
 8003368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336c:	e036      	b.n	80033dc <UART_SetConfig+0x214>
 800336e:	2310      	movs	r3, #16
 8003370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003374:	bf00      	nop
 8003376:	e031      	b.n	80033dc <UART_SetConfig+0x214>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5d      	ldr	r2, [pc, #372]	; (80034f4 <UART_SetConfig+0x32c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d129      	bne.n	80033d6 <UART_SetConfig+0x20e>
 8003382:	4b5e      	ldr	r3, [pc, #376]	; (80034fc <UART_SetConfig+0x334>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d014      	beq.n	80033bc <UART_SetConfig+0x1f4>
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	d802      	bhi.n	800339e <UART_SetConfig+0x1d6>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <UART_SetConfig+0x1e4>
 800339c:	e016      	b.n	80033cc <UART_SetConfig+0x204>
 800339e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a2:	d007      	beq.n	80033b4 <UART_SetConfig+0x1ec>
 80033a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a8:	d00c      	beq.n	80033c4 <UART_SetConfig+0x1fc>
 80033aa:	e00f      	b.n	80033cc <UART_SetConfig+0x204>
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e013      	b.n	80033dc <UART_SetConfig+0x214>
 80033b4:	2302      	movs	r3, #2
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e00f      	b.n	80033dc <UART_SetConfig+0x214>
 80033bc:	2304      	movs	r3, #4
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e00b      	b.n	80033dc <UART_SetConfig+0x214>
 80033c4:	2308      	movs	r3, #8
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	e007      	b.n	80033dc <UART_SetConfig+0x214>
 80033cc:	2310      	movs	r3, #16
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <UART_SetConfig+0x214>
 80033d6:	2310      	movs	r3, #16
 80033d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a44      	ldr	r2, [pc, #272]	; (80034f4 <UART_SetConfig+0x32c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 80fb 	bne.w	80035de <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d824      	bhi.n	800343a <UART_SetConfig+0x272>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0x230>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	0800343b 	.word	0x0800343b
 8003400:	08003425 	.word	0x08003425
 8003404:	0800343b 	.word	0x0800343b
 8003408:	0800342b 	.word	0x0800342b
 800340c:	0800343b 	.word	0x0800343b
 8003410:	0800343b 	.word	0x0800343b
 8003414:	0800343b 	.word	0x0800343b
 8003418:	08003433 	.word	0x08003433
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800341c:	f7ff f882 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8003420:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003422:	e00d      	b.n	8003440 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003424:	4b38      	ldr	r3, [pc, #224]	; (8003508 <UART_SetConfig+0x340>)
 8003426:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003428:	e00a      	b.n	8003440 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800342a:	f7fe ffe5 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 800342e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003430:	e006      	b.n	8003440 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003436:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003438:	e002      	b.n	8003440 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	76fb      	strb	r3, [r7, #27]
        break;
 800343e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 81c8 	beq.w	80037d8 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d305      	bcc.n	8003464 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	429a      	cmp	r2, r3
 8003462:	d902      	bls.n	800346a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	e1b6      	b.n	80037d8 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800346a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800346e:	2b08      	cmp	r3, #8
 8003470:	f200 80a2 	bhi.w	80035b8 <UART_SetConfig+0x3f0>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <UART_SetConfig+0x2b4>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080035b9 	.word	0x080035b9
 8003484:	0800350d 	.word	0x0800350d
 8003488:	080035b9 	.word	0x080035b9
 800348c:	08003541 	.word	0x08003541
 8003490:	080035b9 	.word	0x080035b9
 8003494:	080035b9 	.word	0x080035b9
 8003498:	080035b9 	.word	0x080035b9
 800349c:	0800358f 	.word	0x0800358f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80034a0:	f7ff f840 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 80034a4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4619      	mov	r1, r3
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f04f 0400 	mov.w	r4, #0
 80034b6:	0214      	lsls	r4, r2, #8
 80034b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80034bc:	020b      	lsls	r3, r1, #8
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6852      	ldr	r2, [r2, #4]
 80034c2:	0852      	lsrs	r2, r2, #1
 80034c4:	4611      	mov	r1, r2
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	eb13 0b01 	adds.w	fp, r3, r1
 80034ce:	eb44 0c02 	adc.w	ip, r4, r2
 80034d2:	4658      	mov	r0, fp
 80034d4:	4661      	mov	r1, ip
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f04f 0400 	mov.w	r4, #0
 80034de:	461a      	mov	r2, r3
 80034e0:	4623      	mov	r3, r4
 80034e2:	f7fc fe73 	bl	80001cc <__aeabi_uldivmod>
 80034e6:	4603      	mov	r3, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80034ec:	e067      	b.n	80035be <UART_SetConfig+0x3f6>
 80034ee:	bf00      	nop
 80034f0:	efff69f3 	.word	0xefff69f3
 80034f4:	40008000 	.word	0x40008000
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40021000 	.word	0x40021000
 8003500:	40004400 	.word	0x40004400
 8003504:	40004800 	.word	0x40004800
 8003508:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	f04f 0400 	mov.w	r4, #0
 8003516:	49ae      	ldr	r1, [pc, #696]	; (80037d0 <UART_SetConfig+0x608>)
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	eb13 0b01 	adds.w	fp, r3, r1
 8003520:	eb44 0c02 	adc.w	ip, r4, r2
 8003524:	4658      	mov	r0, fp
 8003526:	4661      	mov	r1, ip
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	461a      	mov	r2, r3
 8003532:	4623      	mov	r3, r4
 8003534:	f7fc fe4a 	bl	80001cc <__aeabi_uldivmod>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800353e:	e03e      	b.n	80035be <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003540:	f7fe ff5a 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003544:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4619      	mov	r1, r3
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	0214      	lsls	r4, r2, #8
 8003558:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800355c:	020b      	lsls	r3, r1, #8
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6852      	ldr	r2, [r2, #4]
 8003562:	0852      	lsrs	r2, r2, #1
 8003564:	4611      	mov	r1, r2
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	eb13 0b01 	adds.w	fp, r3, r1
 800356e:	eb44 0c02 	adc.w	ip, r4, r2
 8003572:	4658      	mov	r0, fp
 8003574:	4661      	mov	r1, ip
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f04f 0400 	mov.w	r4, #0
 800357e:	461a      	mov	r2, r3
 8003580:	4623      	mov	r3, r4
 8003582:	f7fc fe23 	bl	80001cc <__aeabi_uldivmod>
 8003586:	4603      	mov	r3, r0
 8003588:	460c      	mov	r4, r1
 800358a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800358c:	e017      	b.n	80035be <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	085b      	lsrs	r3, r3, #1
 8003594:	f04f 0400 	mov.w	r4, #0
 8003598:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800359c:	f144 0100 	adc.w	r1, r4, #0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	461a      	mov	r2, r3
 80035aa:	4623      	mov	r3, r4
 80035ac:	f7fc fe0e 	bl	80001cc <__aeabi_uldivmod>
 80035b0:	4603      	mov	r3, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035b6:	e002      	b.n	80035be <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	76fb      	strb	r3, [r7, #27]
            break;
 80035bc:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c4:	d308      	bcc.n	80035d8 <UART_SetConfig+0x410>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035cc:	d204      	bcs.n	80035d8 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	e0ff      	b.n	80037d8 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	76fb      	strb	r3, [r7, #27]
 80035dc:	e0fc      	b.n	80037d8 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e6:	f040 8083 	bne.w	80036f0 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80035ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d85e      	bhi.n	80036b0 <UART_SetConfig+0x4e8>
 80035f2:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <UART_SetConfig+0x430>)
 80035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f8:	0800361d 	.word	0x0800361d
 80035fc:	0800363d 	.word	0x0800363d
 8003600:	0800365d 	.word	0x0800365d
 8003604:	080036b1 	.word	0x080036b1
 8003608:	08003679 	.word	0x08003679
 800360c:	080036b1 	.word	0x080036b1
 8003610:	080036b1 	.word	0x080036b1
 8003614:	080036b1 	.word	0x080036b1
 8003618:	08003699 	.word	0x08003699
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800361c:	f7fe ff82 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8003620:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	005a      	lsls	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	441a      	add	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800363a:	e03c      	b.n	80036b6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7fe ff88 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8003640:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	005a      	lsls	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	441a      	add	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	b29b      	uxth	r3, r3
 8003658:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800365a:	e02c      	b.n	80036b6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003666:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6852      	ldr	r2, [r2, #4]
 800366e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003676:	e01e      	b.n	80036b6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003678:	f7fe febe 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 800367c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	005a      	lsls	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	b29b      	uxth	r3, r3
 8003694:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003696:	e00e      	b.n	80036b6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036ae:	e002      	b.n	80036b6 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	76fb      	strb	r3, [r7, #27]
        break;
 80036b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d916      	bls.n	80036ea <UART_SetConfig+0x522>
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d212      	bcs.n	80036ea <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f023 030f 	bic.w	r3, r3, #15
 80036cc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	b29a      	uxth	r2, r3
 80036da:	89fb      	ldrh	r3, [r7, #14]
 80036dc:	4313      	orrs	r3, r2
 80036de:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	89fa      	ldrh	r2, [r7, #14]
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	e076      	b.n	80037d8 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e073      	b.n	80037d8 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80036f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d85c      	bhi.n	80037b2 <UART_SetConfig+0x5ea>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0x538>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003725 	.word	0x08003725
 8003704:	08003743 	.word	0x08003743
 8003708:	08003761 	.word	0x08003761
 800370c:	080037b3 	.word	0x080037b3
 8003710:	0800377d 	.word	0x0800377d
 8003714:	080037b3 	.word	0x080037b3
 8003718:	080037b3 	.word	0x080037b3
 800371c:	080037b3 	.word	0x080037b3
 8003720:	0800379b 	.word	0x0800379b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003724:	f7fe fefe 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8003728:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	085a      	lsrs	r2, r3, #1
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	b29b      	uxth	r3, r3
 800373e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003740:	e03a      	b.n	80037b8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003742:	f7fe ff05 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8003746:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	085a      	lsrs	r2, r3, #1
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	b29b      	uxth	r3, r3
 800375c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800375e:	e02b      	b.n	80037b8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800376a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6852      	ldr	r2, [r2, #4]
 8003772:	fbb3 f3f2 	udiv	r3, r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800377a:	e01d      	b.n	80037b8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377c:	f7fe fe3c 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003780:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	085a      	lsrs	r2, r3, #1
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003798:	e00e      	b.n	80037b8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037b0:	e002      	b.n	80037b8 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	76fb      	strb	r3, [r7, #27]
        break;
 80037b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	d90a      	bls.n	80037d4 <UART_SetConfig+0x60c>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d206      	bcs.n	80037d4 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e003      	b.n	80037d8 <UART_SetConfig+0x610>
 80037d0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80037e4:	7efb      	ldrb	r3, [r7, #27]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080037f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01a      	beq.n	8003906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d10a      	bne.n	8003906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003942:	f7fd fcd3 	bl	80012ec <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d10e      	bne.n	8003974 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003956:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f82a 	bl	80039be <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e020      	b.n	80039b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d10e      	bne.n	80039a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003982:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f814 	bl	80039be <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e00a      	b.n	80039b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ce:	e05d      	b.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d6:	d059      	beq.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d8:	f7fd fc88 	bl	80012ec <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <UART_WaitOnFlagUntilTimeout+0x30>
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11b      	bne.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e042      	b.n	8003aac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02b      	beq.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a42:	d123      	bne.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a4c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a5c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e00f      	b.n	8003aac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d092      	beq.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4e0d      	ldr	r6, [pc, #52]	; (8003aec <__libc_init_array+0x38>)
 8003ab8:	4c0d      	ldr	r4, [pc, #52]	; (8003af0 <__libc_init_array+0x3c>)
 8003aba:	1ba4      	subs	r4, r4, r6
 8003abc:	10a4      	asrs	r4, r4, #2
 8003abe:	2500      	movs	r5, #0
 8003ac0:	42a5      	cmp	r5, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	4e0b      	ldr	r6, [pc, #44]	; (8003af4 <__libc_init_array+0x40>)
 8003ac6:	4c0c      	ldr	r4, [pc, #48]	; (8003af8 <__libc_init_array+0x44>)
 8003ac8:	f000 f820 	bl	8003b0c <_init>
 8003acc:	1ba4      	subs	r4, r4, r6
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	42a5      	cmp	r5, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003adc:	4798      	blx	r3
 8003ade:	3501      	adds	r5, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ae6:	4798      	blx	r3
 8003ae8:	3501      	adds	r5, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08003b78 	.word	0x08003b78
 8003af0:	08003b78 	.word	0x08003b78
 8003af4:	08003b78 	.word	0x08003b78
 8003af8:	08003b7c 	.word	0x08003b7c

08003afc <memset>:
 8003afc:	4402      	add	r2, r0
 8003afe:	4603      	mov	r3, r0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <memset+0xa>
 8003b04:	4770      	bx	lr
 8003b06:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0a:	e7f9      	b.n	8003b00 <memset+0x4>

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
