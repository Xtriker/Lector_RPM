
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008f90  08008f90  00018f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009290  08009290  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009290  08009290  00019290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009298  08009298  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009298  08009298  00019298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800929c  0800929c  0001929c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080092a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001e4  08009484  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08009484  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001411a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002810  00000000  00000000  0003432e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003cda  00000000  00000000  00038b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcb5  00000000  00000000  0003c852  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aceae  00000000  00000000  0004a507  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f73b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005264  00000000  00000000  000f7430  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f74 	.word	0x08008f74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008f74 	.word	0x08008f74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <app_NumeroA7Segmentos>:
uint8_t Bandera[]={0,0,0};


/* Conversion del valor numerico para 7 segmentos */
void app_NumeroA7Segmentos(uint32_t Numero,uint8_t TipoDisplay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	switch(TipoDisplay)
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <app_NumeroA7Segmentos+0x1a>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	f000 81a3 	beq.w	80012e6 <app_NumeroA7Segmentos+0x35e>
				}
			}
		}break;
		default:{}
	}
}
 8000fa0:	e348      	b.n	8001634 <app_NumeroA7Segmentos+0x6ac>
			switch(Numero)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b09      	cmp	r3, #9
 8000fa6:	f200 8342 	bhi.w	800162e <app_NumeroA7Segmentos+0x6a6>
 8000faa:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <app_NumeroA7Segmentos+0x28>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08000fd9 	.word	0x08000fd9
 8000fb4:	08001027 	.word	0x08001027
 8000fb8:	08001075 	.word	0x08001075
 8000fbc:	080010c3 	.word	0x080010c3
 8000fc0:	08001111 	.word	0x08001111
 8000fc4:	0800115f 	.word	0x0800115f
 8000fc8:	080011ad 	.word	0x080011ad
 8000fcc:	080011fb 	.word	0x080011fb
 8000fd0:	08001249 	.word	0x08001249
 8000fd4:	08001297 	.word	0x08001297
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe2:	f001 fee9 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2102      	movs	r1, #2
 8000fea:	48cc      	ldr	r0, [pc, #816]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8000fec:	f001 fee4 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	48c9      	ldr	r0, [pc, #804]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8000ff6:	f001 fedf 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f001 fed9 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	2110      	movs	r1, #16
 800100a:	48c4      	ldr	r0, [pc, #784]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800100c:	f001 fed4 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	48c1      	ldr	r0, [pc, #772]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001016:	f001 fecf 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	48bf      	ldr	r0, [pc, #764]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001020:	f001 feca 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 8001024:	e15e      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f001 fec2 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	2102      	movs	r1, #2
 8001038:	48b8      	ldr	r0, [pc, #736]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800103a:	f001 febd 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800103e:	2201      	movs	r2, #1
 8001040:	2104      	movs	r1, #4
 8001042:	48b6      	ldr	r0, [pc, #728]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001044:	f001 feb8 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f001 feb2 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2110      	movs	r1, #16
 8001058:	48b0      	ldr	r0, [pc, #704]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800105a:	f001 fead 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	48ae      	ldr	r0, [pc, #696]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001064:	f001 fea8 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	48ab      	ldr	r0, [pc, #684]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800106e:	f001 fea3 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 8001072:	e137      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f001 fe9b 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	2102      	movs	r1, #2
 8001086:	48a5      	ldr	r0, [pc, #660]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001088:	f001 fe96 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2104      	movs	r1, #4
 8001090:	48a2      	ldr	r0, [pc, #648]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001092:	f001 fe91 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	2101      	movs	r1, #1
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f001 fe8b 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2110      	movs	r1, #16
 80010a6:	489d      	ldr	r0, [pc, #628]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010a8:	f001 fe86 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	489a      	ldr	r0, [pc, #616]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010b2:	f001 fe81 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	4898      	ldr	r0, [pc, #608]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010bc:	f001 fe7c 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80010c0:	e110      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f001 fe74 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	4891      	ldr	r0, [pc, #580]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010d6:	f001 fe6f 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	2104      	movs	r1, #4
 80010de:	488f      	ldr	r0, [pc, #572]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010e0:	f001 fe6a 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2101      	movs	r1, #1
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f001 fe64 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2110      	movs	r1, #16
 80010f4:	4889      	ldr	r0, [pc, #548]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80010f6:	f001 fe5f 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4887      	ldr	r0, [pc, #540]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001100:	f001 fe5a 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	4884      	ldr	r0, [pc, #528]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800110a:	f001 fe55 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 800110e:	e0e9      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f001 fe4d 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800111e:	2201      	movs	r2, #1
 8001120:	2102      	movs	r1, #2
 8001122:	487e      	ldr	r0, [pc, #504]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001124:	f001 fe48 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	2104      	movs	r1, #4
 800112c:	487b      	ldr	r0, [pc, #492]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800112e:	f001 fe43 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f001 fe3d 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2110      	movs	r1, #16
 8001142:	4876      	ldr	r0, [pc, #472]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001144:	f001 fe38 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4873      	ldr	r0, [pc, #460]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800114e:	f001 fe33 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	4871      	ldr	r0, [pc, #452]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001158:	f001 fe2e 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 800115c:	e0c2      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f001 fe26 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	486a      	ldr	r0, [pc, #424]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001172:	f001 fe21 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	2104      	movs	r1, #4
 800117a:	4868      	ldr	r0, [pc, #416]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800117c:	f001 fe1c 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f001 fe16 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	4862      	ldr	r0, [pc, #392]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001192:	f001 fe11 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4860      	ldr	r0, [pc, #384]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800119c:	f001 fe0c 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	485d      	ldr	r0, [pc, #372]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011a6:	f001 fe07 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80011aa:	e09b      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f001 fdff 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2102      	movs	r1, #2
 80011be:	4857      	ldr	r0, [pc, #348]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011c0:	f001 fdfa 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2104      	movs	r1, #4
 80011c8:	4854      	ldr	r0, [pc, #336]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011ca:	f001 fdf5 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2101      	movs	r1, #1
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f001 fdef 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2110      	movs	r1, #16
 80011de:	484f      	ldr	r0, [pc, #316]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011e0:	f001 fdea 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	484c      	ldr	r0, [pc, #304]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011ea:	f001 fde5 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	484a      	ldr	r0, [pc, #296]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80011f4:	f001 fde0 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80011f8:	e074      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f001 fdd8 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	2102      	movs	r1, #2
 800120c:	4843      	ldr	r0, [pc, #268]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800120e:	f001 fdd3 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	2104      	movs	r1, #4
 8001216:	4841      	ldr	r0, [pc, #260]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001218:	f001 fdce 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2101      	movs	r1, #1
 8001220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001224:	f001 fdc8 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2110      	movs	r1, #16
 800122c:	483b      	ldr	r0, [pc, #236]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800122e:	f001 fdc3 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	4839      	ldr	r0, [pc, #228]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001238:	f001 fdbe 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	4836      	ldr	r0, [pc, #216]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001242:	f001 fdb9 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 8001246:	e04d      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f001 fdb1 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	4830      	ldr	r0, [pc, #192]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800125c:	f001 fdac 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	2104      	movs	r1, #4
 8001264:	482d      	ldr	r0, [pc, #180]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001266:	f001 fda7 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	2101      	movs	r1, #1
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 fda1 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001276:	2201      	movs	r2, #1
 8001278:	2110      	movs	r1, #16
 800127a:	4828      	ldr	r0, [pc, #160]	; (800131c <app_NumeroA7Segmentos+0x394>)
 800127c:	f001 fd9c 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4825      	ldr	r0, [pc, #148]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001286:	f001 fd97 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	4823      	ldr	r0, [pc, #140]	; (800131c <app_NumeroA7Segmentos+0x394>)
 8001290:	f001 fd92 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 8001294:	e026      	b.n	80012e4 <app_NumeroA7Segmentos+0x35c>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 fd8a 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2102      	movs	r1, #2
 80012a8:	481c      	ldr	r0, [pc, #112]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012aa:	f001 fd85 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2104      	movs	r1, #4
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012b4:	f001 fd80 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2101      	movs	r1, #1
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f001 fd7a 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2110      	movs	r1, #16
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012ca:	f001 fd75 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012d4:	f001 fd70 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80012d8:	2201      	movs	r2, #1
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	480f      	ldr	r0, [pc, #60]	; (800131c <app_NumeroA7Segmentos+0x394>)
 80012de:	f001 fd6b 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80012e2:	bf00      	nop
		}break;
 80012e4:	e1a3      	b.n	800162e <app_NumeroA7Segmentos+0x6a6>
			switch(Numero)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	f200 81a2 	bhi.w	8001632 <app_NumeroA7Segmentos+0x6aa>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <app_NumeroA7Segmentos+0x36c>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001321 	.word	0x08001321
 80012f8:	0800136f 	.word	0x0800136f
 80012fc:	080013bd 	.word	0x080013bd
 8001300:	0800140b 	.word	0x0800140b
 8001304:	08001459 	.word	0x08001459
 8001308:	080014a7 	.word	0x080014a7
 800130c:	080014f5 	.word	0x080014f5
 8001310:	08001543 	.word	0x08001543
 8001314:	08001591 	.word	0x08001591
 8001318:	080015df 	.word	0x080015df
 800131c:	48000800 	.word	0x48000800
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f001 fd45 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2102      	movs	r1, #2
 8001332:	48c2      	ldr	r0, [pc, #776]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001334:	f001 fd40 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2104      	movs	r1, #4
 800133c:	48bf      	ldr	r0, [pc, #764]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800133e:	f001 fd3b 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2101      	movs	r1, #1
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f001 fd35 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2110      	movs	r1, #16
 8001352:	48ba      	ldr	r0, [pc, #744]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001354:	f001 fd30 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2140      	movs	r1, #64	; 0x40
 800135c:	48b7      	ldr	r0, [pc, #732]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800135e:	f001 fd2b 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001362:	2201      	movs	r2, #1
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	48b5      	ldr	r0, [pc, #724]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001368:	f001 fd26 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 800136c:	e15e      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f001 fd1e 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	48ae      	ldr	r0, [pc, #696]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001382:	f001 fd19 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2104      	movs	r1, #4
 800138a:	48ac      	ldr	r0, [pc, #688]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800138c:	f001 fd14 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f001 fd0e 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	2110      	movs	r1, #16
 80013a0:	48a6      	ldr	r0, [pc, #664]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013a2:	f001 fd09 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2140      	movs	r1, #64	; 0x40
 80013aa:	48a4      	ldr	r0, [pc, #656]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013ac:	f001 fd04 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	48a1      	ldr	r0, [pc, #644]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013b6:	f001 fcff 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80013ba:	e137      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f001 fcf7 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2102      	movs	r1, #2
 80013ce:	489b      	ldr	r0, [pc, #620]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013d0:	f001 fcf2 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2104      	movs	r1, #4
 80013d8:	4898      	ldr	r0, [pc, #608]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013da:	f001 fced 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f001 fce7 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4893      	ldr	r0, [pc, #588]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013f0:	f001 fce2 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	4890      	ldr	r0, [pc, #576]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80013fa:	f001 fcdd 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	488e      	ldr	r0, [pc, #568]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001404:	f001 fcd8 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 8001408:	e110      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f001 fcd0 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2102      	movs	r1, #2
 800141c:	4887      	ldr	r0, [pc, #540]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800141e:	f001 fccb 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2104      	movs	r1, #4
 8001426:	4885      	ldr	r0, [pc, #532]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001428:	f001 fcc6 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2101      	movs	r1, #1
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f001 fcc0 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	2110      	movs	r1, #16
 800143c:	487f      	ldr	r0, [pc, #508]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800143e:	f001 fcbb 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	487d      	ldr	r0, [pc, #500]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001448:	f001 fcb6 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	487a      	ldr	r0, [pc, #488]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001452:	f001 fcb1 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 8001456:	e0e9      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f001 fca9 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	4874      	ldr	r0, [pc, #464]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800146c:	f001 fca4 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2104      	movs	r1, #4
 8001474:	4871      	ldr	r0, [pc, #452]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001476:	f001 fc9f 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800147a:	2201      	movs	r2, #1
 800147c:	2101      	movs	r1, #1
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f001 fc99 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	2110      	movs	r1, #16
 800148a:	486c      	ldr	r0, [pc, #432]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800148c:	f001 fc94 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	4869      	ldr	r0, [pc, #420]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001496:	f001 fc8f 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	4867      	ldr	r0, [pc, #412]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014a0:	f001 fc8a 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80014a4:	e0c2      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f001 fc82 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2102      	movs	r1, #2
 80014b8:	4860      	ldr	r0, [pc, #384]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014ba:	f001 fc7d 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2104      	movs	r1, #4
 80014c2:	485e      	ldr	r0, [pc, #376]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014c4:	f001 fc78 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2101      	movs	r1, #1
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f001 fc72 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2110      	movs	r1, #16
 80014d8:	4858      	ldr	r0, [pc, #352]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014da:	f001 fc6d 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	4856      	ldr	r0, [pc, #344]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014e4:	f001 fc68 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	4853      	ldr	r0, [pc, #332]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80014ee:	f001 fc63 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80014f2:	e09b      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f001 fc5b 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	2102      	movs	r1, #2
 8001506:	484d      	ldr	r0, [pc, #308]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001508:	f001 fc56 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2104      	movs	r1, #4
 8001510:	484a      	ldr	r0, [pc, #296]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001512:	f001 fc51 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2101      	movs	r1, #1
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f001 fc4b 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2110      	movs	r1, #16
 8001526:	4845      	ldr	r0, [pc, #276]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001528:	f001 fc46 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	4842      	ldr	r0, [pc, #264]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001532:	f001 fc41 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	4840      	ldr	r0, [pc, #256]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800153c:	f001 fc3c 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 8001540:	e074      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f001 fc34 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2102      	movs	r1, #2
 8001554:	4839      	ldr	r0, [pc, #228]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001556:	f001 fc2f 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2104      	movs	r1, #4
 800155e:	4837      	ldr	r0, [pc, #220]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001560:	f001 fc2a 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f001 fc24 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	2110      	movs	r1, #16
 8001574:	4831      	ldr	r0, [pc, #196]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001576:	f001 fc1f 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	482f      	ldr	r0, [pc, #188]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001580:	f001 fc1a 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	482c      	ldr	r0, [pc, #176]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800158a:	f001 fc15 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 800158e:	e04d      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f001 fc0d 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015a4:	f001 fc08 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	4823      	ldr	r0, [pc, #140]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015ae:	f001 fc03 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2101      	movs	r1, #1
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f001 fbfd 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	481e      	ldr	r0, [pc, #120]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015c4:	f001 fbf8 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	481b      	ldr	r0, [pc, #108]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015ce:	f001 fbf3 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	4819      	ldr	r0, [pc, #100]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015d8:	f001 fbee 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 80015dc:	e026      	b.n	800162c <app_NumeroA7Segmentos+0x6a4>
					HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f001 fbe6 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2102      	movs	r1, #2
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015f2:	f001 fbe1 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2104      	movs	r1, #4
 80015fa:	4810      	ldr	r0, [pc, #64]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 80015fc:	f001 fbdc 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2101      	movs	r1, #1
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f001 fbd6 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	480a      	ldr	r0, [pc, #40]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001612:	f001 fbd1 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2140      	movs	r1, #64	; 0x40
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 800161c:	f001 fbcc 	bl	8002db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <app_NumeroA7Segmentos+0x6b4>)
 8001626:	f001 fbc7 	bl	8002db8 <HAL_GPIO_WritePin>
				}break;
 800162a:	bf00      	nop
		}break;
 800162c:	e001      	b.n	8001632 <app_NumeroA7Segmentos+0x6aa>
		}break;
 800162e:	bf00      	nop
 8001630:	e000      	b.n	8001634 <app_NumeroA7Segmentos+0x6ac>
		}break;
 8001632:	bf00      	nop
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	48000800 	.word	0x48000800

08001640 <app_SeleccionDisplay>:

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display, uint8_t TipoDisplay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
	switch(TipoDisplay)
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <app_SeleccionDisplay+0x1e>
 8001656:	2b01      	cmp	r3, #1
 8001658:	f000 80b3 	beq.w	80017c2 <app_SeleccionDisplay+0x182>
		default:
		{

		}
	}
}
 800165c:	e166      	b.n	800192c <app_SeleccionDisplay+0x2ec>
			switch(Display)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b04      	cmp	r3, #4
 8001662:	f200 8160 	bhi.w	8001926 <app_SeleccionDisplay+0x2e6>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <app_SeleccionDisplay+0x2c>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001681 	.word	0x08001681
 8001670:	080016c1 	.word	0x080016c1
 8001674:	08001701 	.word	0x08001701
 8001678:	08001741 	.word	0x08001741
 800167c:	08001781 	.word	0x08001781
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f001 fb95 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2120      	movs	r1, #32
 8001692:	48a8      	ldr	r0, [pc, #672]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001694:	f001 fb90 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f001 fb89 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ac:	48a1      	ldr	r0, [pc, #644]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016ae:	f001 fb83 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b8:	489e      	ldr	r0, [pc, #632]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016ba:	f001 fb7d 	bl	8002db8 <HAL_GPIO_WritePin>
					}break;
 80016be:	e07f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f001 fb75 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2120      	movs	r1, #32
 80016d2:	4898      	ldr	r0, [pc, #608]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016d4:	f001 fb70 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 fb69 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ec:	4891      	ldr	r0, [pc, #580]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016ee:	f001 fb63 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	488e      	ldr	r0, [pc, #568]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80016fa:	f001 fb5d 	bl	8002db8 <HAL_GPIO_WritePin>
					}break;
 80016fe:	e05f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f001 fb55 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	4888      	ldr	r0, [pc, #544]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001714:	f001 fb50 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fb49 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172c:	4881      	ldr	r0, [pc, #516]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800172e:	f001 fb43 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001738:	487e      	ldr	r0, [pc, #504]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800173a:	f001 fb3d 	bl	8002db8 <HAL_GPIO_WritePin>
					}break;
 800173e:	e03f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f001 fb35 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2120      	movs	r1, #32
 8001752:	4878      	ldr	r0, [pc, #480]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001754:	f001 fb30 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f001 fb29 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176c:	4871      	ldr	r0, [pc, #452]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800176e:	f001 fb23 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001778:	486e      	ldr	r0, [pc, #440]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800177a:	f001 fb1d 	bl	8002db8 <HAL_GPIO_WritePin>
					}break;
 800177e:	e01f      	b.n	80017c0 <app_SeleccionDisplay+0x180>
						HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 fb15 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2120      	movs	r1, #32
 8001792:	4868      	ldr	r0, [pc, #416]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001794:	f001 fb10 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f001 fb09 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ac:	4861      	ldr	r0, [pc, #388]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80017ae:	f001 fb03 	bl	8002db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b8:	485e      	ldr	r0, [pc, #376]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80017ba:	f001 fafd 	bl	8002db8 <HAL_GPIO_WritePin>
		}break;
 80017be:	e0b2      	b.n	8001926 <app_SeleccionDisplay+0x2e6>
 80017c0:	e0b1      	b.n	8001926 <app_SeleccionDisplay+0x2e6>
			switch(Display)
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	f200 80b0 	bhi.w	800192a <app_SeleccionDisplay+0x2ea>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <app_SeleccionDisplay+0x190>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e5 	.word	0x080017e5
 80017d4:	08001825 	.word	0x08001825
 80017d8:	08001865 	.word	0x08001865
 80017dc:	080018a5 	.word	0x080018a5
 80017e0:	080018e5 	.word	0x080018e5
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ee:	f001 fae3 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2120      	movs	r1, #32
 80017f6:	484f      	ldr	r0, [pc, #316]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80017f8:	f001 fade 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f001 fad7 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001810:	4848      	ldr	r0, [pc, #288]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001812:	f001 fad1 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181c:	4845      	ldr	r0, [pc, #276]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800181e:	f001 facb 	bl	8002db8 <HAL_GPIO_WritePin>
						}break;
 8001822:	e07f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f001 fac3 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2120      	movs	r1, #32
 8001836:	483f      	ldr	r0, [pc, #252]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001838:	f001 fabe 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f001 fab7 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001850:	4838      	ldr	r0, [pc, #224]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001852:	f001 fab1 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185c:	4835      	ldr	r0, [pc, #212]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800185e:	f001 faab 	bl	8002db8 <HAL_GPIO_WritePin>
						}break;
 8001862:	e05f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f001 faa3 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 8001872:	2201      	movs	r2, #1
 8001874:	2120      	movs	r1, #32
 8001876:	482f      	ldr	r0, [pc, #188]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001878:	f001 fa9e 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f001 fa97 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001890:	4828      	ldr	r0, [pc, #160]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001892:	f001 fa91 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189c:	4825      	ldr	r0, [pc, #148]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800189e:	f001 fa8b 	bl	8002db8 <HAL_GPIO_WritePin>
						}break;
 80018a2:	e03f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f001 fa83 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2120      	movs	r1, #32
 80018b6:	481f      	ldr	r0, [pc, #124]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018b8:	f001 fa7e 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f001 fa77 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d0:	4818      	ldr	r0, [pc, #96]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018d2:	f001 fa71 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018dc:	4815      	ldr	r0, [pc, #84]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018de:	f001 fa6b 	bl	8002db8 <HAL_GPIO_WritePin>
						}break;
 80018e2:	e01f      	b.n	8001924 <app_SeleccionDisplay+0x2e4>
							HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f001 fa63 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2120      	movs	r1, #32
 80018f6:	480f      	ldr	r0, [pc, #60]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 80018f8:	f001 fa5e 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f001 fa57 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 8001912:	f001 fa51 	bl	8002db8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Display_4_GPIO_Port, Display_4_Pin, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <app_SeleccionDisplay+0x2f4>)
 800191e:	f001 fa4b 	bl	8002db8 <HAL_GPIO_WritePin>
						}break;
 8001922:	bf00      	nop
		}break;
 8001924:	e001      	b.n	800192a <app_SeleccionDisplay+0x2ea>
		}break;
 8001926:	bf00      	nop
 8001928:	e000      	b.n	800192c <app_SeleccionDisplay+0x2ec>
		}break;
 800192a:	bf00      	nop
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	48000400 	.word	0x48000400

08001938 <app_Despliegue>:

/* Separacion de numero en unidades, decenas, centenas ... */
void app_Despliegue(uint32_t Numero,uint8_t TipoDisplay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
	uint32_t Primero  =  Numero % 10;
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4ba0      	ldr	r3, [pc, #640]	; (8001bc8 <app_Despliegue+0x290>)
 8001948:	fba3 1302 	umull	r1, r3, r3, r2
 800194c:	08d9      	lsrs	r1, r3, #3
 800194e:	460b      	mov	r3, r1
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]
	uint32_t Segundo =  ( Numero - Primero ) % 100 / 10;
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	1ad2      	subs	r2, r2, r3
 8001960:	4b9a      	ldr	r3, [pc, #616]	; (8001bcc <app_Despliegue+0x294>)
 8001962:	fba3 1302 	umull	r1, r3, r3, r2
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2164      	movs	r1, #100	; 0x64
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a95      	ldr	r2, [pc, #596]	; (8001bc8 <app_Despliegue+0x290>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	61bb      	str	r3, [r7, #24]
	uint32_t Tercero  =  ( Numero - Primero - Segundo ) % 1000 / 100;
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad2      	subs	r2, r2, r3
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <app_Despliegue+0x298>)
 8001986:	fba3 1302 	umull	r1, r3, r3, r2
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4a8d      	ldr	r2, [pc, #564]	; (8001bcc <app_Despliegue+0x294>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	617b      	str	r3, [r7, #20]
	uint32_t Cuarto =  ( Numero - Primero - Segundo - Tercero ) % 10000 / 1000;
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	1ad2      	subs	r2, r2, r3
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <app_Despliegue+0x29c>)
 80019b0:	fba3 1302 	umull	r1, r3, r3, r2
 80019b4:	0b5b      	lsrs	r3, r3, #13
 80019b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a83      	ldr	r2, [pc, #524]	; (8001bd0 <app_Despliegue+0x298>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	613b      	str	r3, [r7, #16]
	uint32_t Quinto = (Numero - Primero - Segundo - Tercero - Cuarto) % 100000 / 10000;
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	1ad2      	subs	r2, r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	0953      	lsrs	r3, r2, #5
 80019de:	497e      	ldr	r1, [pc, #504]	; (8001bd8 <app_Despliegue+0x2a0>)
 80019e0:	fba1 1303 	umull	r1, r3, r1, r3
 80019e4:	09db      	lsrs	r3, r3, #7
 80019e6:	497d      	ldr	r1, [pc, #500]	; (8001bdc <app_Despliegue+0x2a4>)
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4a79      	ldr	r2, [pc, #484]	; (8001bd4 <app_Despliegue+0x29c>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0b5b      	lsrs	r3, r3, #13
 80019f6:	60fb      	str	r3, [r7, #12]
	if(TipoDisplay == Anodo)
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <app_Despliegue+0xd4>
	{
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a04:	4876      	ldr	r0, [pc, #472]	; (8001be0 <app_Despliegue+0x2a8>)
 8001a06:	f001 f9d7 	bl	8002db8 <HAL_GPIO_WritePin>
 8001a0a:	e008      	b.n	8001a1e <app_Despliegue+0xe6>
	}
	else if(TipoDisplay == Catodo)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <app_Despliegue+0xe6>
	{
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a18:	4871      	ldr	r0, [pc, #452]	; (8001be0 <app_Despliegue+0x2a8>)
 8001a1a:	f001 f9cd 	bl	8002db8 <HAL_GPIO_WritePin>
	}
//	delay_us(65);
	app_SeleccionDisplay(0, TipoDisplay);
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	4619      	mov	r1, r3
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fe0c 	bl	8001640 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Quinto,TipoDisplay);
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff faab 	bl	8000f88 <app_NumeroA7Segmentos>
	delay_us(55);
 8001a32:	2037      	movs	r0, #55	; 0x37
 8001a34:	f000 fa0a 	bl	8001e4c <delay_us>
	app_SeleccionDisplay(1, TipoDisplay);
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fdff 	bl	8001640 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Cuarto,TipoDisplay);
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	4619      	mov	r1, r3
 8001a46:	6938      	ldr	r0, [r7, #16]
 8001a48:	f7ff fa9e 	bl	8000f88 <app_NumeroA7Segmentos>
	delay_us(55);
 8001a4c:	2037      	movs	r0, #55	; 0x37
 8001a4e:	f000 f9fd 	bl	8001e4c <delay_us>
	app_SeleccionDisplay(2, TipoDisplay);
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	4619      	mov	r1, r3
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff fdf2 	bl	8001640 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Tercero,TipoDisplay);
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6978      	ldr	r0, [r7, #20]
 8001a62:	f7ff fa91 	bl	8000f88 <app_NumeroA7Segmentos>
	delay_us(55);
 8001a66:	2037      	movs	r0, #55	; 0x37
 8001a68:	f000 f9f0 	bl	8001e4c <delay_us>
	app_SeleccionDisplay(3, TipoDisplay);
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2003      	movs	r0, #3
 8001a72:	f7ff fde5 	bl	8001640 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Segundo,TipoDisplay);
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	69b8      	ldr	r0, [r7, #24]
 8001a7c:	f7ff fa84 	bl	8000f88 <app_NumeroA7Segmentos>
	delay_us(55);
 8001a80:	2037      	movs	r0, #55	; 0x37
 8001a82:	f000 f9e3 	bl	8001e4c <delay_us>
	app_SeleccionDisplay(4, TipoDisplay);
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2004      	movs	r0, #4
 8001a8c:	f7ff fdd8 	bl	8001640 <app_SeleccionDisplay>
	app_NumeroA7Segmentos(Primero,TipoDisplay);
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	4619      	mov	r1, r3
 8001a94:	69f8      	ldr	r0, [r7, #28]
 8001a96:	f7ff fa77 	bl	8000f88 <app_NumeroA7Segmentos>
	delay_us(55);
 8001a9a:	2037      	movs	r0, #55	; 0x37
 8001a9c:	f000 f9d6 	bl	8001e4c <delay_us>
	if(Bandera[0] == 1)
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <app_Despliegue+0x2ac>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d11f      	bne.n	8001ae8 <app_Despliegue+0x1b0>
	{
		app_SeleccionDisplay(0, TipoDisplay);
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fdc7 	bl	8001640 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Quinto,TipoDisplay);
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff fa66 	bl	8000f88 <app_NumeroA7Segmentos>
		if(TipoDisplay == Anodo)
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <app_Despliegue+0x198>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac8:	4845      	ldr	r0, [pc, #276]	; (8001be0 <app_Despliegue+0x2a8>)
 8001aca:	f001 f975 	bl	8002db8 <HAL_GPIO_WritePin>
 8001ace:	e008      	b.n	8001ae2 <app_Despliegue+0x1aa>
		}
		else if(TipoDisplay == Catodo)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d105      	bne.n	8001ae2 <app_Despliegue+0x1aa>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001adc:	4840      	ldr	r0, [pc, #256]	; (8001be0 <app_Despliegue+0x2a8>)
 8001ade:	f001 f96b 	bl	8002db8 <HAL_GPIO_WritePin>
		}

		delay_us(55);
 8001ae2:	2037      	movs	r0, #55	; 0x37
 8001ae4:	f000 f9b2 	bl	8001e4c <delay_us>
	}
	if(Bandera[1] == 1)
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <app_Despliegue+0x2ac>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11f      	bne.n	8001b30 <app_Despliegue+0x1f8>
	{
		app_SeleccionDisplay(1, TipoDisplay);
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	4619      	mov	r1, r3
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fda3 	bl	8001640 <app_SeleccionDisplay>
		if(TipoDisplay == Anodo)
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <app_Despliegue+0x1d6>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b06:	4836      	ldr	r0, [pc, #216]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b08:	f001 f956 	bl	8002db8 <HAL_GPIO_WritePin>
 8001b0c:	e008      	b.n	8001b20 <app_Despliegue+0x1e8>
		}
		else if(TipoDisplay == Catodo)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <app_Despliegue+0x1e8>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1a:	4831      	ldr	r0, [pc, #196]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b1c:	f001 f94c 	bl	8002db8 <HAL_GPIO_WritePin>
		}
		app_NumeroA7Segmentos(Cuarto,TipoDisplay);
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	4619      	mov	r1, r3
 8001b24:	6938      	ldr	r0, [r7, #16]
 8001b26:	f7ff fa2f 	bl	8000f88 <app_NumeroA7Segmentos>
		delay_us(55);
 8001b2a:	2037      	movs	r0, #55	; 0x37
 8001b2c:	f000 f98e 	bl	8001e4c <delay_us>
	}
	if(Bandera[2] == 1)
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <app_Despliegue+0x2ac>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d11f      	bne.n	8001b78 <app_Despliegue+0x240>
	{
		app_SeleccionDisplay(2, TipoDisplay);
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fd7f 	bl	8001640 <app_SeleccionDisplay>
		if(TipoDisplay == Anodo)
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <app_Despliegue+0x21e>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b4e:	4824      	ldr	r0, [pc, #144]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b50:	f001 f932 	bl	8002db8 <HAL_GPIO_WritePin>
 8001b54:	e008      	b.n	8001b68 <app_Despliegue+0x230>
		}
		else if(TipoDisplay == Catodo)
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <app_Despliegue+0x230>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b62:	481f      	ldr	r0, [pc, #124]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b64:	f001 f928 	bl	8002db8 <HAL_GPIO_WritePin>
		}
		app_NumeroA7Segmentos(Tercero,TipoDisplay);
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6978      	ldr	r0, [r7, #20]
 8001b6e:	f7ff fa0b 	bl	8000f88 <app_NumeroA7Segmentos>
		delay_us(55);
 8001b72:	2037      	movs	r0, #55	; 0x37
 8001b74:	f000 f96a 	bl	8001e4c <delay_us>
	}
	if(Bandera[3] == 1)
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <app_Despliegue+0x2ac>)
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d11f      	bne.n	8001bc0 <app_Despliegue+0x288>
	{
		app_SeleccionDisplay(3, TipoDisplay);
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	4619      	mov	r1, r3
 8001b84:	2003      	movs	r0, #3
 8001b86:	f7ff fd5b 	bl	8001640 <app_SeleccionDisplay>
		if(TipoDisplay == Anodo)
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d106      	bne.n	8001b9e <app_Despliegue+0x266>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <app_Despliegue+0x2a8>)
 8001b98:	f001 f90e 	bl	8002db8 <HAL_GPIO_WritePin>
 8001b9c:	e008      	b.n	8001bb0 <app_Despliegue+0x278>
		}
		else if(TipoDisplay == Catodo)
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <app_Despliegue+0x278>
		{
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <app_Despliegue+0x2a8>)
 8001bac:	f001 f904 	bl	8002db8 <HAL_GPIO_WritePin>
		}
		app_NumeroA7Segmentos(Segundo,TipoDisplay);
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	69b8      	ldr	r0, [r7, #24]
 8001bb6:	f7ff f9e7 	bl	8000f88 <app_NumeroA7Segmentos>
		delay_us(55);
 8001bba:	2037      	movs	r0, #55	; 0x37
 8001bbc:	f000 f946 	bl	8001e4c <delay_us>
	}



}
 8001bc0:	bf00      	nop
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	cccccccd 	.word	0xcccccccd
 8001bcc:	51eb851f 	.word	0x51eb851f
 8001bd0:	10624dd3 	.word	0x10624dd3
 8001bd4:	d1b71759 	.word	0xd1b71759
 8001bd8:	0a7c5ac5 	.word	0x0a7c5ac5
 8001bdc:	000186a0 	.word	0x000186a0
 8001be0:	48000800 	.word	0x48000800
 8001be4:	20000200 	.word	0x20000200

08001be8 <app_FloatADisplay>:

/* Conversion de datos flotantes a displays de 7 segmentos */
void app_FloatADisplay(float NumeroFlotante,uint8_t TipoDisplay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	70fb      	strb	r3, [r7, #3]
	volatile int Numero = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]


	if( (NumeroFlotante > 0.0) && (NumeroFlotante < 10.0))
 8001bfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	dd20      	ble.n	8001c4a <app_FloatADisplay+0x62>
 8001c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d517      	bpl.n	8001c4a <app_FloatADisplay+0x62>
		{
			Bandera[0] = 1;
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
			Bandera[1] = 0;
 8001c20:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
			Bandera[2] = 0;
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	709a      	strb	r2, [r3, #2]
			Bandera[3] = 0;
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	70da      	strb	r2, [r3, #3]
			Numero = NumeroFlotante * 10000;
 8001c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c36:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001d60 <app_FloatADisplay+0x178>
 8001c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c42:	ee17 3a90 	vmov	r3, s15
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e07c      	b.n	8001d44 <app_FloatADisplay+0x15c>
		}
	else if( (NumeroFlotante > 10.0) && (NumeroFlotante < 100.0)) //54.87
 8001c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	dd20      	ble.n	8001c9e <app_FloatADisplay+0xb6>
 8001c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c60:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001d64 <app_FloatADisplay+0x17c>
 8001c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d517      	bpl.n	8001c9e <app_FloatADisplay+0xb6>
		{
			Bandera[0] = 0;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
			Bandera[1] = 1;
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	705a      	strb	r2, [r3, #1]
			Bandera[2] = 0;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	709a      	strb	r2, [r3, #2]
			Bandera[3] = 0;
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <app_FloatADisplay+0x174>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	70da      	strb	r2, [r3, #3]
			Numero = NumeroFlotante * 1000; //5487
 8001c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001d68 <app_FloatADisplay+0x180>
 8001c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c96:	ee17 3a90 	vmov	r3, s15
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e052      	b.n	8001d44 <app_FloatADisplay+0x15c>
		}
	else if( (NumeroFlotante > 100.0) && (NumeroFlotante < 1000.0))
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001d64 <app_FloatADisplay+0x17c>
 8001ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dd20      	ble.n	8001cf2 <app_FloatADisplay+0x10a>
 8001cb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001d68 <app_FloatADisplay+0x180>
 8001cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d517      	bpl.n	8001cf2 <app_FloatADisplay+0x10a>
		{
			Bandera[0] = 0;
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <app_FloatADisplay+0x174>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
			Bandera[1] = 0;
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <app_FloatADisplay+0x174>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
			Bandera[2] = 1;
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <app_FloatADisplay+0x174>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	709a      	strb	r2, [r3, #2]
			Bandera[3] = 0;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <app_FloatADisplay+0x174>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	70da      	strb	r2, [r3, #3]
			Numero = NumeroFlotante * 100;
 8001cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cde:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d64 <app_FloatADisplay+0x17c>
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cea:	ee17 3a90 	vmov	r3, s15
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e028      	b.n	8001d44 <app_FloatADisplay+0x15c>
		}
	else if( (NumeroFlotante > 1000.0) && (NumeroFlotante < 10000.0))
 8001cf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001d68 <app_FloatADisplay+0x180>
 8001cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	dd1f      	ble.n	8001d44 <app_FloatADisplay+0x15c>
 8001d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d08:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d60 <app_FloatADisplay+0x178>
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	d516      	bpl.n	8001d44 <app_FloatADisplay+0x15c>
		{
			Bandera[0] = 0;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <app_FloatADisplay+0x174>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
			Bandera[1] = 0;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <app_FloatADisplay+0x174>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	705a      	strb	r2, [r3, #1]
			Bandera[2] = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <app_FloatADisplay+0x174>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	709a      	strb	r2, [r3, #2]
			Bandera[3] = 1;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <app_FloatADisplay+0x174>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	70da      	strb	r2, [r3, #3]
			Numero = NumeroFlotante * 10;
 8001d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3e:	ee17 3a90 	vmov	r3, s15
 8001d42:	60fb      	str	r3, [r7, #12]
		}
	app_Despliegue(Numero, TipoDisplay);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	461a      	mov	r2, r3
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f7ff fdf3 	bl	8001938 <app_Despliegue>

}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000200 	.word	0x20000200
 8001d60:	461c4000 	.word	0x461c4000
 8001d64:	42c80000 	.word	0x42c80000
 8001d68:	447a0000 	.word	0x447a0000
 8001d6c:	00000000 	.word	0x00000000

08001d70 <app_Dimmer>:
/* Libreria principal */
#include "app_DigitalDimmer.h"


void app_Dimmer(void)
{
 8001d70:	b598      	push	{r3, r4, r7, lr}
 8001d72:	af00      	add	r7, sp, #0


	 /* Variables locales en donde se guardara el tiempo */
	 static float Tiempo = 0, Angulo = 4;

	 switch(opcion)
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <app_Dimmer+0xa0>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <app_Dimmer+0x12>
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d028      	beq.n	8001dd2 <app_Dimmer+0x62>
 8001d80:	e036      	b.n	8001df0 <app_Dimmer+0x80>
			  {
				  /* Linea de tendencia determinadad mediante los dato capturados */
				  /* Convierte angulo de fase en tiempo, este tiempo es necesario para
				   * la correcta activacion del SCR */

				  Tiempo = (4.62962962e-5*Angulo)*1000000;
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <app_Dimmer+0xa4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbde 	bl	8000548 <__aeabi_f2d>
 8001d8c:	a31c      	add	r3, pc, #112	; (adr r3, 8001e00 <app_Dimmer+0x90>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fc31 	bl	80005f8 <__aeabi_dmul>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	a31a      	add	r3, pc, #104	; (adr r3, 8001e08 <app_Dimmer+0x98>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc28 	bl	80005f8 <__aeabi_dmul>
 8001da8:	4603      	mov	r3, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	4618      	mov	r0, r3
 8001dae:	4621      	mov	r1, r4
 8001db0:	f7fe ff1a 	bl	8000be8 <__aeabi_d2f>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <app_Dimmer+0xa8>)
 8001db8:	601a      	str	r2, [r3, #0]

				  /* Imprime la variable flotante Tiempo en el display de 7 segmentos */
				  app_FloatADisplay(Tiempo, Catodo);
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <app_Dimmer+0xa8>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	f7ff ff0f 	bl	8001be8 <app_FloatADisplay>

				  /* Pasa al siguiente estado */
				  opcion = Dimmer;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <app_Dimmer+0xa0>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001dd0:	e011      	b.n	8001df6 <app_Dimmer+0x86>
			  case Dimmer:
			  {
				  /* Envia la variable Tiempo a la funcion cruce por cero */
				  app_CruceCero(Tiempo);
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <app_Dimmer+0xa8>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ddc:	ee17 3a90 	vmov	r3, s15
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f878 	bl	8001ed8 <app_CruceCero>

				  /* Vuelve al estado inicial de la maquina de estados */
				  opcion = Ecuacion;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <app_Dimmer+0xa0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
			  }break;
 8001dee:	e002      	b.n	8001df6 <app_Dimmer+0x86>
			  default:
			  {
				  /* Declaracion del primer estado del dimmer */
				  opcion = Ecuacion;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <app_Dimmer+0xa0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
			  }
		  }
}
 8001df6:	bf00      	nop
 8001df8:	bd98      	pop	{r3, r4, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	9ff57a20 	.word	0x9ff57a20
 8001e04:	3f0845c8 	.word	0x3f0845c8
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	412e8480 	.word	0x412e8480
 8001e10:	20000218 	.word	0x20000218
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000204 	.word	0x20000204

08001e1c <delay_ms>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

void delay_ms(uint16_t ms)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
	/* Colocar el valor del contador a 0, seleccionar el timer que se desea usar */
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <delay_ms+0x2c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim2) < ms)
 8001e2e:	bf00      	nop
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <delay_ms+0x2c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3f9      	bcc.n	8001e30 <delay_ms+0x14>
	{}
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000258 	.word	0x20000258

08001e4c <delay_us>:

void delay_us(uint16_t us)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
	/* Selecciona el valor del Timer en 0, antes de iniciar */
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <delay_us+0x2c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim1) < us)
 8001e5e:	bf00      	nop
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <delay_us+0x2c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d3f9      	bcc.n	8001e60 <delay_us+0x14>
	{}
	/* Saldra del ciclo hasta que se complete el tiempo de la funcion antes mandada */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	200002ac 	.word	0x200002ac

08001e7c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
/* Variables globales */
Tipo cambio;
uint8_t Aumento = 0,Bandera_DetectorCero = 1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == Boton_encoder_Pin)
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e8c:	d112      	bne.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if(Aumento >= 6)
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x50>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d903      	bls.n	8001e9e <HAL_GPIO_EXTI_Callback+0x22>
		{
			Aumento = 0;
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x38>
		}
		else
		{
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ea4:	f000 ffa0 	bl	8002de8 <HAL_GPIO_TogglePin>
			Aumento++;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x50>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x50>)
 8001eb2:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_pin == DetectorCero_Pin)
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eba:	d102      	bne.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x46>
	{
		Bandera_DetectorCero = 0;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000208 	.word	0x20000208
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <app_CruceCero>:

void app_CruceCero(uint16_t Tiempo)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
	//app_Despliegue(Tiempo, Catodo);
	if(Bandera_DetectorCero == 0)
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <app_CruceCero+0x70>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d129      	bne.n	8001f3e <app_CruceCero+0x66>
	{
		if(Tiempo < 200)
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2bc7      	cmp	r3, #199	; 0xc7
 8001eee:	d806      	bhi.n	8001efe <app_CruceCero+0x26>
		{
			HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 1);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef6:	4815      	ldr	r0, [pc, #84]	; (8001f4c <app_CruceCero+0x74>)
 8001ef8:	f000 ff5e 	bl	8002db8 <HAL_GPIO_WritePin>
				delay_ms(1);
				HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 0);
				Bandera_DetectorCero = 1;
		}
	}
}
 8001efc:	e01f      	b.n	8001f3e <app_CruceCero+0x66>
		else if(Tiempo == 0)
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <app_CruceCero+0x3a>
			HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0a:	4810      	ldr	r0, [pc, #64]	; (8001f4c <app_CruceCero+0x74>)
 8001f0c:	f000 ff54 	bl	8002db8 <HAL_GPIO_WritePin>
}
 8001f10:	e015      	b.n	8001f3e <app_CruceCero+0x66>
				delay_us(Tiempo);
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff99 	bl	8001e4c <delay_us>
				HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 1);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	480a      	ldr	r0, [pc, #40]	; (8001f4c <app_CruceCero+0x74>)
 8001f22:	f000 ff49 	bl	8002db8 <HAL_GPIO_WritePin>
				delay_ms(1);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff ff78 	bl	8001e1c <delay_ms>
				HAL_GPIO_WritePin(Tiempo_GPIO_Port, Tiempo_Pin, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <app_CruceCero+0x74>)
 8001f34:	f000 ff40 	bl	8002db8 <HAL_GPIO_WritePin>
				Bandera_DetectorCero = 1;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <app_CruceCero+0x70>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	48000800 	.word	0x48000800

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f000 fc3b 	bl	80027ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f818 	bl	8001f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5c:	f000 f99a 	bl	8002294 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f60:	f000 f968 	bl	8002234 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001f64:	f000 f918 	bl	8002198 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8001f68:	f000 f88c 	bl	8002084 <MX_LPTIM1_Init>
  MX_TIM1_Init();
 8001f6c:	f000 f8c0 	bl	80020f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <main+0x34>)
 8001f72:	f002 fa1d 	bl	80043b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <main+0x38>)
 8001f78:	f002 fa1a 	bl	80043b0 <HAL_TIM_Base_Start_IT>



  while (1)
  {
	  app_Dimmer();
 8001f7c:	f7ff fef8 	bl	8001d70 <app_Dimmer>
 8001f80:	e7fc      	b.n	8001f7c <main+0x2c>
 8001f82:	bf00      	nop
 8001f84:	20000258 	.word	0x20000258
 8001f88:	200002ac 	.word	0x200002ac

08001f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0a4      	sub	sp, #144	; 0x90
 8001f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f96:	2244      	movs	r2, #68	; 0x44
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 faac 	bl	80054f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2234      	movs	r2, #52	; 0x34
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fa9e 	bl	80054f8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001fbc:	f001 f958 	bl	8003270 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <SystemClock_Config+0xf4>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <SystemClock_Config+0xf4>)
 8001fc8:	f023 0318 	bic.w	r3, r3, #24
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fd4:	f001 f96a 	bl	80032ac <HAL_PWREx_ControlVoltageScaling>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001fde:	f000 fa1f 	bl	8002420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001fe2:	2314      	movs	r3, #20
 8001fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fea:	2301      	movs	r3, #1
 8001fec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ff2:	2360      	movs	r3, #96	; 0x60
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002004:	2328      	movs	r3, #40	; 0x28
 8002006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002016:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800201a:	4618      	mov	r0, r3
 800201c:	f001 f99c 	bl	8003358 <HAL_RCC_OscConfig>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002026:	f000 f9fb 	bl	8002420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800202a:	230f      	movs	r3, #15
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202e:	2303      	movs	r3, #3
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800203e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002042:	2104      	movs	r1, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fded 	bl	8003c24 <HAL_RCC_ClockConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002050:	f000 f9e6 	bl	8002420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 8002054:	f240 2302 	movw	r3, #514	; 0x202
 8002058:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4618      	mov	r0, r3
 8002066:	f001 ffe1 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002070:	f000 f9d6 	bl	8002420 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002074:	f002 f960 	bl	8004338 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002078:	bf00      	nop
 800207a:	3790      	adds	r7, #144	; 0x90
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000

08002084 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <MX_LPTIM1_Init+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 800209c:	2204      	movs	r2, #4
 800209e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020a2:	2208      	movs	r2, #8
 80020a4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ac:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 200;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020d0:	22c8      	movs	r2, #200	; 0xc8
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_LPTIM1_Init+0x64>)
 80020d6:	f000 feb9 	bl	8002e4c <HAL_LPTIM_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_LPTIM1_Init+0x60>
  {
    Error_Handler();
 80020e0:	f000 f99e 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000021c 	.word	0x2000021c
 80020ec:	40007c00 	.word	0x40007c00

080020f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <MX_TIM1_Init+0xa0>)
 8002110:	4a20      	ldr	r2, [pc, #128]	; (8002194 <MX_TIM1_Init+0xa4>)
 8002112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <MX_TIM1_Init+0xa0>)
 8002116:	224f      	movs	r2, #79	; 0x4f
 8002118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <MX_TIM1_Init+0xa0>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <MX_TIM1_Init+0xa0>)
 8002122:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MX_TIM1_Init+0xa0>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_TIM1_Init+0xa0>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_TIM1_Init+0xa0>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800213a:	4815      	ldr	r0, [pc, #84]	; (8002190 <MX_TIM1_Init+0xa0>)
 800213c:	f002 f90c 	bl	8004358 <HAL_TIM_Base_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002146:	f000 f96b 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800214a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4619      	mov	r1, r3
 8002156:	480e      	ldr	r0, [pc, #56]	; (8002190 <MX_TIM1_Init+0xa0>)
 8002158:	f002 fa73 	bl	8004642 <HAL_TIM_ConfigClockSource>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002162:	f000 f95d 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <MX_TIM1_Init+0xa0>)
 8002178:	f002 fc4c 	bl	8004a14 <HAL_TIMEx_MasterConfigSynchronization>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002182:	f000 f94d 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200002ac 	.word	0x200002ac
 8002194:	40012c00 	.word	0x40012c00

08002198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <MX_TIM2_Init+0x98>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <MX_TIM2_Init+0x98>)
 80021c0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80021c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_TIM2_Init+0x98>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <MX_TIM2_Init+0x98>)
 80021ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_TIM2_Init+0x98>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <MX_TIM2_Init+0x98>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e0:	4813      	ldr	r0, [pc, #76]	; (8002230 <MX_TIM2_Init+0x98>)
 80021e2:	f002 f8b9 	bl	8004358 <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021ec:	f000 f918 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4619      	mov	r1, r3
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <MX_TIM2_Init+0x98>)
 80021fe:	f002 fa20 	bl	8004642 <HAL_TIM_ConfigClockSource>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002208:	f000 f90a 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_TIM2_Init+0x98>)
 800221a:	f002 fbfb 	bl	8004a14 <HAL_TIMEx_MasterConfigSynchronization>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002224:	f000 f8fc 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002228:	bf00      	nop
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000258 	.word	0x20000258

08002234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_USART2_UART_Init+0x58>)
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <MX_USART2_UART_Init+0x5c>)
 800223c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <MX_USART2_UART_Init+0x58>)
 8002240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_USART2_UART_Init+0x58>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <MX_USART2_UART_Init+0x58>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MX_USART2_UART_Init+0x58>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_USART2_UART_Init+0x58>)
 800225a:	220c      	movs	r2, #12
 800225c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <MX_USART2_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <MX_USART2_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <MX_USART2_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_USART2_UART_Init+0x58>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002276:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_USART2_UART_Init+0x58>)
 8002278:	f002 fc50 	bl	8004b1c <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002282:	f000 f8cd 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200002ec 	.word	0x200002ec
 8002290:	40004400 	.word	0x40004400

08002294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	4b58      	ldr	r3, [pc, #352]	; (800240c <MX_GPIO_Init+0x178>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	4a57      	ldr	r2, [pc, #348]	; (800240c <MX_GPIO_Init+0x178>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b6:	4b55      	ldr	r3, [pc, #340]	; (800240c <MX_GPIO_Init+0x178>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c2:	4b52      	ldr	r3, [pc, #328]	; (800240c <MX_GPIO_Init+0x178>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4a51      	ldr	r2, [pc, #324]	; (800240c <MX_GPIO_Init+0x178>)
 80022c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4b4f      	ldr	r3, [pc, #316]	; (800240c <MX_GPIO_Init+0x178>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	4b4c      	ldr	r3, [pc, #304]	; (800240c <MX_GPIO_Init+0x178>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a4b      	ldr	r2, [pc, #300]	; (800240c <MX_GPIO_Init+0x178>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <MX_GPIO_Init+0x178>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	4b46      	ldr	r3, [pc, #280]	; (800240c <MX_GPIO_Init+0x178>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a45      	ldr	r2, [pc, #276]	; (800240c <MX_GPIO_Init+0x178>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <MX_GPIO_Init+0x178>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 800230a:	2200      	movs	r2, #0
 800230c:	f640 11d6 	movw	r1, #2518	; 0x9d6
 8002310:	483f      	ldr	r0, [pc, #252]	; (8002410 <MX_GPIO_Init+0x17c>)
 8002312:	f000 fd51 	bl	8002db8 <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin|Tiempo_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8002316:	2200      	movs	r2, #0
 8002318:	f249 1131 	movw	r1, #37169	; 0x9131
 800231c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002320:	f000 fd4a 	bl	8002db8 <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_3_Pin|LD4_Pin|Display_4_Pin|Display_1_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f24a 4120 	movw	r1, #42016	; 0xa420
 800232a:	483a      	ldr	r0, [pc, #232]	; (8002414 <MX_GPIO_Init+0x180>)
 800232c:	f000 fd44 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin Tiempo_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8002330:	f640 13d6 	movw	r3, #2518	; 0x9d6
 8002334:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin|Tiempo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	4831      	ldr	r0, [pc, #196]	; (8002410 <MX_GPIO_Init+0x17c>)
 800234a:	f000 fbc3 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 800234e:	f249 1331 	movw	r3, #37169	; 0x9131
 8002352:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236a:	f000 fbb3 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_3_Pin LD4_Pin Display_4_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Display_3_Pin|LD4_Pin|Display_4_Pin|Display_1_Pin;
 800236e:	f24a 4320 	movw	r3, #42016	; 0xa420
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4823      	ldr	r0, [pc, #140]	; (8002414 <MX_GPIO_Init+0x180>)
 8002388:	f000 fba4 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DetectorCero_Pin */
  GPIO_InitStruct.Pin = DetectorCero_Pin;
 800238c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002392:	4b21      	ldr	r3, [pc, #132]	; (8002418 <MX_GPIO_Init+0x184>)
 8002394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DetectorCero_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	481b      	ldr	r0, [pc, #108]	; (8002410 <MX_GPIO_Init+0x17c>)
 80023a2:	f000 fb97 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 80023a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <MX_GPIO_Init+0x17c>)
 80023bc:	f000 fb8a 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 80023c0:	2340      	movs	r3, #64	; 0x40
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4810      	ldr	r0, [pc, #64]	; (8002414 <MX_GPIO_Init+0x180>)
 80023d4:	f000 fb7e 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_encoder_Pin */
  GPIO_InitStruct.Pin = Boton_encoder_Pin;
 80023d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_GPIO_Init+0x188>)
 80023e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_encoder_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4809      	ldr	r0, [pc, #36]	; (8002414 <MX_GPIO_Init+0x180>)
 80023ee:	f000 fb71 	bl	8002ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2017      	movs	r0, #23
 80023f8:	f000 fb35 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023fc:	2017      	movs	r0, #23
 80023fe:	f000 fb4e 	bl	8002a9e <HAL_NVIC_EnableIRQ>

}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	48000800 	.word	0x48000800
 8002414:	48000400 	.word	0x48000400
 8002418:	10210000 	.word	0x10210000
 800241c:	10110000 	.word	0x10110000

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_MspInit+0x44>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_MspInit+0x44>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6613      	str	r3, [r2, #96]	; 0x60
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_MspInit+0x44>)
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_MspInit+0x44>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_MspInit+0x44>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_MspInit+0x44>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_LPTIM_MspInit+0xb4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d143      	bne.n	8002522 <HAL_LPTIM_MspInit+0xaa>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_LPTIM_MspInit+0xb8>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration    
    PC0     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <HAL_LPTIM_MspInit+0xbc>)
 80024fe:	f000 fae9 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002512:	2301      	movs	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4806      	ldr	r0, [pc, #24]	; (8002538 <HAL_LPTIM_MspInit+0xc0>)
 800251e:	f000 fad9 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40007c00 	.word	0x40007c00
 8002530:	40021000 	.word	0x40021000
 8002534:	48000800 	.word	0x48000800
 8002538:	48000400 	.word	0x48000400

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10c      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002558:	6613      	str	r3, [r2, #96]	; 0x60
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002566:	e018      	b.n	800259a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d113      	bne.n	800259a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	201c      	movs	r0, #28
 8002590:	f000 fa69 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002594:	201c      	movs	r0, #28
 8002596:	f000 fa82 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_UART_MspInit+0x7c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d128      	bne.n	8002620 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_UART_MspInit+0x80>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_UART_MspInit+0x80>)
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	6593      	str	r3, [r2, #88]	; 0x58
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_UART_MspInit+0x80>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_UART_MspInit+0x80>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_UART_MspInit+0x80>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_UART_MspInit+0x80>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025fe:	230c      	movs	r3, #12
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260e:	2307      	movs	r3, #7
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261c:	f000 fa5a 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40004400 	.word	0x40004400
 800262c:	40021000 	.word	0x40021000

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <HardFault_Handler+0x4>

08002644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <MemManage_Handler+0x4>

0800264a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264e:	e7fe      	b.n	800264e <BusFault_Handler+0x4>

08002650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002654:	e7fe      	b.n	8002654 <UsageFault_Handler+0x4>

08002656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002684:	f000 f8f6 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}

0800268c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002690:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002694:	f000 fbc2 	bl	8002e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002698:	f44f 7000 	mov.w	r0, #512	; 0x200
 800269c:	f000 fbbe 	bl	8002e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM2_IRQHandler+0x10>)
 80026aa:	f001 feab 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000258 	.word	0x20000258

080026b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x50>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <_sbrk+0x16>
		heap_end = &end;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <_sbrk+0x50>)
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <_sbrk+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <_sbrk+0x50>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <_sbrk+0x50>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	466a      	mov	r2, sp
 80026de:	4293      	cmp	r3, r2
 80026e0:	d907      	bls.n	80026f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026e2:	f002 fedf 	bl	80054a4 <__errno>
 80026e6:	4602      	mov	r2, r0
 80026e8:	230c      	movs	r3, #12
 80026ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f0:	e006      	b.n	8002700 <_sbrk+0x48>
	}

	heap_end += incr;
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <_sbrk+0x50>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a03      	ldr	r2, [pc, #12]	; (8002708 <_sbrk+0x50>)
 80026fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	2000020c 	.word	0x2000020c
 800270c:	20000378 	.word	0x20000378

08002710 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <SystemInit+0x64>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <SystemInit+0x64>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <SystemInit+0x68>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <SystemInit+0x68>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <SystemInit+0x68>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <SystemInit+0x68>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <SystemInit+0x68>)
 800273c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002740:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002744:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <SystemInit+0x68>)
 8002748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800274c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <SystemInit+0x68>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <SystemInit+0x68>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <SystemInit+0x68>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SystemInit+0x64>)
 8002762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002766:	609a      	str	r2, [r3, #8]
#endif
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00
 8002778:	40021000 	.word	0x40021000

0800277c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800277c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002780:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002782:	e003      	b.n	800278c <LoopCopyDataInit>

08002784 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002786:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002788:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800278a:	3104      	adds	r1, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800278c:	480b      	ldr	r0, [pc, #44]	; (80027bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002790:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002792:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002794:	d3f6      	bcc.n	8002784 <CopyDataInit>
	ldr	r2, =_sbss
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002798:	e002      	b.n	80027a0 <LoopFillZerobss>

0800279a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800279a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800279c:	f842 3b04 	str.w	r3, [r2], #4

080027a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <LoopForever+0x16>)
	cmp	r2, r3
 80027a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027a4:	d3f9      	bcc.n	800279a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027a6:	f7ff ffb3 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027aa:	f002 fe81 	bl	80054b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ae:	f7ff fbcf 	bl	8001f50 <main>

080027b2 <LoopForever>:

LoopForever:
    b LoopForever
 80027b2:	e7fe      	b.n	80027b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027b4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80027b8:	080092a0 	.word	0x080092a0
	ldr	r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027c0:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80027c4:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 80027c8:	20000378 	.word	0x20000378

080027cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC1_2_IRQHandler>

080027ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 f939 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 f80e 	bl	8002800 <HAL_InitTick>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	e001      	b.n	80027f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f0:	f7ff fe1e 	bl	8002430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_InitTick+0x68>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_InitTick+0x6c>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_InitTick+0x68>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002820:	fbb1 f3f3 	udiv	r3, r1, r3
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f946 	bl	8002aba <HAL_SYSTICK_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	d809      	bhi.n	800284e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800283a:	2200      	movs	r2, #0
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002842:	f000 f910 	bl	8002a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_InitTick+0x70>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e007      	b.n	800285e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	e004      	b.n	800285e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e001      	b.n	800285e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000010 	.word	0x20000010
 800286c:	20000008 	.word	0x20000008
 8002870:	2000000c 	.word	0x2000000c

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_IncTick+0x1c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_IncTick+0x20>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4413      	add	r3, r2
 8002882:	4a03      	ldr	r2, [pc, #12]	; (8002890 <HAL_IncTick+0x1c>)
 8002884:	6013      	str	r3, [r2, #0]
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	20000370 	.word	0x20000370
 8002894:	20000010 	.word	0x20000010

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000370 	.word	0x20000370

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae2:	e14e      	b.n	8002d82 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8140 	beq.w	8002d7c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d00b      	beq.n	8002b1c <HAL_GPIO_Init+0x48>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d007      	beq.n	8002b1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b10:	2b11      	cmp	r3, #17
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d130      	bne.n	8002b7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b52:	2201      	movs	r2, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 0201 	and.w	r2, r3, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0xea>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b12      	cmp	r3, #18
 8002bbc:	d123      	bne.n	8002c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	6939      	ldr	r1, [r7, #16]
 8002c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	2203      	movs	r2, #3
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0203 	and.w	r2, r3, #3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 809a 	beq.w	8002d7c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <HAL_GPIO_Init+0x2cc>)
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	4a54      	ldr	r2, [pc, #336]	; (8002da0 <HAL_GPIO_Init+0x2cc>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6613      	str	r3, [r2, #96]	; 0x60
 8002c54:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_GPIO_Init+0x2cc>)
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c8a:	d013      	beq.n	8002cb4 <HAL_GPIO_Init+0x1e0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <HAL_GPIO_Init+0x2d4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1dc>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a45      	ldr	r2, [pc, #276]	; (8002dac <HAL_GPIO_Init+0x2d8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1d8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a44      	ldr	r2, [pc, #272]	; (8002db0 <HAL_GPIO_Init+0x2dc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1d4>
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_Init+0x1e2>
 8002ca8:	2307      	movs	r3, #7
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_Init+0x1e2>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0x1e2>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_Init+0x1e2>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc6:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cd4:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cf8:	4a2e      	ldr	r2, [pc, #184]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d22:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d4c:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f aea9 	bne.w	8002ae4 <HAL_GPIO_Init+0x10>
  }
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40010000 	.word	0x40010000
 8002da8:	48000400 	.word	0x48000400
 8002dac:	48000800 	.word	0x48000800
 8002db0:	48000c00 	.word	0x48000c00
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f81e 	bl	8001e7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40010400 	.word	0x40010400

08002e4c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0a7      	b.n	8002fae <HAL_LPTIM_Init+0x162>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fb00 	bl	8002478 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e98:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8002ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f897 	bl	8002fdc <LPTIM_WaitForFlag>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d101      	bne.n	8002eb8 <HAL_LPTIM_Init+0x6c>
  {
    return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e07a      	b.n	8002fae <HAL_LPTIM_Init+0x162>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8bf 	bl	800303c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f87e 	bl	8002fc0 <HAL_LPTIM_GetState>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d101      	bne.n	8002ece <HAL_LPTIM_Init+0x82>
  {
    return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e06f      	b.n	8002fae <HAL_LPTIM_Init+0x162>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d004      	beq.n	8002ee8 <HAL_LPTIM_Init+0x9c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ee6:	d103      	bne.n	8002ef0 <HAL_LPTIM_Init+0xa4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 031e 	bic.w	r3, r3, #30
 8002eee:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d005      	beq.n	8002f08 <HAL_LPTIM_Init+0xbc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_LPTIM_Init+0x16c>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002f18:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002f1e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002f24:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002f2a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d004      	beq.n	8002f44 <HAL_LPTIM_Init+0xf8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f42:	d107      	bne.n	8002f54 <HAL_LPTIM_Init+0x108>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00a      	beq.n	8002f76 <HAL_LPTIM_Init+0x12a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002f68:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002f6e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <HAL_LPTIM_Init+0x170>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <HAL_LPTIM_Init+0x14e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	621a      	str	r2, [r3, #32]
 8002f98:	e004      	b.n	8002fa4 <HAL_LPTIM_Init+0x158>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fa2:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	ff19f1f8 	.word	0xff19f1f8
 8002fbc:	40007c00 	.word	0x40007c00

08002fc0 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fce:	b2db      	uxtb	r3, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <LPTIM_WaitForFlag+0x58>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <LPTIM_WaitForFlag+0x5c>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	0b9b      	lsrs	r3, r3, #14
 8002ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	60bb      	str	r3, [r7, #8]
    do
    {
      count--;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	3b01      	subs	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <LPTIM_WaitForFlag+0x34>
      {
        result = HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	73fb      	strb	r3, [r7, #15]
      }
    }
    while((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4013      	ands	r3, r2
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d002      	beq.n	8003026 <LPTIM_WaitForFlag+0x4a>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ec      	bne.n	8003000 <LPTIM_WaitForFlag+0x24>

    return result;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000008 	.word	0x20000008
 8003038:	d1b71759 	.word	0xd1b71759

0800303c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003048:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a85      	ldr	r2, [pc, #532]	; (8003264 <LPTIM_Disable+0x228>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <LPTIM_Disable+0x20>
 8003054:	4a84      	ldr	r2, [pc, #528]	; (8003268 <LPTIM_Disable+0x22c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <LPTIM_Disable+0x2e>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 800305a:	e00d      	b.n	8003078 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800305c:	4b83      	ldr	r3, [pc, #524]	; (800326c <LPTIM_Disable+0x230>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003068:	e006      	b.n	8003078 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800306a:	4b80      	ldr	r3, [pc, #512]	; (800326c <LPTIM_Disable+0x230>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003076:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6d      	ldr	r2, [pc, #436]	; (8003264 <LPTIM_Disable+0x228>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <LPTIM_Disable+0x7e>
 80030b2:	4a6d      	ldr	r2, [pc, #436]	; (8003268 <LPTIM_Disable+0x22c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00d      	beq.n	80030d4 <LPTIM_Disable+0x98>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 80030b8:	e019      	b.n	80030ee <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 80030ba:	4b6c      	ldr	r3, [pc, #432]	; (800326c <LPTIM_Disable+0x230>)
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	4a6b      	ldr	r2, [pc, #428]	; (800326c <LPTIM_Disable+0x230>)
 80030c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030c4:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 80030c6:	4b69      	ldr	r3, [pc, #420]	; (800326c <LPTIM_Disable+0x230>)
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	4a68      	ldr	r2, [pc, #416]	; (800326c <LPTIM_Disable+0x230>)
 80030cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 80030d2:	e00c      	b.n	80030ee <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM2_FORCE_RESET();
 80030d4:	4b65      	ldr	r3, [pc, #404]	; (800326c <LPTIM_Disable+0x230>)
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	4a64      	ldr	r2, [pc, #400]	; (800326c <LPTIM_Disable+0x230>)
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	63d3      	str	r3, [r2, #60]	; 0x3c
       __HAL_RCC_LPTIM2_RELEASE_RESET();
 80030e0:	4b62      	ldr	r3, [pc, #392]	; (800326c <LPTIM_Disable+0x230>)
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	4a61      	ldr	r2, [pc, #388]	; (800326c <LPTIM_Disable+0x230>)
 80030e6:	f023 0320 	bic.w	r3, r3, #32
 80030ea:	63d3      	str	r3, [r2, #60]	; 0x3c
       break;
 80030ec:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <LPTIM_Disable+0xc6>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <LPTIM_Disable+0xc6>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8096 	beq.w	800322e <LPTIM_Disable+0x1f2>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a57      	ldr	r2, [pc, #348]	; (8003264 <LPTIM_Disable+0x228>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <LPTIM_Disable+0xd8>
 800310c:	4a56      	ldr	r2, [pc, #344]	; (8003268 <LPTIM_Disable+0x22c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <LPTIM_Disable+0xea>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003112:	e011      	b.n	8003138 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003114:	4b55      	ldr	r3, [pc, #340]	; (800326c <LPTIM_Disable+0x230>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	4a54      	ldr	r2, [pc, #336]	; (800326c <LPTIM_Disable+0x230>)
 800311c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8003124:	e008      	b.n	8003138 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8003126:	4b51      	ldr	r3, [pc, #324]	; (800326c <LPTIM_Disable+0x230>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	4a4f      	ldr	r2, [pc, #316]	; (800326c <LPTIM_Disable+0x230>)
 800312e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003132:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 8003136:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01a      	beq.n	8003174 <LPTIM_Disable+0x138>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003156:	2108      	movs	r1, #8
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff3f 	bl	8002fdc <LPTIM_WaitForFlag>
 800315e:	4603      	mov	r3, r0
 8003160:	2b03      	cmp	r3, #3
 8003162:	d103      	bne.n	800316c <LPTIM_Disable+0x130>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01a      	beq.n	80031b0 <LPTIM_Disable+0x174>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003192:	2110      	movs	r1, #16
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff21 	bl	8002fdc <LPTIM_WaitForFlag>
 800319a:	4603      	mov	r3, r0
 800319c:	2b03      	cmp	r3, #3
 800319e:	d103      	bne.n	80031a8 <LPTIM_Disable+0x16c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2210      	movs	r2, #16
 80031ae:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01c      	beq.n	80031f0 <LPTIM_Disable+0x1b4>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80031ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff02 	bl	8002fdc <LPTIM_WaitForFlag>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d103      	bne.n	80031e6 <LPTIM_Disable+0x1aa>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ee:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <LPTIM_Disable+0x228>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <LPTIM_Disable+0x1c6>
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <LPTIM_Disable+0x22c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00b      	beq.n	8003218 <LPTIM_Disable+0x1dc>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003200:	e016      	b.n	8003230 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <LPTIM_Disable+0x230>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800320c:	4917      	ldr	r1, [pc, #92]	; (800326c <LPTIM_Disable+0x230>)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 8003216:	e00b      	b.n	8003230 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <LPTIM_Disable+0x230>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003222:	4912      	ldr	r1, [pc, #72]	; (800326c <LPTIM_Disable+0x230>)
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 800322c:	e000      	b.n	8003230 <LPTIM_Disable+0x1f4>
    }
  }
 800322e:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8003258:	b662      	cpsie	i

  __enable_irq();
}
 800325a:	bf00      	nop
 800325c:	3728      	adds	r7, #40	; 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40007c00 	.word	0x40007c00
 8003268:	40009400 	.word	0x40009400
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40007000 	.word	0x40007000

08003290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40007000 	.word	0x40007000

080032ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ba:	d130      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032bc:	4b23      	ldr	r3, [pc, #140]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c8:	d038      	beq.n	800333c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2232      	movs	r2, #50	; 0x32
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0c9b      	lsrs	r3, r3, #18
 80032ec:	3301      	adds	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f0:	e002      	b.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003304:	d102      	bne.n	800330c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f2      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003318:	d110      	bne.n	800333c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e00f      	b.n	800333e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	d007      	beq.n	800333c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003334:	4a05      	ldr	r2, [pc, #20]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40007000 	.word	0x40007000
 8003350:	20000008 	.word	0x20000008
 8003354:	431bde83 	.word	0x431bde83

08003358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f000 bc56 	b.w	8003c18 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336c:	4ba1      	ldr	r3, [pc, #644]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003376:	4b9f      	ldr	r3, [pc, #636]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80e6 	beq.w	800355a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4c>
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	f040 808d 	bne.w	80034b6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 8089 	bne.w	80034b6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a4:	4b93      	ldr	r3, [pc, #588]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <HAL_RCC_OscConfig+0x66>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f000 bc2d 	b.w	8003c18 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c2:	4b8c      	ldr	r3, [pc, #560]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <HAL_RCC_OscConfig+0x80>
 80033ce:	4b89      	ldr	r3, [pc, #548]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d6:	e005      	b.n	80033e4 <HAL_RCC_OscConfig+0x8c>
 80033d8:	4b86      	ldr	r3, [pc, #536]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d224      	bcs.n	8003432 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fdbd 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f000 bc0d 	b.w	8003c18 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fe:	4b7d      	ldr	r3, [pc, #500]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7c      	ldr	r2, [pc, #496]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b7a      	ldr	r3, [pc, #488]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	4977      	ldr	r1, [pc, #476]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341c:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	4972      	ldr	r1, [pc, #456]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
 8003430:	e025      	b.n	800347e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003432:	4b70      	ldr	r3, [pc, #448]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6f      	ldr	r2, [pc, #444]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	496a      	ldr	r1, [pc, #424]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003450:	4b68      	ldr	r3, [pc, #416]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	4965      	ldr	r1, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fd7c 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e3cc      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800347e:	f000 fcb3 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003482:	4601      	mov	r1, r0
 8003484:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_RCC_OscConfig+0x2a0>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa21 f303 	lsr.w	r3, r1, r3
 800349a:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_RCC_OscConfig+0x2a4>)
 800349c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800349e:	4b58      	ldr	r3, [pc, #352]	; (8003600 <HAL_RCC_OscConfig+0x2a8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f9ac 	bl	8002800 <HAL_InitTick>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d052      	beq.n	8003558 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	e3b0      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d032      	beq.n	8003524 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034be:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ca:	f7ff f9e5 	bl	8002898 <HAL_GetTick>
 80034ce:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d2:	f7ff f9e1 	bl	8002898 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e399      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3f      	ldr	r2, [pc, #252]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	493a      	ldr	r1, [pc, #232]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	4935      	ldr	r1, [pc, #212]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	e01a      	b.n	800355a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003524:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a32      	ldr	r2, [pc, #200]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003530:	f7ff f9b2 	bl	8002898 <HAL_GetTick>
 8003534:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003538:	f7ff f9ae 	bl	8002898 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e366      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e0>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d073      	beq.n	800364e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x220>
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d10e      	bne.n	8003590 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d063      	beq.n	800364c <HAL_RCC_OscConfig+0x2f4>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d15f      	bne.n	800364c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e343      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x250>
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0x28c>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x274>
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0x28c>
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <HAL_RCC_OscConfig+0x29c>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7ff f954 	bl	8002898 <HAL_GetTick>
 80035f0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f2:	e010      	b.n	8003616 <HAL_RCC_OscConfig+0x2be>
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08008f90 	.word	0x08008f90
 80035fc:	20000008 	.word	0x20000008
 8003600:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff f948 	bl	8002898 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e300      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003616:	4ba0      	ldr	r3, [pc, #640]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x2ac>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7ff f938 	bl	8002898 <HAL_GetTick>
 8003628:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7ff f934 	bl	8002898 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e2ec      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363e:	4b96      	ldr	r3, [pc, #600]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x2d4>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d060      	beq.n	800371c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d005      	beq.n	800366c <HAL_RCC_OscConfig+0x314>
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d119      	bne.n	800369a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d116      	bne.n	800369a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	4b8a      	ldr	r3, [pc, #552]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_OscConfig+0x32c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e2c9      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b84      	ldr	r3, [pc, #528]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	4981      	ldr	r1, [pc, #516]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003698:	e040      	b.n	800371c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d023      	beq.n	80036ea <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a2:	4b7d      	ldr	r3, [pc, #500]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7c      	ldr	r2, [pc, #496]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7ff f8f3 	bl	8002898 <HAL_GetTick>
 80036b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7ff f8ef 	bl	8002898 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e2a7      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c8:	4b73      	ldr	r3, [pc, #460]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b70      	ldr	r3, [pc, #448]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	496d      	ldr	r1, [pc, #436]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	e018      	b.n	800371c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b6b      	ldr	r3, [pc, #428]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6a      	ldr	r2, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80036f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff f8cf 	bl	8002898 <HAL_GetTick>
 80036fa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff f8cb 	bl	8002898 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e283      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d07f      	beq.n	8003828 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d05f      	beq.n	80037f0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	429a      	cmp	r2, r3
 8003744:	d037      	beq.n	80037b6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d006      	beq.n	800375e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e25c      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376e:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003778:	f7ff f88e 	bl	8002898 <HAL_GetTick>
 800377c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7ff f88a 	bl	8002898 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b11      	cmp	r3, #17
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e242      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ef      	bne.n	8003780 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80037a0:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80037a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a6:	f023 0210 	bic.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	493a      	ldr	r1, [pc, #232]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80037b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037bc:	4a36      	ldr	r2, [pc, #216]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7ff f867 	bl	8002898 <HAL_GetTick>
 80037ca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ce:	f7ff f863 	bl	8002898 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b11      	cmp	r3, #17
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e21b      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ef      	beq.n	80037ce <HAL_RCC_OscConfig+0x476>
 80037ee:	e01b      	b.n	8003828 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f0:	4b29      	ldr	r3, [pc, #164]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	4a28      	ldr	r2, [pc, #160]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7ff f84a 	bl	8002898 <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7ff f846 	bl	8002898 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b11      	cmp	r3, #17
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1fe      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ef      	bne.n	8003808 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80c1 	beq.w	80039b8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800383c:	4b16      	ldr	r3, [pc, #88]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10e      	bne.n	8003866 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	4a12      	ldr	r2, [pc, #72]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	6593      	str	r3, [r2, #88]	; 0x58
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_RCC_OscConfig+0x540>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_RCC_OscConfig+0x544>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11c      	bne.n	80038ac <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCC_OscConfig+0x544>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a09      	ldr	r2, [pc, #36]	; (800389c <HAL_RCC_OscConfig+0x544>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7ff f80b 	bl	8002898 <HAL_GetTick>
 8003882:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	e00c      	b.n	80038a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7ff f807 	bl	8002898 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d905      	bls.n	80038a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e1bf      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a0:	4bb1      	ldr	r3, [pc, #708]	; (8003b68 <HAL_RCC_OscConfig+0x810>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ec      	beq.n	8003886 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d02c      	beq.n	8003912 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80038b8:	4bac      	ldr	r3, [pc, #688]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	49a8      	ldr	r1, [pc, #672]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038de:	4ba3      	ldr	r3, [pc, #652]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	4aa1      	ldr	r2, [pc, #644]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038ee:	4b9f      	ldr	r3, [pc, #636]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	4a9d      	ldr	r2, [pc, #628]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038fe:	e018      	b.n	8003932 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003900:	4b9a      	ldr	r3, [pc, #616]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a99      	ldr	r2, [pc, #612]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003910:	e00f      	b.n	8003932 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003912:	4b96      	ldr	r3, [pc, #600]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	4a94      	ldr	r2, [pc, #592]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003922:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	4a90      	ldr	r2, [pc, #576]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 800392a:	f023 0304 	bic.w	r3, r3, #4
 800392e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fe ffad 	bl	8002898 <HAL_GetTick>
 800393e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fe ffa9 	bl	8002898 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e15f      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003958:	4b84      	ldr	r3, [pc, #528]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ed      	beq.n	8003942 <HAL_RCC_OscConfig+0x5ea>
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fe ff96 	bl	8002898 <HAL_GetTick>
 800396c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fe ff92 	bl	8002898 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e148      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003986:	4b79      	ldr	r3, [pc, #484]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ed      	bne.n	8003970 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003994:	4b75      	ldr	r3, [pc, #468]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a74      	ldr	r2, [pc, #464]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 800399c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01c      	beq.n	8003a06 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039cc:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80039ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d2:	4a66      	ldr	r2, [pc, #408]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe ff5c 	bl	8002898 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e4:	f7fe ff58 	bl	8002898 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e110      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 80039f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <HAL_RCC_OscConfig+0x68c>
 8003a04:	e01b      	b.n	8003a3e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a06:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0c:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe ff3f 	bl	8002898 <HAL_GetTick>
 8003a1a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a1e:	f7fe ff3b 	bl	8002898 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e0f3      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a30:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ef      	bne.n	8003a1e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80e7 	beq.w	8003c16 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	f040 80b7 	bne.w	8003bc0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a52:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0203 	and.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d124      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	3b01      	subs	r3, #1
 8003a72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d11b      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d113      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d061      	beq.n	8003b74 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d056      	beq.n	8003b64 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac2:	f7fe fee9 	bl	8002898 <HAL_GetTick>
 8003ac6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aca:	f7fe fee5 	bl	8002898 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e09d      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f0      	bne.n	8003aca <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_OscConfig+0x818>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b02:	0212      	lsls	r2, r2, #8
 8003b04:	4311      	orrs	r1, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b0a:	0852      	lsrs	r2, r2, #1
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0552      	lsls	r2, r2, #21
 8003b10:	4311      	orrs	r1, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b16:	0852      	lsrs	r2, r2, #1
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0652      	lsls	r2, r2, #25
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	4913      	ldr	r1, [pc, #76]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b3c:	f7fe feac 	bl	8002898 <HAL_GetTick>
 8003b40:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe fea8 	bl	8002898 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e060      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_OscConfig+0x814>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b62:	e058      	b.n	8003c16 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e057      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d14a      	bne.n	8003c16 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b8c:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b98:	f7fe fe7e 	bl	8002898 <HAL_GetTick>
 8003b9c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe fe7a 	bl	8002898 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e032      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x848>
 8003bbe:	e02a      	b.n	8003c16 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d025      	beq.n	8003c12 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003bd8:	f023 0303 	bic.w	r3, r3, #3
 8003bdc:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003be4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003be8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fe fe55 	bl	8002898 <HAL_GetTick>
 8003bee:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fe fe51 	bl	8002898 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e009      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_OscConfig+0x8c8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x89a>
 8003c10:	e001      	b.n	8003c16 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3728      	adds	r7, #40	; 0x28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000

08003c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0c8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d910      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 0207 	bic.w	r2, r3, #7
 8003c4e:	4961      	ldr	r1, [pc, #388]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b5f      	ldr	r3, [pc, #380]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0b0      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d04c      	beq.n	8003d0e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7c:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d121      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e09e      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d115      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e092      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cac:	4b4a      	ldr	r3, [pc, #296]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e086      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cbc:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e07e      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ccc:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 0203 	bic.w	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	493f      	ldr	r1, [pc, #252]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cde:	f7fe fddb 	bl	8002898 <HAL_GetTick>
 8003ce2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce6:	f7fe fdd7 	bl	8002898 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e066      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 020c 	and.w	r2, r3, #12
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d1eb      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1a:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	492c      	ldr	r1, [pc, #176]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d210      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4924      	ldr	r1, [pc, #144]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e036      	b.n	8003dca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4918      	ldr	r1, [pc, #96]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4910      	ldr	r1, [pc, #64]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d9a:	f000 f825 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4601      	mov	r1, r0
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b4>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	fa21 f303 	lsr.w	r3, r1, r3
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_RCC_ClockConfig+0x1c0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fd1e 	bl	8002800 <HAL_InitTick>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40022000 	.word	0x40022000
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08008f90 	.word	0x08008f90
 8003de0:	20000008 	.word	0x20000008
 8003de4:	2000000c 	.word	0x2000000c

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df6:	4b3d      	ldr	r3, [pc, #244]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e00:	4b3a      	ldr	r3, [pc, #232]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x34>
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d121      	bne.n	8003e5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d11e      	bne.n	8003e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e1c:	4b33      	ldr	r3, [pc, #204]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e28:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	e005      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e44:	4a2a      	ldr	r2, [pc, #168]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10d      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d102      	bne.n	8003e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	e004      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e6c:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d133      	bne.n	8003ede <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0xa4>
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0xaa>
 8003e8a:	e005      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e8e:	617b      	str	r3, [r7, #20]
      break;
 8003e90:	e005      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e94:	617b      	str	r3, [r7, #20]
      break;
 8003e96:	e002      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	617b      	str	r3, [r7, #20]
      break;
 8003e9c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	fb02 f203 	mul.w	r2, r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0e5b      	lsrs	r3, r3, #25
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ede:	69bb      	ldr	r3, [r7, #24]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3724      	adds	r7, #36	; 0x24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08008fa8 	.word	0x08008fa8
 8003ef4:	00f42400 	.word	0x00f42400
 8003ef8:	007a1200 	.word	0x007a1200

08003efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000008 	.word	0x20000008

08003f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f18:	f7ff fff0 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f1c:	4601      	mov	r1, r0
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f2a:	5cd3      	ldrb	r3, [r2, r3]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08008fa0 	.word	0x08008fa0

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f44:	f7ff ffda 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0adb      	lsrs	r3, r3, #11
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	08008fa0 	.word	0x08008fa0

08003f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f84:	f7ff f984 	bl	8003290 <HAL_PWREx_GetVoltageRange>
 8003f88:	6178      	str	r0, [r7, #20]
 8003f8a:	e014      	b.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	4a24      	ldr	r2, [pc, #144]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	; 0x58
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff f974 	bl	8003290 <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbc:	d10b      	bne.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d919      	bls.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fc8:	d902      	bls.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fca:	2302      	movs	r3, #2
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	e013      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e010      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d902      	bls.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fdc:	2303      	movs	r3, #3
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e00a      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d102      	bne.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fe8:	2302      	movs	r3, #2
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e004      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b70      	cmp	r3, #112	; 0x70
 8003ff2:	d101      	bne.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 0207 	bic.w	r2, r3, #7
 8004000:	4909      	ldr	r1, [pc, #36]	; (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	d001      	beq.n	800401a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	40022000 	.word	0x40022000

0800402c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004034:	2300      	movs	r3, #0
 8004036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004038:	2300      	movs	r3, #0
 800403a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 809e 	beq.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800404e:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004064:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	4a3f      	ldr	r2, [pc, #252]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406e:	6593      	str	r3, [r2, #88]	; 0x58
 8004070:	4b3d      	ldr	r3, [pc, #244]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407c:	2301      	movs	r3, #1
 800407e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004080:	4b3a      	ldr	r3, [pc, #232]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a39      	ldr	r2, [pc, #228]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800408c:	f7fe fc04 	bl	8002898 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004092:	e009      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fe fc00 	bl	8002898 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d902      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	74fb      	strb	r3, [r7, #19]
        break;
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d15a      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040ba:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01e      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d019      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e2:	4b21      	ldr	r3, [pc, #132]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004102:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d016      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe fbc0 	bl	8002898 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411a:	e00b      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fe fbbc 	bl	8002898 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d902      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	74fb      	strb	r3, [r7, #19]
            break;
 8004132:	e006      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0ec      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004174:	7c7b      	ldrb	r3, [r7, #17]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4b6e      	ldr	r3, [pc, #440]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4a6d      	ldr	r2, [pc, #436]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004192:	4b68      	ldr	r3, [pc, #416]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f023 0203 	bic.w	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4964      	ldr	r1, [pc, #400]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b4:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 020c 	bic.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	495c      	ldr	r1, [pc, #368]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041d6:	4b57      	ldr	r3, [pc, #348]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4953      	ldr	r1, [pc, #332]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f8:	4b4e      	ldr	r3, [pc, #312]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	494b      	ldr	r1, [pc, #300]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800421a:	4b46      	ldr	r3, [pc, #280]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4942      	ldr	r1, [pc, #264]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800423c:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	493a      	ldr	r1, [pc, #232]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425e:	4b35      	ldr	r3, [pc, #212]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4931      	ldr	r1, [pc, #196]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004280:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	4929      	ldr	r1, [pc, #164]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a2:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4920      	ldr	r1, [pc, #128]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	4918      	ldr	r1, [pc, #96]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a12      	ldr	r2, [pc, #72]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	490a      	ldr	r1, [pc, #40]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a04      	ldr	r2, [pc, #16]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004328:	7cbb      	ldrb	r3, [r7, #18]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000

08004358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e01d      	b.n	80043a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fe f8dc 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 fa3e 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <HAL_TIM_Base_Start_IT+0x50>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d00b      	beq.n	80043f2 <HAL_TIM_Base_Start_IT+0x42>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d007      	beq.n	80043f2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	00010007 	.word	0x00010007

08004404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d122      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b02      	cmp	r3, #2
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0202 	mvn.w	r2, #2
 8004430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9c8 	bl	80047dc <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9ba 	bl	80047c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f9cb 	bl	80047f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0204 	mvn.w	r2, #4
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f99e 	bl	80047dc <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f990 	bl	80047c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f9a1 	bl	80047f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0208 	mvn.w	r2, #8
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2204      	movs	r2, #4
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f974 	bl	80047dc <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f966 	bl	80047c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f977 	bl	80047f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2208      	movs	r2, #8
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f94a 	bl	80047dc <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f93c 	bl	80047c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f94d 	bl	80047f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d10e      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0201 	mvn.w	r2, #1
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f916 	bl	80047b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d10e      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d107      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 faa0 	bl	8004af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d10e      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa93 	bl	8004b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d10e      	bne.n	800460e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d107      	bne.n	800460e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f8fb 	bl	8004804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b20      	cmp	r3, #32
 800461a:	d10e      	bne.n	800463a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d107      	bne.n	800463a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f06f 0220 	mvn.w	r2, #32
 8004632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fa53 	bl	8004ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_TIM_ConfigClockSource+0x18>
 8004656:	2302      	movs	r3, #2
 8004658:	e0a8      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x16a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004678:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800467c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004684:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d067      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x124>
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	d80b      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x70>
 800469a:	2b10      	cmp	r3, #16
 800469c:	d073      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x144>
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d802      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x66>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d06f      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046a6:	e078      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d06c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x144>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d06a      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80046b0:	e073      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046b2:	2b70      	cmp	r3, #112	; 0x70
 80046b4:	d00d      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x90>
 80046b6:	2b70      	cmp	r3, #112	; 0x70
 80046b8:	d804      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x82>
 80046ba:	2b50      	cmp	r3, #80	; 0x50
 80046bc:	d033      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xe4>
 80046be:	2b60      	cmp	r3, #96	; 0x60
 80046c0:	d041      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80046c2:	e06a      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d066      	beq.n	8004798 <HAL_TIM_ConfigClockSource+0x156>
 80046ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ce:	d017      	beq.n	8004700 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80046d0:	e063      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f000 f977 	bl	80049d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	609a      	str	r2, [r3, #8]
      break;
 80046fe:	e04c      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f000 f960 	bl	80049d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e039      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 f8d4 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	; 0x50
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f92d 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004744:	e029      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	461a      	mov	r2, r3
 8004754:	f000 f8f3 	bl	800493e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	; 0x60
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f91d 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004764:	e019      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	461a      	mov	r2, r3
 8004774:	f000 f8b4 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	; 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f90d 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004784:	e009      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 f904 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004796:	e000      	b.n	800479a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004798:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <TIM_Base_SetConfig+0xbc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0x20>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d108      	bne.n	800484a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <TIM_Base_SetConfig+0xbc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0x52>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0x52>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <TIM_Base_SetConfig+0xc0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0x52>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <TIM_Base_SetConfig+0xc4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <TIM_Base_SetConfig+0xbc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_Base_SetConfig+0xa0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <TIM_Base_SetConfig+0xc0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_Base_SetConfig+0xa0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <TIM_Base_SetConfig+0xc4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d103      	bne.n	80048c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	615a      	str	r2, [r3, #20]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0210 	bic.w	r2, r3, #16
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f043 0307 	orr.w	r3, r3, #7
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	021a      	lsls	r2, r3, #8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e04f      	b.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d108      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a14      	ldr	r2, [pc, #80]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a10      	ldr	r2, [pc, #64]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10c      	bne.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40014000 	.word	0x40014000

08004ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e040      	b.n	8004bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd fd34 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f82c 	bl	8004bb8 <UART_SetConfig>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e022      	b.n	8004bb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fb34 	bl	80051e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fbbb 	bl	8005324 <UART_CheckIdleState>
 8004bae:	4603      	mov	r3, r0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004bbc:	b08a      	sub	sp, #40	; 0x28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4bbc      	ldr	r3, [pc, #752]	; (8004ee0 <UART_SetConfig+0x328>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4ab2      	ldr	r2, [pc, #712]	; (8004ee4 <UART_SetConfig+0x32c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	4313      	orrs	r3, r2
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4aa9      	ldr	r2, [pc, #676]	; (8004ee8 <UART_SetConfig+0x330>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d126      	bne.n	8004c96 <UART_SetConfig+0xde>
 8004c48:	4ba8      	ldr	r3, [pc, #672]	; (8004eec <UART_SetConfig+0x334>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d81a      	bhi.n	8004c8c <UART_SetConfig+0xd4>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0xa4>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c85 	.word	0x08004c85
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e0ab      	b.n	8004dcc <UART_SetConfig+0x214>
 8004c74:	2302      	movs	r3, #2
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e0a7      	b.n	8004dcc <UART_SetConfig+0x214>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e0a3      	b.n	8004dcc <UART_SetConfig+0x214>
 8004c84:	2308      	movs	r3, #8
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e09f      	b.n	8004dcc <UART_SetConfig+0x214>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	bf00      	nop
 8004c94:	e09a      	b.n	8004dcc <UART_SetConfig+0x214>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a95      	ldr	r2, [pc, #596]	; (8004ef0 <UART_SetConfig+0x338>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d138      	bne.n	8004d12 <UART_SetConfig+0x15a>
 8004ca0:	4b92      	ldr	r3, [pc, #584]	; (8004eec <UART_SetConfig+0x334>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d82c      	bhi.n	8004d08 <UART_SetConfig+0x150>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0xfc>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004d09 	.word	0x08004d09
 8004cc0:	08004d09 	.word	0x08004d09
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004d09 	.word	0x08004d09
 8004ccc:	08004d09 	.word	0x08004d09
 8004cd0:	08004d09 	.word	0x08004d09
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004d09 	.word	0x08004d09
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e06d      	b.n	8004dcc <UART_SetConfig+0x214>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e069      	b.n	8004dcc <UART_SetConfig+0x214>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e065      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e061      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	bf00      	nop
 8004d10:	e05c      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a77      	ldr	r2, [pc, #476]	; (8004ef4 <UART_SetConfig+0x33c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d125      	bne.n	8004d68 <UART_SetConfig+0x1b0>
 8004d1c:	4b73      	ldr	r3, [pc, #460]	; (8004eec <UART_SetConfig+0x334>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d011      	beq.n	8004d4e <UART_SetConfig+0x196>
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d802      	bhi.n	8004d34 <UART_SetConfig+0x17c>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <UART_SetConfig+0x186>
 8004d32:	e014      	b.n	8004d5e <UART_SetConfig+0x1a6>
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d006      	beq.n	8004d46 <UART_SetConfig+0x18e>
 8004d38:	2b30      	cmp	r3, #48	; 0x30
 8004d3a:	d00c      	beq.n	8004d56 <UART_SetConfig+0x19e>
 8004d3c:	e00f      	b.n	8004d5e <UART_SetConfig+0x1a6>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d44:	e042      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d46:	2302      	movs	r3, #2
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4c:	e03e      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d4e:	2304      	movs	r3, #4
 8004d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d54:	e03a      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d56:	2308      	movs	r3, #8
 8004d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5c:	e036      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d64:	bf00      	nop
 8004d66:	e031      	b.n	8004dcc <UART_SetConfig+0x214>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5d      	ldr	r2, [pc, #372]	; (8004ee4 <UART_SetConfig+0x32c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d129      	bne.n	8004dc6 <UART_SetConfig+0x20e>
 8004d72:	4b5e      	ldr	r3, [pc, #376]	; (8004eec <UART_SetConfig+0x334>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d80:	d014      	beq.n	8004dac <UART_SetConfig+0x1f4>
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d86:	d802      	bhi.n	8004d8e <UART_SetConfig+0x1d6>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <UART_SetConfig+0x1e4>
 8004d8c:	e016      	b.n	8004dbc <UART_SetConfig+0x204>
 8004d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d92:	d007      	beq.n	8004da4 <UART_SetConfig+0x1ec>
 8004d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d98:	d00c      	beq.n	8004db4 <UART_SetConfig+0x1fc>
 8004d9a:	e00f      	b.n	8004dbc <UART_SetConfig+0x204>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e013      	b.n	8004dcc <UART_SetConfig+0x214>
 8004da4:	2302      	movs	r3, #2
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e00f      	b.n	8004dcc <UART_SetConfig+0x214>
 8004dac:	2304      	movs	r3, #4
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e00b      	b.n	8004dcc <UART_SetConfig+0x214>
 8004db4:	2308      	movs	r3, #8
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e007      	b.n	8004dcc <UART_SetConfig+0x214>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <UART_SetConfig+0x214>
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a44      	ldr	r2, [pc, #272]	; (8004ee4 <UART_SetConfig+0x32c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	f040 80fb 	bne.w	8004fce <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d824      	bhi.n	8004e2a <UART_SetConfig+0x272>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0x230>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e0d 	.word	0x08004e0d
 8004dec:	08004e2b 	.word	0x08004e2b
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e1b 	.word	0x08004e1b
 8004dfc:	08004e2b 	.word	0x08004e2b
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e2b 	.word	0x08004e2b
 8004e08:	08004e23 	.word	0x08004e23
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004e0c:	f7ff f882 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8004e10:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e12:	e00d      	b.n	8004e30 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004e14:	4b38      	ldr	r3, [pc, #224]	; (8004ef8 <UART_SetConfig+0x340>)
 8004e16:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e18:	e00a      	b.n	8004e30 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fe ffe5 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8004e1e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e20:	e006      	b.n	8004e30 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e26:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e28:	e002      	b.n	8004e30 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	76fb      	strb	r3, [r7, #27]
        break;
 8004e2e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 81c8 	beq.w	80051c8 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d305      	bcc.n	8004e54 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d902      	bls.n	8004e5a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	76fb      	strb	r3, [r7, #27]
 8004e58:	e1b6      	b.n	80051c8 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8004e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	f200 80a2 	bhi.w	8004fa8 <UART_SetConfig+0x3f0>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0x2b4>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004fa9 	.word	0x08004fa9
 8004e74:	08004efd 	.word	0x08004efd
 8004e78:	08004fa9 	.word	0x08004fa9
 8004e7c:	08004f31 	.word	0x08004f31
 8004e80:	08004fa9 	.word	0x08004fa9
 8004e84:	08004fa9 	.word	0x08004fa9
 8004e88:	08004fa9 	.word	0x08004fa9
 8004e8c:	08004f7f 	.word	0x08004f7f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7ff f840 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8004e94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	f04f 0400 	mov.w	r4, #0
 8004ea6:	0214      	lsls	r4, r2, #8
 8004ea8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004eac:	020b      	lsls	r3, r1, #8
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6852      	ldr	r2, [r2, #4]
 8004eb2:	0852      	lsrs	r2, r2, #1
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	eb13 0b01 	adds.w	fp, r3, r1
 8004ebe:	eb44 0c02 	adc.w	ip, r4, r2
 8004ec2:	4658      	mov	r0, fp
 8004ec4:	4661      	mov	r1, ip
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f04f 0400 	mov.w	r4, #0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4623      	mov	r3, r4
 8004ed2:	f7fb fed9 	bl	8000c88 <__aeabi_uldivmod>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	460c      	mov	r4, r1
 8004eda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004edc:	e067      	b.n	8004fae <UART_SetConfig+0x3f6>
 8004ede:	bf00      	nop
 8004ee0:	efff69f3 	.word	0xefff69f3
 8004ee4:	40008000 	.word	0x40008000
 8004ee8:	40013800 	.word	0x40013800
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40004400 	.word	0x40004400
 8004ef4:	40004800 	.word	0x40004800
 8004ef8:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	f04f 0400 	mov.w	r4, #0
 8004f06:	49ae      	ldr	r1, [pc, #696]	; (80051c0 <UART_SetConfig+0x608>)
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	eb13 0b01 	adds.w	fp, r3, r1
 8004f10:	eb44 0c02 	adc.w	ip, r4, r2
 8004f14:	4658      	mov	r0, fp
 8004f16:	4661      	mov	r1, ip
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f04f 0400 	mov.w	r4, #0
 8004f20:	461a      	mov	r2, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	f7fb feb0 	bl	8000c88 <__aeabi_uldivmod>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004f2e:	e03e      	b.n	8004fae <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004f30:	f7fe ff5a 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8004f34:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	f04f 0400 	mov.w	r4, #0
 8004f46:	0214      	lsls	r4, r2, #8
 8004f48:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f4c:	020b      	lsls	r3, r1, #8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6852      	ldr	r2, [r2, #4]
 8004f52:	0852      	lsrs	r2, r2, #1
 8004f54:	4611      	mov	r1, r2
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	eb13 0b01 	adds.w	fp, r3, r1
 8004f5e:	eb44 0c02 	adc.w	ip, r4, r2
 8004f62:	4658      	mov	r0, fp
 8004f64:	4661      	mov	r1, ip
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f04f 0400 	mov.w	r4, #0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4623      	mov	r3, r4
 8004f72:	f7fb fe89 	bl	8000c88 <__aeabi_uldivmod>
 8004f76:	4603      	mov	r3, r0
 8004f78:	460c      	mov	r4, r1
 8004f7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004f7c:	e017      	b.n	8004fae <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	f04f 0400 	mov.w	r4, #0
 8004f88:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004f8c:	f144 0100 	adc.w	r1, r4, #0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f04f 0400 	mov.w	r4, #0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4623      	mov	r3, r4
 8004f9c:	f7fb fe74 	bl	8000c88 <__aeabi_uldivmod>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004fa6:	e002      	b.n	8004fae <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	76fb      	strb	r3, [r7, #27]
            break;
 8004fac:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb4:	d308      	bcc.n	8004fc8 <UART_SetConfig+0x410>
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fbc:	d204      	bcs.n	8004fc8 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e0ff      	b.n	80051c8 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	76fb      	strb	r3, [r7, #27]
 8004fcc:	e0fc      	b.n	80051c8 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd6:	f040 8083 	bne.w	80050e0 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8004fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d85e      	bhi.n	80050a0 <UART_SetConfig+0x4e8>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x430>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	0800502d 	.word	0x0800502d
 8004ff0:	0800504d 	.word	0x0800504d
 8004ff4:	080050a1 	.word	0x080050a1
 8004ff8:	08005069 	.word	0x08005069
 8004ffc:	080050a1 	.word	0x080050a1
 8005000:	080050a1 	.word	0x080050a1
 8005004:	080050a1 	.word	0x080050a1
 8005008:	08005089 	.word	0x08005089
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800500c:	f7fe ff82 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005010:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	005a      	lsls	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	441a      	add	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	fbb2 f3f3 	udiv	r3, r2, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800502a:	e03c      	b.n	80050a6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800502c:	f7fe ff88 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8005030:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	005a      	lsls	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800504a:	e02c      	b.n	80050a6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005056:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6852      	ldr	r2, [r2, #4]
 800505e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005062:	b29b      	uxth	r3, r3
 8005064:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005066:	e01e      	b.n	80050a6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005068:	f7fe febe 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 800506c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	005a      	lsls	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	441a      	add	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	b29b      	uxth	r3, r3
 8005084:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005086:	e00e      	b.n	80050a6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	b29b      	uxth	r3, r3
 800509c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800509e:	e002      	b.n	80050a6 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	76fb      	strb	r3, [r7, #27]
        break;
 80050a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b0f      	cmp	r3, #15
 80050aa:	d916      	bls.n	80050da <UART_SetConfig+0x522>
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b2:	d212      	bcs.n	80050da <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f023 030f 	bic.w	r3, r3, #15
 80050bc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	89fa      	ldrh	r2, [r7, #14]
 80050d6:	60da      	str	r2, [r3, #12]
 80050d8:	e076      	b.n	80051c8 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	76fb      	strb	r3, [r7, #27]
 80050de:	e073      	b.n	80051c8 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80050e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d85c      	bhi.n	80051a2 <UART_SetConfig+0x5ea>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0x538>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005133 	.word	0x08005133
 80050f8:	08005151 	.word	0x08005151
 80050fc:	080051a3 	.word	0x080051a3
 8005100:	0800516d 	.word	0x0800516d
 8005104:	080051a3 	.word	0x080051a3
 8005108:	080051a3 	.word	0x080051a3
 800510c:	080051a3 	.word	0x080051a3
 8005110:	0800518b 	.word	0x0800518b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fe fefe 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005118:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085a      	lsrs	r2, r3, #1
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	441a      	add	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	b29b      	uxth	r3, r3
 800512e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005130:	e03a      	b.n	80051a8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005132:	f7fe ff05 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8005136:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	085a      	lsrs	r2, r3, #1
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	b29b      	uxth	r3, r3
 800514c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800514e:	e02b      	b.n	80051a8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800515a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6852      	ldr	r2, [r2, #4]
 8005162:	fbb3 f3f2 	udiv	r3, r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800516a:	e01d      	b.n	80051a8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516c:	f7fe fe3c 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8005170:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	085a      	lsrs	r2, r3, #1
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	441a      	add	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	b29b      	uxth	r3, r3
 8005186:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005188:	e00e      	b.n	80051a8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051a0:	e002      	b.n	80051a8 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	76fb      	strb	r3, [r7, #27]
        break;
 80051a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b0f      	cmp	r3, #15
 80051ac:	d90a      	bls.n	80051c4 <UART_SetConfig+0x60c>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b4:	d206      	bcs.n	80051c4 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	e003      	b.n	80051c8 <UART_SetConfig+0x610>
 80051c0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80051d4:	7efb      	ldrb	r3, [r7, #27]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3728      	adds	r7, #40	; 0x28
 80051da:	46bd      	mov	sp, r7
 80051dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080051e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052de:	d10a      	bne.n	80052f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005332:	f7fd fab1 	bl	8002898 <HAL_GetTick>
 8005336:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b08      	cmp	r3, #8
 8005344:	d10e      	bne.n	8005364 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005346:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f82a 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e020      	b.n	80053a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d10e      	bne.n	8005390 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005372:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f814 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e00a      	b.n	80053a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053be:	e05d      	b.n	800547c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c6:	d059      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c8:	f7fd fa66 	bl	8002898 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <UART_WaitOnFlagUntilTimeout+0x30>
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d11b      	bne.n	8005416 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e042      	b.n	800549c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d02b      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005432:	d123      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800544c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e00f      	b.n	800549c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	429a      	cmp	r2, r3
 8005498:	d092      	beq.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <__errno>:
 80054a4:	4b01      	ldr	r3, [pc, #4]	; (80054ac <__errno+0x8>)
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000014 	.word	0x20000014

080054b0 <__libc_init_array>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4e0d      	ldr	r6, [pc, #52]	; (80054e8 <__libc_init_array+0x38>)
 80054b4:	4c0d      	ldr	r4, [pc, #52]	; (80054ec <__libc_init_array+0x3c>)
 80054b6:	1ba4      	subs	r4, r4, r6
 80054b8:	10a4      	asrs	r4, r4, #2
 80054ba:	2500      	movs	r5, #0
 80054bc:	42a5      	cmp	r5, r4
 80054be:	d109      	bne.n	80054d4 <__libc_init_array+0x24>
 80054c0:	4e0b      	ldr	r6, [pc, #44]	; (80054f0 <__libc_init_array+0x40>)
 80054c2:	4c0c      	ldr	r4, [pc, #48]	; (80054f4 <__libc_init_array+0x44>)
 80054c4:	f003 fd56 	bl	8008f74 <_init>
 80054c8:	1ba4      	subs	r4, r4, r6
 80054ca:	10a4      	asrs	r4, r4, #2
 80054cc:	2500      	movs	r5, #0
 80054ce:	42a5      	cmp	r5, r4
 80054d0:	d105      	bne.n	80054de <__libc_init_array+0x2e>
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054d8:	4798      	blx	r3
 80054da:	3501      	adds	r5, #1
 80054dc:	e7ee      	b.n	80054bc <__libc_init_array+0xc>
 80054de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054e2:	4798      	blx	r3
 80054e4:	3501      	adds	r5, #1
 80054e6:	e7f2      	b.n	80054ce <__libc_init_array+0x1e>
 80054e8:	08009298 	.word	0x08009298
 80054ec:	08009298 	.word	0x08009298
 80054f0:	08009298 	.word	0x08009298
 80054f4:	0800929c 	.word	0x0800929c

080054f8 <memset>:
 80054f8:	4402      	add	r2, r0
 80054fa:	4603      	mov	r3, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d100      	bne.n	8005502 <memset+0xa>
 8005500:	4770      	bx	lr
 8005502:	f803 1b01 	strb.w	r1, [r3], #1
 8005506:	e7f9      	b.n	80054fc <memset+0x4>

08005508 <__cvt>:
 8005508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	ec55 4b10 	vmov	r4, r5, d0
 8005510:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005512:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005516:	2d00      	cmp	r5, #0
 8005518:	460e      	mov	r6, r1
 800551a:	4691      	mov	r9, r2
 800551c:	4619      	mov	r1, r3
 800551e:	bfb8      	it	lt
 8005520:	4622      	movlt	r2, r4
 8005522:	462b      	mov	r3, r5
 8005524:	f027 0720 	bic.w	r7, r7, #32
 8005528:	bfbb      	ittet	lt
 800552a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800552e:	461d      	movlt	r5, r3
 8005530:	2300      	movge	r3, #0
 8005532:	232d      	movlt	r3, #45	; 0x2d
 8005534:	bfb8      	it	lt
 8005536:	4614      	movlt	r4, r2
 8005538:	2f46      	cmp	r7, #70	; 0x46
 800553a:	700b      	strb	r3, [r1, #0]
 800553c:	d004      	beq.n	8005548 <__cvt+0x40>
 800553e:	2f45      	cmp	r7, #69	; 0x45
 8005540:	d100      	bne.n	8005544 <__cvt+0x3c>
 8005542:	3601      	adds	r6, #1
 8005544:	2102      	movs	r1, #2
 8005546:	e000      	b.n	800554a <__cvt+0x42>
 8005548:	2103      	movs	r1, #3
 800554a:	ab03      	add	r3, sp, #12
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	ab02      	add	r3, sp, #8
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	4632      	mov	r2, r6
 8005554:	4653      	mov	r3, sl
 8005556:	ec45 4b10 	vmov	d0, r4, r5
 800555a:	f001 fd75 	bl	8007048 <_dtoa_r>
 800555e:	2f47      	cmp	r7, #71	; 0x47
 8005560:	4680      	mov	r8, r0
 8005562:	d102      	bne.n	800556a <__cvt+0x62>
 8005564:	f019 0f01 	tst.w	r9, #1
 8005568:	d026      	beq.n	80055b8 <__cvt+0xb0>
 800556a:	2f46      	cmp	r7, #70	; 0x46
 800556c:	eb08 0906 	add.w	r9, r8, r6
 8005570:	d111      	bne.n	8005596 <__cvt+0x8e>
 8005572:	f898 3000 	ldrb.w	r3, [r8]
 8005576:	2b30      	cmp	r3, #48	; 0x30
 8005578:	d10a      	bne.n	8005590 <__cvt+0x88>
 800557a:	2200      	movs	r2, #0
 800557c:	2300      	movs	r3, #0
 800557e:	4620      	mov	r0, r4
 8005580:	4629      	mov	r1, r5
 8005582:	f7fb faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005586:	b918      	cbnz	r0, 8005590 <__cvt+0x88>
 8005588:	f1c6 0601 	rsb	r6, r6, #1
 800558c:	f8ca 6000 	str.w	r6, [sl]
 8005590:	f8da 3000 	ldr.w	r3, [sl]
 8005594:	4499      	add	r9, r3
 8005596:	2200      	movs	r2, #0
 8005598:	2300      	movs	r3, #0
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	f7fb fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a2:	b938      	cbnz	r0, 80055b4 <__cvt+0xac>
 80055a4:	2230      	movs	r2, #48	; 0x30
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	454b      	cmp	r3, r9
 80055aa:	d205      	bcs.n	80055b8 <__cvt+0xb0>
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	9103      	str	r1, [sp, #12]
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	e7f8      	b.n	80055a6 <__cvt+0x9e>
 80055b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055bc:	eba3 0308 	sub.w	r3, r3, r8
 80055c0:	4640      	mov	r0, r8
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	b004      	add	sp, #16
 80055c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080055ca <__exponent>:
 80055ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055cc:	2900      	cmp	r1, #0
 80055ce:	4604      	mov	r4, r0
 80055d0:	bfba      	itte	lt
 80055d2:	4249      	neglt	r1, r1
 80055d4:	232d      	movlt	r3, #45	; 0x2d
 80055d6:	232b      	movge	r3, #43	; 0x2b
 80055d8:	2909      	cmp	r1, #9
 80055da:	f804 2b02 	strb.w	r2, [r4], #2
 80055de:	7043      	strb	r3, [r0, #1]
 80055e0:	dd20      	ble.n	8005624 <__exponent+0x5a>
 80055e2:	f10d 0307 	add.w	r3, sp, #7
 80055e6:	461f      	mov	r7, r3
 80055e8:	260a      	movs	r6, #10
 80055ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80055ee:	fb06 1115 	mls	r1, r6, r5, r1
 80055f2:	3130      	adds	r1, #48	; 0x30
 80055f4:	2d09      	cmp	r5, #9
 80055f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055fa:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80055fe:	4629      	mov	r1, r5
 8005600:	dc09      	bgt.n	8005616 <__exponent+0x4c>
 8005602:	3130      	adds	r1, #48	; 0x30
 8005604:	3b02      	subs	r3, #2
 8005606:	f802 1c01 	strb.w	r1, [r2, #-1]
 800560a:	42bb      	cmp	r3, r7
 800560c:	4622      	mov	r2, r4
 800560e:	d304      	bcc.n	800561a <__exponent+0x50>
 8005610:	1a10      	subs	r0, r2, r0
 8005612:	b003      	add	sp, #12
 8005614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005616:	4613      	mov	r3, r2
 8005618:	e7e7      	b.n	80055ea <__exponent+0x20>
 800561a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800561e:	f804 2b01 	strb.w	r2, [r4], #1
 8005622:	e7f2      	b.n	800560a <__exponent+0x40>
 8005624:	2330      	movs	r3, #48	; 0x30
 8005626:	4419      	add	r1, r3
 8005628:	7083      	strb	r3, [r0, #2]
 800562a:	1d02      	adds	r2, r0, #4
 800562c:	70c1      	strb	r1, [r0, #3]
 800562e:	e7ef      	b.n	8005610 <__exponent+0x46>

08005630 <_printf_float>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	b08d      	sub	sp, #52	; 0x34
 8005636:	460c      	mov	r4, r1
 8005638:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800563c:	4616      	mov	r6, r2
 800563e:	461f      	mov	r7, r3
 8005640:	4605      	mov	r5, r0
 8005642:	f002 fde5 	bl	8008210 <_localeconv_r>
 8005646:	6803      	ldr	r3, [r0, #0]
 8005648:	9304      	str	r3, [sp, #16]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fa fdc0 	bl	80001d0 <strlen>
 8005650:	2300      	movs	r3, #0
 8005652:	930a      	str	r3, [sp, #40]	; 0x28
 8005654:	f8d8 3000 	ldr.w	r3, [r8]
 8005658:	9005      	str	r0, [sp, #20]
 800565a:	3307      	adds	r3, #7
 800565c:	f023 0307 	bic.w	r3, r3, #7
 8005660:	f103 0208 	add.w	r2, r3, #8
 8005664:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005668:	f8d4 b000 	ldr.w	fp, [r4]
 800566c:	f8c8 2000 	str.w	r2, [r8]
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005678:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800567c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005680:	9307      	str	r3, [sp, #28]
 8005682:	f8cd 8018 	str.w	r8, [sp, #24]
 8005686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800568a:	4ba7      	ldr	r3, [pc, #668]	; (8005928 <_printf_float+0x2f8>)
 800568c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005690:	f7fb fa4c 	bl	8000b2c <__aeabi_dcmpun>
 8005694:	bb70      	cbnz	r0, 80056f4 <_printf_float+0xc4>
 8005696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800569a:	4ba3      	ldr	r3, [pc, #652]	; (8005928 <_printf_float+0x2f8>)
 800569c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056a0:	f7fb fa26 	bl	8000af0 <__aeabi_dcmple>
 80056a4:	bb30      	cbnz	r0, 80056f4 <_printf_float+0xc4>
 80056a6:	2200      	movs	r2, #0
 80056a8:	2300      	movs	r3, #0
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	f7fb fa15 	bl	8000adc <__aeabi_dcmplt>
 80056b2:	b110      	cbz	r0, 80056ba <_printf_float+0x8a>
 80056b4:	232d      	movs	r3, #45	; 0x2d
 80056b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ba:	4a9c      	ldr	r2, [pc, #624]	; (800592c <_printf_float+0x2fc>)
 80056bc:	4b9c      	ldr	r3, [pc, #624]	; (8005930 <_printf_float+0x300>)
 80056be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80056c2:	bf8c      	ite	hi
 80056c4:	4690      	movhi	r8, r2
 80056c6:	4698      	movls	r8, r3
 80056c8:	2303      	movs	r3, #3
 80056ca:	f02b 0204 	bic.w	r2, fp, #4
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	f04f 0900 	mov.w	r9, #0
 80056d6:	9700      	str	r7, [sp, #0]
 80056d8:	4633      	mov	r3, r6
 80056da:	aa0b      	add	r2, sp, #44	; 0x2c
 80056dc:	4621      	mov	r1, r4
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 f9e6 	bl	8005ab0 <_printf_common>
 80056e4:	3001      	adds	r0, #1
 80056e6:	f040 808d 	bne.w	8005804 <_printf_float+0x1d4>
 80056ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ee:	b00d      	add	sp, #52	; 0x34
 80056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	4640      	mov	r0, r8
 80056fa:	4649      	mov	r1, r9
 80056fc:	f7fb fa16 	bl	8000b2c <__aeabi_dcmpun>
 8005700:	b110      	cbz	r0, 8005708 <_printf_float+0xd8>
 8005702:	4a8c      	ldr	r2, [pc, #560]	; (8005934 <_printf_float+0x304>)
 8005704:	4b8c      	ldr	r3, [pc, #560]	; (8005938 <_printf_float+0x308>)
 8005706:	e7da      	b.n	80056be <_printf_float+0x8e>
 8005708:	6861      	ldr	r1, [r4, #4]
 800570a:	1c4b      	adds	r3, r1, #1
 800570c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005710:	a80a      	add	r0, sp, #40	; 0x28
 8005712:	d13e      	bne.n	8005792 <_printf_float+0x162>
 8005714:	2306      	movs	r3, #6
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	2300      	movs	r3, #0
 800571a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800571e:	ab09      	add	r3, sp, #36	; 0x24
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	ec49 8b10 	vmov	d0, r8, r9
 8005726:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800572a:	6022      	str	r2, [r4, #0]
 800572c:	f8cd a004 	str.w	sl, [sp, #4]
 8005730:	6861      	ldr	r1, [r4, #4]
 8005732:	4628      	mov	r0, r5
 8005734:	f7ff fee8 	bl	8005508 <__cvt>
 8005738:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800573c:	2b47      	cmp	r3, #71	; 0x47
 800573e:	4680      	mov	r8, r0
 8005740:	d109      	bne.n	8005756 <_printf_float+0x126>
 8005742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005744:	1cd8      	adds	r0, r3, #3
 8005746:	db02      	blt.n	800574e <_printf_float+0x11e>
 8005748:	6862      	ldr	r2, [r4, #4]
 800574a:	4293      	cmp	r3, r2
 800574c:	dd47      	ble.n	80057de <_printf_float+0x1ae>
 800574e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005752:	fa5f fa8a 	uxtb.w	sl, sl
 8005756:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800575a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800575c:	d824      	bhi.n	80057a8 <_printf_float+0x178>
 800575e:	3901      	subs	r1, #1
 8005760:	4652      	mov	r2, sl
 8005762:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005766:	9109      	str	r1, [sp, #36]	; 0x24
 8005768:	f7ff ff2f 	bl	80055ca <__exponent>
 800576c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800576e:	1813      	adds	r3, r2, r0
 8005770:	2a01      	cmp	r2, #1
 8005772:	4681      	mov	r9, r0
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	dc02      	bgt.n	800577e <_printf_float+0x14e>
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	07d1      	lsls	r1, r2, #31
 800577c:	d501      	bpl.n	8005782 <_printf_float+0x152>
 800577e:	3301      	adds	r3, #1
 8005780:	6123      	str	r3, [r4, #16]
 8005782:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0a5      	beq.n	80056d6 <_printf_float+0xa6>
 800578a:	232d      	movs	r3, #45	; 0x2d
 800578c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005790:	e7a1      	b.n	80056d6 <_printf_float+0xa6>
 8005792:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005796:	f000 8177 	beq.w	8005a88 <_printf_float+0x458>
 800579a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800579e:	d1bb      	bne.n	8005718 <_printf_float+0xe8>
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d1b9      	bne.n	8005718 <_printf_float+0xe8>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e7b6      	b.n	8005716 <_printf_float+0xe6>
 80057a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80057ac:	d119      	bne.n	80057e2 <_printf_float+0x1b2>
 80057ae:	2900      	cmp	r1, #0
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	dd0c      	ble.n	80057ce <_printf_float+0x19e>
 80057b4:	6121      	str	r1, [r4, #16]
 80057b6:	b913      	cbnz	r3, 80057be <_printf_float+0x18e>
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	07d2      	lsls	r2, r2, #31
 80057bc:	d502      	bpl.n	80057c4 <_printf_float+0x194>
 80057be:	3301      	adds	r3, #1
 80057c0:	440b      	add	r3, r1
 80057c2:	6123      	str	r3, [r4, #16]
 80057c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80057c8:	f04f 0900 	mov.w	r9, #0
 80057cc:	e7d9      	b.n	8005782 <_printf_float+0x152>
 80057ce:	b913      	cbnz	r3, 80057d6 <_printf_float+0x1a6>
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	07d0      	lsls	r0, r2, #31
 80057d4:	d501      	bpl.n	80057da <_printf_float+0x1aa>
 80057d6:	3302      	adds	r3, #2
 80057d8:	e7f3      	b.n	80057c2 <_printf_float+0x192>
 80057da:	2301      	movs	r3, #1
 80057dc:	e7f1      	b.n	80057c2 <_printf_float+0x192>
 80057de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80057e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80057e6:	4293      	cmp	r3, r2
 80057e8:	db05      	blt.n	80057f6 <_printf_float+0x1c6>
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	07d1      	lsls	r1, r2, #31
 80057f0:	d5e8      	bpl.n	80057c4 <_printf_float+0x194>
 80057f2:	3301      	adds	r3, #1
 80057f4:	e7e5      	b.n	80057c2 <_printf_float+0x192>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfd4      	ite	le
 80057fa:	f1c3 0302 	rsble	r3, r3, #2
 80057fe:	2301      	movgt	r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	e7de      	b.n	80057c2 <_printf_float+0x192>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	055a      	lsls	r2, r3, #21
 8005808:	d407      	bmi.n	800581a <_printf_float+0x1ea>
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	4642      	mov	r2, r8
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	d12b      	bne.n	8005870 <_printf_float+0x240>
 8005818:	e767      	b.n	80056ea <_printf_float+0xba>
 800581a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800581e:	f240 80dc 	bls.w	80059da <_printf_float+0x3aa>
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800582a:	f7fb f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800582e:	2800      	cmp	r0, #0
 8005830:	d033      	beq.n	800589a <_printf_float+0x26a>
 8005832:	2301      	movs	r3, #1
 8005834:	4a41      	ldr	r2, [pc, #260]	; (800593c <_printf_float+0x30c>)
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f af54 	beq.w	80056ea <_printf_float+0xba>
 8005842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005846:	429a      	cmp	r2, r3
 8005848:	db02      	blt.n	8005850 <_printf_float+0x220>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	07d8      	lsls	r0, r3, #31
 800584e:	d50f      	bpl.n	8005870 <_printf_float+0x240>
 8005850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	f43f af45 	beq.w	80056ea <_printf_float+0xba>
 8005860:	f04f 0800 	mov.w	r8, #0
 8005864:	f104 091a 	add.w	r9, r4, #26
 8005868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	4543      	cmp	r3, r8
 800586e:	dc09      	bgt.n	8005884 <_printf_float+0x254>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	079b      	lsls	r3, r3, #30
 8005874:	f100 8103 	bmi.w	8005a7e <_printf_float+0x44e>
 8005878:	68e0      	ldr	r0, [r4, #12]
 800587a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800587c:	4298      	cmp	r0, r3
 800587e:	bfb8      	it	lt
 8005880:	4618      	movlt	r0, r3
 8005882:	e734      	b.n	80056ee <_printf_float+0xbe>
 8005884:	2301      	movs	r3, #1
 8005886:	464a      	mov	r2, r9
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f af2b 	beq.w	80056ea <_printf_float+0xba>
 8005894:	f108 0801 	add.w	r8, r8, #1
 8005898:	e7e6      	b.n	8005868 <_printf_float+0x238>
 800589a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc2b      	bgt.n	80058f8 <_printf_float+0x2c8>
 80058a0:	2301      	movs	r3, #1
 80058a2:	4a26      	ldr	r2, [pc, #152]	; (800593c <_printf_float+0x30c>)
 80058a4:	4631      	mov	r1, r6
 80058a6:	4628      	mov	r0, r5
 80058a8:	47b8      	blx	r7
 80058aa:	3001      	adds	r0, #1
 80058ac:	f43f af1d 	beq.w	80056ea <_printf_float+0xba>
 80058b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b2:	b923      	cbnz	r3, 80058be <_printf_float+0x28e>
 80058b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b6:	b913      	cbnz	r3, 80058be <_printf_float+0x28e>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07d9      	lsls	r1, r3, #31
 80058bc:	d5d8      	bpl.n	8005870 <_printf_float+0x240>
 80058be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	f43f af0e 	beq.w	80056ea <_printf_float+0xba>
 80058ce:	f04f 0900 	mov.w	r9, #0
 80058d2:	f104 0a1a 	add.w	sl, r4, #26
 80058d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d8:	425b      	negs	r3, r3
 80058da:	454b      	cmp	r3, r9
 80058dc:	dc01      	bgt.n	80058e2 <_printf_float+0x2b2>
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	e794      	b.n	800580c <_printf_float+0x1dc>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f aefc 	beq.w	80056ea <_printf_float+0xba>
 80058f2:	f109 0901 	add.w	r9, r9, #1
 80058f6:	e7ee      	b.n	80058d6 <_printf_float+0x2a6>
 80058f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058fc:	429a      	cmp	r2, r3
 80058fe:	bfa8      	it	ge
 8005900:	461a      	movge	r2, r3
 8005902:	2a00      	cmp	r2, #0
 8005904:	4691      	mov	r9, r2
 8005906:	dd07      	ble.n	8005918 <_printf_float+0x2e8>
 8005908:	4613      	mov	r3, r2
 800590a:	4631      	mov	r1, r6
 800590c:	4642      	mov	r2, r8
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f aee9 	beq.w	80056ea <_printf_float+0xba>
 8005918:	f104 031a 	add.w	r3, r4, #26
 800591c:	f04f 0b00 	mov.w	fp, #0
 8005920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005924:	9306      	str	r3, [sp, #24]
 8005926:	e015      	b.n	8005954 <_printf_float+0x324>
 8005928:	7fefffff 	.word	0x7fefffff
 800592c:	08008fdc 	.word	0x08008fdc
 8005930:	08008fd8 	.word	0x08008fd8
 8005934:	08008fe4 	.word	0x08008fe4
 8005938:	08008fe0 	.word	0x08008fe0
 800593c:	08008fe8 	.word	0x08008fe8
 8005940:	2301      	movs	r3, #1
 8005942:	9a06      	ldr	r2, [sp, #24]
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	f43f aecd 	beq.w	80056ea <_printf_float+0xba>
 8005950:	f10b 0b01 	add.w	fp, fp, #1
 8005954:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005958:	ebaa 0309 	sub.w	r3, sl, r9
 800595c:	455b      	cmp	r3, fp
 800595e:	dcef      	bgt.n	8005940 <_printf_float+0x310>
 8005960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005964:	429a      	cmp	r2, r3
 8005966:	44d0      	add	r8, sl
 8005968:	db15      	blt.n	8005996 <_printf_float+0x366>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	07da      	lsls	r2, r3, #31
 800596e:	d412      	bmi.n	8005996 <_printf_float+0x366>
 8005970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005974:	eba3 020a 	sub.w	r2, r3, sl
 8005978:	eba3 0a01 	sub.w	sl, r3, r1
 800597c:	4592      	cmp	sl, r2
 800597e:	bfa8      	it	ge
 8005980:	4692      	movge	sl, r2
 8005982:	f1ba 0f00 	cmp.w	sl, #0
 8005986:	dc0e      	bgt.n	80059a6 <_printf_float+0x376>
 8005988:	f04f 0800 	mov.w	r8, #0
 800598c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005990:	f104 091a 	add.w	r9, r4, #26
 8005994:	e019      	b.n	80059ca <_printf_float+0x39a>
 8005996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	d1e5      	bne.n	8005970 <_printf_float+0x340>
 80059a4:	e6a1      	b.n	80056ea <_printf_float+0xba>
 80059a6:	4653      	mov	r3, sl
 80059a8:	4642      	mov	r2, r8
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	d1e9      	bne.n	8005988 <_printf_float+0x358>
 80059b4:	e699      	b.n	80056ea <_printf_float+0xba>
 80059b6:	2301      	movs	r3, #1
 80059b8:	464a      	mov	r2, r9
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f ae92 	beq.w	80056ea <_printf_float+0xba>
 80059c6:	f108 0801 	add.w	r8, r8, #1
 80059ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	eba3 030a 	sub.w	r3, r3, sl
 80059d4:	4543      	cmp	r3, r8
 80059d6:	dcee      	bgt.n	80059b6 <_printf_float+0x386>
 80059d8:	e74a      	b.n	8005870 <_printf_float+0x240>
 80059da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059dc:	2a01      	cmp	r2, #1
 80059de:	dc01      	bgt.n	80059e4 <_printf_float+0x3b4>
 80059e0:	07db      	lsls	r3, r3, #31
 80059e2:	d53a      	bpl.n	8005a5a <_printf_float+0x42a>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4642      	mov	r2, r8
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	f43f ae7b 	beq.w	80056ea <_printf_float+0xba>
 80059f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f108 0801 	add.w	r8, r8, #1
 8005a04:	f43f ae71 	beq.w	80056ea <_printf_float+0xba>
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a14:	2300      	movs	r3, #0
 8005a16:	f7fb f857 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1a:	b9c8      	cbnz	r0, 8005a50 <_printf_float+0x420>
 8005a1c:	4653      	mov	r3, sl
 8005a1e:	4642      	mov	r2, r8
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	d10e      	bne.n	8005a48 <_printf_float+0x418>
 8005a2a:	e65e      	b.n	80056ea <_printf_float+0xba>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f ae57 	beq.w	80056ea <_printf_float+0xba>
 8005a3c:	f108 0801 	add.w	r8, r8, #1
 8005a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a42:	3b01      	subs	r3, #1
 8005a44:	4543      	cmp	r3, r8
 8005a46:	dcf1      	bgt.n	8005a2c <_printf_float+0x3fc>
 8005a48:	464b      	mov	r3, r9
 8005a4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a4e:	e6de      	b.n	800580e <_printf_float+0x1de>
 8005a50:	f04f 0800 	mov.w	r8, #0
 8005a54:	f104 0a1a 	add.w	sl, r4, #26
 8005a58:	e7f2      	b.n	8005a40 <_printf_float+0x410>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e7df      	b.n	8005a1e <_printf_float+0x3ee>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	464a      	mov	r2, r9
 8005a62:	4631      	mov	r1, r6
 8005a64:	4628      	mov	r0, r5
 8005a66:	47b8      	blx	r7
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f43f ae3e 	beq.w	80056ea <_printf_float+0xba>
 8005a6e:	f108 0801 	add.w	r8, r8, #1
 8005a72:	68e3      	ldr	r3, [r4, #12]
 8005a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	4543      	cmp	r3, r8
 8005a7a:	dcf0      	bgt.n	8005a5e <_printf_float+0x42e>
 8005a7c:	e6fc      	b.n	8005878 <_printf_float+0x248>
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	f104 0919 	add.w	r9, r4, #25
 8005a86:	e7f4      	b.n	8005a72 <_printf_float+0x442>
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	f43f ae8b 	beq.w	80057a4 <_printf_float+0x174>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005a94:	ab09      	add	r3, sp, #36	; 0x24
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	ec49 8b10 	vmov	d0, r8, r9
 8005a9c:	6022      	str	r2, [r4, #0]
 8005a9e:	f8cd a004 	str.w	sl, [sp, #4]
 8005aa2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7ff fd2e 	bl	8005508 <__cvt>
 8005aac:	4680      	mov	r8, r0
 8005aae:	e648      	b.n	8005742 <_printf_float+0x112>

08005ab0 <_printf_common>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	4691      	mov	r9, r2
 8005ab6:	461f      	mov	r7, r3
 8005ab8:	688a      	ldr	r2, [r1, #8]
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bfb8      	it	lt
 8005ac4:	4613      	movlt	r3, r2
 8005ac6:	f8c9 3000 	str.w	r3, [r9]
 8005aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ace:	4606      	mov	r6, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	b112      	cbz	r2, 8005ada <_printf_common+0x2a>
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f8c9 3000 	str.w	r3, [r9]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0699      	lsls	r1, r3, #26
 8005ade:	bf42      	ittt	mi
 8005ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ae4:	3302      	addmi	r3, #2
 8005ae6:	f8c9 3000 	strmi.w	r3, [r9]
 8005aea:	6825      	ldr	r5, [r4, #0]
 8005aec:	f015 0506 	ands.w	r5, r5, #6
 8005af0:	d107      	bne.n	8005b02 <_printf_common+0x52>
 8005af2:	f104 0a19 	add.w	sl, r4, #25
 8005af6:	68e3      	ldr	r3, [r4, #12]
 8005af8:	f8d9 2000 	ldr.w	r2, [r9]
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	42ab      	cmp	r3, r5
 8005b00:	dc28      	bgt.n	8005b54 <_printf_common+0xa4>
 8005b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	3300      	adds	r3, #0
 8005b0a:	bf18      	it	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	0692      	lsls	r2, r2, #26
 8005b10:	d42d      	bmi.n	8005b6e <_printf_common+0xbe>
 8005b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b16:	4639      	mov	r1, r7
 8005b18:	4630      	mov	r0, r6
 8005b1a:	47c0      	blx	r8
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d020      	beq.n	8005b62 <_printf_common+0xb2>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	68e5      	ldr	r5, [r4, #12]
 8005b24:	f8d9 2000 	ldr.w	r2, [r9]
 8005b28:	f003 0306 	and.w	r3, r3, #6
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	bf08      	it	eq
 8005b30:	1aad      	subeq	r5, r5, r2
 8005b32:	68a3      	ldr	r3, [r4, #8]
 8005b34:	6922      	ldr	r2, [r4, #16]
 8005b36:	bf0c      	ite	eq
 8005b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b3c:	2500      	movne	r5, #0
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	bfc4      	itt	gt
 8005b42:	1a9b      	subgt	r3, r3, r2
 8005b44:	18ed      	addgt	r5, r5, r3
 8005b46:	f04f 0900 	mov.w	r9, #0
 8005b4a:	341a      	adds	r4, #26
 8005b4c:	454d      	cmp	r5, r9
 8005b4e:	d11a      	bne.n	8005b86 <_printf_common+0xd6>
 8005b50:	2000      	movs	r0, #0
 8005b52:	e008      	b.n	8005b66 <_printf_common+0xb6>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4652      	mov	r2, sl
 8005b58:	4639      	mov	r1, r7
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	47c0      	blx	r8
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d103      	bne.n	8005b6a <_printf_common+0xba>
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6a:	3501      	adds	r5, #1
 8005b6c:	e7c3      	b.n	8005af6 <_printf_common+0x46>
 8005b6e:	18e1      	adds	r1, r4, r3
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	2030      	movs	r0, #48	; 0x30
 8005b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b78:	4422      	add	r2, r4
 8005b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b82:	3302      	adds	r3, #2
 8005b84:	e7c5      	b.n	8005b12 <_printf_common+0x62>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4622      	mov	r2, r4
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	47c0      	blx	r8
 8005b90:	3001      	adds	r0, #1
 8005b92:	d0e6      	beq.n	8005b62 <_printf_common+0xb2>
 8005b94:	f109 0901 	add.w	r9, r9, #1
 8005b98:	e7d8      	b.n	8005b4c <_printf_common+0x9c>
	...

08005b9c <_printf_i>:
 8005b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	7e09      	ldrb	r1, [r1, #24]
 8005ba8:	b085      	sub	sp, #20
 8005baa:	296e      	cmp	r1, #110	; 0x6e
 8005bac:	4617      	mov	r7, r2
 8005bae:	4606      	mov	r6, r0
 8005bb0:	4698      	mov	r8, r3
 8005bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb4:	f000 80b3 	beq.w	8005d1e <_printf_i+0x182>
 8005bb8:	d822      	bhi.n	8005c00 <_printf_i+0x64>
 8005bba:	2963      	cmp	r1, #99	; 0x63
 8005bbc:	d036      	beq.n	8005c2c <_printf_i+0x90>
 8005bbe:	d80a      	bhi.n	8005bd6 <_printf_i+0x3a>
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	f000 80b9 	beq.w	8005d38 <_printf_i+0x19c>
 8005bc6:	2958      	cmp	r1, #88	; 0x58
 8005bc8:	f000 8083 	beq.w	8005cd2 <_printf_i+0x136>
 8005bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005bd4:	e032      	b.n	8005c3c <_printf_i+0xa0>
 8005bd6:	2964      	cmp	r1, #100	; 0x64
 8005bd8:	d001      	beq.n	8005bde <_printf_i+0x42>
 8005bda:	2969      	cmp	r1, #105	; 0x69
 8005bdc:	d1f6      	bne.n	8005bcc <_printf_i+0x30>
 8005bde:	6820      	ldr	r0, [r4, #0]
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	0605      	lsls	r5, r0, #24
 8005be4:	f103 0104 	add.w	r1, r3, #4
 8005be8:	d52a      	bpl.n	8005c40 <_printf_i+0xa4>
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6011      	str	r1, [r2, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da03      	bge.n	8005bfa <_printf_i+0x5e>
 8005bf2:	222d      	movs	r2, #45	; 0x2d
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005bfa:	486f      	ldr	r0, [pc, #444]	; (8005db8 <_printf_i+0x21c>)
 8005bfc:	220a      	movs	r2, #10
 8005bfe:	e039      	b.n	8005c74 <_printf_i+0xd8>
 8005c00:	2973      	cmp	r1, #115	; 0x73
 8005c02:	f000 809d 	beq.w	8005d40 <_printf_i+0x1a4>
 8005c06:	d808      	bhi.n	8005c1a <_printf_i+0x7e>
 8005c08:	296f      	cmp	r1, #111	; 0x6f
 8005c0a:	d020      	beq.n	8005c4e <_printf_i+0xb2>
 8005c0c:	2970      	cmp	r1, #112	; 0x70
 8005c0e:	d1dd      	bne.n	8005bcc <_printf_i+0x30>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	f043 0320 	orr.w	r3, r3, #32
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	e003      	b.n	8005c22 <_printf_i+0x86>
 8005c1a:	2975      	cmp	r1, #117	; 0x75
 8005c1c:	d017      	beq.n	8005c4e <_printf_i+0xb2>
 8005c1e:	2978      	cmp	r1, #120	; 0x78
 8005c20:	d1d4      	bne.n	8005bcc <_printf_i+0x30>
 8005c22:	2378      	movs	r3, #120	; 0x78
 8005c24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c28:	4864      	ldr	r0, [pc, #400]	; (8005dbc <_printf_i+0x220>)
 8005c2a:	e055      	b.n	8005cd8 <_printf_i+0x13c>
 8005c2c:	6813      	ldr	r3, [r2, #0]
 8005c2e:	1d19      	adds	r1, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6011      	str	r1, [r2, #0]
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e08c      	b.n	8005d5a <_printf_i+0x1be>
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6011      	str	r1, [r2, #0]
 8005c44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c48:	bf18      	it	ne
 8005c4a:	b21b      	sxthne	r3, r3
 8005c4c:	e7cf      	b.n	8005bee <_printf_i+0x52>
 8005c4e:	6813      	ldr	r3, [r2, #0]
 8005c50:	6825      	ldr	r5, [r4, #0]
 8005c52:	1d18      	adds	r0, r3, #4
 8005c54:	6010      	str	r0, [r2, #0]
 8005c56:	0628      	lsls	r0, r5, #24
 8005c58:	d501      	bpl.n	8005c5e <_printf_i+0xc2>
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	e002      	b.n	8005c64 <_printf_i+0xc8>
 8005c5e:	0668      	lsls	r0, r5, #25
 8005c60:	d5fb      	bpl.n	8005c5a <_printf_i+0xbe>
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	4854      	ldr	r0, [pc, #336]	; (8005db8 <_printf_i+0x21c>)
 8005c66:	296f      	cmp	r1, #111	; 0x6f
 8005c68:	bf14      	ite	ne
 8005c6a:	220a      	movne	r2, #10
 8005c6c:	2208      	moveq	r2, #8
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c74:	6865      	ldr	r5, [r4, #4]
 8005c76:	60a5      	str	r5, [r4, #8]
 8005c78:	2d00      	cmp	r5, #0
 8005c7a:	f2c0 8095 	blt.w	8005da8 <_printf_i+0x20c>
 8005c7e:	6821      	ldr	r1, [r4, #0]
 8005c80:	f021 0104 	bic.w	r1, r1, #4
 8005c84:	6021      	str	r1, [r4, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d13d      	bne.n	8005d06 <_printf_i+0x16a>
 8005c8a:	2d00      	cmp	r5, #0
 8005c8c:	f040 808e 	bne.w	8005dac <_printf_i+0x210>
 8005c90:	4665      	mov	r5, ip
 8005c92:	2a08      	cmp	r2, #8
 8005c94:	d10b      	bne.n	8005cae <_printf_i+0x112>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	07db      	lsls	r3, r3, #31
 8005c9a:	d508      	bpl.n	8005cae <_printf_i+0x112>
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	6862      	ldr	r2, [r4, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	bfde      	ittt	le
 8005ca4:	2330      	movle	r3, #48	; 0x30
 8005ca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005caa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cae:	ebac 0305 	sub.w	r3, ip, r5
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	f8cd 8000 	str.w	r8, [sp]
 8005cb8:	463b      	mov	r3, r7
 8005cba:	aa03      	add	r2, sp, #12
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f7ff fef6 	bl	8005ab0 <_printf_common>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d14d      	bne.n	8005d64 <_printf_i+0x1c8>
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ccc:	b005      	add	sp, #20
 8005cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cd2:	4839      	ldr	r0, [pc, #228]	; (8005db8 <_printf_i+0x21c>)
 8005cd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005cd8:	6813      	ldr	r3, [r2, #0]
 8005cda:	6821      	ldr	r1, [r4, #0]
 8005cdc:	1d1d      	adds	r5, r3, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6015      	str	r5, [r2, #0]
 8005ce2:	060a      	lsls	r2, r1, #24
 8005ce4:	d50b      	bpl.n	8005cfe <_printf_i+0x162>
 8005ce6:	07ca      	lsls	r2, r1, #31
 8005ce8:	bf44      	itt	mi
 8005cea:	f041 0120 	orrmi.w	r1, r1, #32
 8005cee:	6021      	strmi	r1, [r4, #0]
 8005cf0:	b91b      	cbnz	r3, 8005cfa <_printf_i+0x15e>
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	f022 0220 	bic.w	r2, r2, #32
 8005cf8:	6022      	str	r2, [r4, #0]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	e7b7      	b.n	8005c6e <_printf_i+0xd2>
 8005cfe:	064d      	lsls	r5, r1, #25
 8005d00:	bf48      	it	mi
 8005d02:	b29b      	uxthmi	r3, r3
 8005d04:	e7ef      	b.n	8005ce6 <_printf_i+0x14a>
 8005d06:	4665      	mov	r5, ip
 8005d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d0c:	fb02 3311 	mls	r3, r2, r1, r3
 8005d10:	5cc3      	ldrb	r3, [r0, r3]
 8005d12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d16:	460b      	mov	r3, r1
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	d1f5      	bne.n	8005d08 <_printf_i+0x16c>
 8005d1c:	e7b9      	b.n	8005c92 <_printf_i+0xf6>
 8005d1e:	6813      	ldr	r3, [r2, #0]
 8005d20:	6825      	ldr	r5, [r4, #0]
 8005d22:	6961      	ldr	r1, [r4, #20]
 8005d24:	1d18      	adds	r0, r3, #4
 8005d26:	6010      	str	r0, [r2, #0]
 8005d28:	0628      	lsls	r0, r5, #24
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	d501      	bpl.n	8005d32 <_printf_i+0x196>
 8005d2e:	6019      	str	r1, [r3, #0]
 8005d30:	e002      	b.n	8005d38 <_printf_i+0x19c>
 8005d32:	066a      	lsls	r2, r5, #25
 8005d34:	d5fb      	bpl.n	8005d2e <_printf_i+0x192>
 8005d36:	8019      	strh	r1, [r3, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	4665      	mov	r5, ip
 8005d3e:	e7b9      	b.n	8005cb4 <_printf_i+0x118>
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	1d19      	adds	r1, r3, #4
 8005d44:	6011      	str	r1, [r2, #0]
 8005d46:	681d      	ldr	r5, [r3, #0]
 8005d48:	6862      	ldr	r2, [r4, #4]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f7fa fa47 	bl	80001e0 <memchr>
 8005d52:	b108      	cbz	r0, 8005d58 <_printf_i+0x1bc>
 8005d54:	1b40      	subs	r0, r0, r5
 8005d56:	6060      	str	r0, [r4, #4]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d62:	e7a7      	b.n	8005cb4 <_printf_i+0x118>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	462a      	mov	r2, r5
 8005d68:	4639      	mov	r1, r7
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	47c0      	blx	r8
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d0aa      	beq.n	8005cc8 <_printf_i+0x12c>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	079b      	lsls	r3, r3, #30
 8005d76:	d413      	bmi.n	8005da0 <_printf_i+0x204>
 8005d78:	68e0      	ldr	r0, [r4, #12]
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	4298      	cmp	r0, r3
 8005d7e:	bfb8      	it	lt
 8005d80:	4618      	movlt	r0, r3
 8005d82:	e7a3      	b.n	8005ccc <_printf_i+0x130>
 8005d84:	2301      	movs	r3, #1
 8005d86:	464a      	mov	r2, r9
 8005d88:	4639      	mov	r1, r7
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	47c0      	blx	r8
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d09a      	beq.n	8005cc8 <_printf_i+0x12c>
 8005d92:	3501      	adds	r5, #1
 8005d94:	68e3      	ldr	r3, [r4, #12]
 8005d96:	9a03      	ldr	r2, [sp, #12]
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	42ab      	cmp	r3, r5
 8005d9c:	dcf2      	bgt.n	8005d84 <_printf_i+0x1e8>
 8005d9e:	e7eb      	b.n	8005d78 <_printf_i+0x1dc>
 8005da0:	2500      	movs	r5, #0
 8005da2:	f104 0919 	add.w	r9, r4, #25
 8005da6:	e7f5      	b.n	8005d94 <_printf_i+0x1f8>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1ac      	bne.n	8005d06 <_printf_i+0x16a>
 8005dac:	7803      	ldrb	r3, [r0, #0]
 8005dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db6:	e76c      	b.n	8005c92 <_printf_i+0xf6>
 8005db8:	08008fea 	.word	0x08008fea
 8005dbc:	08008ffb 	.word	0x08008ffb

08005dc0 <_scanf_float>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	469a      	mov	sl, r3
 8005dc6:	688b      	ldr	r3, [r1, #8]
 8005dc8:	4616      	mov	r6, r2
 8005dca:	1e5a      	subs	r2, r3, #1
 8005dcc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005dd0:	b087      	sub	sp, #28
 8005dd2:	bf83      	ittte	hi
 8005dd4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005dd8:	189b      	addhi	r3, r3, r2
 8005dda:	9301      	strhi	r3, [sp, #4]
 8005ddc:	2300      	movls	r3, #0
 8005dde:	bf86      	itte	hi
 8005de0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005de4:	608b      	strhi	r3, [r1, #8]
 8005de6:	9301      	strls	r3, [sp, #4]
 8005de8:	680b      	ldr	r3, [r1, #0]
 8005dea:	4688      	mov	r8, r1
 8005dec:	f04f 0b00 	mov.w	fp, #0
 8005df0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005df4:	f848 3b1c 	str.w	r3, [r8], #28
 8005df8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	4645      	mov	r5, r8
 8005e02:	465a      	mov	r2, fp
 8005e04:	46d9      	mov	r9, fp
 8005e06:	f8cd b008 	str.w	fp, [sp, #8]
 8005e0a:	68a1      	ldr	r1, [r4, #8]
 8005e0c:	b181      	cbz	r1, 8005e30 <_scanf_float+0x70>
 8005e0e:	6833      	ldr	r3, [r6, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b49      	cmp	r3, #73	; 0x49
 8005e14:	d071      	beq.n	8005efa <_scanf_float+0x13a>
 8005e16:	d84d      	bhi.n	8005eb4 <_scanf_float+0xf4>
 8005e18:	2b39      	cmp	r3, #57	; 0x39
 8005e1a:	d840      	bhi.n	8005e9e <_scanf_float+0xde>
 8005e1c:	2b31      	cmp	r3, #49	; 0x31
 8005e1e:	f080 8088 	bcs.w	8005f32 <_scanf_float+0x172>
 8005e22:	2b2d      	cmp	r3, #45	; 0x2d
 8005e24:	f000 8090 	beq.w	8005f48 <_scanf_float+0x188>
 8005e28:	d815      	bhi.n	8005e56 <_scanf_float+0x96>
 8005e2a:	2b2b      	cmp	r3, #43	; 0x2b
 8005e2c:	f000 808c 	beq.w	8005f48 <_scanf_float+0x188>
 8005e30:	f1b9 0f00 	cmp.w	r9, #0
 8005e34:	d003      	beq.n	8005e3e <_scanf_float+0x7e>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	3a01      	subs	r2, #1
 8005e40:	2a01      	cmp	r2, #1
 8005e42:	f200 80ea 	bhi.w	800601a <_scanf_float+0x25a>
 8005e46:	4545      	cmp	r5, r8
 8005e48:	f200 80dc 	bhi.w	8006004 <_scanf_float+0x244>
 8005e4c:	2601      	movs	r6, #1
 8005e4e:	4630      	mov	r0, r6
 8005e50:	b007      	add	sp, #28
 8005e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e56:	2b2e      	cmp	r3, #46	; 0x2e
 8005e58:	f000 809f 	beq.w	8005f9a <_scanf_float+0x1da>
 8005e5c:	2b30      	cmp	r3, #48	; 0x30
 8005e5e:	d1e7      	bne.n	8005e30 <_scanf_float+0x70>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005e66:	d064      	beq.n	8005f32 <_scanf_float+0x172>
 8005e68:	9b01      	ldr	r3, [sp, #4]
 8005e6a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005e6e:	6020      	str	r0, [r4, #0]
 8005e70:	f109 0901 	add.w	r9, r9, #1
 8005e74:	b11b      	cbz	r3, 8005e7e <_scanf_float+0xbe>
 8005e76:	3b01      	subs	r3, #1
 8005e78:	3101      	adds	r1, #1
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	60a1      	str	r1, [r4, #8]
 8005e7e:	68a3      	ldr	r3, [r4, #8]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	60a3      	str	r3, [r4, #8]
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	3301      	adds	r3, #1
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	6873      	ldr	r3, [r6, #4]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	6073      	str	r3, [r6, #4]
 8005e92:	f340 80ac 	ble.w	8005fee <_scanf_float+0x22e>
 8005e96:	6833      	ldr	r3, [r6, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	6033      	str	r3, [r6, #0]
 8005e9c:	e7b5      	b.n	8005e0a <_scanf_float+0x4a>
 8005e9e:	2b45      	cmp	r3, #69	; 0x45
 8005ea0:	f000 8085 	beq.w	8005fae <_scanf_float+0x1ee>
 8005ea4:	2b46      	cmp	r3, #70	; 0x46
 8005ea6:	d06a      	beq.n	8005f7e <_scanf_float+0x1be>
 8005ea8:	2b41      	cmp	r3, #65	; 0x41
 8005eaa:	d1c1      	bne.n	8005e30 <_scanf_float+0x70>
 8005eac:	2a01      	cmp	r2, #1
 8005eae:	d1bf      	bne.n	8005e30 <_scanf_float+0x70>
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	e046      	b.n	8005f42 <_scanf_float+0x182>
 8005eb4:	2b65      	cmp	r3, #101	; 0x65
 8005eb6:	d07a      	beq.n	8005fae <_scanf_float+0x1ee>
 8005eb8:	d818      	bhi.n	8005eec <_scanf_float+0x12c>
 8005eba:	2b54      	cmp	r3, #84	; 0x54
 8005ebc:	d066      	beq.n	8005f8c <_scanf_float+0x1cc>
 8005ebe:	d811      	bhi.n	8005ee4 <_scanf_float+0x124>
 8005ec0:	2b4e      	cmp	r3, #78	; 0x4e
 8005ec2:	d1b5      	bne.n	8005e30 <_scanf_float+0x70>
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	d146      	bne.n	8005f56 <_scanf_float+0x196>
 8005ec8:	f1b9 0f00 	cmp.w	r9, #0
 8005ecc:	d145      	bne.n	8005f5a <_scanf_float+0x19a>
 8005ece:	6821      	ldr	r1, [r4, #0]
 8005ed0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005ed4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005ed8:	d13f      	bne.n	8005f5a <_scanf_float+0x19a>
 8005eda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005ede:	6021      	str	r1, [r4, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	e02e      	b.n	8005f42 <_scanf_float+0x182>
 8005ee4:	2b59      	cmp	r3, #89	; 0x59
 8005ee6:	d01e      	beq.n	8005f26 <_scanf_float+0x166>
 8005ee8:	2b61      	cmp	r3, #97	; 0x61
 8005eea:	e7de      	b.n	8005eaa <_scanf_float+0xea>
 8005eec:	2b6e      	cmp	r3, #110	; 0x6e
 8005eee:	d0e9      	beq.n	8005ec4 <_scanf_float+0x104>
 8005ef0:	d815      	bhi.n	8005f1e <_scanf_float+0x15e>
 8005ef2:	2b66      	cmp	r3, #102	; 0x66
 8005ef4:	d043      	beq.n	8005f7e <_scanf_float+0x1be>
 8005ef6:	2b69      	cmp	r3, #105	; 0x69
 8005ef8:	d19a      	bne.n	8005e30 <_scanf_float+0x70>
 8005efa:	f1bb 0f00 	cmp.w	fp, #0
 8005efe:	d138      	bne.n	8005f72 <_scanf_float+0x1b2>
 8005f00:	f1b9 0f00 	cmp.w	r9, #0
 8005f04:	d197      	bne.n	8005e36 <_scanf_float+0x76>
 8005f06:	6821      	ldr	r1, [r4, #0]
 8005f08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005f0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005f10:	d195      	bne.n	8005e3e <_scanf_float+0x7e>
 8005f12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005f16:	6021      	str	r1, [r4, #0]
 8005f18:	f04f 0b01 	mov.w	fp, #1
 8005f1c:	e011      	b.n	8005f42 <_scanf_float+0x182>
 8005f1e:	2b74      	cmp	r3, #116	; 0x74
 8005f20:	d034      	beq.n	8005f8c <_scanf_float+0x1cc>
 8005f22:	2b79      	cmp	r3, #121	; 0x79
 8005f24:	d184      	bne.n	8005e30 <_scanf_float+0x70>
 8005f26:	f1bb 0f07 	cmp.w	fp, #7
 8005f2a:	d181      	bne.n	8005e30 <_scanf_float+0x70>
 8005f2c:	f04f 0b08 	mov.w	fp, #8
 8005f30:	e007      	b.n	8005f42 <_scanf_float+0x182>
 8005f32:	eb12 0f0b 	cmn.w	r2, fp
 8005f36:	f47f af7b 	bne.w	8005e30 <_scanf_float+0x70>
 8005f3a:	6821      	ldr	r1, [r4, #0]
 8005f3c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005f40:	6021      	str	r1, [r4, #0]
 8005f42:	702b      	strb	r3, [r5, #0]
 8005f44:	3501      	adds	r5, #1
 8005f46:	e79a      	b.n	8005e7e <_scanf_float+0xbe>
 8005f48:	6821      	ldr	r1, [r4, #0]
 8005f4a:	0608      	lsls	r0, r1, #24
 8005f4c:	f57f af70 	bpl.w	8005e30 <_scanf_float+0x70>
 8005f50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f54:	e7f4      	b.n	8005f40 <_scanf_float+0x180>
 8005f56:	2a02      	cmp	r2, #2
 8005f58:	d047      	beq.n	8005fea <_scanf_float+0x22a>
 8005f5a:	f1bb 0f01 	cmp.w	fp, #1
 8005f5e:	d003      	beq.n	8005f68 <_scanf_float+0x1a8>
 8005f60:	f1bb 0f04 	cmp.w	fp, #4
 8005f64:	f47f af64 	bne.w	8005e30 <_scanf_float+0x70>
 8005f68:	f10b 0b01 	add.w	fp, fp, #1
 8005f6c:	fa5f fb8b 	uxtb.w	fp, fp
 8005f70:	e7e7      	b.n	8005f42 <_scanf_float+0x182>
 8005f72:	f1bb 0f03 	cmp.w	fp, #3
 8005f76:	d0f7      	beq.n	8005f68 <_scanf_float+0x1a8>
 8005f78:	f1bb 0f05 	cmp.w	fp, #5
 8005f7c:	e7f2      	b.n	8005f64 <_scanf_float+0x1a4>
 8005f7e:	f1bb 0f02 	cmp.w	fp, #2
 8005f82:	f47f af55 	bne.w	8005e30 <_scanf_float+0x70>
 8005f86:	f04f 0b03 	mov.w	fp, #3
 8005f8a:	e7da      	b.n	8005f42 <_scanf_float+0x182>
 8005f8c:	f1bb 0f06 	cmp.w	fp, #6
 8005f90:	f47f af4e 	bne.w	8005e30 <_scanf_float+0x70>
 8005f94:	f04f 0b07 	mov.w	fp, #7
 8005f98:	e7d3      	b.n	8005f42 <_scanf_float+0x182>
 8005f9a:	6821      	ldr	r1, [r4, #0]
 8005f9c:	0588      	lsls	r0, r1, #22
 8005f9e:	f57f af47 	bpl.w	8005e30 <_scanf_float+0x70>
 8005fa2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005fa6:	6021      	str	r1, [r4, #0]
 8005fa8:	f8cd 9008 	str.w	r9, [sp, #8]
 8005fac:	e7c9      	b.n	8005f42 <_scanf_float+0x182>
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005fb4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005fb8:	d006      	beq.n	8005fc8 <_scanf_float+0x208>
 8005fba:	0548      	lsls	r0, r1, #21
 8005fbc:	f57f af38 	bpl.w	8005e30 <_scanf_float+0x70>
 8005fc0:	f1b9 0f00 	cmp.w	r9, #0
 8005fc4:	f43f af3b 	beq.w	8005e3e <_scanf_float+0x7e>
 8005fc8:	0588      	lsls	r0, r1, #22
 8005fca:	bf58      	it	pl
 8005fcc:	9802      	ldrpl	r0, [sp, #8]
 8005fce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005fd2:	bf58      	it	pl
 8005fd4:	eba9 0000 	subpl.w	r0, r9, r0
 8005fd8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005fdc:	bf58      	it	pl
 8005fde:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005fe2:	6021      	str	r1, [r4, #0]
 8005fe4:	f04f 0900 	mov.w	r9, #0
 8005fe8:	e7ab      	b.n	8005f42 <_scanf_float+0x182>
 8005fea:	2203      	movs	r2, #3
 8005fec:	e7a9      	b.n	8005f42 <_scanf_float+0x182>
 8005fee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ff2:	9205      	str	r2, [sp, #20]
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	4798      	blx	r3
 8005ffa:	9a05      	ldr	r2, [sp, #20]
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f43f af04 	beq.w	8005e0a <_scanf_float+0x4a>
 8006002:	e715      	b.n	8005e30 <_scanf_float+0x70>
 8006004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006008:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800600c:	4632      	mov	r2, r6
 800600e:	4638      	mov	r0, r7
 8006010:	4798      	blx	r3
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	3b01      	subs	r3, #1
 8006016:	6123      	str	r3, [r4, #16]
 8006018:	e715      	b.n	8005e46 <_scanf_float+0x86>
 800601a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800601e:	2b06      	cmp	r3, #6
 8006020:	d80a      	bhi.n	8006038 <_scanf_float+0x278>
 8006022:	f1bb 0f02 	cmp.w	fp, #2
 8006026:	d968      	bls.n	80060fa <_scanf_float+0x33a>
 8006028:	f1ab 0b03 	sub.w	fp, fp, #3
 800602c:	fa5f fb8b 	uxtb.w	fp, fp
 8006030:	eba5 0b0b 	sub.w	fp, r5, fp
 8006034:	455d      	cmp	r5, fp
 8006036:	d14b      	bne.n	80060d0 <_scanf_float+0x310>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	05da      	lsls	r2, r3, #23
 800603c:	d51f      	bpl.n	800607e <_scanf_float+0x2be>
 800603e:	055b      	lsls	r3, r3, #21
 8006040:	d468      	bmi.n	8006114 <_scanf_float+0x354>
 8006042:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	2965      	cmp	r1, #101	; 0x65
 800604a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800604e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006052:	6123      	str	r3, [r4, #16]
 8006054:	d00d      	beq.n	8006072 <_scanf_float+0x2b2>
 8006056:	2945      	cmp	r1, #69	; 0x45
 8006058:	d00b      	beq.n	8006072 <_scanf_float+0x2b2>
 800605a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800605e:	4632      	mov	r2, r6
 8006060:	4638      	mov	r0, r7
 8006062:	4798      	blx	r3
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800606a:	3b01      	subs	r3, #1
 800606c:	f1a5 0b02 	sub.w	fp, r5, #2
 8006070:	6123      	str	r3, [r4, #16]
 8006072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006076:	4632      	mov	r2, r6
 8006078:	4638      	mov	r0, r7
 800607a:	4798      	blx	r3
 800607c:	465d      	mov	r5, fp
 800607e:	6826      	ldr	r6, [r4, #0]
 8006080:	f016 0610 	ands.w	r6, r6, #16
 8006084:	d17a      	bne.n	800617c <_scanf_float+0x3bc>
 8006086:	702e      	strb	r6, [r5, #0]
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800608e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006092:	d142      	bne.n	800611a <_scanf_float+0x35a>
 8006094:	9b02      	ldr	r3, [sp, #8]
 8006096:	eba9 0303 	sub.w	r3, r9, r3
 800609a:	425a      	negs	r2, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d149      	bne.n	8006134 <_scanf_float+0x374>
 80060a0:	2200      	movs	r2, #0
 80060a2:	4641      	mov	r1, r8
 80060a4:	4638      	mov	r0, r7
 80060a6:	f000 fea3 	bl	8006df0 <_strtod_r>
 80060aa:	6825      	ldr	r5, [r4, #0]
 80060ac:	f8da 3000 	ldr.w	r3, [sl]
 80060b0:	f015 0f02 	tst.w	r5, #2
 80060b4:	f103 0204 	add.w	r2, r3, #4
 80060b8:	ec59 8b10 	vmov	r8, r9, d0
 80060bc:	f8ca 2000 	str.w	r2, [sl]
 80060c0:	d043      	beq.n	800614a <_scanf_float+0x38a>
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	e9c3 8900 	strd	r8, r9, [r3]
 80060c8:	68e3      	ldr	r3, [r4, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60e3      	str	r3, [r4, #12]
 80060ce:	e6be      	b.n	8005e4e <_scanf_float+0x8e>
 80060d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80060d8:	4632      	mov	r2, r6
 80060da:	4638      	mov	r0, r7
 80060dc:	4798      	blx	r3
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	e7a6      	b.n	8006034 <_scanf_float+0x274>
 80060e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80060ee:	4632      	mov	r2, r6
 80060f0:	4638      	mov	r0, r7
 80060f2:	4798      	blx	r3
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	4545      	cmp	r5, r8
 80060fc:	d8f3      	bhi.n	80060e6 <_scanf_float+0x326>
 80060fe:	e6a5      	b.n	8005e4c <_scanf_float+0x8c>
 8006100:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006104:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006108:	4632      	mov	r2, r6
 800610a:	4638      	mov	r0, r7
 800610c:	4798      	blx	r3
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	3b01      	subs	r3, #1
 8006112:	6123      	str	r3, [r4, #16]
 8006114:	4545      	cmp	r5, r8
 8006116:	d8f3      	bhi.n	8006100 <_scanf_float+0x340>
 8006118:	e698      	b.n	8005e4c <_scanf_float+0x8c>
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0bf      	beq.n	80060a0 <_scanf_float+0x2e0>
 8006120:	9904      	ldr	r1, [sp, #16]
 8006122:	230a      	movs	r3, #10
 8006124:	4632      	mov	r2, r6
 8006126:	3101      	adds	r1, #1
 8006128:	4638      	mov	r0, r7
 800612a:	f000 feed 	bl	8006f08 <_strtol_r>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	9d04      	ldr	r5, [sp, #16]
 8006132:	1ac2      	subs	r2, r0, r3
 8006134:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006138:	429d      	cmp	r5, r3
 800613a:	bf28      	it	cs
 800613c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006140:	490f      	ldr	r1, [pc, #60]	; (8006180 <_scanf_float+0x3c0>)
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f824 	bl	8006190 <siprintf>
 8006148:	e7aa      	b.n	80060a0 <_scanf_float+0x2e0>
 800614a:	f015 0504 	ands.w	r5, r5, #4
 800614e:	d1b8      	bne.n	80060c2 <_scanf_float+0x302>
 8006150:	681f      	ldr	r7, [r3, #0]
 8006152:	ee10 2a10 	vmov	r2, s0
 8006156:	464b      	mov	r3, r9
 8006158:	ee10 0a10 	vmov	r0, s0
 800615c:	4649      	mov	r1, r9
 800615e:	f7fa fce5 	bl	8000b2c <__aeabi_dcmpun>
 8006162:	b128      	cbz	r0, 8006170 <_scanf_float+0x3b0>
 8006164:	4628      	mov	r0, r5
 8006166:	f000 f80d 	bl	8006184 <nanf>
 800616a:	ed87 0a00 	vstr	s0, [r7]
 800616e:	e7ab      	b.n	80060c8 <_scanf_float+0x308>
 8006170:	4640      	mov	r0, r8
 8006172:	4649      	mov	r1, r9
 8006174:	f7fa fd38 	bl	8000be8 <__aeabi_d2f>
 8006178:	6038      	str	r0, [r7, #0]
 800617a:	e7a5      	b.n	80060c8 <_scanf_float+0x308>
 800617c:	2600      	movs	r6, #0
 800617e:	e666      	b.n	8005e4e <_scanf_float+0x8e>
 8006180:	0800900c 	.word	0x0800900c

08006184 <nanf>:
 8006184:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800618c <nanf+0x8>
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	7fc00000 	.word	0x7fc00000

08006190 <siprintf>:
 8006190:	b40e      	push	{r1, r2, r3}
 8006192:	b500      	push	{lr}
 8006194:	b09c      	sub	sp, #112	; 0x70
 8006196:	ab1d      	add	r3, sp, #116	; 0x74
 8006198:	9002      	str	r0, [sp, #8]
 800619a:	9006      	str	r0, [sp, #24]
 800619c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061a0:	4809      	ldr	r0, [pc, #36]	; (80061c8 <siprintf+0x38>)
 80061a2:	9107      	str	r1, [sp, #28]
 80061a4:	9104      	str	r1, [sp, #16]
 80061a6:	4909      	ldr	r1, [pc, #36]	; (80061cc <siprintf+0x3c>)
 80061a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ac:	9105      	str	r1, [sp, #20]
 80061ae:	6800      	ldr	r0, [r0, #0]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	a902      	add	r1, sp, #8
 80061b4:	f002 fd6e 	bl	8008c94 <_svfiprintf_r>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	b01c      	add	sp, #112	; 0x70
 80061c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061c4:	b003      	add	sp, #12
 80061c6:	4770      	bx	lr
 80061c8:	20000014 	.word	0x20000014
 80061cc:	ffff0208 	.word	0xffff0208

080061d0 <sulp>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	4604      	mov	r4, r0
 80061d4:	460d      	mov	r5, r1
 80061d6:	ec45 4b10 	vmov	d0, r4, r5
 80061da:	4616      	mov	r6, r2
 80061dc:	f002 fb16 	bl	800880c <__ulp>
 80061e0:	ec51 0b10 	vmov	r0, r1, d0
 80061e4:	b17e      	cbz	r6, 8006206 <sulp+0x36>
 80061e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80061ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	dd09      	ble.n	8006206 <sulp+0x36>
 80061f2:	051b      	lsls	r3, r3, #20
 80061f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80061f8:	2400      	movs	r4, #0
 80061fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80061fe:	4622      	mov	r2, r4
 8006200:	462b      	mov	r3, r5
 8006202:	f7fa f9f9 	bl	80005f8 <__aeabi_dmul>
 8006206:	bd70      	pop	{r4, r5, r6, pc}

08006208 <_strtod_l>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	461f      	mov	r7, r3
 800620e:	b0a1      	sub	sp, #132	; 0x84
 8006210:	2300      	movs	r3, #0
 8006212:	4681      	mov	r9, r0
 8006214:	4638      	mov	r0, r7
 8006216:	460e      	mov	r6, r1
 8006218:	9217      	str	r2, [sp, #92]	; 0x5c
 800621a:	931c      	str	r3, [sp, #112]	; 0x70
 800621c:	f001 fff5 	bl	800820a <__localeconv_l>
 8006220:	4680      	mov	r8, r0
 8006222:	6800      	ldr	r0, [r0, #0]
 8006224:	f7f9 ffd4 	bl	80001d0 <strlen>
 8006228:	f04f 0a00 	mov.w	sl, #0
 800622c:	4604      	mov	r4, r0
 800622e:	f04f 0b00 	mov.w	fp, #0
 8006232:	961b      	str	r6, [sp, #108]	; 0x6c
 8006234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	2a0d      	cmp	r2, #13
 800623a:	d832      	bhi.n	80062a2 <_strtod_l+0x9a>
 800623c:	2a09      	cmp	r2, #9
 800623e:	d236      	bcs.n	80062ae <_strtod_l+0xa6>
 8006240:	2a00      	cmp	r2, #0
 8006242:	d03e      	beq.n	80062c2 <_strtod_l+0xba>
 8006244:	2300      	movs	r3, #0
 8006246:	930d      	str	r3, [sp, #52]	; 0x34
 8006248:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800624a:	782b      	ldrb	r3, [r5, #0]
 800624c:	2b30      	cmp	r3, #48	; 0x30
 800624e:	f040 80ac 	bne.w	80063aa <_strtod_l+0x1a2>
 8006252:	786b      	ldrb	r3, [r5, #1]
 8006254:	2b58      	cmp	r3, #88	; 0x58
 8006256:	d001      	beq.n	800625c <_strtod_l+0x54>
 8006258:	2b78      	cmp	r3, #120	; 0x78
 800625a:	d167      	bne.n	800632c <_strtod_l+0x124>
 800625c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	ab1c      	add	r3, sp, #112	; 0x70
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	9702      	str	r7, [sp, #8]
 8006266:	ab1d      	add	r3, sp, #116	; 0x74
 8006268:	4a88      	ldr	r2, [pc, #544]	; (800648c <_strtod_l+0x284>)
 800626a:	a91b      	add	r1, sp, #108	; 0x6c
 800626c:	4648      	mov	r0, r9
 800626e:	f001 fcf2 	bl	8007c56 <__gethex>
 8006272:	f010 0407 	ands.w	r4, r0, #7
 8006276:	4606      	mov	r6, r0
 8006278:	d005      	beq.n	8006286 <_strtod_l+0x7e>
 800627a:	2c06      	cmp	r4, #6
 800627c:	d12b      	bne.n	80062d6 <_strtod_l+0xce>
 800627e:	3501      	adds	r5, #1
 8006280:	2300      	movs	r3, #0
 8006282:	951b      	str	r5, [sp, #108]	; 0x6c
 8006284:	930d      	str	r3, [sp, #52]	; 0x34
 8006286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 859a 	bne.w	8006dc2 <_strtod_l+0xbba>
 800628e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006290:	b1e3      	cbz	r3, 80062cc <_strtod_l+0xc4>
 8006292:	4652      	mov	r2, sl
 8006294:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006298:	ec43 2b10 	vmov	d0, r2, r3
 800629c:	b021      	add	sp, #132	; 0x84
 800629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a2:	2a2b      	cmp	r2, #43	; 0x2b
 80062a4:	d015      	beq.n	80062d2 <_strtod_l+0xca>
 80062a6:	2a2d      	cmp	r2, #45	; 0x2d
 80062a8:	d004      	beq.n	80062b4 <_strtod_l+0xac>
 80062aa:	2a20      	cmp	r2, #32
 80062ac:	d1ca      	bne.n	8006244 <_strtod_l+0x3c>
 80062ae:	3301      	adds	r3, #1
 80062b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80062b2:	e7bf      	b.n	8006234 <_strtod_l+0x2c>
 80062b4:	2201      	movs	r2, #1
 80062b6:	920d      	str	r2, [sp, #52]	; 0x34
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1c2      	bne.n	8006248 <_strtod_l+0x40>
 80062c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 8579 	bne.w	8006dbe <_strtod_l+0xbb6>
 80062cc:	4652      	mov	r2, sl
 80062ce:	465b      	mov	r3, fp
 80062d0:	e7e2      	b.n	8006298 <_strtod_l+0x90>
 80062d2:	2200      	movs	r2, #0
 80062d4:	e7ef      	b.n	80062b6 <_strtod_l+0xae>
 80062d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80062d8:	b13a      	cbz	r2, 80062ea <_strtod_l+0xe2>
 80062da:	2135      	movs	r1, #53	; 0x35
 80062dc:	a81e      	add	r0, sp, #120	; 0x78
 80062de:	f002 fb8d 	bl	80089fc <__copybits>
 80062e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062e4:	4648      	mov	r0, r9
 80062e6:	f001 fffa 	bl	80082de <_Bfree>
 80062ea:	3c01      	subs	r4, #1
 80062ec:	2c04      	cmp	r4, #4
 80062ee:	d806      	bhi.n	80062fe <_strtod_l+0xf6>
 80062f0:	e8df f004 	tbb	[pc, r4]
 80062f4:	1714030a 	.word	0x1714030a
 80062f8:	0a          	.byte	0x0a
 80062f9:	00          	.byte	0x00
 80062fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80062fe:	0730      	lsls	r0, r6, #28
 8006300:	d5c1      	bpl.n	8006286 <_strtod_l+0x7e>
 8006302:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006306:	e7be      	b.n	8006286 <_strtod_l+0x7e>
 8006308:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800630c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800630e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006312:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006316:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800631a:	e7f0      	b.n	80062fe <_strtod_l+0xf6>
 800631c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006490 <_strtod_l+0x288>
 8006320:	e7ed      	b.n	80062fe <_strtod_l+0xf6>
 8006322:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006326:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800632a:	e7e8      	b.n	80062fe <_strtod_l+0xf6>
 800632c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	921b      	str	r2, [sp, #108]	; 0x6c
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b30      	cmp	r3, #48	; 0x30
 8006336:	d0f9      	beq.n	800632c <_strtod_l+0x124>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0a4      	beq.n	8006286 <_strtod_l+0x7e>
 800633c:	2301      	movs	r3, #1
 800633e:	2500      	movs	r5, #0
 8006340:	9306      	str	r3, [sp, #24]
 8006342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006344:	9308      	str	r3, [sp, #32]
 8006346:	9507      	str	r5, [sp, #28]
 8006348:	9505      	str	r5, [sp, #20]
 800634a:	220a      	movs	r2, #10
 800634c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800634e:	7807      	ldrb	r7, [r0, #0]
 8006350:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006354:	b2d9      	uxtb	r1, r3
 8006356:	2909      	cmp	r1, #9
 8006358:	d929      	bls.n	80063ae <_strtod_l+0x1a6>
 800635a:	4622      	mov	r2, r4
 800635c:	f8d8 1000 	ldr.w	r1, [r8]
 8006360:	f002 fda0 	bl	8008ea4 <strncmp>
 8006364:	2800      	cmp	r0, #0
 8006366:	d031      	beq.n	80063cc <_strtod_l+0x1c4>
 8006368:	2000      	movs	r0, #0
 800636a:	9c05      	ldr	r4, [sp, #20]
 800636c:	9004      	str	r0, [sp, #16]
 800636e:	463b      	mov	r3, r7
 8006370:	4602      	mov	r2, r0
 8006372:	2b65      	cmp	r3, #101	; 0x65
 8006374:	d001      	beq.n	800637a <_strtod_l+0x172>
 8006376:	2b45      	cmp	r3, #69	; 0x45
 8006378:	d114      	bne.n	80063a4 <_strtod_l+0x19c>
 800637a:	b924      	cbnz	r4, 8006386 <_strtod_l+0x17e>
 800637c:	b910      	cbnz	r0, 8006384 <_strtod_l+0x17c>
 800637e:	9b06      	ldr	r3, [sp, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d09e      	beq.n	80062c2 <_strtod_l+0xba>
 8006384:	2400      	movs	r4, #0
 8006386:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006388:	1c73      	adds	r3, r6, #1
 800638a:	931b      	str	r3, [sp, #108]	; 0x6c
 800638c:	7873      	ldrb	r3, [r6, #1]
 800638e:	2b2b      	cmp	r3, #43	; 0x2b
 8006390:	d078      	beq.n	8006484 <_strtod_l+0x27c>
 8006392:	2b2d      	cmp	r3, #45	; 0x2d
 8006394:	d070      	beq.n	8006478 <_strtod_l+0x270>
 8006396:	f04f 0c00 	mov.w	ip, #0
 800639a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800639e:	2f09      	cmp	r7, #9
 80063a0:	d97c      	bls.n	800649c <_strtod_l+0x294>
 80063a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80063a4:	f04f 0e00 	mov.w	lr, #0
 80063a8:	e09a      	b.n	80064e0 <_strtod_l+0x2d8>
 80063aa:	2300      	movs	r3, #0
 80063ac:	e7c7      	b.n	800633e <_strtod_l+0x136>
 80063ae:	9905      	ldr	r1, [sp, #20]
 80063b0:	2908      	cmp	r1, #8
 80063b2:	bfdd      	ittte	le
 80063b4:	9907      	ldrle	r1, [sp, #28]
 80063b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80063ba:	9307      	strle	r3, [sp, #28]
 80063bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80063c0:	9b05      	ldr	r3, [sp, #20]
 80063c2:	3001      	adds	r0, #1
 80063c4:	3301      	adds	r3, #1
 80063c6:	9305      	str	r3, [sp, #20]
 80063c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80063ca:	e7bf      	b.n	800634c <_strtod_l+0x144>
 80063cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ce:	191a      	adds	r2, r3, r4
 80063d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80063d2:	9a05      	ldr	r2, [sp, #20]
 80063d4:	5d1b      	ldrb	r3, [r3, r4]
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	d037      	beq.n	800644a <_strtod_l+0x242>
 80063da:	9c05      	ldr	r4, [sp, #20]
 80063dc:	4602      	mov	r2, r0
 80063de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80063e2:	2909      	cmp	r1, #9
 80063e4:	d913      	bls.n	800640e <_strtod_l+0x206>
 80063e6:	2101      	movs	r1, #1
 80063e8:	9104      	str	r1, [sp, #16]
 80063ea:	e7c2      	b.n	8006372 <_strtod_l+0x16a>
 80063ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	3001      	adds	r0, #1
 80063f6:	2b30      	cmp	r3, #48	; 0x30
 80063f8:	d0f8      	beq.n	80063ec <_strtod_l+0x1e4>
 80063fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80063fe:	2a08      	cmp	r2, #8
 8006400:	f200 84e4 	bhi.w	8006dcc <_strtod_l+0xbc4>
 8006404:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006406:	9208      	str	r2, [sp, #32]
 8006408:	4602      	mov	r2, r0
 800640a:	2000      	movs	r0, #0
 800640c:	4604      	mov	r4, r0
 800640e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006412:	f100 0101 	add.w	r1, r0, #1
 8006416:	d012      	beq.n	800643e <_strtod_l+0x236>
 8006418:	440a      	add	r2, r1
 800641a:	eb00 0c04 	add.w	ip, r0, r4
 800641e:	4621      	mov	r1, r4
 8006420:	270a      	movs	r7, #10
 8006422:	458c      	cmp	ip, r1
 8006424:	d113      	bne.n	800644e <_strtod_l+0x246>
 8006426:	1821      	adds	r1, r4, r0
 8006428:	2908      	cmp	r1, #8
 800642a:	f104 0401 	add.w	r4, r4, #1
 800642e:	4404      	add	r4, r0
 8006430:	dc19      	bgt.n	8006466 <_strtod_l+0x25e>
 8006432:	9b07      	ldr	r3, [sp, #28]
 8006434:	210a      	movs	r1, #10
 8006436:	fb01 e303 	mla	r3, r1, r3, lr
 800643a:	9307      	str	r3, [sp, #28]
 800643c:	2100      	movs	r1, #0
 800643e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006440:	1c58      	adds	r0, r3, #1
 8006442:	901b      	str	r0, [sp, #108]	; 0x6c
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	4608      	mov	r0, r1
 8006448:	e7c9      	b.n	80063de <_strtod_l+0x1d6>
 800644a:	9805      	ldr	r0, [sp, #20]
 800644c:	e7d3      	b.n	80063f6 <_strtod_l+0x1ee>
 800644e:	2908      	cmp	r1, #8
 8006450:	f101 0101 	add.w	r1, r1, #1
 8006454:	dc03      	bgt.n	800645e <_strtod_l+0x256>
 8006456:	9b07      	ldr	r3, [sp, #28]
 8006458:	437b      	muls	r3, r7
 800645a:	9307      	str	r3, [sp, #28]
 800645c:	e7e1      	b.n	8006422 <_strtod_l+0x21a>
 800645e:	2910      	cmp	r1, #16
 8006460:	bfd8      	it	le
 8006462:	437d      	mulle	r5, r7
 8006464:	e7dd      	b.n	8006422 <_strtod_l+0x21a>
 8006466:	2c10      	cmp	r4, #16
 8006468:	bfdc      	itt	le
 800646a:	210a      	movle	r1, #10
 800646c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006470:	e7e4      	b.n	800643c <_strtod_l+0x234>
 8006472:	2301      	movs	r3, #1
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	e781      	b.n	800637c <_strtod_l+0x174>
 8006478:	f04f 0c01 	mov.w	ip, #1
 800647c:	1cb3      	adds	r3, r6, #2
 800647e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006480:	78b3      	ldrb	r3, [r6, #2]
 8006482:	e78a      	b.n	800639a <_strtod_l+0x192>
 8006484:	f04f 0c00 	mov.w	ip, #0
 8006488:	e7f8      	b.n	800647c <_strtod_l+0x274>
 800648a:	bf00      	nop
 800648c:	08009014 	.word	0x08009014
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006496:	1c5f      	adds	r7, r3, #1
 8006498:	971b      	str	r7, [sp, #108]	; 0x6c
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b30      	cmp	r3, #48	; 0x30
 800649e:	d0f9      	beq.n	8006494 <_strtod_l+0x28c>
 80064a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80064a4:	2f08      	cmp	r7, #8
 80064a6:	f63f af7d 	bhi.w	80063a4 <_strtod_l+0x19c>
 80064aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80064ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064b0:	930a      	str	r3, [sp, #40]	; 0x28
 80064b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064b4:	1c5f      	adds	r7, r3, #1
 80064b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80064be:	f1b8 0f09 	cmp.w	r8, #9
 80064c2:	d937      	bls.n	8006534 <_strtod_l+0x32c>
 80064c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064c6:	1a7f      	subs	r7, r7, r1
 80064c8:	2f08      	cmp	r7, #8
 80064ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80064ce:	dc37      	bgt.n	8006540 <_strtod_l+0x338>
 80064d0:	45be      	cmp	lr, r7
 80064d2:	bfa8      	it	ge
 80064d4:	46be      	movge	lr, r7
 80064d6:	f1bc 0f00 	cmp.w	ip, #0
 80064da:	d001      	beq.n	80064e0 <_strtod_l+0x2d8>
 80064dc:	f1ce 0e00 	rsb	lr, lr, #0
 80064e0:	2c00      	cmp	r4, #0
 80064e2:	d151      	bne.n	8006588 <_strtod_l+0x380>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f47f aece 	bne.w	8006286 <_strtod_l+0x7e>
 80064ea:	9a06      	ldr	r2, [sp, #24]
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	f47f aeca 	bne.w	8006286 <_strtod_l+0x7e>
 80064f2:	9a04      	ldr	r2, [sp, #16]
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	f47f aee4 	bne.w	80062c2 <_strtod_l+0xba>
 80064fa:	2b4e      	cmp	r3, #78	; 0x4e
 80064fc:	d027      	beq.n	800654e <_strtod_l+0x346>
 80064fe:	dc21      	bgt.n	8006544 <_strtod_l+0x33c>
 8006500:	2b49      	cmp	r3, #73	; 0x49
 8006502:	f47f aede 	bne.w	80062c2 <_strtod_l+0xba>
 8006506:	49a0      	ldr	r1, [pc, #640]	; (8006788 <_strtod_l+0x580>)
 8006508:	a81b      	add	r0, sp, #108	; 0x6c
 800650a:	f001 fdd7 	bl	80080bc <__match>
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f aed7 	beq.w	80062c2 <_strtod_l+0xba>
 8006514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006516:	499d      	ldr	r1, [pc, #628]	; (800678c <_strtod_l+0x584>)
 8006518:	3b01      	subs	r3, #1
 800651a:	a81b      	add	r0, sp, #108	; 0x6c
 800651c:	931b      	str	r3, [sp, #108]	; 0x6c
 800651e:	f001 fdcd 	bl	80080bc <__match>
 8006522:	b910      	cbnz	r0, 800652a <_strtod_l+0x322>
 8006524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006526:	3301      	adds	r3, #1
 8006528:	931b      	str	r3, [sp, #108]	; 0x6c
 800652a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80067a0 <_strtod_l+0x598>
 800652e:	f04f 0a00 	mov.w	sl, #0
 8006532:	e6a8      	b.n	8006286 <_strtod_l+0x7e>
 8006534:	210a      	movs	r1, #10
 8006536:	fb01 3e0e 	mla	lr, r1, lr, r3
 800653a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800653e:	e7b8      	b.n	80064b2 <_strtod_l+0x2aa>
 8006540:	46be      	mov	lr, r7
 8006542:	e7c8      	b.n	80064d6 <_strtod_l+0x2ce>
 8006544:	2b69      	cmp	r3, #105	; 0x69
 8006546:	d0de      	beq.n	8006506 <_strtod_l+0x2fe>
 8006548:	2b6e      	cmp	r3, #110	; 0x6e
 800654a:	f47f aeba 	bne.w	80062c2 <_strtod_l+0xba>
 800654e:	4990      	ldr	r1, [pc, #576]	; (8006790 <_strtod_l+0x588>)
 8006550:	a81b      	add	r0, sp, #108	; 0x6c
 8006552:	f001 fdb3 	bl	80080bc <__match>
 8006556:	2800      	cmp	r0, #0
 8006558:	f43f aeb3 	beq.w	80062c2 <_strtod_l+0xba>
 800655c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b28      	cmp	r3, #40	; 0x28
 8006562:	d10e      	bne.n	8006582 <_strtod_l+0x37a>
 8006564:	aa1e      	add	r2, sp, #120	; 0x78
 8006566:	498b      	ldr	r1, [pc, #556]	; (8006794 <_strtod_l+0x58c>)
 8006568:	a81b      	add	r0, sp, #108	; 0x6c
 800656a:	f001 fdbb 	bl	80080e4 <__hexnan>
 800656e:	2805      	cmp	r0, #5
 8006570:	d107      	bne.n	8006582 <_strtod_l+0x37a>
 8006572:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006574:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006578:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800657c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006580:	e681      	b.n	8006286 <_strtod_l+0x7e>
 8006582:	f8df b224 	ldr.w	fp, [pc, #548]	; 80067a8 <_strtod_l+0x5a0>
 8006586:	e7d2      	b.n	800652e <_strtod_l+0x326>
 8006588:	ebae 0302 	sub.w	r3, lr, r2
 800658c:	9306      	str	r3, [sp, #24]
 800658e:	9b05      	ldr	r3, [sp, #20]
 8006590:	9807      	ldr	r0, [sp, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf08      	it	eq
 8006596:	4623      	moveq	r3, r4
 8006598:	2c10      	cmp	r4, #16
 800659a:	9305      	str	r3, [sp, #20]
 800659c:	46a0      	mov	r8, r4
 800659e:	bfa8      	it	ge
 80065a0:	f04f 0810 	movge.w	r8, #16
 80065a4:	f7f9 ffae 	bl	8000504 <__aeabi_ui2d>
 80065a8:	2c09      	cmp	r4, #9
 80065aa:	4682      	mov	sl, r0
 80065ac:	468b      	mov	fp, r1
 80065ae:	dc13      	bgt.n	80065d8 <_strtod_l+0x3d0>
 80065b0:	9b06      	ldr	r3, [sp, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f43f ae67 	beq.w	8006286 <_strtod_l+0x7e>
 80065b8:	9b06      	ldr	r3, [sp, #24]
 80065ba:	dd7a      	ble.n	80066b2 <_strtod_l+0x4aa>
 80065bc:	2b16      	cmp	r3, #22
 80065be:	dc61      	bgt.n	8006684 <_strtod_l+0x47c>
 80065c0:	4a75      	ldr	r2, [pc, #468]	; (8006798 <_strtod_l+0x590>)
 80065c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80065c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f7fa f813 	bl	80005f8 <__aeabi_dmul>
 80065d2:	4682      	mov	sl, r0
 80065d4:	468b      	mov	fp, r1
 80065d6:	e656      	b.n	8006286 <_strtod_l+0x7e>
 80065d8:	4b6f      	ldr	r3, [pc, #444]	; (8006798 <_strtod_l+0x590>)
 80065da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80065de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065e2:	f7fa f809 	bl	80005f8 <__aeabi_dmul>
 80065e6:	4606      	mov	r6, r0
 80065e8:	4628      	mov	r0, r5
 80065ea:	460f      	mov	r7, r1
 80065ec:	f7f9 ff8a 	bl	8000504 <__aeabi_ui2d>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7f9 fe48 	bl	800028c <__adddf3>
 80065fc:	2c0f      	cmp	r4, #15
 80065fe:	4682      	mov	sl, r0
 8006600:	468b      	mov	fp, r1
 8006602:	ddd5      	ble.n	80065b0 <_strtod_l+0x3a8>
 8006604:	9b06      	ldr	r3, [sp, #24]
 8006606:	eba4 0808 	sub.w	r8, r4, r8
 800660a:	4498      	add	r8, r3
 800660c:	f1b8 0f00 	cmp.w	r8, #0
 8006610:	f340 8096 	ble.w	8006740 <_strtod_l+0x538>
 8006614:	f018 030f 	ands.w	r3, r8, #15
 8006618:	d00a      	beq.n	8006630 <_strtod_l+0x428>
 800661a:	495f      	ldr	r1, [pc, #380]	; (8006798 <_strtod_l+0x590>)
 800661c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006620:	4652      	mov	r2, sl
 8006622:	465b      	mov	r3, fp
 8006624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006628:	f7f9 ffe6 	bl	80005f8 <__aeabi_dmul>
 800662c:	4682      	mov	sl, r0
 800662e:	468b      	mov	fp, r1
 8006630:	f038 080f 	bics.w	r8, r8, #15
 8006634:	d073      	beq.n	800671e <_strtod_l+0x516>
 8006636:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800663a:	dd47      	ble.n	80066cc <_strtod_l+0x4c4>
 800663c:	2400      	movs	r4, #0
 800663e:	46a0      	mov	r8, r4
 8006640:	9407      	str	r4, [sp, #28]
 8006642:	9405      	str	r4, [sp, #20]
 8006644:	2322      	movs	r3, #34	; 0x22
 8006646:	f8df b158 	ldr.w	fp, [pc, #344]	; 80067a0 <_strtod_l+0x598>
 800664a:	f8c9 3000 	str.w	r3, [r9]
 800664e:	f04f 0a00 	mov.w	sl, #0
 8006652:	9b07      	ldr	r3, [sp, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f43f ae16 	beq.w	8006286 <_strtod_l+0x7e>
 800665a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800665c:	4648      	mov	r0, r9
 800665e:	f001 fe3e 	bl	80082de <_Bfree>
 8006662:	9905      	ldr	r1, [sp, #20]
 8006664:	4648      	mov	r0, r9
 8006666:	f001 fe3a 	bl	80082de <_Bfree>
 800666a:	4641      	mov	r1, r8
 800666c:	4648      	mov	r0, r9
 800666e:	f001 fe36 	bl	80082de <_Bfree>
 8006672:	9907      	ldr	r1, [sp, #28]
 8006674:	4648      	mov	r0, r9
 8006676:	f001 fe32 	bl	80082de <_Bfree>
 800667a:	4621      	mov	r1, r4
 800667c:	4648      	mov	r0, r9
 800667e:	f001 fe2e 	bl	80082de <_Bfree>
 8006682:	e600      	b.n	8006286 <_strtod_l+0x7e>
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800668a:	4293      	cmp	r3, r2
 800668c:	dbba      	blt.n	8006604 <_strtod_l+0x3fc>
 800668e:	4d42      	ldr	r5, [pc, #264]	; (8006798 <_strtod_l+0x590>)
 8006690:	f1c4 040f 	rsb	r4, r4, #15
 8006694:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006698:	4652      	mov	r2, sl
 800669a:	465b      	mov	r3, fp
 800669c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a0:	f7f9 ffaa 	bl	80005f8 <__aeabi_dmul>
 80066a4:	9b06      	ldr	r3, [sp, #24]
 80066a6:	1b1c      	subs	r4, r3, r4
 80066a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80066ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066b0:	e78d      	b.n	80065ce <_strtod_l+0x3c6>
 80066b2:	f113 0f16 	cmn.w	r3, #22
 80066b6:	dba5      	blt.n	8006604 <_strtod_l+0x3fc>
 80066b8:	4a37      	ldr	r2, [pc, #220]	; (8006798 <_strtod_l+0x590>)
 80066ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80066be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80066c2:	4650      	mov	r0, sl
 80066c4:	4659      	mov	r1, fp
 80066c6:	f7fa f8c1 	bl	800084c <__aeabi_ddiv>
 80066ca:	e782      	b.n	80065d2 <_strtod_l+0x3ca>
 80066cc:	2300      	movs	r3, #0
 80066ce:	4e33      	ldr	r6, [pc, #204]	; (800679c <_strtod_l+0x594>)
 80066d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80066d4:	4650      	mov	r0, sl
 80066d6:	4659      	mov	r1, fp
 80066d8:	461d      	mov	r5, r3
 80066da:	f1b8 0f01 	cmp.w	r8, #1
 80066de:	dc21      	bgt.n	8006724 <_strtod_l+0x51c>
 80066e0:	b10b      	cbz	r3, 80066e6 <_strtod_l+0x4de>
 80066e2:	4682      	mov	sl, r0
 80066e4:	468b      	mov	fp, r1
 80066e6:	4b2d      	ldr	r3, [pc, #180]	; (800679c <_strtod_l+0x594>)
 80066e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80066ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80066f0:	4652      	mov	r2, sl
 80066f2:	465b      	mov	r3, fp
 80066f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80066f8:	f7f9 ff7e 	bl	80005f8 <__aeabi_dmul>
 80066fc:	4b28      	ldr	r3, [pc, #160]	; (80067a0 <_strtod_l+0x598>)
 80066fe:	460a      	mov	r2, r1
 8006700:	400b      	ands	r3, r1
 8006702:	4928      	ldr	r1, [pc, #160]	; (80067a4 <_strtod_l+0x59c>)
 8006704:	428b      	cmp	r3, r1
 8006706:	4682      	mov	sl, r0
 8006708:	d898      	bhi.n	800663c <_strtod_l+0x434>
 800670a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800670e:	428b      	cmp	r3, r1
 8006710:	bf86      	itte	hi
 8006712:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80067ac <_strtod_l+0x5a4>
 8006716:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800671a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800671e:	2300      	movs	r3, #0
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	e077      	b.n	8006814 <_strtod_l+0x60c>
 8006724:	f018 0f01 	tst.w	r8, #1
 8006728:	d006      	beq.n	8006738 <_strtod_l+0x530>
 800672a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	f7f9 ff61 	bl	80005f8 <__aeabi_dmul>
 8006736:	2301      	movs	r3, #1
 8006738:	3501      	adds	r5, #1
 800673a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800673e:	e7cc      	b.n	80066da <_strtod_l+0x4d2>
 8006740:	d0ed      	beq.n	800671e <_strtod_l+0x516>
 8006742:	f1c8 0800 	rsb	r8, r8, #0
 8006746:	f018 020f 	ands.w	r2, r8, #15
 800674a:	d00a      	beq.n	8006762 <_strtod_l+0x55a>
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <_strtod_l+0x590>)
 800674e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006752:	4650      	mov	r0, sl
 8006754:	4659      	mov	r1, fp
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f7fa f877 	bl	800084c <__aeabi_ddiv>
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006766:	d0da      	beq.n	800671e <_strtod_l+0x516>
 8006768:	f1b8 0f1f 	cmp.w	r8, #31
 800676c:	dd20      	ble.n	80067b0 <_strtod_l+0x5a8>
 800676e:	2400      	movs	r4, #0
 8006770:	46a0      	mov	r8, r4
 8006772:	9407      	str	r4, [sp, #28]
 8006774:	9405      	str	r4, [sp, #20]
 8006776:	2322      	movs	r3, #34	; 0x22
 8006778:	f04f 0a00 	mov.w	sl, #0
 800677c:	f04f 0b00 	mov.w	fp, #0
 8006780:	f8c9 3000 	str.w	r3, [r9]
 8006784:	e765      	b.n	8006652 <_strtod_l+0x44a>
 8006786:	bf00      	nop
 8006788:	08008fdd 	.word	0x08008fdd
 800678c:	0800906b 	.word	0x0800906b
 8006790:	08008fe5 	.word	0x08008fe5
 8006794:	08009028 	.word	0x08009028
 8006798:	080090a8 	.word	0x080090a8
 800679c:	08009080 	.word	0x08009080
 80067a0:	7ff00000 	.word	0x7ff00000
 80067a4:	7ca00000 	.word	0x7ca00000
 80067a8:	fff80000 	.word	0xfff80000
 80067ac:	7fefffff 	.word	0x7fefffff
 80067b0:	f018 0310 	ands.w	r3, r8, #16
 80067b4:	bf18      	it	ne
 80067b6:	236a      	movne	r3, #106	; 0x6a
 80067b8:	4da0      	ldr	r5, [pc, #640]	; (8006a3c <_strtod_l+0x834>)
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	4650      	mov	r0, sl
 80067be:	4659      	mov	r1, fp
 80067c0:	2300      	movs	r3, #0
 80067c2:	f1b8 0f00 	cmp.w	r8, #0
 80067c6:	f300 810a 	bgt.w	80069de <_strtod_l+0x7d6>
 80067ca:	b10b      	cbz	r3, 80067d0 <_strtod_l+0x5c8>
 80067cc:	4682      	mov	sl, r0
 80067ce:	468b      	mov	fp, r1
 80067d0:	9b04      	ldr	r3, [sp, #16]
 80067d2:	b1bb      	cbz	r3, 8006804 <_strtod_l+0x5fc>
 80067d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80067d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067dc:	2b00      	cmp	r3, #0
 80067de:	4659      	mov	r1, fp
 80067e0:	dd10      	ble.n	8006804 <_strtod_l+0x5fc>
 80067e2:	2b1f      	cmp	r3, #31
 80067e4:	f340 8107 	ble.w	80069f6 <_strtod_l+0x7ee>
 80067e8:	2b34      	cmp	r3, #52	; 0x34
 80067ea:	bfde      	ittt	le
 80067ec:	3b20      	suble	r3, #32
 80067ee:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80067f2:	fa02 f303 	lslle.w	r3, r2, r3
 80067f6:	f04f 0a00 	mov.w	sl, #0
 80067fa:	bfcc      	ite	gt
 80067fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006800:	ea03 0b01 	andle.w	fp, r3, r1
 8006804:	2200      	movs	r2, #0
 8006806:	2300      	movs	r3, #0
 8006808:	4650      	mov	r0, sl
 800680a:	4659      	mov	r1, fp
 800680c:	f7fa f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006810:	2800      	cmp	r0, #0
 8006812:	d1ac      	bne.n	800676e <_strtod_l+0x566>
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	9a05      	ldr	r2, [sp, #20]
 800681a:	9908      	ldr	r1, [sp, #32]
 800681c:	4623      	mov	r3, r4
 800681e:	4648      	mov	r0, r9
 8006820:	f001 fdaf 	bl	8008382 <__s2b>
 8006824:	9007      	str	r0, [sp, #28]
 8006826:	2800      	cmp	r0, #0
 8006828:	f43f af08 	beq.w	800663c <_strtod_l+0x434>
 800682c:	9a06      	ldr	r2, [sp, #24]
 800682e:	9b06      	ldr	r3, [sp, #24]
 8006830:	2a00      	cmp	r2, #0
 8006832:	f1c3 0300 	rsb	r3, r3, #0
 8006836:	bfa8      	it	ge
 8006838:	2300      	movge	r3, #0
 800683a:	930e      	str	r3, [sp, #56]	; 0x38
 800683c:	2400      	movs	r4, #0
 800683e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006842:	9316      	str	r3, [sp, #88]	; 0x58
 8006844:	46a0      	mov	r8, r4
 8006846:	9b07      	ldr	r3, [sp, #28]
 8006848:	4648      	mov	r0, r9
 800684a:	6859      	ldr	r1, [r3, #4]
 800684c:	f001 fd13 	bl	8008276 <_Balloc>
 8006850:	9005      	str	r0, [sp, #20]
 8006852:	2800      	cmp	r0, #0
 8006854:	f43f aef6 	beq.w	8006644 <_strtod_l+0x43c>
 8006858:	9b07      	ldr	r3, [sp, #28]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	3202      	adds	r2, #2
 800685e:	f103 010c 	add.w	r1, r3, #12
 8006862:	0092      	lsls	r2, r2, #2
 8006864:	300c      	adds	r0, #12
 8006866:	f001 fcfb 	bl	8008260 <memcpy>
 800686a:	aa1e      	add	r2, sp, #120	; 0x78
 800686c:	a91d      	add	r1, sp, #116	; 0x74
 800686e:	ec4b ab10 	vmov	d0, sl, fp
 8006872:	4648      	mov	r0, r9
 8006874:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006878:	f002 f83e 	bl	80088f8 <__d2b>
 800687c:	901c      	str	r0, [sp, #112]	; 0x70
 800687e:	2800      	cmp	r0, #0
 8006880:	f43f aee0 	beq.w	8006644 <_strtod_l+0x43c>
 8006884:	2101      	movs	r1, #1
 8006886:	4648      	mov	r0, r9
 8006888:	f001 fe07 	bl	800849a <__i2b>
 800688c:	4680      	mov	r8, r0
 800688e:	2800      	cmp	r0, #0
 8006890:	f43f aed8 	beq.w	8006644 <_strtod_l+0x43c>
 8006894:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006896:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006898:	2e00      	cmp	r6, #0
 800689a:	bfab      	itete	ge
 800689c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800689e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80068a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80068a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80068a4:	bfac      	ite	ge
 80068a6:	18f7      	addge	r7, r6, r3
 80068a8:	1b9d      	sublt	r5, r3, r6
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	1af6      	subs	r6, r6, r3
 80068ae:	4416      	add	r6, r2
 80068b0:	4b63      	ldr	r3, [pc, #396]	; (8006a40 <_strtod_l+0x838>)
 80068b2:	3e01      	subs	r6, #1
 80068b4:	429e      	cmp	r6, r3
 80068b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068ba:	f280 80af 	bge.w	8006a1c <_strtod_l+0x814>
 80068be:	1b9b      	subs	r3, r3, r6
 80068c0:	2b1f      	cmp	r3, #31
 80068c2:	eba2 0203 	sub.w	r2, r2, r3
 80068c6:	f04f 0101 	mov.w	r1, #1
 80068ca:	f300 809b 	bgt.w	8006a04 <_strtod_l+0x7fc>
 80068ce:	fa01 f303 	lsl.w	r3, r1, r3
 80068d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80068d4:	2300      	movs	r3, #0
 80068d6:	930a      	str	r3, [sp, #40]	; 0x28
 80068d8:	18be      	adds	r6, r7, r2
 80068da:	9b04      	ldr	r3, [sp, #16]
 80068dc:	42b7      	cmp	r7, r6
 80068de:	4415      	add	r5, r2
 80068e0:	441d      	add	r5, r3
 80068e2:	463b      	mov	r3, r7
 80068e4:	bfa8      	it	ge
 80068e6:	4633      	movge	r3, r6
 80068e8:	42ab      	cmp	r3, r5
 80068ea:	bfa8      	it	ge
 80068ec:	462b      	movge	r3, r5
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfc2      	ittt	gt
 80068f2:	1af6      	subgt	r6, r6, r3
 80068f4:	1aed      	subgt	r5, r5, r3
 80068f6:	1aff      	subgt	r7, r7, r3
 80068f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068fa:	b1bb      	cbz	r3, 800692c <_strtod_l+0x724>
 80068fc:	4641      	mov	r1, r8
 80068fe:	461a      	mov	r2, r3
 8006900:	4648      	mov	r0, r9
 8006902:	f001 fe69 	bl	80085d8 <__pow5mult>
 8006906:	4680      	mov	r8, r0
 8006908:	2800      	cmp	r0, #0
 800690a:	f43f ae9b 	beq.w	8006644 <_strtod_l+0x43c>
 800690e:	4601      	mov	r1, r0
 8006910:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006912:	4648      	mov	r0, r9
 8006914:	f001 fdca 	bl	80084ac <__multiply>
 8006918:	900c      	str	r0, [sp, #48]	; 0x30
 800691a:	2800      	cmp	r0, #0
 800691c:	f43f ae92 	beq.w	8006644 <_strtod_l+0x43c>
 8006920:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006922:	4648      	mov	r0, r9
 8006924:	f001 fcdb 	bl	80082de <_Bfree>
 8006928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800692a:	931c      	str	r3, [sp, #112]	; 0x70
 800692c:	2e00      	cmp	r6, #0
 800692e:	dc7a      	bgt.n	8006a26 <_strtod_l+0x81e>
 8006930:	9b06      	ldr	r3, [sp, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	dd08      	ble.n	8006948 <_strtod_l+0x740>
 8006936:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006938:	9905      	ldr	r1, [sp, #20]
 800693a:	4648      	mov	r0, r9
 800693c:	f001 fe4c 	bl	80085d8 <__pow5mult>
 8006940:	9005      	str	r0, [sp, #20]
 8006942:	2800      	cmp	r0, #0
 8006944:	f43f ae7e 	beq.w	8006644 <_strtod_l+0x43c>
 8006948:	2d00      	cmp	r5, #0
 800694a:	dd08      	ble.n	800695e <_strtod_l+0x756>
 800694c:	462a      	mov	r2, r5
 800694e:	9905      	ldr	r1, [sp, #20]
 8006950:	4648      	mov	r0, r9
 8006952:	f001 fe8f 	bl	8008674 <__lshift>
 8006956:	9005      	str	r0, [sp, #20]
 8006958:	2800      	cmp	r0, #0
 800695a:	f43f ae73 	beq.w	8006644 <_strtod_l+0x43c>
 800695e:	2f00      	cmp	r7, #0
 8006960:	dd08      	ble.n	8006974 <_strtod_l+0x76c>
 8006962:	4641      	mov	r1, r8
 8006964:	463a      	mov	r2, r7
 8006966:	4648      	mov	r0, r9
 8006968:	f001 fe84 	bl	8008674 <__lshift>
 800696c:	4680      	mov	r8, r0
 800696e:	2800      	cmp	r0, #0
 8006970:	f43f ae68 	beq.w	8006644 <_strtod_l+0x43c>
 8006974:	9a05      	ldr	r2, [sp, #20]
 8006976:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006978:	4648      	mov	r0, r9
 800697a:	f001 fee9 	bl	8008750 <__mdiff>
 800697e:	4604      	mov	r4, r0
 8006980:	2800      	cmp	r0, #0
 8006982:	f43f ae5f 	beq.w	8006644 <_strtod_l+0x43c>
 8006986:	68c3      	ldr	r3, [r0, #12]
 8006988:	930c      	str	r3, [sp, #48]	; 0x30
 800698a:	2300      	movs	r3, #0
 800698c:	60c3      	str	r3, [r0, #12]
 800698e:	4641      	mov	r1, r8
 8006990:	f001 fec4 	bl	800871c <__mcmp>
 8006994:	2800      	cmp	r0, #0
 8006996:	da55      	bge.n	8006a44 <_strtod_l+0x83c>
 8006998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800699a:	b9e3      	cbnz	r3, 80069d6 <_strtod_l+0x7ce>
 800699c:	f1ba 0f00 	cmp.w	sl, #0
 80069a0:	d119      	bne.n	80069d6 <_strtod_l+0x7ce>
 80069a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069a6:	b9b3      	cbnz	r3, 80069d6 <_strtod_l+0x7ce>
 80069a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069ac:	0d1b      	lsrs	r3, r3, #20
 80069ae:	051b      	lsls	r3, r3, #20
 80069b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069b4:	d90f      	bls.n	80069d6 <_strtod_l+0x7ce>
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	b913      	cbnz	r3, 80069c0 <_strtod_l+0x7b8>
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	dd0a      	ble.n	80069d6 <_strtod_l+0x7ce>
 80069c0:	4621      	mov	r1, r4
 80069c2:	2201      	movs	r2, #1
 80069c4:	4648      	mov	r0, r9
 80069c6:	f001 fe55 	bl	8008674 <__lshift>
 80069ca:	4641      	mov	r1, r8
 80069cc:	4604      	mov	r4, r0
 80069ce:	f001 fea5 	bl	800871c <__mcmp>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	dc67      	bgt.n	8006aa6 <_strtod_l+0x89e>
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d171      	bne.n	8006ac0 <_strtod_l+0x8b8>
 80069dc:	e63d      	b.n	800665a <_strtod_l+0x452>
 80069de:	f018 0f01 	tst.w	r8, #1
 80069e2:	d004      	beq.n	80069ee <_strtod_l+0x7e6>
 80069e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069e8:	f7f9 fe06 	bl	80005f8 <__aeabi_dmul>
 80069ec:	2301      	movs	r3, #1
 80069ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069f2:	3508      	adds	r5, #8
 80069f4:	e6e5      	b.n	80067c2 <_strtod_l+0x5ba>
 80069f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	ea03 0a0a 	and.w	sl, r3, sl
 8006a02:	e6ff      	b.n	8006804 <_strtod_l+0x5fc>
 8006a04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006a08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006a0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006a10:	36e2      	adds	r6, #226	; 0xe2
 8006a12:	fa01 f306 	lsl.w	r3, r1, r6
 8006a16:	930a      	str	r3, [sp, #40]	; 0x28
 8006a18:	910f      	str	r1, [sp, #60]	; 0x3c
 8006a1a:	e75d      	b.n	80068d8 <_strtod_l+0x6d0>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a20:	2301      	movs	r3, #1
 8006a22:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a24:	e758      	b.n	80068d8 <_strtod_l+0x6d0>
 8006a26:	4632      	mov	r2, r6
 8006a28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a2a:	4648      	mov	r0, r9
 8006a2c:	f001 fe22 	bl	8008674 <__lshift>
 8006a30:	901c      	str	r0, [sp, #112]	; 0x70
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f47f af7c 	bne.w	8006930 <_strtod_l+0x728>
 8006a38:	e604      	b.n	8006644 <_strtod_l+0x43c>
 8006a3a:	bf00      	nop
 8006a3c:	08009040 	.word	0x08009040
 8006a40:	fffffc02 	.word	0xfffffc02
 8006a44:	465d      	mov	r5, fp
 8006a46:	f040 8086 	bne.w	8006b56 <_strtod_l+0x94e>
 8006a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a50:	b32a      	cbz	r2, 8006a9e <_strtod_l+0x896>
 8006a52:	4aaf      	ldr	r2, [pc, #700]	; (8006d10 <_strtod_l+0xb08>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d153      	bne.n	8006b00 <_strtod_l+0x8f8>
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	b1d3      	cbz	r3, 8006a94 <_strtod_l+0x88c>
 8006a5e:	4aad      	ldr	r2, [pc, #692]	; (8006d14 <_strtod_l+0xb0c>)
 8006a60:	402a      	ands	r2, r5
 8006a62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006a66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a6a:	d816      	bhi.n	8006a9a <_strtod_l+0x892>
 8006a6c:	0d12      	lsrs	r2, r2, #20
 8006a6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	4298      	cmp	r0, r3
 8006a78:	d142      	bne.n	8006b00 <_strtod_l+0x8f8>
 8006a7a:	4ba7      	ldr	r3, [pc, #668]	; (8006d18 <_strtod_l+0xb10>)
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	d102      	bne.n	8006a86 <_strtod_l+0x87e>
 8006a80:	3001      	adds	r0, #1
 8006a82:	f43f addf 	beq.w	8006644 <_strtod_l+0x43c>
 8006a86:	4ba3      	ldr	r3, [pc, #652]	; (8006d14 <_strtod_l+0xb0c>)
 8006a88:	402b      	ands	r3, r5
 8006a8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006a8e:	f04f 0a00 	mov.w	sl, #0
 8006a92:	e7a0      	b.n	80069d6 <_strtod_l+0x7ce>
 8006a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a98:	e7ed      	b.n	8006a76 <_strtod_l+0x86e>
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	e7eb      	b.n	8006a76 <_strtod_l+0x86e>
 8006a9e:	bb7b      	cbnz	r3, 8006b00 <_strtod_l+0x8f8>
 8006aa0:	f1ba 0f00 	cmp.w	sl, #0
 8006aa4:	d12c      	bne.n	8006b00 <_strtod_l+0x8f8>
 8006aa6:	9904      	ldr	r1, [sp, #16]
 8006aa8:	4a9a      	ldr	r2, [pc, #616]	; (8006d14 <_strtod_l+0xb0c>)
 8006aaa:	465b      	mov	r3, fp
 8006aac:	b1f1      	cbz	r1, 8006aec <_strtod_l+0x8e4>
 8006aae:	ea02 010b 	and.w	r1, r2, fp
 8006ab2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006ab6:	dc19      	bgt.n	8006aec <_strtod_l+0x8e4>
 8006ab8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006abc:	f77f ae5b 	ble.w	8006776 <_strtod_l+0x56e>
 8006ac0:	4a96      	ldr	r2, [pc, #600]	; (8006d1c <_strtod_l+0xb14>)
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006ac8:	4650      	mov	r0, sl
 8006aca:	4659      	mov	r1, fp
 8006acc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ad0:	f7f9 fd92 	bl	80005f8 <__aeabi_dmul>
 8006ad4:	4682      	mov	sl, r0
 8006ad6:	468b      	mov	fp, r1
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	f47f adbe 	bne.w	800665a <_strtod_l+0x452>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f47f adbb 	bne.w	800665a <_strtod_l+0x452>
 8006ae4:	2322      	movs	r3, #34	; 0x22
 8006ae6:	f8c9 3000 	str.w	r3, [r9]
 8006aea:	e5b6      	b.n	800665a <_strtod_l+0x452>
 8006aec:	4013      	ands	r3, r2
 8006aee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006af2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006af6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006afa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006afe:	e76a      	b.n	80069d6 <_strtod_l+0x7ce>
 8006b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b02:	b193      	cbz	r3, 8006b2a <_strtod_l+0x922>
 8006b04:	422b      	tst	r3, r5
 8006b06:	f43f af66 	beq.w	80069d6 <_strtod_l+0x7ce>
 8006b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b0c:	9a04      	ldr	r2, [sp, #16]
 8006b0e:	4650      	mov	r0, sl
 8006b10:	4659      	mov	r1, fp
 8006b12:	b173      	cbz	r3, 8006b32 <_strtod_l+0x92a>
 8006b14:	f7ff fb5c 	bl	80061d0 <sulp>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b20:	f7f9 fbb4 	bl	800028c <__adddf3>
 8006b24:	4682      	mov	sl, r0
 8006b26:	468b      	mov	fp, r1
 8006b28:	e755      	b.n	80069d6 <_strtod_l+0x7ce>
 8006b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b2c:	ea13 0f0a 	tst.w	r3, sl
 8006b30:	e7e9      	b.n	8006b06 <_strtod_l+0x8fe>
 8006b32:	f7ff fb4d 	bl	80061d0 <sulp>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	2200      	movs	r2, #0
 8006b44:	2300      	movs	r3, #0
 8006b46:	4682      	mov	sl, r0
 8006b48:	468b      	mov	fp, r1
 8006b4a:	f7f9 ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f47f ae11 	bne.w	8006776 <_strtod_l+0x56e>
 8006b54:	e73f      	b.n	80069d6 <_strtod_l+0x7ce>
 8006b56:	4641      	mov	r1, r8
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f001 ff1c 	bl	8008996 <__ratio>
 8006b5e:	ec57 6b10 	vmov	r6, r7, d0
 8006b62:	2200      	movs	r2, #0
 8006b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b68:	ee10 0a10 	vmov	r0, s0
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7f9 ffbf 	bl	8000af0 <__aeabi_dcmple>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d077      	beq.n	8006c66 <_strtod_l+0xa5e>
 8006b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d04a      	beq.n	8006c12 <_strtod_l+0xa0a>
 8006b7c:	4b68      	ldr	r3, [pc, #416]	; (8006d20 <_strtod_l+0xb18>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006b84:	4f66      	ldr	r7, [pc, #408]	; (8006d20 <_strtod_l+0xb18>)
 8006b86:	2600      	movs	r6, #0
 8006b88:	4b62      	ldr	r3, [pc, #392]	; (8006d14 <_strtod_l+0xb0c>)
 8006b8a:	402b      	ands	r3, r5
 8006b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b90:	4b64      	ldr	r3, [pc, #400]	; (8006d24 <_strtod_l+0xb1c>)
 8006b92:	429a      	cmp	r2, r3
 8006b94:	f040 80ce 	bne.w	8006d34 <_strtod_l+0xb2c>
 8006b98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ba0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006ba4:	ec4b ab10 	vmov	d0, sl, fp
 8006ba8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006bac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006bb0:	f001 fe2c 	bl	800880c <__ulp>
 8006bb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bb8:	ec53 2b10 	vmov	r2, r3, d0
 8006bbc:	f7f9 fd1c 	bl	80005f8 <__aeabi_dmul>
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	465b      	mov	r3, fp
 8006bc4:	f7f9 fb62 	bl	800028c <__adddf3>
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4952      	ldr	r1, [pc, #328]	; (8006d14 <_strtod_l+0xb0c>)
 8006bcc:	4a56      	ldr	r2, [pc, #344]	; (8006d28 <_strtod_l+0xb20>)
 8006bce:	4019      	ands	r1, r3
 8006bd0:	4291      	cmp	r1, r2
 8006bd2:	4682      	mov	sl, r0
 8006bd4:	d95b      	bls.n	8006c8e <_strtod_l+0xa86>
 8006bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d103      	bne.n	8006be8 <_strtod_l+0x9e0>
 8006be0:	9b08      	ldr	r3, [sp, #32]
 8006be2:	3301      	adds	r3, #1
 8006be4:	f43f ad2e 	beq.w	8006644 <_strtod_l+0x43c>
 8006be8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006d18 <_strtod_l+0xb10>
 8006bec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006bf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006bf2:	4648      	mov	r0, r9
 8006bf4:	f001 fb73 	bl	80082de <_Bfree>
 8006bf8:	9905      	ldr	r1, [sp, #20]
 8006bfa:	4648      	mov	r0, r9
 8006bfc:	f001 fb6f 	bl	80082de <_Bfree>
 8006c00:	4641      	mov	r1, r8
 8006c02:	4648      	mov	r0, r9
 8006c04:	f001 fb6b 	bl	80082de <_Bfree>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4648      	mov	r0, r9
 8006c0c:	f001 fb67 	bl	80082de <_Bfree>
 8006c10:	e619      	b.n	8006846 <_strtod_l+0x63e>
 8006c12:	f1ba 0f00 	cmp.w	sl, #0
 8006c16:	d11a      	bne.n	8006c4e <_strtod_l+0xa46>
 8006c18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c1c:	b9eb      	cbnz	r3, 8006c5a <_strtod_l+0xa52>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <_strtod_l+0xb18>)
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 ff59 	bl	8000adc <__aeabi_dcmplt>
 8006c2a:	b9c8      	cbnz	r0, 8006c60 <_strtod_l+0xa58>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	4639      	mov	r1, r7
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b3e      	ldr	r3, [pc, #248]	; (8006d2c <_strtod_l+0xb24>)
 8006c34:	f7f9 fce0 	bl	80005f8 <__aeabi_dmul>
 8006c38:	4606      	mov	r6, r0
 8006c3a:	460f      	mov	r7, r1
 8006c3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006c40:	9618      	str	r6, [sp, #96]	; 0x60
 8006c42:	9319      	str	r3, [sp, #100]	; 0x64
 8006c44:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006c48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006c4c:	e79c      	b.n	8006b88 <_strtod_l+0x980>
 8006c4e:	f1ba 0f01 	cmp.w	sl, #1
 8006c52:	d102      	bne.n	8006c5a <_strtod_l+0xa52>
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	f43f ad8e 	beq.w	8006776 <_strtod_l+0x56e>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	4b34      	ldr	r3, [pc, #208]	; (8006d30 <_strtod_l+0xb28>)
 8006c5e:	e78f      	b.n	8006b80 <_strtod_l+0x978>
 8006c60:	2600      	movs	r6, #0
 8006c62:	4f32      	ldr	r7, [pc, #200]	; (8006d2c <_strtod_l+0xb24>)
 8006c64:	e7ea      	b.n	8006c3c <_strtod_l+0xa34>
 8006c66:	4b31      	ldr	r3, [pc, #196]	; (8006d2c <_strtod_l+0xb24>)
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f7f9 fcc3 	bl	80005f8 <__aeabi_dmul>
 8006c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c74:	4606      	mov	r6, r0
 8006c76:	460f      	mov	r7, r1
 8006c78:	b933      	cbnz	r3, 8006c88 <_strtod_l+0xa80>
 8006c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c7e:	9010      	str	r0, [sp, #64]	; 0x40
 8006c80:	9311      	str	r3, [sp, #68]	; 0x44
 8006c82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c86:	e7df      	b.n	8006c48 <_strtod_l+0xa40>
 8006c88:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006c8c:	e7f9      	b.n	8006c82 <_strtod_l+0xa7a>
 8006c8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ab      	bne.n	8006bf0 <_strtod_l+0x9e8>
 8006c98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c9c:	0d1b      	lsrs	r3, r3, #20
 8006c9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ca0:	051b      	lsls	r3, r3, #20
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	465d      	mov	r5, fp
 8006ca6:	d1a3      	bne.n	8006bf0 <_strtod_l+0x9e8>
 8006ca8:	4639      	mov	r1, r7
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7f9 ff54 	bl	8000b58 <__aeabi_d2iz>
 8006cb0:	f7f9 fc38 	bl	8000524 <__aeabi_i2d>
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7f9 fae4 	bl	8000288 <__aeabi_dsub>
 8006cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460f      	mov	r7, r1
 8006cc6:	b933      	cbnz	r3, 8006cd6 <_strtod_l+0xace>
 8006cc8:	f1ba 0f00 	cmp.w	sl, #0
 8006ccc:	d103      	bne.n	8006cd6 <_strtod_l+0xace>
 8006cce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	d06d      	beq.n	8006db2 <_strtod_l+0xbaa>
 8006cd6:	a30a      	add	r3, pc, #40	; (adr r3, 8006d00 <_strtod_l+0xaf8>)
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f7f9 fefc 	bl	8000adc <__aeabi_dcmplt>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f47f acb8 	bne.w	800665a <_strtod_l+0x452>
 8006cea:	a307      	add	r3, pc, #28	; (adr r3, 8006d08 <_strtod_l+0xb00>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	f7f9 ff10 	bl	8000b18 <__aeabi_dcmpgt>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f43f af79 	beq.w	8006bf0 <_strtod_l+0x9e8>
 8006cfe:	e4ac      	b.n	800665a <_strtod_l+0x452>
 8006d00:	94a03595 	.word	0x94a03595
 8006d04:	3fdfffff 	.word	0x3fdfffff
 8006d08:	35afe535 	.word	0x35afe535
 8006d0c:	3fe00000 	.word	0x3fe00000
 8006d10:	000fffff 	.word	0x000fffff
 8006d14:	7ff00000 	.word	0x7ff00000
 8006d18:	7fefffff 	.word	0x7fefffff
 8006d1c:	39500000 	.word	0x39500000
 8006d20:	3ff00000 	.word	0x3ff00000
 8006d24:	7fe00000 	.word	0x7fe00000
 8006d28:	7c9fffff 	.word	0x7c9fffff
 8006d2c:	3fe00000 	.word	0x3fe00000
 8006d30:	bff00000 	.word	0xbff00000
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	b333      	cbz	r3, 8006d86 <_strtod_l+0xb7e>
 8006d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d3e:	d822      	bhi.n	8006d86 <_strtod_l+0xb7e>
 8006d40:	a327      	add	r3, pc, #156	; (adr r3, 8006de0 <_strtod_l+0xbd8>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	4630      	mov	r0, r6
 8006d48:	4639      	mov	r1, r7
 8006d4a:	f7f9 fed1 	bl	8000af0 <__aeabi_dcmple>
 8006d4e:	b1a0      	cbz	r0, 8006d7a <_strtod_l+0xb72>
 8006d50:	4639      	mov	r1, r7
 8006d52:	4630      	mov	r0, r6
 8006d54:	f7f9 ff28 	bl	8000ba8 <__aeabi_d2uiz>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	bf08      	it	eq
 8006d5c:	2001      	moveq	r0, #1
 8006d5e:	f7f9 fbd1 	bl	8000504 <__aeabi_ui2d>
 8006d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d64:	4606      	mov	r6, r0
 8006d66:	460f      	mov	r7, r1
 8006d68:	bb03      	cbnz	r3, 8006dac <_strtod_l+0xba4>
 8006d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d6e:	9012      	str	r0, [sp, #72]	; 0x48
 8006d70:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006d76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d86:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006d8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006d8e:	f001 fd3d 	bl	800880c <__ulp>
 8006d92:	4650      	mov	r0, sl
 8006d94:	ec53 2b10 	vmov	r2, r3, d0
 8006d98:	4659      	mov	r1, fp
 8006d9a:	f7f9 fc2d 	bl	80005f8 <__aeabi_dmul>
 8006d9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006da2:	f7f9 fa73 	bl	800028c <__adddf3>
 8006da6:	4682      	mov	sl, r0
 8006da8:	468b      	mov	fp, r1
 8006daa:	e772      	b.n	8006c92 <_strtod_l+0xa8a>
 8006dac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006db0:	e7df      	b.n	8006d72 <_strtod_l+0xb6a>
 8006db2:	a30d      	add	r3, pc, #52	; (adr r3, 8006de8 <_strtod_l+0xbe0>)
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f7f9 fe90 	bl	8000adc <__aeabi_dcmplt>
 8006dbc:	e79c      	b.n	8006cf8 <_strtod_l+0xaf0>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	930d      	str	r3, [sp, #52]	; 0x34
 8006dc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	f7ff ba61 	b.w	800628e <_strtod_l+0x86>
 8006dcc:	2b65      	cmp	r3, #101	; 0x65
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	f43f ab4e 	beq.w	8006472 <_strtod_l+0x26a>
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4614      	mov	r4, r2
 8006dda:	9104      	str	r1, [sp, #16]
 8006ddc:	f7ff bacb 	b.w	8006376 <_strtod_l+0x16e>
 8006de0:	ffc00000 	.word	0xffc00000
 8006de4:	41dfffff 	.word	0x41dfffff
 8006de8:	94a03595 	.word	0x94a03595
 8006dec:	3fcfffff 	.word	0x3fcfffff

08006df0 <_strtod_r>:
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <_strtod_r+0x18>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	b410      	push	{r4}
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	4c04      	ldr	r4, [pc, #16]	; (8006e0c <_strtod_r+0x1c>)
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bf08      	it	eq
 8006dfe:	4623      	moveq	r3, r4
 8006e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e04:	f7ff ba00 	b.w	8006208 <_strtod_l>
 8006e08:	20000014 	.word	0x20000014
 8006e0c:	20000078 	.word	0x20000078

08006e10 <_strtol_l.isra.0>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	4680      	mov	r8, r0
 8006e16:	4689      	mov	r9, r1
 8006e18:	4692      	mov	sl, r2
 8006e1a:	461e      	mov	r6, r3
 8006e1c:	460f      	mov	r7, r1
 8006e1e:	463d      	mov	r5, r7
 8006e20:	9808      	ldr	r0, [sp, #32]
 8006e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e26:	f001 f9ed 	bl	8008204 <__locale_ctype_ptr_l>
 8006e2a:	4420      	add	r0, r4
 8006e2c:	7843      	ldrb	r3, [r0, #1]
 8006e2e:	f013 0308 	ands.w	r3, r3, #8
 8006e32:	d132      	bne.n	8006e9a <_strtol_l.isra.0+0x8a>
 8006e34:	2c2d      	cmp	r4, #45	; 0x2d
 8006e36:	d132      	bne.n	8006e9e <_strtol_l.isra.0+0x8e>
 8006e38:	787c      	ldrb	r4, [r7, #1]
 8006e3a:	1cbd      	adds	r5, r7, #2
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	d05d      	beq.n	8006efe <_strtol_l.isra.0+0xee>
 8006e42:	2e10      	cmp	r6, #16
 8006e44:	d109      	bne.n	8006e5a <_strtol_l.isra.0+0x4a>
 8006e46:	2c30      	cmp	r4, #48	; 0x30
 8006e48:	d107      	bne.n	8006e5a <_strtol_l.isra.0+0x4a>
 8006e4a:	782b      	ldrb	r3, [r5, #0]
 8006e4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e50:	2b58      	cmp	r3, #88	; 0x58
 8006e52:	d14f      	bne.n	8006ef4 <_strtol_l.isra.0+0xe4>
 8006e54:	786c      	ldrb	r4, [r5, #1]
 8006e56:	2610      	movs	r6, #16
 8006e58:	3502      	adds	r5, #2
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	bf14      	ite	ne
 8006e5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006e62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006e66:	2700      	movs	r7, #0
 8006e68:	fbb1 fcf6 	udiv	ip, r1, r6
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006e72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006e76:	2b09      	cmp	r3, #9
 8006e78:	d817      	bhi.n	8006eaa <_strtol_l.isra.0+0x9a>
 8006e7a:	461c      	mov	r4, r3
 8006e7c:	42a6      	cmp	r6, r4
 8006e7e:	dd23      	ble.n	8006ec8 <_strtol_l.isra.0+0xb8>
 8006e80:	1c7b      	adds	r3, r7, #1
 8006e82:	d007      	beq.n	8006e94 <_strtol_l.isra.0+0x84>
 8006e84:	4584      	cmp	ip, r0
 8006e86:	d31c      	bcc.n	8006ec2 <_strtol_l.isra.0+0xb2>
 8006e88:	d101      	bne.n	8006e8e <_strtol_l.isra.0+0x7e>
 8006e8a:	45a6      	cmp	lr, r4
 8006e8c:	db19      	blt.n	8006ec2 <_strtol_l.isra.0+0xb2>
 8006e8e:	fb00 4006 	mla	r0, r0, r6, r4
 8006e92:	2701      	movs	r7, #1
 8006e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e98:	e7eb      	b.n	8006e72 <_strtol_l.isra.0+0x62>
 8006e9a:	462f      	mov	r7, r5
 8006e9c:	e7bf      	b.n	8006e1e <_strtol_l.isra.0+0xe>
 8006e9e:	2c2b      	cmp	r4, #43	; 0x2b
 8006ea0:	bf04      	itt	eq
 8006ea2:	1cbd      	addeq	r5, r7, #2
 8006ea4:	787c      	ldrbeq	r4, [r7, #1]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	e7c9      	b.n	8006e3e <_strtol_l.isra.0+0x2e>
 8006eaa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006eae:	2b19      	cmp	r3, #25
 8006eb0:	d801      	bhi.n	8006eb6 <_strtol_l.isra.0+0xa6>
 8006eb2:	3c37      	subs	r4, #55	; 0x37
 8006eb4:	e7e2      	b.n	8006e7c <_strtol_l.isra.0+0x6c>
 8006eb6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006eba:	2b19      	cmp	r3, #25
 8006ebc:	d804      	bhi.n	8006ec8 <_strtol_l.isra.0+0xb8>
 8006ebe:	3c57      	subs	r4, #87	; 0x57
 8006ec0:	e7dc      	b.n	8006e7c <_strtol_l.isra.0+0x6c>
 8006ec2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ec6:	e7e5      	b.n	8006e94 <_strtol_l.isra.0+0x84>
 8006ec8:	1c7b      	adds	r3, r7, #1
 8006eca:	d108      	bne.n	8006ede <_strtol_l.isra.0+0xce>
 8006ecc:	2322      	movs	r3, #34	; 0x22
 8006ece:	f8c8 3000 	str.w	r3, [r8]
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	f1ba 0f00 	cmp.w	sl, #0
 8006ed8:	d107      	bne.n	8006eea <_strtol_l.isra.0+0xda>
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	b102      	cbz	r2, 8006ee2 <_strtol_l.isra.0+0xd2>
 8006ee0:	4240      	negs	r0, r0
 8006ee2:	f1ba 0f00 	cmp.w	sl, #0
 8006ee6:	d0f8      	beq.n	8006eda <_strtol_l.isra.0+0xca>
 8006ee8:	b10f      	cbz	r7, 8006eee <_strtol_l.isra.0+0xde>
 8006eea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006eee:	f8ca 9000 	str.w	r9, [sl]
 8006ef2:	e7f2      	b.n	8006eda <_strtol_l.isra.0+0xca>
 8006ef4:	2430      	movs	r4, #48	; 0x30
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	d1af      	bne.n	8006e5a <_strtol_l.isra.0+0x4a>
 8006efa:	2608      	movs	r6, #8
 8006efc:	e7ad      	b.n	8006e5a <_strtol_l.isra.0+0x4a>
 8006efe:	2c30      	cmp	r4, #48	; 0x30
 8006f00:	d0a3      	beq.n	8006e4a <_strtol_l.isra.0+0x3a>
 8006f02:	260a      	movs	r6, #10
 8006f04:	e7a9      	b.n	8006e5a <_strtol_l.isra.0+0x4a>
	...

08006f08 <_strtol_r>:
 8006f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f0a:	4c06      	ldr	r4, [pc, #24]	; (8006f24 <_strtol_r+0x1c>)
 8006f0c:	4d06      	ldr	r5, [pc, #24]	; (8006f28 <_strtol_r+0x20>)
 8006f0e:	6824      	ldr	r4, [r4, #0]
 8006f10:	6a24      	ldr	r4, [r4, #32]
 8006f12:	2c00      	cmp	r4, #0
 8006f14:	bf08      	it	eq
 8006f16:	462c      	moveq	r4, r5
 8006f18:	9400      	str	r4, [sp, #0]
 8006f1a:	f7ff ff79 	bl	8006e10 <_strtol_l.isra.0>
 8006f1e:	b003      	add	sp, #12
 8006f20:	bd30      	pop	{r4, r5, pc}
 8006f22:	bf00      	nop
 8006f24:	20000014 	.word	0x20000014
 8006f28:	20000078 	.word	0x20000078

08006f2c <quorem>:
 8006f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	6903      	ldr	r3, [r0, #16]
 8006f32:	690c      	ldr	r4, [r1, #16]
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	4680      	mov	r8, r0
 8006f38:	f2c0 8082 	blt.w	8007040 <quorem+0x114>
 8006f3c:	3c01      	subs	r4, #1
 8006f3e:	f101 0714 	add.w	r7, r1, #20
 8006f42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006f46:	f100 0614 	add.w	r6, r0, #20
 8006f4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006f4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006f52:	eb06 030c 	add.w	r3, r6, ip
 8006f56:	3501      	adds	r5, #1
 8006f58:	eb07 090c 	add.w	r9, r7, ip
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006f62:	b395      	cbz	r5, 8006fca <quorem+0x9e>
 8006f64:	f04f 0a00 	mov.w	sl, #0
 8006f68:	4638      	mov	r0, r7
 8006f6a:	46b6      	mov	lr, r6
 8006f6c:	46d3      	mov	fp, sl
 8006f6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f72:	b293      	uxth	r3, r2
 8006f74:	fb05 a303 	mla	r3, r5, r3, sl
 8006f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ebab 0303 	sub.w	r3, fp, r3
 8006f82:	0c12      	lsrs	r2, r2, #16
 8006f84:	f8de b000 	ldr.w	fp, [lr]
 8006f88:	fb05 a202 	mla	r2, r5, r2, sl
 8006f8c:	fa13 f38b 	uxtah	r3, r3, fp
 8006f90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006f94:	fa1f fb82 	uxth.w	fp, r2
 8006f98:	f8de 2000 	ldr.w	r2, [lr]
 8006f9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006faa:	4581      	cmp	r9, r0
 8006fac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006fb0:	f84e 3b04 	str.w	r3, [lr], #4
 8006fb4:	d2db      	bcs.n	8006f6e <quorem+0x42>
 8006fb6:	f856 300c 	ldr.w	r3, [r6, ip]
 8006fba:	b933      	cbnz	r3, 8006fca <quorem+0x9e>
 8006fbc:	9b01      	ldr	r3, [sp, #4]
 8006fbe:	3b04      	subs	r3, #4
 8006fc0:	429e      	cmp	r6, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	d330      	bcc.n	8007028 <quorem+0xfc>
 8006fc6:	f8c8 4010 	str.w	r4, [r8, #16]
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f001 fba6 	bl	800871c <__mcmp>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	db25      	blt.n	8007020 <quorem+0xf4>
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f04f 0c00 	mov.w	ip, #0
 8006fdc:	f857 2b04 	ldr.w	r2, [r7], #4
 8006fe0:	f8d0 e000 	ldr.w	lr, [r0]
 8006fe4:	b293      	uxth	r3, r2
 8006fe6:	ebac 0303 	sub.w	r3, ip, r3
 8006fea:	0c12      	lsrs	r2, r2, #16
 8006fec:	fa13 f38e 	uxtah	r3, r3, lr
 8006ff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ffe:	45b9      	cmp	r9, r7
 8007000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007004:	f840 3b04 	str.w	r3, [r0], #4
 8007008:	d2e8      	bcs.n	8006fdc <quorem+0xb0>
 800700a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800700e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007012:	b92a      	cbnz	r2, 8007020 <quorem+0xf4>
 8007014:	3b04      	subs	r3, #4
 8007016:	429e      	cmp	r6, r3
 8007018:	461a      	mov	r2, r3
 800701a:	d30b      	bcc.n	8007034 <quorem+0x108>
 800701c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007020:	4628      	mov	r0, r5
 8007022:	b003      	add	sp, #12
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	3b04      	subs	r3, #4
 800702c:	2a00      	cmp	r2, #0
 800702e:	d1ca      	bne.n	8006fc6 <quorem+0x9a>
 8007030:	3c01      	subs	r4, #1
 8007032:	e7c5      	b.n	8006fc0 <quorem+0x94>
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	3b04      	subs	r3, #4
 8007038:	2a00      	cmp	r2, #0
 800703a:	d1ef      	bne.n	800701c <quorem+0xf0>
 800703c:	3c01      	subs	r4, #1
 800703e:	e7ea      	b.n	8007016 <quorem+0xea>
 8007040:	2000      	movs	r0, #0
 8007042:	e7ee      	b.n	8007022 <quorem+0xf6>
 8007044:	0000      	movs	r0, r0
	...

08007048 <_dtoa_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	ec57 6b10 	vmov	r6, r7, d0
 8007050:	b097      	sub	sp, #92	; 0x5c
 8007052:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007054:	9106      	str	r1, [sp, #24]
 8007056:	4604      	mov	r4, r0
 8007058:	920b      	str	r2, [sp, #44]	; 0x2c
 800705a:	9312      	str	r3, [sp, #72]	; 0x48
 800705c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007060:	e9cd 6700 	strd	r6, r7, [sp]
 8007064:	b93d      	cbnz	r5, 8007076 <_dtoa_r+0x2e>
 8007066:	2010      	movs	r0, #16
 8007068:	f001 f8e0 	bl	800822c <malloc>
 800706c:	6260      	str	r0, [r4, #36]	; 0x24
 800706e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007072:	6005      	str	r5, [r0, #0]
 8007074:	60c5      	str	r5, [r0, #12]
 8007076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	b151      	cbz	r1, 8007092 <_dtoa_r+0x4a>
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	604a      	str	r2, [r1, #4]
 8007080:	2301      	movs	r3, #1
 8007082:	4093      	lsls	r3, r2
 8007084:	608b      	str	r3, [r1, #8]
 8007086:	4620      	mov	r0, r4
 8007088:	f001 f929 	bl	80082de <_Bfree>
 800708c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	1e3b      	subs	r3, r7, #0
 8007094:	bfbb      	ittet	lt
 8007096:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800709a:	9301      	strlt	r3, [sp, #4]
 800709c:	2300      	movge	r3, #0
 800709e:	2201      	movlt	r2, #1
 80070a0:	bfac      	ite	ge
 80070a2:	f8c8 3000 	strge.w	r3, [r8]
 80070a6:	f8c8 2000 	strlt.w	r2, [r8]
 80070aa:	4baf      	ldr	r3, [pc, #700]	; (8007368 <_dtoa_r+0x320>)
 80070ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80070b0:	ea33 0308 	bics.w	r3, r3, r8
 80070b4:	d114      	bne.n	80070e0 <_dtoa_r+0x98>
 80070b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	b923      	cbnz	r3, 80070cc <_dtoa_r+0x84>
 80070c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f000 8542 	beq.w	8007b50 <_dtoa_r+0xb08>
 80070cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800737c <_dtoa_r+0x334>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8544 	beq.w	8007b60 <_dtoa_r+0xb18>
 80070d8:	f10b 0303 	add.w	r3, fp, #3
 80070dc:	f000 bd3e 	b.w	8007b5c <_dtoa_r+0xb14>
 80070e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2300      	movs	r3, #0
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f0:	4681      	mov	r9, r0
 80070f2:	b168      	cbz	r0, 8007110 <_dtoa_r+0xc8>
 80070f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070f6:	2301      	movs	r3, #1
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8524 	beq.w	8007b4a <_dtoa_r+0xb02>
 8007102:	4b9a      	ldr	r3, [pc, #616]	; (800736c <_dtoa_r+0x324>)
 8007104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007106:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	f000 bd28 	b.w	8007b60 <_dtoa_r+0xb18>
 8007110:	aa14      	add	r2, sp, #80	; 0x50
 8007112:	a915      	add	r1, sp, #84	; 0x54
 8007114:	ec47 6b10 	vmov	d0, r6, r7
 8007118:	4620      	mov	r0, r4
 800711a:	f001 fbed 	bl	80088f8 <__d2b>
 800711e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007122:	9004      	str	r0, [sp, #16]
 8007124:	2d00      	cmp	r5, #0
 8007126:	d07c      	beq.n	8007222 <_dtoa_r+0x1da>
 8007128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800712c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007130:	46b2      	mov	sl, r6
 8007132:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800713a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800713e:	2200      	movs	r2, #0
 8007140:	4b8b      	ldr	r3, [pc, #556]	; (8007370 <_dtoa_r+0x328>)
 8007142:	4650      	mov	r0, sl
 8007144:	4659      	mov	r1, fp
 8007146:	f7f9 f89f 	bl	8000288 <__aeabi_dsub>
 800714a:	a381      	add	r3, pc, #516	; (adr r3, 8007350 <_dtoa_r+0x308>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 fa52 	bl	80005f8 <__aeabi_dmul>
 8007154:	a380      	add	r3, pc, #512	; (adr r3, 8007358 <_dtoa_r+0x310>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 f897 	bl	800028c <__adddf3>
 800715e:	4606      	mov	r6, r0
 8007160:	4628      	mov	r0, r5
 8007162:	460f      	mov	r7, r1
 8007164:	f7f9 f9de 	bl	8000524 <__aeabi_i2d>
 8007168:	a37d      	add	r3, pc, #500	; (adr r3, 8007360 <_dtoa_r+0x318>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 fa43 	bl	80005f8 <__aeabi_dmul>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 f887 	bl	800028c <__adddf3>
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	f7f9 fce9 	bl	8000b58 <__aeabi_d2iz>
 8007186:	2200      	movs	r2, #0
 8007188:	4682      	mov	sl, r0
 800718a:	2300      	movs	r3, #0
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f7f9 fca4 	bl	8000adc <__aeabi_dcmplt>
 8007194:	b148      	cbz	r0, 80071aa <_dtoa_r+0x162>
 8007196:	4650      	mov	r0, sl
 8007198:	f7f9 f9c4 	bl	8000524 <__aeabi_i2d>
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	f7f9 fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80071a4:	b908      	cbnz	r0, 80071aa <_dtoa_r+0x162>
 80071a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071aa:	f1ba 0f16 	cmp.w	sl, #22
 80071ae:	d859      	bhi.n	8007264 <_dtoa_r+0x21c>
 80071b0:	4970      	ldr	r1, [pc, #448]	; (8007374 <_dtoa_r+0x32c>)
 80071b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80071b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071be:	f7f9 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d050      	beq.n	8007268 <_dtoa_r+0x220>
 80071c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071ca:	2300      	movs	r3, #0
 80071cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071d0:	1b5d      	subs	r5, r3, r5
 80071d2:	f1b5 0801 	subs.w	r8, r5, #1
 80071d6:	bf49      	itett	mi
 80071d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80071dc:	2300      	movpl	r3, #0
 80071de:	9305      	strmi	r3, [sp, #20]
 80071e0:	f04f 0800 	movmi.w	r8, #0
 80071e4:	bf58      	it	pl
 80071e6:	9305      	strpl	r3, [sp, #20]
 80071e8:	f1ba 0f00 	cmp.w	sl, #0
 80071ec:	db3e      	blt.n	800726c <_dtoa_r+0x224>
 80071ee:	2300      	movs	r3, #0
 80071f0:	44d0      	add	r8, sl
 80071f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80071f6:	9307      	str	r3, [sp, #28]
 80071f8:	9b06      	ldr	r3, [sp, #24]
 80071fa:	2b09      	cmp	r3, #9
 80071fc:	f200 8090 	bhi.w	8007320 <_dtoa_r+0x2d8>
 8007200:	2b05      	cmp	r3, #5
 8007202:	bfc4      	itt	gt
 8007204:	3b04      	subgt	r3, #4
 8007206:	9306      	strgt	r3, [sp, #24]
 8007208:	9b06      	ldr	r3, [sp, #24]
 800720a:	f1a3 0302 	sub.w	r3, r3, #2
 800720e:	bfcc      	ite	gt
 8007210:	2500      	movgt	r5, #0
 8007212:	2501      	movle	r5, #1
 8007214:	2b03      	cmp	r3, #3
 8007216:	f200 808f 	bhi.w	8007338 <_dtoa_r+0x2f0>
 800721a:	e8df f003 	tbb	[pc, r3]
 800721e:	7f7d      	.short	0x7f7d
 8007220:	7131      	.short	0x7131
 8007222:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007226:	441d      	add	r5, r3
 8007228:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800722c:	2820      	cmp	r0, #32
 800722e:	dd13      	ble.n	8007258 <_dtoa_r+0x210>
 8007230:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007234:	9b00      	ldr	r3, [sp, #0]
 8007236:	fa08 f800 	lsl.w	r8, r8, r0
 800723a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800723e:	fa23 f000 	lsr.w	r0, r3, r0
 8007242:	ea48 0000 	orr.w	r0, r8, r0
 8007246:	f7f9 f95d 	bl	8000504 <__aeabi_ui2d>
 800724a:	2301      	movs	r3, #1
 800724c:	4682      	mov	sl, r0
 800724e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007252:	3d01      	subs	r5, #1
 8007254:	9313      	str	r3, [sp, #76]	; 0x4c
 8007256:	e772      	b.n	800713e <_dtoa_r+0xf6>
 8007258:	9b00      	ldr	r3, [sp, #0]
 800725a:	f1c0 0020 	rsb	r0, r0, #32
 800725e:	fa03 f000 	lsl.w	r0, r3, r0
 8007262:	e7f0      	b.n	8007246 <_dtoa_r+0x1fe>
 8007264:	2301      	movs	r3, #1
 8007266:	e7b1      	b.n	80071cc <_dtoa_r+0x184>
 8007268:	900f      	str	r0, [sp, #60]	; 0x3c
 800726a:	e7b0      	b.n	80071ce <_dtoa_r+0x186>
 800726c:	9b05      	ldr	r3, [sp, #20]
 800726e:	eba3 030a 	sub.w	r3, r3, sl
 8007272:	9305      	str	r3, [sp, #20]
 8007274:	f1ca 0300 	rsb	r3, sl, #0
 8007278:	9307      	str	r3, [sp, #28]
 800727a:	2300      	movs	r3, #0
 800727c:	930e      	str	r3, [sp, #56]	; 0x38
 800727e:	e7bb      	b.n	80071f8 <_dtoa_r+0x1b0>
 8007280:	2301      	movs	r3, #1
 8007282:	930a      	str	r3, [sp, #40]	; 0x28
 8007284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007286:	2b00      	cmp	r3, #0
 8007288:	dd59      	ble.n	800733e <_dtoa_r+0x2f6>
 800728a:	9302      	str	r3, [sp, #8]
 800728c:	4699      	mov	r9, r3
 800728e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007290:	2200      	movs	r2, #0
 8007292:	6072      	str	r2, [r6, #4]
 8007294:	2204      	movs	r2, #4
 8007296:	f102 0014 	add.w	r0, r2, #20
 800729a:	4298      	cmp	r0, r3
 800729c:	6871      	ldr	r1, [r6, #4]
 800729e:	d953      	bls.n	8007348 <_dtoa_r+0x300>
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 ffe8 	bl	8008276 <_Balloc>
 80072a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a8:	6030      	str	r0, [r6, #0]
 80072aa:	f1b9 0f0e 	cmp.w	r9, #14
 80072ae:	f8d3 b000 	ldr.w	fp, [r3]
 80072b2:	f200 80e6 	bhi.w	8007482 <_dtoa_r+0x43a>
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	f000 80e3 	beq.w	8007482 <_dtoa_r+0x43a>
 80072bc:	ed9d 7b00 	vldr	d7, [sp]
 80072c0:	f1ba 0f00 	cmp.w	sl, #0
 80072c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80072c8:	dd74      	ble.n	80073b4 <_dtoa_r+0x36c>
 80072ca:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <_dtoa_r+0x32c>)
 80072cc:	f00a 030f 	and.w	r3, sl, #15
 80072d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072d4:	ed93 7b00 	vldr	d7, [r3]
 80072d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80072dc:	06f0      	lsls	r0, r6, #27
 80072de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80072e2:	d565      	bpl.n	80073b0 <_dtoa_r+0x368>
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <_dtoa_r+0x330>)
 80072e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072ee:	f7f9 faad 	bl	800084c <__aeabi_ddiv>
 80072f2:	e9cd 0100 	strd	r0, r1, [sp]
 80072f6:	f006 060f 	and.w	r6, r6, #15
 80072fa:	2503      	movs	r5, #3
 80072fc:	4f1e      	ldr	r7, [pc, #120]	; (8007378 <_dtoa_r+0x330>)
 80072fe:	e04c      	b.n	800739a <_dtoa_r+0x352>
 8007300:	2301      	movs	r3, #1
 8007302:	930a      	str	r3, [sp, #40]	; 0x28
 8007304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007306:	4453      	add	r3, sl
 8007308:	f103 0901 	add.w	r9, r3, #1
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	464b      	mov	r3, r9
 8007310:	2b01      	cmp	r3, #1
 8007312:	bfb8      	it	lt
 8007314:	2301      	movlt	r3, #1
 8007316:	e7ba      	b.n	800728e <_dtoa_r+0x246>
 8007318:	2300      	movs	r3, #0
 800731a:	e7b2      	b.n	8007282 <_dtoa_r+0x23a>
 800731c:	2300      	movs	r3, #0
 800731e:	e7f0      	b.n	8007302 <_dtoa_r+0x2ba>
 8007320:	2501      	movs	r5, #1
 8007322:	2300      	movs	r3, #0
 8007324:	9306      	str	r3, [sp, #24]
 8007326:	950a      	str	r5, [sp, #40]	; 0x28
 8007328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800732c:	9302      	str	r3, [sp, #8]
 800732e:	4699      	mov	r9, r3
 8007330:	2200      	movs	r2, #0
 8007332:	2312      	movs	r3, #18
 8007334:	920b      	str	r2, [sp, #44]	; 0x2c
 8007336:	e7aa      	b.n	800728e <_dtoa_r+0x246>
 8007338:	2301      	movs	r3, #1
 800733a:	930a      	str	r3, [sp, #40]	; 0x28
 800733c:	e7f4      	b.n	8007328 <_dtoa_r+0x2e0>
 800733e:	2301      	movs	r3, #1
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	4699      	mov	r9, r3
 8007344:	461a      	mov	r2, r3
 8007346:	e7f5      	b.n	8007334 <_dtoa_r+0x2ec>
 8007348:	3101      	adds	r1, #1
 800734a:	6071      	str	r1, [r6, #4]
 800734c:	0052      	lsls	r2, r2, #1
 800734e:	e7a2      	b.n	8007296 <_dtoa_r+0x24e>
 8007350:	636f4361 	.word	0x636f4361
 8007354:	3fd287a7 	.word	0x3fd287a7
 8007358:	8b60c8b3 	.word	0x8b60c8b3
 800735c:	3fc68a28 	.word	0x3fc68a28
 8007360:	509f79fb 	.word	0x509f79fb
 8007364:	3fd34413 	.word	0x3fd34413
 8007368:	7ff00000 	.word	0x7ff00000
 800736c:	08008fe9 	.word	0x08008fe9
 8007370:	3ff80000 	.word	0x3ff80000
 8007374:	080090a8 	.word	0x080090a8
 8007378:	08009080 	.word	0x08009080
 800737c:	08009071 	.word	0x08009071
 8007380:	07f1      	lsls	r1, r6, #31
 8007382:	d508      	bpl.n	8007396 <_dtoa_r+0x34e>
 8007384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007394:	3501      	adds	r5, #1
 8007396:	1076      	asrs	r6, r6, #1
 8007398:	3708      	adds	r7, #8
 800739a:	2e00      	cmp	r6, #0
 800739c:	d1f0      	bne.n	8007380 <_dtoa_r+0x338>
 800739e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073a6:	f7f9 fa51 	bl	800084c <__aeabi_ddiv>
 80073aa:	e9cd 0100 	strd	r0, r1, [sp]
 80073ae:	e01a      	b.n	80073e6 <_dtoa_r+0x39e>
 80073b0:	2502      	movs	r5, #2
 80073b2:	e7a3      	b.n	80072fc <_dtoa_r+0x2b4>
 80073b4:	f000 80a0 	beq.w	80074f8 <_dtoa_r+0x4b0>
 80073b8:	f1ca 0600 	rsb	r6, sl, #0
 80073bc:	4b9f      	ldr	r3, [pc, #636]	; (800763c <_dtoa_r+0x5f4>)
 80073be:	4fa0      	ldr	r7, [pc, #640]	; (8007640 <_dtoa_r+0x5f8>)
 80073c0:	f006 020f 	and.w	r2, r6, #15
 80073c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073d0:	f7f9 f912 	bl	80005f8 <__aeabi_dmul>
 80073d4:	e9cd 0100 	strd	r0, r1, [sp]
 80073d8:	1136      	asrs	r6, r6, #4
 80073da:	2300      	movs	r3, #0
 80073dc:	2502      	movs	r5, #2
 80073de:	2e00      	cmp	r6, #0
 80073e0:	d17f      	bne.n	80074e2 <_dtoa_r+0x49a>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e1      	bne.n	80073aa <_dtoa_r+0x362>
 80073e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8087 	beq.w	80074fc <_dtoa_r+0x4b4>
 80073ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80073f2:	2200      	movs	r2, #0
 80073f4:	4b93      	ldr	r3, [pc, #588]	; (8007644 <_dtoa_r+0x5fc>)
 80073f6:	4630      	mov	r0, r6
 80073f8:	4639      	mov	r1, r7
 80073fa:	f7f9 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d07c      	beq.n	80074fc <_dtoa_r+0x4b4>
 8007402:	f1b9 0f00 	cmp.w	r9, #0
 8007406:	d079      	beq.n	80074fc <_dtoa_r+0x4b4>
 8007408:	9b02      	ldr	r3, [sp, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd35      	ble.n	800747a <_dtoa_r+0x432>
 800740e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007412:	9308      	str	r3, [sp, #32]
 8007414:	4639      	mov	r1, r7
 8007416:	2200      	movs	r2, #0
 8007418:	4b8b      	ldr	r3, [pc, #556]	; (8007648 <_dtoa_r+0x600>)
 800741a:	4630      	mov	r0, r6
 800741c:	f7f9 f8ec 	bl	80005f8 <__aeabi_dmul>
 8007420:	e9cd 0100 	strd	r0, r1, [sp]
 8007424:	9f02      	ldr	r7, [sp, #8]
 8007426:	3501      	adds	r5, #1
 8007428:	4628      	mov	r0, r5
 800742a:	f7f9 f87b 	bl	8000524 <__aeabi_i2d>
 800742e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007432:	f7f9 f8e1 	bl	80005f8 <__aeabi_dmul>
 8007436:	2200      	movs	r2, #0
 8007438:	4b84      	ldr	r3, [pc, #528]	; (800764c <_dtoa_r+0x604>)
 800743a:	f7f8 ff27 	bl	800028c <__adddf3>
 800743e:	4605      	mov	r5, r0
 8007440:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007444:	2f00      	cmp	r7, #0
 8007446:	d15d      	bne.n	8007504 <_dtoa_r+0x4bc>
 8007448:	2200      	movs	r2, #0
 800744a:	4b81      	ldr	r3, [pc, #516]	; (8007650 <_dtoa_r+0x608>)
 800744c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007450:	f7f8 ff1a 	bl	8000288 <__aeabi_dsub>
 8007454:	462a      	mov	r2, r5
 8007456:	4633      	mov	r3, r6
 8007458:	e9cd 0100 	strd	r0, r1, [sp]
 800745c:	f7f9 fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 8007460:	2800      	cmp	r0, #0
 8007462:	f040 8288 	bne.w	8007976 <_dtoa_r+0x92e>
 8007466:	462a      	mov	r2, r5
 8007468:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800746c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007470:	f7f9 fb34 	bl	8000adc <__aeabi_dcmplt>
 8007474:	2800      	cmp	r0, #0
 8007476:	f040 827c 	bne.w	8007972 <_dtoa_r+0x92a>
 800747a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800747e:	e9cd 2300 	strd	r2, r3, [sp]
 8007482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007484:	2b00      	cmp	r3, #0
 8007486:	f2c0 8150 	blt.w	800772a <_dtoa_r+0x6e2>
 800748a:	f1ba 0f0e 	cmp.w	sl, #14
 800748e:	f300 814c 	bgt.w	800772a <_dtoa_r+0x6e2>
 8007492:	4b6a      	ldr	r3, [pc, #424]	; (800763c <_dtoa_r+0x5f4>)
 8007494:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007498:	ed93 7b00 	vldr	d7, [r3]
 800749c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074a4:	f280 80d8 	bge.w	8007658 <_dtoa_r+0x610>
 80074a8:	f1b9 0f00 	cmp.w	r9, #0
 80074ac:	f300 80d4 	bgt.w	8007658 <_dtoa_r+0x610>
 80074b0:	f040 825e 	bne.w	8007970 <_dtoa_r+0x928>
 80074b4:	2200      	movs	r2, #0
 80074b6:	4b66      	ldr	r3, [pc, #408]	; (8007650 <_dtoa_r+0x608>)
 80074b8:	ec51 0b17 	vmov	r0, r1, d7
 80074bc:	f7f9 f89c 	bl	80005f8 <__aeabi_dmul>
 80074c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c4:	f7f9 fb1e 	bl	8000b04 <__aeabi_dcmpge>
 80074c8:	464f      	mov	r7, r9
 80074ca:	464e      	mov	r6, r9
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f040 8234 	bne.w	800793a <_dtoa_r+0x8f2>
 80074d2:	2331      	movs	r3, #49	; 0x31
 80074d4:	f10b 0501 	add.w	r5, fp, #1
 80074d8:	f88b 3000 	strb.w	r3, [fp]
 80074dc:	f10a 0a01 	add.w	sl, sl, #1
 80074e0:	e22f      	b.n	8007942 <_dtoa_r+0x8fa>
 80074e2:	07f2      	lsls	r2, r6, #31
 80074e4:	d505      	bpl.n	80074f2 <_dtoa_r+0x4aa>
 80074e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ea:	f7f9 f885 	bl	80005f8 <__aeabi_dmul>
 80074ee:	3501      	adds	r5, #1
 80074f0:	2301      	movs	r3, #1
 80074f2:	1076      	asrs	r6, r6, #1
 80074f4:	3708      	adds	r7, #8
 80074f6:	e772      	b.n	80073de <_dtoa_r+0x396>
 80074f8:	2502      	movs	r5, #2
 80074fa:	e774      	b.n	80073e6 <_dtoa_r+0x39e>
 80074fc:	f8cd a020 	str.w	sl, [sp, #32]
 8007500:	464f      	mov	r7, r9
 8007502:	e791      	b.n	8007428 <_dtoa_r+0x3e0>
 8007504:	4b4d      	ldr	r3, [pc, #308]	; (800763c <_dtoa_r+0x5f4>)
 8007506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800750a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800750e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d047      	beq.n	80075a4 <_dtoa_r+0x55c>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	2000      	movs	r0, #0
 800751a:	494e      	ldr	r1, [pc, #312]	; (8007654 <_dtoa_r+0x60c>)
 800751c:	f7f9 f996 	bl	800084c <__aeabi_ddiv>
 8007520:	462a      	mov	r2, r5
 8007522:	4633      	mov	r3, r6
 8007524:	f7f8 feb0 	bl	8000288 <__aeabi_dsub>
 8007528:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800752c:	465d      	mov	r5, fp
 800752e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007532:	f7f9 fb11 	bl	8000b58 <__aeabi_d2iz>
 8007536:	4606      	mov	r6, r0
 8007538:	f7f8 fff4 	bl	8000524 <__aeabi_i2d>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007544:	f7f8 fea0 	bl	8000288 <__aeabi_dsub>
 8007548:	3630      	adds	r6, #48	; 0x30
 800754a:	f805 6b01 	strb.w	r6, [r5], #1
 800754e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007552:	e9cd 0100 	strd	r0, r1, [sp]
 8007556:	f7f9 fac1 	bl	8000adc <__aeabi_dcmplt>
 800755a:	2800      	cmp	r0, #0
 800755c:	d163      	bne.n	8007626 <_dtoa_r+0x5de>
 800755e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007562:	2000      	movs	r0, #0
 8007564:	4937      	ldr	r1, [pc, #220]	; (8007644 <_dtoa_r+0x5fc>)
 8007566:	f7f8 fe8f 	bl	8000288 <__aeabi_dsub>
 800756a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800756e:	f7f9 fab5 	bl	8000adc <__aeabi_dcmplt>
 8007572:	2800      	cmp	r0, #0
 8007574:	f040 80b7 	bne.w	80076e6 <_dtoa_r+0x69e>
 8007578:	eba5 030b 	sub.w	r3, r5, fp
 800757c:	429f      	cmp	r7, r3
 800757e:	f77f af7c 	ble.w	800747a <_dtoa_r+0x432>
 8007582:	2200      	movs	r2, #0
 8007584:	4b30      	ldr	r3, [pc, #192]	; (8007648 <_dtoa_r+0x600>)
 8007586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800758a:	f7f9 f835 	bl	80005f8 <__aeabi_dmul>
 800758e:	2200      	movs	r2, #0
 8007590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007594:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <_dtoa_r+0x600>)
 8007596:	e9dd 0100 	ldrd	r0, r1, [sp]
 800759a:	f7f9 f82d 	bl	80005f8 <__aeabi_dmul>
 800759e:	e9cd 0100 	strd	r0, r1, [sp]
 80075a2:	e7c4      	b.n	800752e <_dtoa_r+0x4e6>
 80075a4:	462a      	mov	r2, r5
 80075a6:	4633      	mov	r3, r6
 80075a8:	f7f9 f826 	bl	80005f8 <__aeabi_dmul>
 80075ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80075b0:	eb0b 0507 	add.w	r5, fp, r7
 80075b4:	465e      	mov	r6, fp
 80075b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ba:	f7f9 facd 	bl	8000b58 <__aeabi_d2iz>
 80075be:	4607      	mov	r7, r0
 80075c0:	f7f8 ffb0 	bl	8000524 <__aeabi_i2d>
 80075c4:	3730      	adds	r7, #48	; 0x30
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ce:	f7f8 fe5b 	bl	8000288 <__aeabi_dsub>
 80075d2:	f806 7b01 	strb.w	r7, [r6], #1
 80075d6:	42ae      	cmp	r6, r5
 80075d8:	e9cd 0100 	strd	r0, r1, [sp]
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	d126      	bne.n	8007630 <_dtoa_r+0x5e8>
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <_dtoa_r+0x60c>)
 80075e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075e8:	f7f8 fe50 	bl	800028c <__adddf3>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075f4:	f7f9 fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d174      	bne.n	80076e6 <_dtoa_r+0x69e>
 80075fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007600:	2000      	movs	r0, #0
 8007602:	4914      	ldr	r1, [pc, #80]	; (8007654 <_dtoa_r+0x60c>)
 8007604:	f7f8 fe40 	bl	8000288 <__aeabi_dsub>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007610:	f7f9 fa64 	bl	8000adc <__aeabi_dcmplt>
 8007614:	2800      	cmp	r0, #0
 8007616:	f43f af30 	beq.w	800747a <_dtoa_r+0x432>
 800761a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800761e:	2b30      	cmp	r3, #48	; 0x30
 8007620:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007624:	d002      	beq.n	800762c <_dtoa_r+0x5e4>
 8007626:	f8dd a020 	ldr.w	sl, [sp, #32]
 800762a:	e04a      	b.n	80076c2 <_dtoa_r+0x67a>
 800762c:	4615      	mov	r5, r2
 800762e:	e7f4      	b.n	800761a <_dtoa_r+0x5d2>
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <_dtoa_r+0x600>)
 8007632:	f7f8 ffe1 	bl	80005f8 <__aeabi_dmul>
 8007636:	e9cd 0100 	strd	r0, r1, [sp]
 800763a:	e7bc      	b.n	80075b6 <_dtoa_r+0x56e>
 800763c:	080090a8 	.word	0x080090a8
 8007640:	08009080 	.word	0x08009080
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	40240000 	.word	0x40240000
 800764c:	401c0000 	.word	0x401c0000
 8007650:	40140000 	.word	0x40140000
 8007654:	3fe00000 	.word	0x3fe00000
 8007658:	e9dd 6700 	ldrd	r6, r7, [sp]
 800765c:	465d      	mov	r5, fp
 800765e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f9 f8f1 	bl	800084c <__aeabi_ddiv>
 800766a:	f7f9 fa75 	bl	8000b58 <__aeabi_d2iz>
 800766e:	4680      	mov	r8, r0
 8007670:	f7f8 ff58 	bl	8000524 <__aeabi_i2d>
 8007674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007678:	f7f8 ffbe 	bl	80005f8 <__aeabi_dmul>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4630      	mov	r0, r6
 8007682:	4639      	mov	r1, r7
 8007684:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007688:	f7f8 fdfe 	bl	8000288 <__aeabi_dsub>
 800768c:	f805 6b01 	strb.w	r6, [r5], #1
 8007690:	eba5 060b 	sub.w	r6, r5, fp
 8007694:	45b1      	cmp	r9, r6
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	d139      	bne.n	8007710 <_dtoa_r+0x6c8>
 800769c:	f7f8 fdf6 	bl	800028c <__adddf3>
 80076a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	f7f9 fa36 	bl	8000b18 <__aeabi_dcmpgt>
 80076ac:	b9c8      	cbnz	r0, 80076e2 <_dtoa_r+0x69a>
 80076ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b2:	4630      	mov	r0, r6
 80076b4:	4639      	mov	r1, r7
 80076b6:	f7f9 fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ba:	b110      	cbz	r0, 80076c2 <_dtoa_r+0x67a>
 80076bc:	f018 0f01 	tst.w	r8, #1
 80076c0:	d10f      	bne.n	80076e2 <_dtoa_r+0x69a>
 80076c2:	9904      	ldr	r1, [sp, #16]
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 fe0a 	bl	80082de <_Bfree>
 80076ca:	2300      	movs	r3, #0
 80076cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ce:	702b      	strb	r3, [r5, #0]
 80076d0:	f10a 0301 	add.w	r3, sl, #1
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8241 	beq.w	8007b60 <_dtoa_r+0xb18>
 80076de:	601d      	str	r5, [r3, #0]
 80076e0:	e23e      	b.n	8007b60 <_dtoa_r+0xb18>
 80076e2:	f8cd a020 	str.w	sl, [sp, #32]
 80076e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076ea:	2a39      	cmp	r2, #57	; 0x39
 80076ec:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80076f0:	d108      	bne.n	8007704 <_dtoa_r+0x6bc>
 80076f2:	459b      	cmp	fp, r3
 80076f4:	d10a      	bne.n	800770c <_dtoa_r+0x6c4>
 80076f6:	9b08      	ldr	r3, [sp, #32]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9308      	str	r3, [sp, #32]
 80076fc:	2330      	movs	r3, #48	; 0x30
 80076fe:	f88b 3000 	strb.w	r3, [fp]
 8007702:	465b      	mov	r3, fp
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	3201      	adds	r2, #1
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e78c      	b.n	8007626 <_dtoa_r+0x5de>
 800770c:	461d      	mov	r5, r3
 800770e:	e7ea      	b.n	80076e6 <_dtoa_r+0x69e>
 8007710:	2200      	movs	r2, #0
 8007712:	4b9b      	ldr	r3, [pc, #620]	; (8007980 <_dtoa_r+0x938>)
 8007714:	f7f8 ff70 	bl	80005f8 <__aeabi_dmul>
 8007718:	2200      	movs	r2, #0
 800771a:	2300      	movs	r3, #0
 800771c:	4606      	mov	r6, r0
 800771e:	460f      	mov	r7, r1
 8007720:	f7f9 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007724:	2800      	cmp	r0, #0
 8007726:	d09a      	beq.n	800765e <_dtoa_r+0x616>
 8007728:	e7cb      	b.n	80076c2 <_dtoa_r+0x67a>
 800772a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800772c:	2a00      	cmp	r2, #0
 800772e:	f000 808b 	beq.w	8007848 <_dtoa_r+0x800>
 8007732:	9a06      	ldr	r2, [sp, #24]
 8007734:	2a01      	cmp	r2, #1
 8007736:	dc6e      	bgt.n	8007816 <_dtoa_r+0x7ce>
 8007738:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800773a:	2a00      	cmp	r2, #0
 800773c:	d067      	beq.n	800780e <_dtoa_r+0x7c6>
 800773e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007742:	9f07      	ldr	r7, [sp, #28]
 8007744:	9d05      	ldr	r5, [sp, #20]
 8007746:	9a05      	ldr	r2, [sp, #20]
 8007748:	2101      	movs	r1, #1
 800774a:	441a      	add	r2, r3
 800774c:	4620      	mov	r0, r4
 800774e:	9205      	str	r2, [sp, #20]
 8007750:	4498      	add	r8, r3
 8007752:	f000 fea2 	bl	800849a <__i2b>
 8007756:	4606      	mov	r6, r0
 8007758:	2d00      	cmp	r5, #0
 800775a:	dd0c      	ble.n	8007776 <_dtoa_r+0x72e>
 800775c:	f1b8 0f00 	cmp.w	r8, #0
 8007760:	dd09      	ble.n	8007776 <_dtoa_r+0x72e>
 8007762:	4545      	cmp	r5, r8
 8007764:	9a05      	ldr	r2, [sp, #20]
 8007766:	462b      	mov	r3, r5
 8007768:	bfa8      	it	ge
 800776a:	4643      	movge	r3, r8
 800776c:	1ad2      	subs	r2, r2, r3
 800776e:	9205      	str	r2, [sp, #20]
 8007770:	1aed      	subs	r5, r5, r3
 8007772:	eba8 0803 	sub.w	r8, r8, r3
 8007776:	9b07      	ldr	r3, [sp, #28]
 8007778:	b1eb      	cbz	r3, 80077b6 <_dtoa_r+0x76e>
 800777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d067      	beq.n	8007850 <_dtoa_r+0x808>
 8007780:	b18f      	cbz	r7, 80077a6 <_dtoa_r+0x75e>
 8007782:	4631      	mov	r1, r6
 8007784:	463a      	mov	r2, r7
 8007786:	4620      	mov	r0, r4
 8007788:	f000 ff26 	bl	80085d8 <__pow5mult>
 800778c:	9a04      	ldr	r2, [sp, #16]
 800778e:	4601      	mov	r1, r0
 8007790:	4606      	mov	r6, r0
 8007792:	4620      	mov	r0, r4
 8007794:	f000 fe8a 	bl	80084ac <__multiply>
 8007798:	9904      	ldr	r1, [sp, #16]
 800779a:	9008      	str	r0, [sp, #32]
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fd9e 	bl	80082de <_Bfree>
 80077a2:	9b08      	ldr	r3, [sp, #32]
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	9b07      	ldr	r3, [sp, #28]
 80077a8:	1bda      	subs	r2, r3, r7
 80077aa:	d004      	beq.n	80077b6 <_dtoa_r+0x76e>
 80077ac:	9904      	ldr	r1, [sp, #16]
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 ff12 	bl	80085d8 <__pow5mult>
 80077b4:	9004      	str	r0, [sp, #16]
 80077b6:	2101      	movs	r1, #1
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fe6e 	bl	800849a <__i2b>
 80077be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c0:	4607      	mov	r7, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 81d0 	beq.w	8007b68 <_dtoa_r+0xb20>
 80077c8:	461a      	mov	r2, r3
 80077ca:	4601      	mov	r1, r0
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 ff03 	bl	80085d8 <__pow5mult>
 80077d2:	9b06      	ldr	r3, [sp, #24]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	4607      	mov	r7, r0
 80077d8:	dc40      	bgt.n	800785c <_dtoa_r+0x814>
 80077da:	9b00      	ldr	r3, [sp, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d139      	bne.n	8007854 <_dtoa_r+0x80c>
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d136      	bne.n	8007858 <_dtoa_r+0x810>
 80077ea:	9b01      	ldr	r3, [sp, #4]
 80077ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077f0:	0d1b      	lsrs	r3, r3, #20
 80077f2:	051b      	lsls	r3, r3, #20
 80077f4:	b12b      	cbz	r3, 8007802 <_dtoa_r+0x7ba>
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	3301      	adds	r3, #1
 80077fa:	9305      	str	r3, [sp, #20]
 80077fc:	f108 0801 	add.w	r8, r8, #1
 8007800:	2301      	movs	r3, #1
 8007802:	9307      	str	r3, [sp, #28]
 8007804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007806:	2b00      	cmp	r3, #0
 8007808:	d12a      	bne.n	8007860 <_dtoa_r+0x818>
 800780a:	2001      	movs	r0, #1
 800780c:	e030      	b.n	8007870 <_dtoa_r+0x828>
 800780e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007810:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007814:	e795      	b.n	8007742 <_dtoa_r+0x6fa>
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800781c:	42bb      	cmp	r3, r7
 800781e:	bfbf      	itttt	lt
 8007820:	9b07      	ldrlt	r3, [sp, #28]
 8007822:	9707      	strlt	r7, [sp, #28]
 8007824:	1afa      	sublt	r2, r7, r3
 8007826:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007828:	bfbb      	ittet	lt
 800782a:	189b      	addlt	r3, r3, r2
 800782c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800782e:	1bdf      	subge	r7, r3, r7
 8007830:	2700      	movlt	r7, #0
 8007832:	f1b9 0f00 	cmp.w	r9, #0
 8007836:	bfb5      	itete	lt
 8007838:	9b05      	ldrlt	r3, [sp, #20]
 800783a:	9d05      	ldrge	r5, [sp, #20]
 800783c:	eba3 0509 	sublt.w	r5, r3, r9
 8007840:	464b      	movge	r3, r9
 8007842:	bfb8      	it	lt
 8007844:	2300      	movlt	r3, #0
 8007846:	e77e      	b.n	8007746 <_dtoa_r+0x6fe>
 8007848:	9f07      	ldr	r7, [sp, #28]
 800784a:	9d05      	ldr	r5, [sp, #20]
 800784c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800784e:	e783      	b.n	8007758 <_dtoa_r+0x710>
 8007850:	9a07      	ldr	r2, [sp, #28]
 8007852:	e7ab      	b.n	80077ac <_dtoa_r+0x764>
 8007854:	2300      	movs	r3, #0
 8007856:	e7d4      	b.n	8007802 <_dtoa_r+0x7ba>
 8007858:	9b00      	ldr	r3, [sp, #0]
 800785a:	e7d2      	b.n	8007802 <_dtoa_r+0x7ba>
 800785c:	2300      	movs	r3, #0
 800785e:	9307      	str	r3, [sp, #28]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007866:	6918      	ldr	r0, [r3, #16]
 8007868:	f000 fdc9 	bl	80083fe <__hi0bits>
 800786c:	f1c0 0020 	rsb	r0, r0, #32
 8007870:	4440      	add	r0, r8
 8007872:	f010 001f 	ands.w	r0, r0, #31
 8007876:	d047      	beq.n	8007908 <_dtoa_r+0x8c0>
 8007878:	f1c0 0320 	rsb	r3, r0, #32
 800787c:	2b04      	cmp	r3, #4
 800787e:	dd3b      	ble.n	80078f8 <_dtoa_r+0x8b0>
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	f1c0 001c 	rsb	r0, r0, #28
 8007886:	4403      	add	r3, r0
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	4405      	add	r5, r0
 800788c:	4480      	add	r8, r0
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dd05      	ble.n	80078a0 <_dtoa_r+0x858>
 8007894:	461a      	mov	r2, r3
 8007896:	9904      	ldr	r1, [sp, #16]
 8007898:	4620      	mov	r0, r4
 800789a:	f000 feeb 	bl	8008674 <__lshift>
 800789e:	9004      	str	r0, [sp, #16]
 80078a0:	f1b8 0f00 	cmp.w	r8, #0
 80078a4:	dd05      	ble.n	80078b2 <_dtoa_r+0x86a>
 80078a6:	4639      	mov	r1, r7
 80078a8:	4642      	mov	r2, r8
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fee2 	bl	8008674 <__lshift>
 80078b0:	4607      	mov	r7, r0
 80078b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b4:	b353      	cbz	r3, 800790c <_dtoa_r+0x8c4>
 80078b6:	4639      	mov	r1, r7
 80078b8:	9804      	ldr	r0, [sp, #16]
 80078ba:	f000 ff2f 	bl	800871c <__mcmp>
 80078be:	2800      	cmp	r0, #0
 80078c0:	da24      	bge.n	800790c <_dtoa_r+0x8c4>
 80078c2:	2300      	movs	r3, #0
 80078c4:	220a      	movs	r2, #10
 80078c6:	9904      	ldr	r1, [sp, #16]
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fd1f 	bl	800830c <__multadd>
 80078ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d0:	9004      	str	r0, [sp, #16]
 80078d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 814d 	beq.w	8007b76 <_dtoa_r+0xb2e>
 80078dc:	2300      	movs	r3, #0
 80078de:	4631      	mov	r1, r6
 80078e0:	220a      	movs	r2, #10
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 fd12 	bl	800830c <__multadd>
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	4606      	mov	r6, r0
 80078ee:	dc4f      	bgt.n	8007990 <_dtoa_r+0x948>
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	dd4c      	ble.n	8007990 <_dtoa_r+0x948>
 80078f6:	e011      	b.n	800791c <_dtoa_r+0x8d4>
 80078f8:	d0c9      	beq.n	800788e <_dtoa_r+0x846>
 80078fa:	9a05      	ldr	r2, [sp, #20]
 80078fc:	331c      	adds	r3, #28
 80078fe:	441a      	add	r2, r3
 8007900:	9205      	str	r2, [sp, #20]
 8007902:	441d      	add	r5, r3
 8007904:	4498      	add	r8, r3
 8007906:	e7c2      	b.n	800788e <_dtoa_r+0x846>
 8007908:	4603      	mov	r3, r0
 800790a:	e7f6      	b.n	80078fa <_dtoa_r+0x8b2>
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	dc38      	bgt.n	8007984 <_dtoa_r+0x93c>
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	2b02      	cmp	r3, #2
 8007916:	dd35      	ble.n	8007984 <_dtoa_r+0x93c>
 8007918:	f8cd 9008 	str.w	r9, [sp, #8]
 800791c:	9b02      	ldr	r3, [sp, #8]
 800791e:	b963      	cbnz	r3, 800793a <_dtoa_r+0x8f2>
 8007920:	4639      	mov	r1, r7
 8007922:	2205      	movs	r2, #5
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fcf1 	bl	800830c <__multadd>
 800792a:	4601      	mov	r1, r0
 800792c:	4607      	mov	r7, r0
 800792e:	9804      	ldr	r0, [sp, #16]
 8007930:	f000 fef4 	bl	800871c <__mcmp>
 8007934:	2800      	cmp	r0, #0
 8007936:	f73f adcc 	bgt.w	80074d2 <_dtoa_r+0x48a>
 800793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793c:	465d      	mov	r5, fp
 800793e:	ea6f 0a03 	mvn.w	sl, r3
 8007942:	f04f 0900 	mov.w	r9, #0
 8007946:	4639      	mov	r1, r7
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fcc8 	bl	80082de <_Bfree>
 800794e:	2e00      	cmp	r6, #0
 8007950:	f43f aeb7 	beq.w	80076c2 <_dtoa_r+0x67a>
 8007954:	f1b9 0f00 	cmp.w	r9, #0
 8007958:	d005      	beq.n	8007966 <_dtoa_r+0x91e>
 800795a:	45b1      	cmp	r9, r6
 800795c:	d003      	beq.n	8007966 <_dtoa_r+0x91e>
 800795e:	4649      	mov	r1, r9
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fcbc 	bl	80082de <_Bfree>
 8007966:	4631      	mov	r1, r6
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fcb8 	bl	80082de <_Bfree>
 800796e:	e6a8      	b.n	80076c2 <_dtoa_r+0x67a>
 8007970:	2700      	movs	r7, #0
 8007972:	463e      	mov	r6, r7
 8007974:	e7e1      	b.n	800793a <_dtoa_r+0x8f2>
 8007976:	f8dd a020 	ldr.w	sl, [sp, #32]
 800797a:	463e      	mov	r6, r7
 800797c:	e5a9      	b.n	80074d2 <_dtoa_r+0x48a>
 800797e:	bf00      	nop
 8007980:	40240000 	.word	0x40240000
 8007984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007986:	f8cd 9008 	str.w	r9, [sp, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80fa 	beq.w	8007b84 <_dtoa_r+0xb3c>
 8007990:	2d00      	cmp	r5, #0
 8007992:	dd05      	ble.n	80079a0 <_dtoa_r+0x958>
 8007994:	4631      	mov	r1, r6
 8007996:	462a      	mov	r2, r5
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fe6b 	bl	8008674 <__lshift>
 800799e:	4606      	mov	r6, r0
 80079a0:	9b07      	ldr	r3, [sp, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d04c      	beq.n	8007a40 <_dtoa_r+0x9f8>
 80079a6:	6871      	ldr	r1, [r6, #4]
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fc64 	bl	8008276 <_Balloc>
 80079ae:	6932      	ldr	r2, [r6, #16]
 80079b0:	3202      	adds	r2, #2
 80079b2:	4605      	mov	r5, r0
 80079b4:	0092      	lsls	r2, r2, #2
 80079b6:	f106 010c 	add.w	r1, r6, #12
 80079ba:	300c      	adds	r0, #12
 80079bc:	f000 fc50 	bl	8008260 <memcpy>
 80079c0:	2201      	movs	r2, #1
 80079c2:	4629      	mov	r1, r5
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fe55 	bl	8008674 <__lshift>
 80079ca:	9b00      	ldr	r3, [sp, #0]
 80079cc:	f8cd b014 	str.w	fp, [sp, #20]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	46b1      	mov	r9, r6
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	4606      	mov	r6, r0
 80079da:	4639      	mov	r1, r7
 80079dc:	9804      	ldr	r0, [sp, #16]
 80079de:	f7ff faa5 	bl	8006f2c <quorem>
 80079e2:	4649      	mov	r1, r9
 80079e4:	4605      	mov	r5, r0
 80079e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80079ea:	9804      	ldr	r0, [sp, #16]
 80079ec:	f000 fe96 	bl	800871c <__mcmp>
 80079f0:	4632      	mov	r2, r6
 80079f2:	9000      	str	r0, [sp, #0]
 80079f4:	4639      	mov	r1, r7
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 feaa 	bl	8008750 <__mdiff>
 80079fc:	68c3      	ldr	r3, [r0, #12]
 80079fe:	4602      	mov	r2, r0
 8007a00:	bb03      	cbnz	r3, 8007a44 <_dtoa_r+0x9fc>
 8007a02:	4601      	mov	r1, r0
 8007a04:	9008      	str	r0, [sp, #32]
 8007a06:	9804      	ldr	r0, [sp, #16]
 8007a08:	f000 fe88 	bl	800871c <__mcmp>
 8007a0c:	9a08      	ldr	r2, [sp, #32]
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4611      	mov	r1, r2
 8007a12:	4620      	mov	r0, r4
 8007a14:	9308      	str	r3, [sp, #32]
 8007a16:	f000 fc62 	bl	80082de <_Bfree>
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	b9a3      	cbnz	r3, 8007a48 <_dtoa_r+0xa00>
 8007a1e:	9a06      	ldr	r2, [sp, #24]
 8007a20:	b992      	cbnz	r2, 8007a48 <_dtoa_r+0xa00>
 8007a22:	9a07      	ldr	r2, [sp, #28]
 8007a24:	b982      	cbnz	r2, 8007a48 <_dtoa_r+0xa00>
 8007a26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a2a:	d029      	beq.n	8007a80 <_dtoa_r+0xa38>
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dd01      	ble.n	8007a36 <_dtoa_r+0x9ee>
 8007a32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	1c5d      	adds	r5, r3, #1
 8007a3a:	f883 8000 	strb.w	r8, [r3]
 8007a3e:	e782      	b.n	8007946 <_dtoa_r+0x8fe>
 8007a40:	4630      	mov	r0, r6
 8007a42:	e7c2      	b.n	80079ca <_dtoa_r+0x982>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e7e3      	b.n	8007a10 <_dtoa_r+0x9c8>
 8007a48:	9a00      	ldr	r2, [sp, #0]
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	db04      	blt.n	8007a58 <_dtoa_r+0xa10>
 8007a4e:	d125      	bne.n	8007a9c <_dtoa_r+0xa54>
 8007a50:	9a06      	ldr	r2, [sp, #24]
 8007a52:	bb1a      	cbnz	r2, 8007a9c <_dtoa_r+0xa54>
 8007a54:	9a07      	ldr	r2, [sp, #28]
 8007a56:	bb0a      	cbnz	r2, 8007a9c <_dtoa_r+0xa54>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	ddec      	ble.n	8007a36 <_dtoa_r+0x9ee>
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	9904      	ldr	r1, [sp, #16]
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 fe07 	bl	8008674 <__lshift>
 8007a66:	4639      	mov	r1, r7
 8007a68:	9004      	str	r0, [sp, #16]
 8007a6a:	f000 fe57 	bl	800871c <__mcmp>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	dc03      	bgt.n	8007a7a <_dtoa_r+0xa32>
 8007a72:	d1e0      	bne.n	8007a36 <_dtoa_r+0x9ee>
 8007a74:	f018 0f01 	tst.w	r8, #1
 8007a78:	d0dd      	beq.n	8007a36 <_dtoa_r+0x9ee>
 8007a7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a7e:	d1d8      	bne.n	8007a32 <_dtoa_r+0x9ea>
 8007a80:	9b05      	ldr	r3, [sp, #20]
 8007a82:	9a05      	ldr	r2, [sp, #20]
 8007a84:	1c5d      	adds	r5, r3, #1
 8007a86:	2339      	movs	r3, #57	; 0x39
 8007a88:	7013      	strb	r3, [r2, #0]
 8007a8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a8e:	2b39      	cmp	r3, #57	; 0x39
 8007a90:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007a94:	d04f      	beq.n	8007b36 <_dtoa_r+0xaee>
 8007a96:	3301      	adds	r3, #1
 8007a98:	7013      	strb	r3, [r2, #0]
 8007a9a:	e754      	b.n	8007946 <_dtoa_r+0x8fe>
 8007a9c:	9a05      	ldr	r2, [sp, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f102 0501 	add.w	r5, r2, #1
 8007aa4:	dd06      	ble.n	8007ab4 <_dtoa_r+0xa6c>
 8007aa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007aaa:	d0e9      	beq.n	8007a80 <_dtoa_r+0xa38>
 8007aac:	f108 0801 	add.w	r8, r8, #1
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	e7c2      	b.n	8007a3a <_dtoa_r+0x9f2>
 8007ab4:	9a02      	ldr	r2, [sp, #8]
 8007ab6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007aba:	eba5 030b 	sub.w	r3, r5, fp
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d021      	beq.n	8007b06 <_dtoa_r+0xabe>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	9904      	ldr	r1, [sp, #16]
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 fc1f 	bl	800830c <__multadd>
 8007ace:	45b1      	cmp	r9, r6
 8007ad0:	9004      	str	r0, [sp, #16]
 8007ad2:	f04f 0300 	mov.w	r3, #0
 8007ad6:	f04f 020a 	mov.w	r2, #10
 8007ada:	4649      	mov	r1, r9
 8007adc:	4620      	mov	r0, r4
 8007ade:	d105      	bne.n	8007aec <_dtoa_r+0xaa4>
 8007ae0:	f000 fc14 	bl	800830c <__multadd>
 8007ae4:	4681      	mov	r9, r0
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	9505      	str	r5, [sp, #20]
 8007aea:	e776      	b.n	80079da <_dtoa_r+0x992>
 8007aec:	f000 fc0e 	bl	800830c <__multadd>
 8007af0:	4631      	mov	r1, r6
 8007af2:	4681      	mov	r9, r0
 8007af4:	2300      	movs	r3, #0
 8007af6:	220a      	movs	r2, #10
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fc07 	bl	800830c <__multadd>
 8007afe:	4606      	mov	r6, r0
 8007b00:	e7f2      	b.n	8007ae8 <_dtoa_r+0xaa0>
 8007b02:	f04f 0900 	mov.w	r9, #0
 8007b06:	2201      	movs	r2, #1
 8007b08:	9904      	ldr	r1, [sp, #16]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fdb2 	bl	8008674 <__lshift>
 8007b10:	4639      	mov	r1, r7
 8007b12:	9004      	str	r0, [sp, #16]
 8007b14:	f000 fe02 	bl	800871c <__mcmp>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	dcb6      	bgt.n	8007a8a <_dtoa_r+0xa42>
 8007b1c:	d102      	bne.n	8007b24 <_dtoa_r+0xadc>
 8007b1e:	f018 0f01 	tst.w	r8, #1
 8007b22:	d1b2      	bne.n	8007a8a <_dtoa_r+0xa42>
 8007b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b28:	2b30      	cmp	r3, #48	; 0x30
 8007b2a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007b2e:	f47f af0a 	bne.w	8007946 <_dtoa_r+0x8fe>
 8007b32:	4615      	mov	r5, r2
 8007b34:	e7f6      	b.n	8007b24 <_dtoa_r+0xadc>
 8007b36:	4593      	cmp	fp, r2
 8007b38:	d105      	bne.n	8007b46 <_dtoa_r+0xafe>
 8007b3a:	2331      	movs	r3, #49	; 0x31
 8007b3c:	f10a 0a01 	add.w	sl, sl, #1
 8007b40:	f88b 3000 	strb.w	r3, [fp]
 8007b44:	e6ff      	b.n	8007946 <_dtoa_r+0x8fe>
 8007b46:	4615      	mov	r5, r2
 8007b48:	e79f      	b.n	8007a8a <_dtoa_r+0xa42>
 8007b4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007bb0 <_dtoa_r+0xb68>
 8007b4e:	e007      	b.n	8007b60 <_dtoa_r+0xb18>
 8007b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007bb4 <_dtoa_r+0xb6c>
 8007b56:	b11b      	cbz	r3, 8007b60 <_dtoa_r+0xb18>
 8007b58:	f10b 0308 	add.w	r3, fp, #8
 8007b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	4658      	mov	r0, fp
 8007b62:	b017      	add	sp, #92	; 0x5c
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b68:	9b06      	ldr	r3, [sp, #24]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	f77f ae35 	ble.w	80077da <_dtoa_r+0x792>
 8007b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b72:	9307      	str	r3, [sp, #28]
 8007b74:	e649      	b.n	800780a <_dtoa_r+0x7c2>
 8007b76:	9b02      	ldr	r3, [sp, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dc03      	bgt.n	8007b84 <_dtoa_r+0xb3c>
 8007b7c:	9b06      	ldr	r3, [sp, #24]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	f73f aecc 	bgt.w	800791c <_dtoa_r+0x8d4>
 8007b84:	465d      	mov	r5, fp
 8007b86:	4639      	mov	r1, r7
 8007b88:	9804      	ldr	r0, [sp, #16]
 8007b8a:	f7ff f9cf 	bl	8006f2c <quorem>
 8007b8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007b92:	f805 8b01 	strb.w	r8, [r5], #1
 8007b96:	9a02      	ldr	r2, [sp, #8]
 8007b98:	eba5 030b 	sub.w	r3, r5, fp
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	ddb0      	ble.n	8007b02 <_dtoa_r+0xaba>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	220a      	movs	r2, #10
 8007ba4:	9904      	ldr	r1, [sp, #16]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 fbb0 	bl	800830c <__multadd>
 8007bac:	9004      	str	r0, [sp, #16]
 8007bae:	e7ea      	b.n	8007b86 <_dtoa_r+0xb3e>
 8007bb0:	08008fe8 	.word	0x08008fe8
 8007bb4:	08009068 	.word	0x08009068

08007bb8 <rshift>:
 8007bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bba:	6906      	ldr	r6, [r0, #16]
 8007bbc:	114b      	asrs	r3, r1, #5
 8007bbe:	429e      	cmp	r6, r3
 8007bc0:	f100 0414 	add.w	r4, r0, #20
 8007bc4:	dd30      	ble.n	8007c28 <rshift+0x70>
 8007bc6:	f011 011f 	ands.w	r1, r1, #31
 8007bca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007bce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007bd2:	d108      	bne.n	8007be6 <rshift+0x2e>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	42b2      	cmp	r2, r6
 8007bd8:	460b      	mov	r3, r1
 8007bda:	d211      	bcs.n	8007c00 <rshift+0x48>
 8007bdc:	f852 3b04 	ldr.w	r3, [r2], #4
 8007be0:	f841 3b04 	str.w	r3, [r1], #4
 8007be4:	e7f7      	b.n	8007bd6 <rshift+0x1e>
 8007be6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007bea:	f1c1 0c20 	rsb	ip, r1, #32
 8007bee:	40cd      	lsrs	r5, r1
 8007bf0:	3204      	adds	r2, #4
 8007bf2:	4623      	mov	r3, r4
 8007bf4:	42b2      	cmp	r2, r6
 8007bf6:	4617      	mov	r7, r2
 8007bf8:	d30c      	bcc.n	8007c14 <rshift+0x5c>
 8007bfa:	601d      	str	r5, [r3, #0]
 8007bfc:	b105      	cbz	r5, 8007c00 <rshift+0x48>
 8007bfe:	3304      	adds	r3, #4
 8007c00:	1b1a      	subs	r2, r3, r4
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c08:	bf08      	it	eq
 8007c0a:	2300      	moveq	r3, #0
 8007c0c:	6102      	str	r2, [r0, #16]
 8007c0e:	bf08      	it	eq
 8007c10:	6143      	streq	r3, [r0, #20]
 8007c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c14:	683f      	ldr	r7, [r7, #0]
 8007c16:	fa07 f70c 	lsl.w	r7, r7, ip
 8007c1a:	433d      	orrs	r5, r7
 8007c1c:	f843 5b04 	str.w	r5, [r3], #4
 8007c20:	f852 5b04 	ldr.w	r5, [r2], #4
 8007c24:	40cd      	lsrs	r5, r1
 8007c26:	e7e5      	b.n	8007bf4 <rshift+0x3c>
 8007c28:	4623      	mov	r3, r4
 8007c2a:	e7e9      	b.n	8007c00 <rshift+0x48>

08007c2c <__hexdig_fun>:
 8007c2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c30:	2b09      	cmp	r3, #9
 8007c32:	d802      	bhi.n	8007c3a <__hexdig_fun+0xe>
 8007c34:	3820      	subs	r0, #32
 8007c36:	b2c0      	uxtb	r0, r0
 8007c38:	4770      	bx	lr
 8007c3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c3e:	2b05      	cmp	r3, #5
 8007c40:	d801      	bhi.n	8007c46 <__hexdig_fun+0x1a>
 8007c42:	3847      	subs	r0, #71	; 0x47
 8007c44:	e7f7      	b.n	8007c36 <__hexdig_fun+0xa>
 8007c46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c4a:	2b05      	cmp	r3, #5
 8007c4c:	d801      	bhi.n	8007c52 <__hexdig_fun+0x26>
 8007c4e:	3827      	subs	r0, #39	; 0x27
 8007c50:	e7f1      	b.n	8007c36 <__hexdig_fun+0xa>
 8007c52:	2000      	movs	r0, #0
 8007c54:	4770      	bx	lr

08007c56 <__gethex>:
 8007c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5a:	b08b      	sub	sp, #44	; 0x2c
 8007c5c:	468a      	mov	sl, r1
 8007c5e:	9002      	str	r0, [sp, #8]
 8007c60:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007c62:	9306      	str	r3, [sp, #24]
 8007c64:	4690      	mov	r8, r2
 8007c66:	f000 fad0 	bl	800820a <__localeconv_l>
 8007c6a:	6803      	ldr	r3, [r0, #0]
 8007c6c:	9303      	str	r3, [sp, #12]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7f8 faae 	bl	80001d0 <strlen>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	9001      	str	r0, [sp, #4]
 8007c78:	4403      	add	r3, r0
 8007c7a:	f04f 0b00 	mov.w	fp, #0
 8007c7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c82:	9307      	str	r3, [sp, #28]
 8007c84:	f8da 3000 	ldr.w	r3, [sl]
 8007c88:	3302      	adds	r3, #2
 8007c8a:	461f      	mov	r7, r3
 8007c8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c90:	2830      	cmp	r0, #48	; 0x30
 8007c92:	d06c      	beq.n	8007d6e <__gethex+0x118>
 8007c94:	f7ff ffca 	bl	8007c2c <__hexdig_fun>
 8007c98:	4604      	mov	r4, r0
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d16a      	bne.n	8007d74 <__gethex+0x11e>
 8007c9e:	9a01      	ldr	r2, [sp, #4]
 8007ca0:	9903      	ldr	r1, [sp, #12]
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	f001 f8fe 	bl	8008ea4 <strncmp>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d166      	bne.n	8007d7a <__gethex+0x124>
 8007cac:	9b01      	ldr	r3, [sp, #4]
 8007cae:	5cf8      	ldrb	r0, [r7, r3]
 8007cb0:	18fe      	adds	r6, r7, r3
 8007cb2:	f7ff ffbb 	bl	8007c2c <__hexdig_fun>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d062      	beq.n	8007d80 <__gethex+0x12a>
 8007cba:	4633      	mov	r3, r6
 8007cbc:	7818      	ldrb	r0, [r3, #0]
 8007cbe:	2830      	cmp	r0, #48	; 0x30
 8007cc0:	461f      	mov	r7, r3
 8007cc2:	f103 0301 	add.w	r3, r3, #1
 8007cc6:	d0f9      	beq.n	8007cbc <__gethex+0x66>
 8007cc8:	f7ff ffb0 	bl	8007c2c <__hexdig_fun>
 8007ccc:	fab0 f580 	clz	r5, r0
 8007cd0:	096d      	lsrs	r5, r5, #5
 8007cd2:	4634      	mov	r4, r6
 8007cd4:	f04f 0b01 	mov.w	fp, #1
 8007cd8:	463a      	mov	r2, r7
 8007cda:	4616      	mov	r6, r2
 8007cdc:	3201      	adds	r2, #1
 8007cde:	7830      	ldrb	r0, [r6, #0]
 8007ce0:	f7ff ffa4 	bl	8007c2c <__hexdig_fun>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d1f8      	bne.n	8007cda <__gethex+0x84>
 8007ce8:	9a01      	ldr	r2, [sp, #4]
 8007cea:	9903      	ldr	r1, [sp, #12]
 8007cec:	4630      	mov	r0, r6
 8007cee:	f001 f8d9 	bl	8008ea4 <strncmp>
 8007cf2:	b950      	cbnz	r0, 8007d0a <__gethex+0xb4>
 8007cf4:	b954      	cbnz	r4, 8007d0c <__gethex+0xb6>
 8007cf6:	9b01      	ldr	r3, [sp, #4]
 8007cf8:	18f4      	adds	r4, r6, r3
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	4616      	mov	r6, r2
 8007cfe:	3201      	adds	r2, #1
 8007d00:	7830      	ldrb	r0, [r6, #0]
 8007d02:	f7ff ff93 	bl	8007c2c <__hexdig_fun>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d1f8      	bne.n	8007cfc <__gethex+0xa6>
 8007d0a:	b10c      	cbz	r4, 8007d10 <__gethex+0xba>
 8007d0c:	1ba4      	subs	r4, r4, r6
 8007d0e:	00a4      	lsls	r4, r4, #2
 8007d10:	7833      	ldrb	r3, [r6, #0]
 8007d12:	2b50      	cmp	r3, #80	; 0x50
 8007d14:	d001      	beq.n	8007d1a <__gethex+0xc4>
 8007d16:	2b70      	cmp	r3, #112	; 0x70
 8007d18:	d140      	bne.n	8007d9c <__gethex+0x146>
 8007d1a:	7873      	ldrb	r3, [r6, #1]
 8007d1c:	2b2b      	cmp	r3, #43	; 0x2b
 8007d1e:	d031      	beq.n	8007d84 <__gethex+0x12e>
 8007d20:	2b2d      	cmp	r3, #45	; 0x2d
 8007d22:	d033      	beq.n	8007d8c <__gethex+0x136>
 8007d24:	1c71      	adds	r1, r6, #1
 8007d26:	f04f 0900 	mov.w	r9, #0
 8007d2a:	7808      	ldrb	r0, [r1, #0]
 8007d2c:	f7ff ff7e 	bl	8007c2c <__hexdig_fun>
 8007d30:	1e43      	subs	r3, r0, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b18      	cmp	r3, #24
 8007d36:	d831      	bhi.n	8007d9c <__gethex+0x146>
 8007d38:	f1a0 0210 	sub.w	r2, r0, #16
 8007d3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d40:	f7ff ff74 	bl	8007c2c <__hexdig_fun>
 8007d44:	1e43      	subs	r3, r0, #1
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b18      	cmp	r3, #24
 8007d4a:	d922      	bls.n	8007d92 <__gethex+0x13c>
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	d000      	beq.n	8007d54 <__gethex+0xfe>
 8007d52:	4252      	negs	r2, r2
 8007d54:	4414      	add	r4, r2
 8007d56:	f8ca 1000 	str.w	r1, [sl]
 8007d5a:	b30d      	cbz	r5, 8007da0 <__gethex+0x14a>
 8007d5c:	f1bb 0f00 	cmp.w	fp, #0
 8007d60:	bf0c      	ite	eq
 8007d62:	2706      	moveq	r7, #6
 8007d64:	2700      	movne	r7, #0
 8007d66:	4638      	mov	r0, r7
 8007d68:	b00b      	add	sp, #44	; 0x2c
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	f10b 0b01 	add.w	fp, fp, #1
 8007d72:	e78a      	b.n	8007c8a <__gethex+0x34>
 8007d74:	2500      	movs	r5, #0
 8007d76:	462c      	mov	r4, r5
 8007d78:	e7ae      	b.n	8007cd8 <__gethex+0x82>
 8007d7a:	463e      	mov	r6, r7
 8007d7c:	2501      	movs	r5, #1
 8007d7e:	e7c7      	b.n	8007d10 <__gethex+0xba>
 8007d80:	4604      	mov	r4, r0
 8007d82:	e7fb      	b.n	8007d7c <__gethex+0x126>
 8007d84:	f04f 0900 	mov.w	r9, #0
 8007d88:	1cb1      	adds	r1, r6, #2
 8007d8a:	e7ce      	b.n	8007d2a <__gethex+0xd4>
 8007d8c:	f04f 0901 	mov.w	r9, #1
 8007d90:	e7fa      	b.n	8007d88 <__gethex+0x132>
 8007d92:	230a      	movs	r3, #10
 8007d94:	fb03 0202 	mla	r2, r3, r2, r0
 8007d98:	3a10      	subs	r2, #16
 8007d9a:	e7cf      	b.n	8007d3c <__gethex+0xe6>
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	e7da      	b.n	8007d56 <__gethex+0x100>
 8007da0:	1bf3      	subs	r3, r6, r7
 8007da2:	3b01      	subs	r3, #1
 8007da4:	4629      	mov	r1, r5
 8007da6:	2b07      	cmp	r3, #7
 8007da8:	dc49      	bgt.n	8007e3e <__gethex+0x1e8>
 8007daa:	9802      	ldr	r0, [sp, #8]
 8007dac:	f000 fa63 	bl	8008276 <_Balloc>
 8007db0:	9b01      	ldr	r3, [sp, #4]
 8007db2:	f100 0914 	add.w	r9, r0, #20
 8007db6:	f04f 0b00 	mov.w	fp, #0
 8007dba:	f1c3 0301 	rsb	r3, r3, #1
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	f8cd 9010 	str.w	r9, [sp, #16]
 8007dc4:	46da      	mov	sl, fp
 8007dc6:	9308      	str	r3, [sp, #32]
 8007dc8:	42b7      	cmp	r7, r6
 8007dca:	d33b      	bcc.n	8007e44 <__gethex+0x1ee>
 8007dcc:	9804      	ldr	r0, [sp, #16]
 8007dce:	f840 ab04 	str.w	sl, [r0], #4
 8007dd2:	eba0 0009 	sub.w	r0, r0, r9
 8007dd6:	1080      	asrs	r0, r0, #2
 8007dd8:	6128      	str	r0, [r5, #16]
 8007dda:	0147      	lsls	r7, r0, #5
 8007ddc:	4650      	mov	r0, sl
 8007dde:	f000 fb0e 	bl	80083fe <__hi0bits>
 8007de2:	f8d8 6000 	ldr.w	r6, [r8]
 8007de6:	1a3f      	subs	r7, r7, r0
 8007de8:	42b7      	cmp	r7, r6
 8007dea:	dd64      	ble.n	8007eb6 <__gethex+0x260>
 8007dec:	1bbf      	subs	r7, r7, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	4628      	mov	r0, r5
 8007df2:	f000 fe1d 	bl	8008a30 <__any_on>
 8007df6:	4682      	mov	sl, r0
 8007df8:	b178      	cbz	r0, 8007e1a <__gethex+0x1c4>
 8007dfa:	1e7b      	subs	r3, r7, #1
 8007dfc:	1159      	asrs	r1, r3, #5
 8007dfe:	f003 021f 	and.w	r2, r3, #31
 8007e02:	f04f 0a01 	mov.w	sl, #1
 8007e06:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e0a:	fa0a f202 	lsl.w	r2, sl, r2
 8007e0e:	420a      	tst	r2, r1
 8007e10:	d003      	beq.n	8007e1a <__gethex+0x1c4>
 8007e12:	4553      	cmp	r3, sl
 8007e14:	dc46      	bgt.n	8007ea4 <__gethex+0x24e>
 8007e16:	f04f 0a02 	mov.w	sl, #2
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f7ff fecb 	bl	8007bb8 <rshift>
 8007e22:	443c      	add	r4, r7
 8007e24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	da52      	bge.n	8007ed2 <__gethex+0x27c>
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	9802      	ldr	r0, [sp, #8]
 8007e30:	f000 fa55 	bl	80082de <_Bfree>
 8007e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e36:	2300      	movs	r3, #0
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	27a3      	movs	r7, #163	; 0xa3
 8007e3c:	e793      	b.n	8007d66 <__gethex+0x110>
 8007e3e:	3101      	adds	r1, #1
 8007e40:	105b      	asrs	r3, r3, #1
 8007e42:	e7b0      	b.n	8007da6 <__gethex+0x150>
 8007e44:	1e73      	subs	r3, r6, #1
 8007e46:	9305      	str	r3, [sp, #20]
 8007e48:	9a07      	ldr	r2, [sp, #28]
 8007e4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d018      	beq.n	8007e84 <__gethex+0x22e>
 8007e52:	f1bb 0f20 	cmp.w	fp, #32
 8007e56:	d107      	bne.n	8007e68 <__gethex+0x212>
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	f8c3 a000 	str.w	sl, [r3]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	f04f 0a00 	mov.w	sl, #0
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	46d3      	mov	fp, sl
 8007e68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007e6c:	f7ff fede 	bl	8007c2c <__hexdig_fun>
 8007e70:	f000 000f 	and.w	r0, r0, #15
 8007e74:	fa00 f00b 	lsl.w	r0, r0, fp
 8007e78:	ea4a 0a00 	orr.w	sl, sl, r0
 8007e7c:	f10b 0b04 	add.w	fp, fp, #4
 8007e80:	9b05      	ldr	r3, [sp, #20]
 8007e82:	e00d      	b.n	8007ea0 <__gethex+0x24a>
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	9a08      	ldr	r2, [sp, #32]
 8007e88:	4413      	add	r3, r2
 8007e8a:	42bb      	cmp	r3, r7
 8007e8c:	d3e1      	bcc.n	8007e52 <__gethex+0x1fc>
 8007e8e:	4618      	mov	r0, r3
 8007e90:	9a01      	ldr	r2, [sp, #4]
 8007e92:	9903      	ldr	r1, [sp, #12]
 8007e94:	9309      	str	r3, [sp, #36]	; 0x24
 8007e96:	f001 f805 	bl	8008ea4 <strncmp>
 8007e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d1d8      	bne.n	8007e52 <__gethex+0x1fc>
 8007ea0:	461e      	mov	r6, r3
 8007ea2:	e791      	b.n	8007dc8 <__gethex+0x172>
 8007ea4:	1eb9      	subs	r1, r7, #2
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f000 fdc2 	bl	8008a30 <__any_on>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d0b2      	beq.n	8007e16 <__gethex+0x1c0>
 8007eb0:	f04f 0a03 	mov.w	sl, #3
 8007eb4:	e7b1      	b.n	8007e1a <__gethex+0x1c4>
 8007eb6:	da09      	bge.n	8007ecc <__gethex+0x276>
 8007eb8:	1bf7      	subs	r7, r6, r7
 8007eba:	4629      	mov	r1, r5
 8007ebc:	463a      	mov	r2, r7
 8007ebe:	9802      	ldr	r0, [sp, #8]
 8007ec0:	f000 fbd8 	bl	8008674 <__lshift>
 8007ec4:	1be4      	subs	r4, r4, r7
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	f100 0914 	add.w	r9, r0, #20
 8007ecc:	f04f 0a00 	mov.w	sl, #0
 8007ed0:	e7a8      	b.n	8007e24 <__gethex+0x1ce>
 8007ed2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ed6:	42a0      	cmp	r0, r4
 8007ed8:	dd6a      	ble.n	8007fb0 <__gethex+0x35a>
 8007eda:	1b04      	subs	r4, r0, r4
 8007edc:	42a6      	cmp	r6, r4
 8007ede:	dc2e      	bgt.n	8007f3e <__gethex+0x2e8>
 8007ee0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d022      	beq.n	8007f2e <__gethex+0x2d8>
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d024      	beq.n	8007f36 <__gethex+0x2e0>
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d115      	bne.n	8007f1c <__gethex+0x2c6>
 8007ef0:	42a6      	cmp	r6, r4
 8007ef2:	d113      	bne.n	8007f1c <__gethex+0x2c6>
 8007ef4:	2e01      	cmp	r6, #1
 8007ef6:	dc0b      	bgt.n	8007f10 <__gethex+0x2ba>
 8007ef8:	9a06      	ldr	r2, [sp, #24]
 8007efa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	2301      	movs	r3, #1
 8007f02:	612b      	str	r3, [r5, #16]
 8007f04:	f8c9 3000 	str.w	r3, [r9]
 8007f08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f0a:	2762      	movs	r7, #98	; 0x62
 8007f0c:	601d      	str	r5, [r3, #0]
 8007f0e:	e72a      	b.n	8007d66 <__gethex+0x110>
 8007f10:	1e71      	subs	r1, r6, #1
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 fd8c 	bl	8008a30 <__any_on>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d1ed      	bne.n	8007ef8 <__gethex+0x2a2>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	9802      	ldr	r0, [sp, #8]
 8007f20:	f000 f9dd 	bl	80082de <_Bfree>
 8007f24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f26:	2300      	movs	r3, #0
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	2750      	movs	r7, #80	; 0x50
 8007f2c:	e71b      	b.n	8007d66 <__gethex+0x110>
 8007f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0e1      	beq.n	8007ef8 <__gethex+0x2a2>
 8007f34:	e7f2      	b.n	8007f1c <__gethex+0x2c6>
 8007f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1dd      	bne.n	8007ef8 <__gethex+0x2a2>
 8007f3c:	e7ee      	b.n	8007f1c <__gethex+0x2c6>
 8007f3e:	1e67      	subs	r7, r4, #1
 8007f40:	f1ba 0f00 	cmp.w	sl, #0
 8007f44:	d131      	bne.n	8007faa <__gethex+0x354>
 8007f46:	b127      	cbz	r7, 8007f52 <__gethex+0x2fc>
 8007f48:	4639      	mov	r1, r7
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 fd70 	bl	8008a30 <__any_on>
 8007f50:	4682      	mov	sl, r0
 8007f52:	117a      	asrs	r2, r7, #5
 8007f54:	2301      	movs	r3, #1
 8007f56:	f007 071f 	and.w	r7, r7, #31
 8007f5a:	fa03 f707 	lsl.w	r7, r3, r7
 8007f5e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007f62:	4621      	mov	r1, r4
 8007f64:	421f      	tst	r7, r3
 8007f66:	4628      	mov	r0, r5
 8007f68:	bf18      	it	ne
 8007f6a:	f04a 0a02 	orrne.w	sl, sl, #2
 8007f6e:	1b36      	subs	r6, r6, r4
 8007f70:	f7ff fe22 	bl	8007bb8 <rshift>
 8007f74:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007f78:	2702      	movs	r7, #2
 8007f7a:	f1ba 0f00 	cmp.w	sl, #0
 8007f7e:	d048      	beq.n	8008012 <__gethex+0x3bc>
 8007f80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d015      	beq.n	8007fb4 <__gethex+0x35e>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d017      	beq.n	8007fbc <__gethex+0x366>
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d109      	bne.n	8007fa4 <__gethex+0x34e>
 8007f90:	f01a 0f02 	tst.w	sl, #2
 8007f94:	d006      	beq.n	8007fa4 <__gethex+0x34e>
 8007f96:	f8d9 3000 	ldr.w	r3, [r9]
 8007f9a:	ea4a 0a03 	orr.w	sl, sl, r3
 8007f9e:	f01a 0f01 	tst.w	sl, #1
 8007fa2:	d10e      	bne.n	8007fc2 <__gethex+0x36c>
 8007fa4:	f047 0710 	orr.w	r7, r7, #16
 8007fa8:	e033      	b.n	8008012 <__gethex+0x3bc>
 8007faa:	f04f 0a01 	mov.w	sl, #1
 8007fae:	e7d0      	b.n	8007f52 <__gethex+0x2fc>
 8007fb0:	2701      	movs	r7, #1
 8007fb2:	e7e2      	b.n	8007f7a <__gethex+0x324>
 8007fb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fb6:	f1c3 0301 	rsb	r3, r3, #1
 8007fba:	9315      	str	r3, [sp, #84]	; 0x54
 8007fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0f0      	beq.n	8007fa4 <__gethex+0x34e>
 8007fc2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007fc6:	f105 0314 	add.w	r3, r5, #20
 8007fca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007fce:	eb03 010a 	add.w	r1, r3, sl
 8007fd2:	f04f 0c00 	mov.w	ip, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fdc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007fe0:	d01c      	beq.n	800801c <__gethex+0x3c6>
 8007fe2:	3201      	adds	r2, #1
 8007fe4:	6002      	str	r2, [r0, #0]
 8007fe6:	2f02      	cmp	r7, #2
 8007fe8:	f105 0314 	add.w	r3, r5, #20
 8007fec:	d138      	bne.n	8008060 <__gethex+0x40a>
 8007fee:	f8d8 2000 	ldr.w	r2, [r8]
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	42b2      	cmp	r2, r6
 8007ff6:	d10a      	bne.n	800800e <__gethex+0x3b8>
 8007ff8:	1171      	asrs	r1, r6, #5
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f006 061f 	and.w	r6, r6, #31
 8008000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008004:	fa02 f606 	lsl.w	r6, r2, r6
 8008008:	421e      	tst	r6, r3
 800800a:	bf18      	it	ne
 800800c:	4617      	movne	r7, r2
 800800e:	f047 0720 	orr.w	r7, r7, #32
 8008012:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008014:	601d      	str	r5, [r3, #0]
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	601c      	str	r4, [r3, #0]
 800801a:	e6a4      	b.n	8007d66 <__gethex+0x110>
 800801c:	4299      	cmp	r1, r3
 800801e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008022:	d8d8      	bhi.n	8007fd6 <__gethex+0x380>
 8008024:	68ab      	ldr	r3, [r5, #8]
 8008026:	4599      	cmp	r9, r3
 8008028:	db12      	blt.n	8008050 <__gethex+0x3fa>
 800802a:	6869      	ldr	r1, [r5, #4]
 800802c:	9802      	ldr	r0, [sp, #8]
 800802e:	3101      	adds	r1, #1
 8008030:	f000 f921 	bl	8008276 <_Balloc>
 8008034:	692a      	ldr	r2, [r5, #16]
 8008036:	3202      	adds	r2, #2
 8008038:	f105 010c 	add.w	r1, r5, #12
 800803c:	4683      	mov	fp, r0
 800803e:	0092      	lsls	r2, r2, #2
 8008040:	300c      	adds	r0, #12
 8008042:	f000 f90d 	bl	8008260 <memcpy>
 8008046:	4629      	mov	r1, r5
 8008048:	9802      	ldr	r0, [sp, #8]
 800804a:	f000 f948 	bl	80082de <_Bfree>
 800804e:	465d      	mov	r5, fp
 8008050:	692b      	ldr	r3, [r5, #16]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008058:	612a      	str	r2, [r5, #16]
 800805a:	2201      	movs	r2, #1
 800805c:	615a      	str	r2, [r3, #20]
 800805e:	e7c2      	b.n	8007fe6 <__gethex+0x390>
 8008060:	692a      	ldr	r2, [r5, #16]
 8008062:	454a      	cmp	r2, r9
 8008064:	dd0b      	ble.n	800807e <__gethex+0x428>
 8008066:	2101      	movs	r1, #1
 8008068:	4628      	mov	r0, r5
 800806a:	f7ff fda5 	bl	8007bb8 <rshift>
 800806e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008072:	3401      	adds	r4, #1
 8008074:	42a3      	cmp	r3, r4
 8008076:	f6ff aed9 	blt.w	8007e2c <__gethex+0x1d6>
 800807a:	2701      	movs	r7, #1
 800807c:	e7c7      	b.n	800800e <__gethex+0x3b8>
 800807e:	f016 061f 	ands.w	r6, r6, #31
 8008082:	d0fa      	beq.n	800807a <__gethex+0x424>
 8008084:	449a      	add	sl, r3
 8008086:	f1c6 0620 	rsb	r6, r6, #32
 800808a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800808e:	f000 f9b6 	bl	80083fe <__hi0bits>
 8008092:	42b0      	cmp	r0, r6
 8008094:	dbe7      	blt.n	8008066 <__gethex+0x410>
 8008096:	e7f0      	b.n	800807a <__gethex+0x424>

08008098 <L_shift>:
 8008098:	f1c2 0208 	rsb	r2, r2, #8
 800809c:	0092      	lsls	r2, r2, #2
 800809e:	b570      	push	{r4, r5, r6, lr}
 80080a0:	f1c2 0620 	rsb	r6, r2, #32
 80080a4:	6843      	ldr	r3, [r0, #4]
 80080a6:	6804      	ldr	r4, [r0, #0]
 80080a8:	fa03 f506 	lsl.w	r5, r3, r6
 80080ac:	432c      	orrs	r4, r5
 80080ae:	40d3      	lsrs	r3, r2
 80080b0:	6004      	str	r4, [r0, #0]
 80080b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80080b6:	4288      	cmp	r0, r1
 80080b8:	d3f4      	bcc.n	80080a4 <L_shift+0xc>
 80080ba:	bd70      	pop	{r4, r5, r6, pc}

080080bc <__match>:
 80080bc:	b530      	push	{r4, r5, lr}
 80080be:	6803      	ldr	r3, [r0, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080c6:	b914      	cbnz	r4, 80080ce <__match+0x12>
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	2001      	movs	r0, #1
 80080cc:	bd30      	pop	{r4, r5, pc}
 80080ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80080d6:	2d19      	cmp	r5, #25
 80080d8:	bf98      	it	ls
 80080da:	3220      	addls	r2, #32
 80080dc:	42a2      	cmp	r2, r4
 80080de:	d0f0      	beq.n	80080c2 <__match+0x6>
 80080e0:	2000      	movs	r0, #0
 80080e2:	e7f3      	b.n	80080cc <__match+0x10>

080080e4 <__hexnan>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	680b      	ldr	r3, [r1, #0]
 80080ea:	6801      	ldr	r1, [r0, #0]
 80080ec:	115f      	asrs	r7, r3, #5
 80080ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80080f2:	f013 031f 	ands.w	r3, r3, #31
 80080f6:	b087      	sub	sp, #28
 80080f8:	bf18      	it	ne
 80080fa:	3704      	addne	r7, #4
 80080fc:	2500      	movs	r5, #0
 80080fe:	1f3e      	subs	r6, r7, #4
 8008100:	4682      	mov	sl, r0
 8008102:	4690      	mov	r8, r2
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	f847 5c04 	str.w	r5, [r7, #-4]
 800810a:	46b1      	mov	r9, r6
 800810c:	4634      	mov	r4, r6
 800810e:	9502      	str	r5, [sp, #8]
 8008110:	46ab      	mov	fp, r5
 8008112:	784a      	ldrb	r2, [r1, #1]
 8008114:	1c4b      	adds	r3, r1, #1
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	b342      	cbz	r2, 800816c <__hexnan+0x88>
 800811a:	4610      	mov	r0, r2
 800811c:	9105      	str	r1, [sp, #20]
 800811e:	9204      	str	r2, [sp, #16]
 8008120:	f7ff fd84 	bl	8007c2c <__hexdig_fun>
 8008124:	2800      	cmp	r0, #0
 8008126:	d143      	bne.n	80081b0 <__hexnan+0xcc>
 8008128:	9a04      	ldr	r2, [sp, #16]
 800812a:	9905      	ldr	r1, [sp, #20]
 800812c:	2a20      	cmp	r2, #32
 800812e:	d818      	bhi.n	8008162 <__hexnan+0x7e>
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	459b      	cmp	fp, r3
 8008134:	dd13      	ble.n	800815e <__hexnan+0x7a>
 8008136:	454c      	cmp	r4, r9
 8008138:	d206      	bcs.n	8008148 <__hexnan+0x64>
 800813a:	2d07      	cmp	r5, #7
 800813c:	dc04      	bgt.n	8008148 <__hexnan+0x64>
 800813e:	462a      	mov	r2, r5
 8008140:	4649      	mov	r1, r9
 8008142:	4620      	mov	r0, r4
 8008144:	f7ff ffa8 	bl	8008098 <L_shift>
 8008148:	4544      	cmp	r4, r8
 800814a:	d944      	bls.n	80081d6 <__hexnan+0xf2>
 800814c:	2300      	movs	r3, #0
 800814e:	f1a4 0904 	sub.w	r9, r4, #4
 8008152:	f844 3c04 	str.w	r3, [r4, #-4]
 8008156:	f8cd b008 	str.w	fp, [sp, #8]
 800815a:	464c      	mov	r4, r9
 800815c:	461d      	mov	r5, r3
 800815e:	9903      	ldr	r1, [sp, #12]
 8008160:	e7d7      	b.n	8008112 <__hexnan+0x2e>
 8008162:	2a29      	cmp	r2, #41	; 0x29
 8008164:	d14a      	bne.n	80081fc <__hexnan+0x118>
 8008166:	3102      	adds	r1, #2
 8008168:	f8ca 1000 	str.w	r1, [sl]
 800816c:	f1bb 0f00 	cmp.w	fp, #0
 8008170:	d044      	beq.n	80081fc <__hexnan+0x118>
 8008172:	454c      	cmp	r4, r9
 8008174:	d206      	bcs.n	8008184 <__hexnan+0xa0>
 8008176:	2d07      	cmp	r5, #7
 8008178:	dc04      	bgt.n	8008184 <__hexnan+0xa0>
 800817a:	462a      	mov	r2, r5
 800817c:	4649      	mov	r1, r9
 800817e:	4620      	mov	r0, r4
 8008180:	f7ff ff8a 	bl	8008098 <L_shift>
 8008184:	4544      	cmp	r4, r8
 8008186:	d928      	bls.n	80081da <__hexnan+0xf6>
 8008188:	4643      	mov	r3, r8
 800818a:	f854 2b04 	ldr.w	r2, [r4], #4
 800818e:	f843 2b04 	str.w	r2, [r3], #4
 8008192:	42a6      	cmp	r6, r4
 8008194:	d2f9      	bcs.n	800818a <__hexnan+0xa6>
 8008196:	2200      	movs	r2, #0
 8008198:	f843 2b04 	str.w	r2, [r3], #4
 800819c:	429e      	cmp	r6, r3
 800819e:	d2fb      	bcs.n	8008198 <__hexnan+0xb4>
 80081a0:	6833      	ldr	r3, [r6, #0]
 80081a2:	b91b      	cbnz	r3, 80081ac <__hexnan+0xc8>
 80081a4:	4546      	cmp	r6, r8
 80081a6:	d127      	bne.n	80081f8 <__hexnan+0x114>
 80081a8:	2301      	movs	r3, #1
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	2005      	movs	r0, #5
 80081ae:	e026      	b.n	80081fe <__hexnan+0x11a>
 80081b0:	3501      	adds	r5, #1
 80081b2:	2d08      	cmp	r5, #8
 80081b4:	f10b 0b01 	add.w	fp, fp, #1
 80081b8:	dd06      	ble.n	80081c8 <__hexnan+0xe4>
 80081ba:	4544      	cmp	r4, r8
 80081bc:	d9cf      	bls.n	800815e <__hexnan+0x7a>
 80081be:	2300      	movs	r3, #0
 80081c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80081c4:	2501      	movs	r5, #1
 80081c6:	3c04      	subs	r4, #4
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	f000 000f 	and.w	r0, r0, #15
 80081ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081d2:	6020      	str	r0, [r4, #0]
 80081d4:	e7c3      	b.n	800815e <__hexnan+0x7a>
 80081d6:	2508      	movs	r5, #8
 80081d8:	e7c1      	b.n	800815e <__hexnan+0x7a>
 80081da:	9b01      	ldr	r3, [sp, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0df      	beq.n	80081a0 <__hexnan+0xbc>
 80081e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081e4:	f1c3 0320 	rsb	r3, r3, #32
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80081f0:	401a      	ands	r2, r3
 80081f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80081f6:	e7d3      	b.n	80081a0 <__hexnan+0xbc>
 80081f8:	3e04      	subs	r6, #4
 80081fa:	e7d1      	b.n	80081a0 <__hexnan+0xbc>
 80081fc:	2004      	movs	r0, #4
 80081fe:	b007      	add	sp, #28
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008204 <__locale_ctype_ptr_l>:
 8008204:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008208:	4770      	bx	lr

0800820a <__localeconv_l>:
 800820a:	30f0      	adds	r0, #240	; 0xf0
 800820c:	4770      	bx	lr
	...

08008210 <_localeconv_r>:
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <_localeconv_r+0x14>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a18      	ldr	r0, [r3, #32]
 8008216:	4b04      	ldr	r3, [pc, #16]	; (8008228 <_localeconv_r+0x18>)
 8008218:	2800      	cmp	r0, #0
 800821a:	bf08      	it	eq
 800821c:	4618      	moveq	r0, r3
 800821e:	30f0      	adds	r0, #240	; 0xf0
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000014 	.word	0x20000014
 8008228:	20000078 	.word	0x20000078

0800822c <malloc>:
 800822c:	4b02      	ldr	r3, [pc, #8]	; (8008238 <malloc+0xc>)
 800822e:	4601      	mov	r1, r0
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f000 bc7b 	b.w	8008b2c <_malloc_r>
 8008236:	bf00      	nop
 8008238:	20000014 	.word	0x20000014

0800823c <__ascii_mbtowc>:
 800823c:	b082      	sub	sp, #8
 800823e:	b901      	cbnz	r1, 8008242 <__ascii_mbtowc+0x6>
 8008240:	a901      	add	r1, sp, #4
 8008242:	b142      	cbz	r2, 8008256 <__ascii_mbtowc+0x1a>
 8008244:	b14b      	cbz	r3, 800825a <__ascii_mbtowc+0x1e>
 8008246:	7813      	ldrb	r3, [r2, #0]
 8008248:	600b      	str	r3, [r1, #0]
 800824a:	7812      	ldrb	r2, [r2, #0]
 800824c:	1c10      	adds	r0, r2, #0
 800824e:	bf18      	it	ne
 8008250:	2001      	movne	r0, #1
 8008252:	b002      	add	sp, #8
 8008254:	4770      	bx	lr
 8008256:	4610      	mov	r0, r2
 8008258:	e7fb      	b.n	8008252 <__ascii_mbtowc+0x16>
 800825a:	f06f 0001 	mvn.w	r0, #1
 800825e:	e7f8      	b.n	8008252 <__ascii_mbtowc+0x16>

08008260 <memcpy>:
 8008260:	b510      	push	{r4, lr}
 8008262:	1e43      	subs	r3, r0, #1
 8008264:	440a      	add	r2, r1
 8008266:	4291      	cmp	r1, r2
 8008268:	d100      	bne.n	800826c <memcpy+0xc>
 800826a:	bd10      	pop	{r4, pc}
 800826c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008274:	e7f7      	b.n	8008266 <memcpy+0x6>

08008276 <_Balloc>:
 8008276:	b570      	push	{r4, r5, r6, lr}
 8008278:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800827a:	4604      	mov	r4, r0
 800827c:	460e      	mov	r6, r1
 800827e:	b93d      	cbnz	r5, 8008290 <_Balloc+0x1a>
 8008280:	2010      	movs	r0, #16
 8008282:	f7ff ffd3 	bl	800822c <malloc>
 8008286:	6260      	str	r0, [r4, #36]	; 0x24
 8008288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800828c:	6005      	str	r5, [r0, #0]
 800828e:	60c5      	str	r5, [r0, #12]
 8008290:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008292:	68eb      	ldr	r3, [r5, #12]
 8008294:	b183      	cbz	r3, 80082b8 <_Balloc+0x42>
 8008296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800829e:	b9b8      	cbnz	r0, 80082d0 <_Balloc+0x5a>
 80082a0:	2101      	movs	r1, #1
 80082a2:	fa01 f506 	lsl.w	r5, r1, r6
 80082a6:	1d6a      	adds	r2, r5, #5
 80082a8:	0092      	lsls	r2, r2, #2
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fbe1 	bl	8008a72 <_calloc_r>
 80082b0:	b160      	cbz	r0, 80082cc <_Balloc+0x56>
 80082b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80082b6:	e00e      	b.n	80082d6 <_Balloc+0x60>
 80082b8:	2221      	movs	r2, #33	; 0x21
 80082ba:	2104      	movs	r1, #4
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fbd8 	bl	8008a72 <_calloc_r>
 80082c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c4:	60e8      	str	r0, [r5, #12]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e4      	bne.n	8008296 <_Balloc+0x20>
 80082cc:	2000      	movs	r0, #0
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	6802      	ldr	r2, [r0, #0]
 80082d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80082d6:	2300      	movs	r3, #0
 80082d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082dc:	e7f7      	b.n	80082ce <_Balloc+0x58>

080082de <_Bfree>:
 80082de:	b570      	push	{r4, r5, r6, lr}
 80082e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082e2:	4606      	mov	r6, r0
 80082e4:	460d      	mov	r5, r1
 80082e6:	b93c      	cbnz	r4, 80082f8 <_Bfree+0x1a>
 80082e8:	2010      	movs	r0, #16
 80082ea:	f7ff ff9f 	bl	800822c <malloc>
 80082ee:	6270      	str	r0, [r6, #36]	; 0x24
 80082f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082f4:	6004      	str	r4, [r0, #0]
 80082f6:	60c4      	str	r4, [r0, #12]
 80082f8:	b13d      	cbz	r5, 800830a <_Bfree+0x2c>
 80082fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082fc:	686a      	ldr	r2, [r5, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008304:	6029      	str	r1, [r5, #0]
 8008306:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800830a:	bd70      	pop	{r4, r5, r6, pc}

0800830c <__multadd>:
 800830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008310:	690d      	ldr	r5, [r1, #16]
 8008312:	461f      	mov	r7, r3
 8008314:	4606      	mov	r6, r0
 8008316:	460c      	mov	r4, r1
 8008318:	f101 0c14 	add.w	ip, r1, #20
 800831c:	2300      	movs	r3, #0
 800831e:	f8dc 0000 	ldr.w	r0, [ip]
 8008322:	b281      	uxth	r1, r0
 8008324:	fb02 7101 	mla	r1, r2, r1, r7
 8008328:	0c0f      	lsrs	r7, r1, #16
 800832a:	0c00      	lsrs	r0, r0, #16
 800832c:	fb02 7000 	mla	r0, r2, r0, r7
 8008330:	b289      	uxth	r1, r1
 8008332:	3301      	adds	r3, #1
 8008334:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008338:	429d      	cmp	r5, r3
 800833a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800833e:	f84c 1b04 	str.w	r1, [ip], #4
 8008342:	dcec      	bgt.n	800831e <__multadd+0x12>
 8008344:	b1d7      	cbz	r7, 800837c <__multadd+0x70>
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	42ab      	cmp	r3, r5
 800834a:	dc12      	bgt.n	8008372 <__multadd+0x66>
 800834c:	6861      	ldr	r1, [r4, #4]
 800834e:	4630      	mov	r0, r6
 8008350:	3101      	adds	r1, #1
 8008352:	f7ff ff90 	bl	8008276 <_Balloc>
 8008356:	6922      	ldr	r2, [r4, #16]
 8008358:	3202      	adds	r2, #2
 800835a:	f104 010c 	add.w	r1, r4, #12
 800835e:	4680      	mov	r8, r0
 8008360:	0092      	lsls	r2, r2, #2
 8008362:	300c      	adds	r0, #12
 8008364:	f7ff ff7c 	bl	8008260 <memcpy>
 8008368:	4621      	mov	r1, r4
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ffb7 	bl	80082de <_Bfree>
 8008370:	4644      	mov	r4, r8
 8008372:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008376:	3501      	adds	r5, #1
 8008378:	615f      	str	r7, [r3, #20]
 800837a:	6125      	str	r5, [r4, #16]
 800837c:	4620      	mov	r0, r4
 800837e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008382 <__s2b>:
 8008382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008386:	460c      	mov	r4, r1
 8008388:	4615      	mov	r5, r2
 800838a:	461f      	mov	r7, r3
 800838c:	2209      	movs	r2, #9
 800838e:	3308      	adds	r3, #8
 8008390:	4606      	mov	r6, r0
 8008392:	fb93 f3f2 	sdiv	r3, r3, r2
 8008396:	2100      	movs	r1, #0
 8008398:	2201      	movs	r2, #1
 800839a:	429a      	cmp	r2, r3
 800839c:	db20      	blt.n	80083e0 <__s2b+0x5e>
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff ff69 	bl	8008276 <_Balloc>
 80083a4:	9b08      	ldr	r3, [sp, #32]
 80083a6:	6143      	str	r3, [r0, #20]
 80083a8:	2d09      	cmp	r5, #9
 80083aa:	f04f 0301 	mov.w	r3, #1
 80083ae:	6103      	str	r3, [r0, #16]
 80083b0:	dd19      	ble.n	80083e6 <__s2b+0x64>
 80083b2:	f104 0809 	add.w	r8, r4, #9
 80083b6:	46c1      	mov	r9, r8
 80083b8:	442c      	add	r4, r5
 80083ba:	f819 3b01 	ldrb.w	r3, [r9], #1
 80083be:	4601      	mov	r1, r0
 80083c0:	3b30      	subs	r3, #48	; 0x30
 80083c2:	220a      	movs	r2, #10
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7ff ffa1 	bl	800830c <__multadd>
 80083ca:	45a1      	cmp	r9, r4
 80083cc:	d1f5      	bne.n	80083ba <__s2b+0x38>
 80083ce:	eb08 0405 	add.w	r4, r8, r5
 80083d2:	3c08      	subs	r4, #8
 80083d4:	1b2d      	subs	r5, r5, r4
 80083d6:	1963      	adds	r3, r4, r5
 80083d8:	42bb      	cmp	r3, r7
 80083da:	db07      	blt.n	80083ec <__s2b+0x6a>
 80083dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e0:	0052      	lsls	r2, r2, #1
 80083e2:	3101      	adds	r1, #1
 80083e4:	e7d9      	b.n	800839a <__s2b+0x18>
 80083e6:	340a      	adds	r4, #10
 80083e8:	2509      	movs	r5, #9
 80083ea:	e7f3      	b.n	80083d4 <__s2b+0x52>
 80083ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083f0:	4601      	mov	r1, r0
 80083f2:	3b30      	subs	r3, #48	; 0x30
 80083f4:	220a      	movs	r2, #10
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ff88 	bl	800830c <__multadd>
 80083fc:	e7eb      	b.n	80083d6 <__s2b+0x54>

080083fe <__hi0bits>:
 80083fe:	0c02      	lsrs	r2, r0, #16
 8008400:	0412      	lsls	r2, r2, #16
 8008402:	4603      	mov	r3, r0
 8008404:	b9b2      	cbnz	r2, 8008434 <__hi0bits+0x36>
 8008406:	0403      	lsls	r3, r0, #16
 8008408:	2010      	movs	r0, #16
 800840a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800840e:	bf04      	itt	eq
 8008410:	021b      	lsleq	r3, r3, #8
 8008412:	3008      	addeq	r0, #8
 8008414:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008418:	bf04      	itt	eq
 800841a:	011b      	lsleq	r3, r3, #4
 800841c:	3004      	addeq	r0, #4
 800841e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008422:	bf04      	itt	eq
 8008424:	009b      	lsleq	r3, r3, #2
 8008426:	3002      	addeq	r0, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	db06      	blt.n	800843a <__hi0bits+0x3c>
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	d503      	bpl.n	8008438 <__hi0bits+0x3a>
 8008430:	3001      	adds	r0, #1
 8008432:	4770      	bx	lr
 8008434:	2000      	movs	r0, #0
 8008436:	e7e8      	b.n	800840a <__hi0bits+0xc>
 8008438:	2020      	movs	r0, #32
 800843a:	4770      	bx	lr

0800843c <__lo0bits>:
 800843c:	6803      	ldr	r3, [r0, #0]
 800843e:	f013 0207 	ands.w	r2, r3, #7
 8008442:	4601      	mov	r1, r0
 8008444:	d00b      	beq.n	800845e <__lo0bits+0x22>
 8008446:	07da      	lsls	r2, r3, #31
 8008448:	d423      	bmi.n	8008492 <__lo0bits+0x56>
 800844a:	0798      	lsls	r0, r3, #30
 800844c:	bf49      	itett	mi
 800844e:	085b      	lsrmi	r3, r3, #1
 8008450:	089b      	lsrpl	r3, r3, #2
 8008452:	2001      	movmi	r0, #1
 8008454:	600b      	strmi	r3, [r1, #0]
 8008456:	bf5c      	itt	pl
 8008458:	600b      	strpl	r3, [r1, #0]
 800845a:	2002      	movpl	r0, #2
 800845c:	4770      	bx	lr
 800845e:	b298      	uxth	r0, r3
 8008460:	b9a8      	cbnz	r0, 800848e <__lo0bits+0x52>
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	2010      	movs	r0, #16
 8008466:	f013 0fff 	tst.w	r3, #255	; 0xff
 800846a:	bf04      	itt	eq
 800846c:	0a1b      	lsreq	r3, r3, #8
 800846e:	3008      	addeq	r0, #8
 8008470:	071a      	lsls	r2, r3, #28
 8008472:	bf04      	itt	eq
 8008474:	091b      	lsreq	r3, r3, #4
 8008476:	3004      	addeq	r0, #4
 8008478:	079a      	lsls	r2, r3, #30
 800847a:	bf04      	itt	eq
 800847c:	089b      	lsreq	r3, r3, #2
 800847e:	3002      	addeq	r0, #2
 8008480:	07da      	lsls	r2, r3, #31
 8008482:	d402      	bmi.n	800848a <__lo0bits+0x4e>
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	d006      	beq.n	8008496 <__lo0bits+0x5a>
 8008488:	3001      	adds	r0, #1
 800848a:	600b      	str	r3, [r1, #0]
 800848c:	4770      	bx	lr
 800848e:	4610      	mov	r0, r2
 8008490:	e7e9      	b.n	8008466 <__lo0bits+0x2a>
 8008492:	2000      	movs	r0, #0
 8008494:	4770      	bx	lr
 8008496:	2020      	movs	r0, #32
 8008498:	4770      	bx	lr

0800849a <__i2b>:
 800849a:	b510      	push	{r4, lr}
 800849c:	460c      	mov	r4, r1
 800849e:	2101      	movs	r1, #1
 80084a0:	f7ff fee9 	bl	8008276 <_Balloc>
 80084a4:	2201      	movs	r2, #1
 80084a6:	6144      	str	r4, [r0, #20]
 80084a8:	6102      	str	r2, [r0, #16]
 80084aa:	bd10      	pop	{r4, pc}

080084ac <__multiply>:
 80084ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	4614      	mov	r4, r2
 80084b2:	690a      	ldr	r2, [r1, #16]
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	bfb8      	it	lt
 80084ba:	460b      	movlt	r3, r1
 80084bc:	4688      	mov	r8, r1
 80084be:	bfbc      	itt	lt
 80084c0:	46a0      	movlt	r8, r4
 80084c2:	461c      	movlt	r4, r3
 80084c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80084cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084d4:	eb07 0609 	add.w	r6, r7, r9
 80084d8:	42b3      	cmp	r3, r6
 80084da:	bfb8      	it	lt
 80084dc:	3101      	addlt	r1, #1
 80084de:	f7ff feca 	bl	8008276 <_Balloc>
 80084e2:	f100 0514 	add.w	r5, r0, #20
 80084e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80084ea:	462b      	mov	r3, r5
 80084ec:	2200      	movs	r2, #0
 80084ee:	4573      	cmp	r3, lr
 80084f0:	d316      	bcc.n	8008520 <__multiply+0x74>
 80084f2:	f104 0214 	add.w	r2, r4, #20
 80084f6:	f108 0114 	add.w	r1, r8, #20
 80084fa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80084fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	9201      	str	r2, [sp, #4]
 8008508:	4293      	cmp	r3, r2
 800850a:	d80c      	bhi.n	8008526 <__multiply+0x7a>
 800850c:	2e00      	cmp	r6, #0
 800850e:	dd03      	ble.n	8008518 <__multiply+0x6c>
 8008510:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008514:	2b00      	cmp	r3, #0
 8008516:	d05d      	beq.n	80085d4 <__multiply+0x128>
 8008518:	6106      	str	r6, [r0, #16]
 800851a:	b003      	add	sp, #12
 800851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	f843 2b04 	str.w	r2, [r3], #4
 8008524:	e7e3      	b.n	80084ee <__multiply+0x42>
 8008526:	f8b2 b000 	ldrh.w	fp, [r2]
 800852a:	f1bb 0f00 	cmp.w	fp, #0
 800852e:	d023      	beq.n	8008578 <__multiply+0xcc>
 8008530:	4689      	mov	r9, r1
 8008532:	46ac      	mov	ip, r5
 8008534:	f04f 0800 	mov.w	r8, #0
 8008538:	f859 4b04 	ldr.w	r4, [r9], #4
 800853c:	f8dc a000 	ldr.w	sl, [ip]
 8008540:	b2a3      	uxth	r3, r4
 8008542:	fa1f fa8a 	uxth.w	sl, sl
 8008546:	fb0b a303 	mla	r3, fp, r3, sl
 800854a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800854e:	f8dc 4000 	ldr.w	r4, [ip]
 8008552:	4443      	add	r3, r8
 8008554:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008558:	fb0b 840a 	mla	r4, fp, sl, r8
 800855c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008560:	46e2      	mov	sl, ip
 8008562:	b29b      	uxth	r3, r3
 8008564:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008568:	454f      	cmp	r7, r9
 800856a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800856e:	f84a 3b04 	str.w	r3, [sl], #4
 8008572:	d82b      	bhi.n	80085cc <__multiply+0x120>
 8008574:	f8cc 8004 	str.w	r8, [ip, #4]
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800857e:	3204      	adds	r2, #4
 8008580:	f1ba 0f00 	cmp.w	sl, #0
 8008584:	d020      	beq.n	80085c8 <__multiply+0x11c>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	4689      	mov	r9, r1
 800858a:	46a8      	mov	r8, r5
 800858c:	f04f 0b00 	mov.w	fp, #0
 8008590:	f8b9 c000 	ldrh.w	ip, [r9]
 8008594:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008598:	fb0a 440c 	mla	r4, sl, ip, r4
 800859c:	445c      	add	r4, fp
 800859e:	46c4      	mov	ip, r8
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085a6:	f84c 3b04 	str.w	r3, [ip], #4
 80085aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80085ae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80085b2:	0c1b      	lsrs	r3, r3, #16
 80085b4:	fb0a b303 	mla	r3, sl, r3, fp
 80085b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80085bc:	454f      	cmp	r7, r9
 80085be:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80085c2:	d805      	bhi.n	80085d0 <__multiply+0x124>
 80085c4:	f8c8 3004 	str.w	r3, [r8, #4]
 80085c8:	3504      	adds	r5, #4
 80085ca:	e79b      	b.n	8008504 <__multiply+0x58>
 80085cc:	46d4      	mov	ip, sl
 80085ce:	e7b3      	b.n	8008538 <__multiply+0x8c>
 80085d0:	46e0      	mov	r8, ip
 80085d2:	e7dd      	b.n	8008590 <__multiply+0xe4>
 80085d4:	3e01      	subs	r6, #1
 80085d6:	e799      	b.n	800850c <__multiply+0x60>

080085d8 <__pow5mult>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4615      	mov	r5, r2
 80085de:	f012 0203 	ands.w	r2, r2, #3
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	d007      	beq.n	80085f8 <__pow5mult+0x20>
 80085e8:	3a01      	subs	r2, #1
 80085ea:	4c21      	ldr	r4, [pc, #132]	; (8008670 <__pow5mult+0x98>)
 80085ec:	2300      	movs	r3, #0
 80085ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085f2:	f7ff fe8b 	bl	800830c <__multadd>
 80085f6:	4607      	mov	r7, r0
 80085f8:	10ad      	asrs	r5, r5, #2
 80085fa:	d035      	beq.n	8008668 <__pow5mult+0x90>
 80085fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085fe:	b93c      	cbnz	r4, 8008610 <__pow5mult+0x38>
 8008600:	2010      	movs	r0, #16
 8008602:	f7ff fe13 	bl	800822c <malloc>
 8008606:	6270      	str	r0, [r6, #36]	; 0x24
 8008608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800860c:	6004      	str	r4, [r0, #0]
 800860e:	60c4      	str	r4, [r0, #12]
 8008610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008618:	b94c      	cbnz	r4, 800862e <__pow5mult+0x56>
 800861a:	f240 2171 	movw	r1, #625	; 0x271
 800861e:	4630      	mov	r0, r6
 8008620:	f7ff ff3b 	bl	800849a <__i2b>
 8008624:	2300      	movs	r3, #0
 8008626:	f8c8 0008 	str.w	r0, [r8, #8]
 800862a:	4604      	mov	r4, r0
 800862c:	6003      	str	r3, [r0, #0]
 800862e:	f04f 0800 	mov.w	r8, #0
 8008632:	07eb      	lsls	r3, r5, #31
 8008634:	d50a      	bpl.n	800864c <__pow5mult+0x74>
 8008636:	4639      	mov	r1, r7
 8008638:	4622      	mov	r2, r4
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ff36 	bl	80084ac <__multiply>
 8008640:	4639      	mov	r1, r7
 8008642:	4681      	mov	r9, r0
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff fe4a 	bl	80082de <_Bfree>
 800864a:	464f      	mov	r7, r9
 800864c:	106d      	asrs	r5, r5, #1
 800864e:	d00b      	beq.n	8008668 <__pow5mult+0x90>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	b938      	cbnz	r0, 8008664 <__pow5mult+0x8c>
 8008654:	4622      	mov	r2, r4
 8008656:	4621      	mov	r1, r4
 8008658:	4630      	mov	r0, r6
 800865a:	f7ff ff27 	bl	80084ac <__multiply>
 800865e:	6020      	str	r0, [r4, #0]
 8008660:	f8c0 8000 	str.w	r8, [r0]
 8008664:	4604      	mov	r4, r0
 8008666:	e7e4      	b.n	8008632 <__pow5mult+0x5a>
 8008668:	4638      	mov	r0, r7
 800866a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866e:	bf00      	nop
 8008670:	08009170 	.word	0x08009170

08008674 <__lshift>:
 8008674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008678:	460c      	mov	r4, r1
 800867a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	6849      	ldr	r1, [r1, #4]
 8008682:	eb0a 0903 	add.w	r9, sl, r3
 8008686:	68a3      	ldr	r3, [r4, #8]
 8008688:	4607      	mov	r7, r0
 800868a:	4616      	mov	r6, r2
 800868c:	f109 0501 	add.w	r5, r9, #1
 8008690:	42ab      	cmp	r3, r5
 8008692:	db32      	blt.n	80086fa <__lshift+0x86>
 8008694:	4638      	mov	r0, r7
 8008696:	f7ff fdee 	bl	8008276 <_Balloc>
 800869a:	2300      	movs	r3, #0
 800869c:	4680      	mov	r8, r0
 800869e:	f100 0114 	add.w	r1, r0, #20
 80086a2:	461a      	mov	r2, r3
 80086a4:	4553      	cmp	r3, sl
 80086a6:	db2b      	blt.n	8008700 <__lshift+0x8c>
 80086a8:	6920      	ldr	r0, [r4, #16]
 80086aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086ae:	f104 0314 	add.w	r3, r4, #20
 80086b2:	f016 021f 	ands.w	r2, r6, #31
 80086b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086be:	d025      	beq.n	800870c <__lshift+0x98>
 80086c0:	f1c2 0e20 	rsb	lr, r2, #32
 80086c4:	2000      	movs	r0, #0
 80086c6:	681e      	ldr	r6, [r3, #0]
 80086c8:	468a      	mov	sl, r1
 80086ca:	4096      	lsls	r6, r2
 80086cc:	4330      	orrs	r0, r6
 80086ce:	f84a 0b04 	str.w	r0, [sl], #4
 80086d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80086d6:	459c      	cmp	ip, r3
 80086d8:	fa20 f00e 	lsr.w	r0, r0, lr
 80086dc:	d814      	bhi.n	8008708 <__lshift+0x94>
 80086de:	6048      	str	r0, [r1, #4]
 80086e0:	b108      	cbz	r0, 80086e6 <__lshift+0x72>
 80086e2:	f109 0502 	add.w	r5, r9, #2
 80086e6:	3d01      	subs	r5, #1
 80086e8:	4638      	mov	r0, r7
 80086ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80086ee:	4621      	mov	r1, r4
 80086f0:	f7ff fdf5 	bl	80082de <_Bfree>
 80086f4:	4640      	mov	r0, r8
 80086f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fa:	3101      	adds	r1, #1
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	e7c7      	b.n	8008690 <__lshift+0x1c>
 8008700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008704:	3301      	adds	r3, #1
 8008706:	e7cd      	b.n	80086a4 <__lshift+0x30>
 8008708:	4651      	mov	r1, sl
 800870a:	e7dc      	b.n	80086c6 <__lshift+0x52>
 800870c:	3904      	subs	r1, #4
 800870e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008712:	f841 2f04 	str.w	r2, [r1, #4]!
 8008716:	459c      	cmp	ip, r3
 8008718:	d8f9      	bhi.n	800870e <__lshift+0x9a>
 800871a:	e7e4      	b.n	80086e6 <__lshift+0x72>

0800871c <__mcmp>:
 800871c:	6903      	ldr	r3, [r0, #16]
 800871e:	690a      	ldr	r2, [r1, #16]
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	b530      	push	{r4, r5, lr}
 8008724:	d10c      	bne.n	8008740 <__mcmp+0x24>
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	3014      	adds	r0, #20
 800872a:	3114      	adds	r1, #20
 800872c:	1884      	adds	r4, r0, r2
 800872e:	4411      	add	r1, r2
 8008730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008738:	4295      	cmp	r5, r2
 800873a:	d003      	beq.n	8008744 <__mcmp+0x28>
 800873c:	d305      	bcc.n	800874a <__mcmp+0x2e>
 800873e:	2301      	movs	r3, #1
 8008740:	4618      	mov	r0, r3
 8008742:	bd30      	pop	{r4, r5, pc}
 8008744:	42a0      	cmp	r0, r4
 8008746:	d3f3      	bcc.n	8008730 <__mcmp+0x14>
 8008748:	e7fa      	b.n	8008740 <__mcmp+0x24>
 800874a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800874e:	e7f7      	b.n	8008740 <__mcmp+0x24>

08008750 <__mdiff>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	460d      	mov	r5, r1
 8008756:	4607      	mov	r7, r0
 8008758:	4611      	mov	r1, r2
 800875a:	4628      	mov	r0, r5
 800875c:	4614      	mov	r4, r2
 800875e:	f7ff ffdd 	bl	800871c <__mcmp>
 8008762:	1e06      	subs	r6, r0, #0
 8008764:	d108      	bne.n	8008778 <__mdiff+0x28>
 8008766:	4631      	mov	r1, r6
 8008768:	4638      	mov	r0, r7
 800876a:	f7ff fd84 	bl	8008276 <_Balloc>
 800876e:	2301      	movs	r3, #1
 8008770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008778:	bfa4      	itt	ge
 800877a:	4623      	movge	r3, r4
 800877c:	462c      	movge	r4, r5
 800877e:	4638      	mov	r0, r7
 8008780:	6861      	ldr	r1, [r4, #4]
 8008782:	bfa6      	itte	ge
 8008784:	461d      	movge	r5, r3
 8008786:	2600      	movge	r6, #0
 8008788:	2601      	movlt	r6, #1
 800878a:	f7ff fd74 	bl	8008276 <_Balloc>
 800878e:	692b      	ldr	r3, [r5, #16]
 8008790:	60c6      	str	r6, [r0, #12]
 8008792:	6926      	ldr	r6, [r4, #16]
 8008794:	f105 0914 	add.w	r9, r5, #20
 8008798:	f104 0214 	add.w	r2, r4, #20
 800879c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80087a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80087a4:	f100 0514 	add.w	r5, r0, #20
 80087a8:	f04f 0e00 	mov.w	lr, #0
 80087ac:	f852 ab04 	ldr.w	sl, [r2], #4
 80087b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80087b4:	fa1e f18a 	uxtah	r1, lr, sl
 80087b8:	b2a3      	uxth	r3, r4
 80087ba:	1ac9      	subs	r1, r1, r3
 80087bc:	0c23      	lsrs	r3, r4, #16
 80087be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80087c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087c6:	b289      	uxth	r1, r1
 80087c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80087cc:	45c8      	cmp	r8, r9
 80087ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80087d2:	4694      	mov	ip, r2
 80087d4:	f845 3b04 	str.w	r3, [r5], #4
 80087d8:	d8e8      	bhi.n	80087ac <__mdiff+0x5c>
 80087da:	45bc      	cmp	ip, r7
 80087dc:	d304      	bcc.n	80087e8 <__mdiff+0x98>
 80087de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80087e2:	b183      	cbz	r3, 8008806 <__mdiff+0xb6>
 80087e4:	6106      	str	r6, [r0, #16]
 80087e6:	e7c5      	b.n	8008774 <__mdiff+0x24>
 80087e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80087ec:	fa1e f381 	uxtah	r3, lr, r1
 80087f0:	141a      	asrs	r2, r3, #16
 80087f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008800:	f845 3b04 	str.w	r3, [r5], #4
 8008804:	e7e9      	b.n	80087da <__mdiff+0x8a>
 8008806:	3e01      	subs	r6, #1
 8008808:	e7e9      	b.n	80087de <__mdiff+0x8e>
	...

0800880c <__ulp>:
 800880c:	4b12      	ldr	r3, [pc, #72]	; (8008858 <__ulp+0x4c>)
 800880e:	ee10 2a90 	vmov	r2, s1
 8008812:	401a      	ands	r2, r3
 8008814:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008818:	2b00      	cmp	r3, #0
 800881a:	dd04      	ble.n	8008826 <__ulp+0x1a>
 800881c:	2000      	movs	r0, #0
 800881e:	4619      	mov	r1, r3
 8008820:	ec41 0b10 	vmov	d0, r0, r1
 8008824:	4770      	bx	lr
 8008826:	425b      	negs	r3, r3
 8008828:	151b      	asrs	r3, r3, #20
 800882a:	2b13      	cmp	r3, #19
 800882c:	f04f 0000 	mov.w	r0, #0
 8008830:	f04f 0100 	mov.w	r1, #0
 8008834:	dc04      	bgt.n	8008840 <__ulp+0x34>
 8008836:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800883a:	fa42 f103 	asr.w	r1, r2, r3
 800883e:	e7ef      	b.n	8008820 <__ulp+0x14>
 8008840:	3b14      	subs	r3, #20
 8008842:	2b1e      	cmp	r3, #30
 8008844:	f04f 0201 	mov.w	r2, #1
 8008848:	bfda      	itte	le
 800884a:	f1c3 031f 	rsble	r3, r3, #31
 800884e:	fa02 f303 	lslle.w	r3, r2, r3
 8008852:	4613      	movgt	r3, r2
 8008854:	4618      	mov	r0, r3
 8008856:	e7e3      	b.n	8008820 <__ulp+0x14>
 8008858:	7ff00000 	.word	0x7ff00000

0800885c <__b2d>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	6905      	ldr	r5, [r0, #16]
 8008860:	f100 0714 	add.w	r7, r0, #20
 8008864:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008868:	1f2e      	subs	r6, r5, #4
 800886a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800886e:	4620      	mov	r0, r4
 8008870:	f7ff fdc5 	bl	80083fe <__hi0bits>
 8008874:	f1c0 0320 	rsb	r3, r0, #32
 8008878:	280a      	cmp	r0, #10
 800887a:	600b      	str	r3, [r1, #0]
 800887c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80088f4 <__b2d+0x98>
 8008880:	dc14      	bgt.n	80088ac <__b2d+0x50>
 8008882:	f1c0 0e0b 	rsb	lr, r0, #11
 8008886:	fa24 f10e 	lsr.w	r1, r4, lr
 800888a:	42b7      	cmp	r7, r6
 800888c:	ea41 030c 	orr.w	r3, r1, ip
 8008890:	bf34      	ite	cc
 8008892:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008896:	2100      	movcs	r1, #0
 8008898:	3015      	adds	r0, #21
 800889a:	fa04 f000 	lsl.w	r0, r4, r0
 800889e:	fa21 f10e 	lsr.w	r1, r1, lr
 80088a2:	ea40 0201 	orr.w	r2, r0, r1
 80088a6:	ec43 2b10 	vmov	d0, r2, r3
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	42b7      	cmp	r7, r6
 80088ae:	bf3a      	itte	cc
 80088b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80088b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80088b8:	2100      	movcs	r1, #0
 80088ba:	380b      	subs	r0, #11
 80088bc:	d015      	beq.n	80088ea <__b2d+0x8e>
 80088be:	4084      	lsls	r4, r0
 80088c0:	f1c0 0520 	rsb	r5, r0, #32
 80088c4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80088c8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80088cc:	42be      	cmp	r6, r7
 80088ce:	fa21 fc05 	lsr.w	ip, r1, r5
 80088d2:	ea44 030c 	orr.w	r3, r4, ip
 80088d6:	bf8c      	ite	hi
 80088d8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80088dc:	2400      	movls	r4, #0
 80088de:	fa01 f000 	lsl.w	r0, r1, r0
 80088e2:	40ec      	lsrs	r4, r5
 80088e4:	ea40 0204 	orr.w	r2, r0, r4
 80088e8:	e7dd      	b.n	80088a6 <__b2d+0x4a>
 80088ea:	ea44 030c 	orr.w	r3, r4, ip
 80088ee:	460a      	mov	r2, r1
 80088f0:	e7d9      	b.n	80088a6 <__b2d+0x4a>
 80088f2:	bf00      	nop
 80088f4:	3ff00000 	.word	0x3ff00000

080088f8 <__d2b>:
 80088f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	460e      	mov	r6, r1
 80088fe:	2101      	movs	r1, #1
 8008900:	ec59 8b10 	vmov	r8, r9, d0
 8008904:	4615      	mov	r5, r2
 8008906:	f7ff fcb6 	bl	8008276 <_Balloc>
 800890a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800890e:	4607      	mov	r7, r0
 8008910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008914:	bb34      	cbnz	r4, 8008964 <__d2b+0x6c>
 8008916:	9301      	str	r3, [sp, #4]
 8008918:	f1b8 0300 	subs.w	r3, r8, #0
 800891c:	d027      	beq.n	800896e <__d2b+0x76>
 800891e:	a802      	add	r0, sp, #8
 8008920:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008924:	f7ff fd8a 	bl	800843c <__lo0bits>
 8008928:	9900      	ldr	r1, [sp, #0]
 800892a:	b1f0      	cbz	r0, 800896a <__d2b+0x72>
 800892c:	9a01      	ldr	r2, [sp, #4]
 800892e:	f1c0 0320 	rsb	r3, r0, #32
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	430b      	orrs	r3, r1
 8008938:	40c2      	lsrs	r2, r0
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	9201      	str	r2, [sp, #4]
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	61bb      	str	r3, [r7, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	bf14      	ite	ne
 8008946:	2102      	movne	r1, #2
 8008948:	2101      	moveq	r1, #1
 800894a:	6139      	str	r1, [r7, #16]
 800894c:	b1c4      	cbz	r4, 8008980 <__d2b+0x88>
 800894e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008952:	4404      	add	r4, r0
 8008954:	6034      	str	r4, [r6, #0]
 8008956:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800895a:	6028      	str	r0, [r5, #0]
 800895c:	4638      	mov	r0, r7
 800895e:	b003      	add	sp, #12
 8008960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008968:	e7d5      	b.n	8008916 <__d2b+0x1e>
 800896a:	6179      	str	r1, [r7, #20]
 800896c:	e7e7      	b.n	800893e <__d2b+0x46>
 800896e:	a801      	add	r0, sp, #4
 8008970:	f7ff fd64 	bl	800843c <__lo0bits>
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	2101      	movs	r1, #1
 800897a:	6139      	str	r1, [r7, #16]
 800897c:	3020      	adds	r0, #32
 800897e:	e7e5      	b.n	800894c <__d2b+0x54>
 8008980:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008984:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008988:	6030      	str	r0, [r6, #0]
 800898a:	6918      	ldr	r0, [r3, #16]
 800898c:	f7ff fd37 	bl	80083fe <__hi0bits>
 8008990:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008994:	e7e1      	b.n	800895a <__d2b+0x62>

08008996 <__ratio>:
 8008996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	4688      	mov	r8, r1
 800899c:	4669      	mov	r1, sp
 800899e:	4681      	mov	r9, r0
 80089a0:	f7ff ff5c 	bl	800885c <__b2d>
 80089a4:	a901      	add	r1, sp, #4
 80089a6:	4640      	mov	r0, r8
 80089a8:	ec57 6b10 	vmov	r6, r7, d0
 80089ac:	f7ff ff56 	bl	800885c <__b2d>
 80089b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80089b8:	eba3 0c02 	sub.w	ip, r3, r2
 80089bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089c0:	1a9b      	subs	r3, r3, r2
 80089c2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80089c6:	ec5b ab10 	vmov	sl, fp, d0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bfce      	itee	gt
 80089ce:	463a      	movgt	r2, r7
 80089d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089d4:	465a      	movle	r2, fp
 80089d6:	4659      	mov	r1, fp
 80089d8:	463d      	mov	r5, r7
 80089da:	bfd4      	ite	le
 80089dc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80089e0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80089e4:	4630      	mov	r0, r6
 80089e6:	ee10 2a10 	vmov	r2, s0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4629      	mov	r1, r5
 80089ee:	f7f7 ff2d 	bl	800084c <__aeabi_ddiv>
 80089f2:	ec41 0b10 	vmov	d0, r0, r1
 80089f6:	b003      	add	sp, #12
 80089f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089fc <__copybits>:
 80089fc:	3901      	subs	r1, #1
 80089fe:	b510      	push	{r4, lr}
 8008a00:	1149      	asrs	r1, r1, #5
 8008a02:	6914      	ldr	r4, [r2, #16]
 8008a04:	3101      	adds	r1, #1
 8008a06:	f102 0314 	add.w	r3, r2, #20
 8008a0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a12:	42a3      	cmp	r3, r4
 8008a14:	4602      	mov	r2, r0
 8008a16:	d303      	bcc.n	8008a20 <__copybits+0x24>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	428a      	cmp	r2, r1
 8008a1c:	d305      	bcc.n	8008a2a <__copybits+0x2e>
 8008a1e:	bd10      	pop	{r4, pc}
 8008a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a24:	f840 2b04 	str.w	r2, [r0], #4
 8008a28:	e7f3      	b.n	8008a12 <__copybits+0x16>
 8008a2a:	f842 3b04 	str.w	r3, [r2], #4
 8008a2e:	e7f4      	b.n	8008a1a <__copybits+0x1e>

08008a30 <__any_on>:
 8008a30:	f100 0214 	add.w	r2, r0, #20
 8008a34:	6900      	ldr	r0, [r0, #16]
 8008a36:	114b      	asrs	r3, r1, #5
 8008a38:	4298      	cmp	r0, r3
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	db11      	blt.n	8008a62 <__any_on+0x32>
 8008a3e:	dd0a      	ble.n	8008a56 <__any_on+0x26>
 8008a40:	f011 011f 	ands.w	r1, r1, #31
 8008a44:	d007      	beq.n	8008a56 <__any_on+0x26>
 8008a46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a4a:	fa24 f001 	lsr.w	r0, r4, r1
 8008a4e:	fa00 f101 	lsl.w	r1, r0, r1
 8008a52:	428c      	cmp	r4, r1
 8008a54:	d10b      	bne.n	8008a6e <__any_on+0x3e>
 8008a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d803      	bhi.n	8008a66 <__any_on+0x36>
 8008a5e:	2000      	movs	r0, #0
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	4603      	mov	r3, r0
 8008a64:	e7f7      	b.n	8008a56 <__any_on+0x26>
 8008a66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	d0f5      	beq.n	8008a5a <__any_on+0x2a>
 8008a6e:	2001      	movs	r0, #1
 8008a70:	e7f6      	b.n	8008a60 <__any_on+0x30>

08008a72 <_calloc_r>:
 8008a72:	b538      	push	{r3, r4, r5, lr}
 8008a74:	fb02 f401 	mul.w	r4, r2, r1
 8008a78:	4621      	mov	r1, r4
 8008a7a:	f000 f857 	bl	8008b2c <_malloc_r>
 8008a7e:	4605      	mov	r5, r0
 8008a80:	b118      	cbz	r0, 8008a8a <_calloc_r+0x18>
 8008a82:	4622      	mov	r2, r4
 8008a84:	2100      	movs	r1, #0
 8008a86:	f7fc fd37 	bl	80054f8 <memset>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008a90 <_free_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4605      	mov	r5, r0
 8008a94:	2900      	cmp	r1, #0
 8008a96:	d045      	beq.n	8008b24 <_free_r+0x94>
 8008a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a9c:	1f0c      	subs	r4, r1, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfb8      	it	lt
 8008aa2:	18e4      	addlt	r4, r4, r3
 8008aa4:	f000 fa36 	bl	8008f14 <__malloc_lock>
 8008aa8:	4a1f      	ldr	r2, [pc, #124]	; (8008b28 <_free_r+0x98>)
 8008aaa:	6813      	ldr	r3, [r2, #0]
 8008aac:	4610      	mov	r0, r2
 8008aae:	b933      	cbnz	r3, 8008abe <_free_r+0x2e>
 8008ab0:	6063      	str	r3, [r4, #4]
 8008ab2:	6014      	str	r4, [r2, #0]
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aba:	f000 ba2c 	b.w	8008f16 <__malloc_unlock>
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	d90c      	bls.n	8008adc <_free_r+0x4c>
 8008ac2:	6821      	ldr	r1, [r4, #0]
 8008ac4:	1862      	adds	r2, r4, r1
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	bf04      	itt	eq
 8008aca:	681a      	ldreq	r2, [r3, #0]
 8008acc:	685b      	ldreq	r3, [r3, #4]
 8008ace:	6063      	str	r3, [r4, #4]
 8008ad0:	bf04      	itt	eq
 8008ad2:	1852      	addeq	r2, r2, r1
 8008ad4:	6022      	streq	r2, [r4, #0]
 8008ad6:	6004      	str	r4, [r0, #0]
 8008ad8:	e7ec      	b.n	8008ab4 <_free_r+0x24>
 8008ada:	4613      	mov	r3, r2
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	b10a      	cbz	r2, 8008ae4 <_free_r+0x54>
 8008ae0:	42a2      	cmp	r2, r4
 8008ae2:	d9fa      	bls.n	8008ada <_free_r+0x4a>
 8008ae4:	6819      	ldr	r1, [r3, #0]
 8008ae6:	1858      	adds	r0, r3, r1
 8008ae8:	42a0      	cmp	r0, r4
 8008aea:	d10b      	bne.n	8008b04 <_free_r+0x74>
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	4401      	add	r1, r0
 8008af0:	1858      	adds	r0, r3, r1
 8008af2:	4282      	cmp	r2, r0
 8008af4:	6019      	str	r1, [r3, #0]
 8008af6:	d1dd      	bne.n	8008ab4 <_free_r+0x24>
 8008af8:	6810      	ldr	r0, [r2, #0]
 8008afa:	6852      	ldr	r2, [r2, #4]
 8008afc:	605a      	str	r2, [r3, #4]
 8008afe:	4401      	add	r1, r0
 8008b00:	6019      	str	r1, [r3, #0]
 8008b02:	e7d7      	b.n	8008ab4 <_free_r+0x24>
 8008b04:	d902      	bls.n	8008b0c <_free_r+0x7c>
 8008b06:	230c      	movs	r3, #12
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	e7d3      	b.n	8008ab4 <_free_r+0x24>
 8008b0c:	6820      	ldr	r0, [r4, #0]
 8008b0e:	1821      	adds	r1, r4, r0
 8008b10:	428a      	cmp	r2, r1
 8008b12:	bf04      	itt	eq
 8008b14:	6811      	ldreq	r1, [r2, #0]
 8008b16:	6852      	ldreq	r2, [r2, #4]
 8008b18:	6062      	str	r2, [r4, #4]
 8008b1a:	bf04      	itt	eq
 8008b1c:	1809      	addeq	r1, r1, r0
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	605c      	str	r4, [r3, #4]
 8008b22:	e7c7      	b.n	8008ab4 <_free_r+0x24>
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	20000210 	.word	0x20000210

08008b2c <_malloc_r>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	1ccd      	adds	r5, r1, #3
 8008b30:	f025 0503 	bic.w	r5, r5, #3
 8008b34:	3508      	adds	r5, #8
 8008b36:	2d0c      	cmp	r5, #12
 8008b38:	bf38      	it	cc
 8008b3a:	250c      	movcc	r5, #12
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	4606      	mov	r6, r0
 8008b40:	db01      	blt.n	8008b46 <_malloc_r+0x1a>
 8008b42:	42a9      	cmp	r1, r5
 8008b44:	d903      	bls.n	8008b4e <_malloc_r+0x22>
 8008b46:	230c      	movs	r3, #12
 8008b48:	6033      	str	r3, [r6, #0]
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	bd70      	pop	{r4, r5, r6, pc}
 8008b4e:	f000 f9e1 	bl	8008f14 <__malloc_lock>
 8008b52:	4a21      	ldr	r2, [pc, #132]	; (8008bd8 <_malloc_r+0xac>)
 8008b54:	6814      	ldr	r4, [r2, #0]
 8008b56:	4621      	mov	r1, r4
 8008b58:	b991      	cbnz	r1, 8008b80 <_malloc_r+0x54>
 8008b5a:	4c20      	ldr	r4, [pc, #128]	; (8008bdc <_malloc_r+0xb0>)
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	b91b      	cbnz	r3, 8008b68 <_malloc_r+0x3c>
 8008b60:	4630      	mov	r0, r6
 8008b62:	f000 f98f 	bl	8008e84 <_sbrk_r>
 8008b66:	6020      	str	r0, [r4, #0]
 8008b68:	4629      	mov	r1, r5
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f000 f98a 	bl	8008e84 <_sbrk_r>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d124      	bne.n	8008bbe <_malloc_r+0x92>
 8008b74:	230c      	movs	r3, #12
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f000 f9cc 	bl	8008f16 <__malloc_unlock>
 8008b7e:	e7e4      	b.n	8008b4a <_malloc_r+0x1e>
 8008b80:	680b      	ldr	r3, [r1, #0]
 8008b82:	1b5b      	subs	r3, r3, r5
 8008b84:	d418      	bmi.n	8008bb8 <_malloc_r+0x8c>
 8008b86:	2b0b      	cmp	r3, #11
 8008b88:	d90f      	bls.n	8008baa <_malloc_r+0x7e>
 8008b8a:	600b      	str	r3, [r1, #0]
 8008b8c:	50cd      	str	r5, [r1, r3]
 8008b8e:	18cc      	adds	r4, r1, r3
 8008b90:	4630      	mov	r0, r6
 8008b92:	f000 f9c0 	bl	8008f16 <__malloc_unlock>
 8008b96:	f104 000b 	add.w	r0, r4, #11
 8008b9a:	1d23      	adds	r3, r4, #4
 8008b9c:	f020 0007 	bic.w	r0, r0, #7
 8008ba0:	1ac3      	subs	r3, r0, r3
 8008ba2:	d0d3      	beq.n	8008b4c <_malloc_r+0x20>
 8008ba4:	425a      	negs	r2, r3
 8008ba6:	50e2      	str	r2, [r4, r3]
 8008ba8:	e7d0      	b.n	8008b4c <_malloc_r+0x20>
 8008baa:	428c      	cmp	r4, r1
 8008bac:	684b      	ldr	r3, [r1, #4]
 8008bae:	bf16      	itet	ne
 8008bb0:	6063      	strne	r3, [r4, #4]
 8008bb2:	6013      	streq	r3, [r2, #0]
 8008bb4:	460c      	movne	r4, r1
 8008bb6:	e7eb      	b.n	8008b90 <_malloc_r+0x64>
 8008bb8:	460c      	mov	r4, r1
 8008bba:	6849      	ldr	r1, [r1, #4]
 8008bbc:	e7cc      	b.n	8008b58 <_malloc_r+0x2c>
 8008bbe:	1cc4      	adds	r4, r0, #3
 8008bc0:	f024 0403 	bic.w	r4, r4, #3
 8008bc4:	42a0      	cmp	r0, r4
 8008bc6:	d005      	beq.n	8008bd4 <_malloc_r+0xa8>
 8008bc8:	1a21      	subs	r1, r4, r0
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 f95a 	bl	8008e84 <_sbrk_r>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d0cf      	beq.n	8008b74 <_malloc_r+0x48>
 8008bd4:	6025      	str	r5, [r4, #0]
 8008bd6:	e7db      	b.n	8008b90 <_malloc_r+0x64>
 8008bd8:	20000210 	.word	0x20000210
 8008bdc:	20000214 	.word	0x20000214

08008be0 <__ssputs_r>:
 8008be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	688e      	ldr	r6, [r1, #8]
 8008be6:	429e      	cmp	r6, r3
 8008be8:	4682      	mov	sl, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	4690      	mov	r8, r2
 8008bee:	4699      	mov	r9, r3
 8008bf0:	d837      	bhi.n	8008c62 <__ssputs_r+0x82>
 8008bf2:	898a      	ldrh	r2, [r1, #12]
 8008bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bf8:	d031      	beq.n	8008c5e <__ssputs_r+0x7e>
 8008bfa:	6825      	ldr	r5, [r4, #0]
 8008bfc:	6909      	ldr	r1, [r1, #16]
 8008bfe:	1a6f      	subs	r7, r5, r1
 8008c00:	6965      	ldr	r5, [r4, #20]
 8008c02:	2302      	movs	r3, #2
 8008c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c08:	fb95 f5f3 	sdiv	r5, r5, r3
 8008c0c:	f109 0301 	add.w	r3, r9, #1
 8008c10:	443b      	add	r3, r7
 8008c12:	429d      	cmp	r5, r3
 8008c14:	bf38      	it	cc
 8008c16:	461d      	movcc	r5, r3
 8008c18:	0553      	lsls	r3, r2, #21
 8008c1a:	d530      	bpl.n	8008c7e <__ssputs_r+0x9e>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7ff ff85 	bl	8008b2c <_malloc_r>
 8008c22:	4606      	mov	r6, r0
 8008c24:	b950      	cbnz	r0, 8008c3c <__ssputs_r+0x5c>
 8008c26:	230c      	movs	r3, #12
 8008c28:	f8ca 3000 	str.w	r3, [sl]
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3c:	463a      	mov	r2, r7
 8008c3e:	6921      	ldr	r1, [r4, #16]
 8008c40:	f7ff fb0e 	bl	8008260 <memcpy>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	6126      	str	r6, [r4, #16]
 8008c52:	6165      	str	r5, [r4, #20]
 8008c54:	443e      	add	r6, r7
 8008c56:	1bed      	subs	r5, r5, r7
 8008c58:	6026      	str	r6, [r4, #0]
 8008c5a:	60a5      	str	r5, [r4, #8]
 8008c5c:	464e      	mov	r6, r9
 8008c5e:	454e      	cmp	r6, r9
 8008c60:	d900      	bls.n	8008c64 <__ssputs_r+0x84>
 8008c62:	464e      	mov	r6, r9
 8008c64:	4632      	mov	r2, r6
 8008c66:	4641      	mov	r1, r8
 8008c68:	6820      	ldr	r0, [r4, #0]
 8008c6a:	f000 f93a 	bl	8008ee2 <memmove>
 8008c6e:	68a3      	ldr	r3, [r4, #8]
 8008c70:	1b9b      	subs	r3, r3, r6
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	441e      	add	r6, r3
 8008c78:	6026      	str	r6, [r4, #0]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e7dc      	b.n	8008c38 <__ssputs_r+0x58>
 8008c7e:	462a      	mov	r2, r5
 8008c80:	f000 f94a 	bl	8008f18 <_realloc_r>
 8008c84:	4606      	mov	r6, r0
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d1e2      	bne.n	8008c50 <__ssputs_r+0x70>
 8008c8a:	6921      	ldr	r1, [r4, #16]
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	f7ff feff 	bl	8008a90 <_free_r>
 8008c92:	e7c8      	b.n	8008c26 <__ssputs_r+0x46>

08008c94 <_svfiprintf_r>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	461d      	mov	r5, r3
 8008c9a:	898b      	ldrh	r3, [r1, #12]
 8008c9c:	061f      	lsls	r7, r3, #24
 8008c9e:	b09d      	sub	sp, #116	; 0x74
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	d50f      	bpl.n	8008cc8 <_svfiprintf_r+0x34>
 8008ca8:	690b      	ldr	r3, [r1, #16]
 8008caa:	b96b      	cbnz	r3, 8008cc8 <_svfiprintf_r+0x34>
 8008cac:	2140      	movs	r1, #64	; 0x40
 8008cae:	f7ff ff3d 	bl	8008b2c <_malloc_r>
 8008cb2:	6020      	str	r0, [r4, #0]
 8008cb4:	6120      	str	r0, [r4, #16]
 8008cb6:	b928      	cbnz	r0, 8008cc4 <_svfiprintf_r+0x30>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	f8c8 3000 	str.w	r3, [r8]
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc2:	e0c8      	b.n	8008e56 <_svfiprintf_r+0x1c2>
 8008cc4:	2340      	movs	r3, #64	; 0x40
 8008cc6:	6163      	str	r3, [r4, #20]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ccc:	2320      	movs	r3, #32
 8008cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cd2:	2330      	movs	r3, #48	; 0x30
 8008cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cd8:	9503      	str	r5, [sp, #12]
 8008cda:	f04f 0b01 	mov.w	fp, #1
 8008cde:	4637      	mov	r7, r6
 8008ce0:	463d      	mov	r5, r7
 8008ce2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ce6:	b10b      	cbz	r3, 8008cec <_svfiprintf_r+0x58>
 8008ce8:	2b25      	cmp	r3, #37	; 0x25
 8008cea:	d13e      	bne.n	8008d6a <_svfiprintf_r+0xd6>
 8008cec:	ebb7 0a06 	subs.w	sl, r7, r6
 8008cf0:	d00b      	beq.n	8008d0a <_svfiprintf_r+0x76>
 8008cf2:	4653      	mov	r3, sl
 8008cf4:	4632      	mov	r2, r6
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	f7ff ff71 	bl	8008be0 <__ssputs_r>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f000 80a4 	beq.w	8008e4c <_svfiprintf_r+0x1b8>
 8008d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d06:	4453      	add	r3, sl
 8008d08:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0a:	783b      	ldrb	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 809d 	beq.w	8008e4c <_svfiprintf_r+0x1b8>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d1c:	9304      	str	r3, [sp, #16]
 8008d1e:	9307      	str	r3, [sp, #28]
 8008d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d24:	931a      	str	r3, [sp, #104]	; 0x68
 8008d26:	462f      	mov	r7, r5
 8008d28:	2205      	movs	r2, #5
 8008d2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008d2e:	4850      	ldr	r0, [pc, #320]	; (8008e70 <_svfiprintf_r+0x1dc>)
 8008d30:	f7f7 fa56 	bl	80001e0 <memchr>
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	b9d0      	cbnz	r0, 8008d6e <_svfiprintf_r+0xda>
 8008d38:	06d9      	lsls	r1, r3, #27
 8008d3a:	bf44      	itt	mi
 8008d3c:	2220      	movmi	r2, #32
 8008d3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d42:	071a      	lsls	r2, r3, #28
 8008d44:	bf44      	itt	mi
 8008d46:	222b      	movmi	r2, #43	; 0x2b
 8008d48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d4c:	782a      	ldrb	r2, [r5, #0]
 8008d4e:	2a2a      	cmp	r2, #42	; 0x2a
 8008d50:	d015      	beq.n	8008d7e <_svfiprintf_r+0xea>
 8008d52:	9a07      	ldr	r2, [sp, #28]
 8008d54:	462f      	mov	r7, r5
 8008d56:	2000      	movs	r0, #0
 8008d58:	250a      	movs	r5, #10
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d60:	3b30      	subs	r3, #48	; 0x30
 8008d62:	2b09      	cmp	r3, #9
 8008d64:	d94d      	bls.n	8008e02 <_svfiprintf_r+0x16e>
 8008d66:	b1b8      	cbz	r0, 8008d98 <_svfiprintf_r+0x104>
 8008d68:	e00f      	b.n	8008d8a <_svfiprintf_r+0xf6>
 8008d6a:	462f      	mov	r7, r5
 8008d6c:	e7b8      	b.n	8008ce0 <_svfiprintf_r+0x4c>
 8008d6e:	4a40      	ldr	r2, [pc, #256]	; (8008e70 <_svfiprintf_r+0x1dc>)
 8008d70:	1a80      	subs	r0, r0, r2
 8008d72:	fa0b f000 	lsl.w	r0, fp, r0
 8008d76:	4318      	orrs	r0, r3
 8008d78:	9004      	str	r0, [sp, #16]
 8008d7a:	463d      	mov	r5, r7
 8008d7c:	e7d3      	b.n	8008d26 <_svfiprintf_r+0x92>
 8008d7e:	9a03      	ldr	r2, [sp, #12]
 8008d80:	1d11      	adds	r1, r2, #4
 8008d82:	6812      	ldr	r2, [r2, #0]
 8008d84:	9103      	str	r1, [sp, #12]
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	db01      	blt.n	8008d8e <_svfiprintf_r+0xfa>
 8008d8a:	9207      	str	r2, [sp, #28]
 8008d8c:	e004      	b.n	8008d98 <_svfiprintf_r+0x104>
 8008d8e:	4252      	negs	r2, r2
 8008d90:	f043 0302 	orr.w	r3, r3, #2
 8008d94:	9207      	str	r2, [sp, #28]
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	783b      	ldrb	r3, [r7, #0]
 8008d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d9c:	d10c      	bne.n	8008db8 <_svfiprintf_r+0x124>
 8008d9e:	787b      	ldrb	r3, [r7, #1]
 8008da0:	2b2a      	cmp	r3, #42	; 0x2a
 8008da2:	d133      	bne.n	8008e0c <_svfiprintf_r+0x178>
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	1d1a      	adds	r2, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	9203      	str	r2, [sp, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfb8      	it	lt
 8008db0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008db4:	3702      	adds	r7, #2
 8008db6:	9305      	str	r3, [sp, #20]
 8008db8:	4d2e      	ldr	r5, [pc, #184]	; (8008e74 <_svfiprintf_r+0x1e0>)
 8008dba:	7839      	ldrb	r1, [r7, #0]
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7f7 fa0e 	bl	80001e0 <memchr>
 8008dc4:	b138      	cbz	r0, 8008dd6 <_svfiprintf_r+0x142>
 8008dc6:	2340      	movs	r3, #64	; 0x40
 8008dc8:	1b40      	subs	r0, r0, r5
 8008dca:	fa03 f000 	lsl.w	r0, r3, r0
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	4303      	orrs	r3, r0
 8008dd2:	3701      	adds	r7, #1
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	7839      	ldrb	r1, [r7, #0]
 8008dd8:	4827      	ldr	r0, [pc, #156]	; (8008e78 <_svfiprintf_r+0x1e4>)
 8008dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dde:	2206      	movs	r2, #6
 8008de0:	1c7e      	adds	r6, r7, #1
 8008de2:	f7f7 f9fd 	bl	80001e0 <memchr>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d038      	beq.n	8008e5c <_svfiprintf_r+0x1c8>
 8008dea:	4b24      	ldr	r3, [pc, #144]	; (8008e7c <_svfiprintf_r+0x1e8>)
 8008dec:	bb13      	cbnz	r3, 8008e34 <_svfiprintf_r+0x1a0>
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	3307      	adds	r3, #7
 8008df2:	f023 0307 	bic.w	r3, r3, #7
 8008df6:	3308      	adds	r3, #8
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfc:	444b      	add	r3, r9
 8008dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008e00:	e76d      	b.n	8008cde <_svfiprintf_r+0x4a>
 8008e02:	fb05 3202 	mla	r2, r5, r2, r3
 8008e06:	2001      	movs	r0, #1
 8008e08:	460f      	mov	r7, r1
 8008e0a:	e7a6      	b.n	8008d5a <_svfiprintf_r+0xc6>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	3701      	adds	r7, #1
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	4619      	mov	r1, r3
 8008e14:	250a      	movs	r5, #10
 8008e16:	4638      	mov	r0, r7
 8008e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1c:	3a30      	subs	r2, #48	; 0x30
 8008e1e:	2a09      	cmp	r2, #9
 8008e20:	d903      	bls.n	8008e2a <_svfiprintf_r+0x196>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0c8      	beq.n	8008db8 <_svfiprintf_r+0x124>
 8008e26:	9105      	str	r1, [sp, #20]
 8008e28:	e7c6      	b.n	8008db8 <_svfiprintf_r+0x124>
 8008e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4607      	mov	r7, r0
 8008e32:	e7f0      	b.n	8008e16 <_svfiprintf_r+0x182>
 8008e34:	ab03      	add	r3, sp, #12
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <_svfiprintf_r+0x1ec>)
 8008e3c:	a904      	add	r1, sp, #16
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f7fc fbf6 	bl	8005630 <_printf_float>
 8008e44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008e48:	4681      	mov	r9, r0
 8008e4a:	d1d6      	bne.n	8008dfa <_svfiprintf_r+0x166>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	065b      	lsls	r3, r3, #25
 8008e50:	f53f af35 	bmi.w	8008cbe <_svfiprintf_r+0x2a>
 8008e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e56:	b01d      	add	sp, #116	; 0x74
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	4622      	mov	r2, r4
 8008e62:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <_svfiprintf_r+0x1ec>)
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	4640      	mov	r0, r8
 8008e68:	f7fc fe98 	bl	8005b9c <_printf_i>
 8008e6c:	e7ea      	b.n	8008e44 <_svfiprintf_r+0x1b0>
 8008e6e:	bf00      	nop
 8008e70:	0800917c 	.word	0x0800917c
 8008e74:	08009182 	.word	0x08009182
 8008e78:	08009186 	.word	0x08009186
 8008e7c:	08005631 	.word	0x08005631
 8008e80:	08008be1 	.word	0x08008be1

08008e84 <_sbrk_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4c06      	ldr	r4, [pc, #24]	; (8008ea0 <_sbrk_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	f7f9 fc12 	bl	80026b8 <_sbrk>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_sbrk_r+0x1a>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_sbrk_r+0x1a>
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000374 	.word	0x20000374

08008ea4 <strncmp>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	b16a      	cbz	r2, 8008ec4 <strncmp+0x20>
 8008ea8:	3901      	subs	r1, #1
 8008eaa:	1884      	adds	r4, r0, r2
 8008eac:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008eb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d103      	bne.n	8008ec0 <strncmp+0x1c>
 8008eb8:	42a0      	cmp	r0, r4
 8008eba:	d001      	beq.n	8008ec0 <strncmp+0x1c>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f5      	bne.n	8008eac <strncmp+0x8>
 8008ec0:	1a98      	subs	r0, r3, r2
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	e7fc      	b.n	8008ec2 <strncmp+0x1e>

08008ec8 <__ascii_wctomb>:
 8008ec8:	b149      	cbz	r1, 8008ede <__ascii_wctomb+0x16>
 8008eca:	2aff      	cmp	r2, #255	; 0xff
 8008ecc:	bf85      	ittet	hi
 8008ece:	238a      	movhi	r3, #138	; 0x8a
 8008ed0:	6003      	strhi	r3, [r0, #0]
 8008ed2:	700a      	strbls	r2, [r1, #0]
 8008ed4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008ed8:	bf98      	it	ls
 8008eda:	2001      	movls	r0, #1
 8008edc:	4770      	bx	lr
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4770      	bx	lr

08008ee2 <memmove>:
 8008ee2:	4288      	cmp	r0, r1
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	eb01 0302 	add.w	r3, r1, r2
 8008eea:	d807      	bhi.n	8008efc <memmove+0x1a>
 8008eec:	1e42      	subs	r2, r0, #1
 8008eee:	4299      	cmp	r1, r3
 8008ef0:	d00a      	beq.n	8008f08 <memmove+0x26>
 8008ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008efa:	e7f8      	b.n	8008eee <memmove+0xc>
 8008efc:	4283      	cmp	r3, r0
 8008efe:	d9f5      	bls.n	8008eec <memmove+0xa>
 8008f00:	1881      	adds	r1, r0, r2
 8008f02:	1ad2      	subs	r2, r2, r3
 8008f04:	42d3      	cmn	r3, r2
 8008f06:	d100      	bne.n	8008f0a <memmove+0x28>
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f12:	e7f7      	b.n	8008f04 <memmove+0x22>

08008f14 <__malloc_lock>:
 8008f14:	4770      	bx	lr

08008f16 <__malloc_unlock>:
 8008f16:	4770      	bx	lr

08008f18 <_realloc_r>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	460e      	mov	r6, r1
 8008f20:	b921      	cbnz	r1, 8008f2c <_realloc_r+0x14>
 8008f22:	4611      	mov	r1, r2
 8008f24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f28:	f7ff be00 	b.w	8008b2c <_malloc_r>
 8008f2c:	b922      	cbnz	r2, 8008f38 <_realloc_r+0x20>
 8008f2e:	f7ff fdaf 	bl	8008a90 <_free_r>
 8008f32:	4625      	mov	r5, r4
 8008f34:	4628      	mov	r0, r5
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f38:	f000 f814 	bl	8008f64 <_malloc_usable_size_r>
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d20f      	bcs.n	8008f60 <_realloc_r+0x48>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4638      	mov	r0, r7
 8008f44:	f7ff fdf2 	bl	8008b2c <_malloc_r>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0f2      	beq.n	8008f34 <_realloc_r+0x1c>
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4622      	mov	r2, r4
 8008f52:	f7ff f985 	bl	8008260 <memcpy>
 8008f56:	4631      	mov	r1, r6
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7ff fd99 	bl	8008a90 <_free_r>
 8008f5e:	e7e9      	b.n	8008f34 <_realloc_r+0x1c>
 8008f60:	4635      	mov	r5, r6
 8008f62:	e7e7      	b.n	8008f34 <_realloc_r+0x1c>

08008f64 <_malloc_usable_size_r>:
 8008f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f68:	1f18      	subs	r0, r3, #4
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bfbc      	itt	lt
 8008f6e:	580b      	ldrlt	r3, [r1, r0]
 8008f70:	18c0      	addlt	r0, r0, r3
 8008f72:	4770      	bx	lr

08008f74 <_init>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	bf00      	nop
 8008f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7a:	bc08      	pop	{r3}
 8008f7c:	469e      	mov	lr, r3
 8008f7e:	4770      	bx	lr

08008f80 <_fini>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	bf00      	nop
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr
