
RPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad8  08005ad8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae0  08005ae0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08005b58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005b58  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e93  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002884  00000000  00000000  00033f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  000367b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  000378f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000040d7  00000000  00000000  000388e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d719  00000000  00000000  0003c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ada5c  00000000  00000000  0004a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7b2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dfc  00000000  00000000  000f7ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059cc 	.word	0x080059cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080059cc 	.word	0x080059cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <app_NumeroA7Segmentos>:
/* Variables globales */
uint8_t Bandera[]={0,0,0};

/* Conversion del valor numerico para 7 segmentos */
void app_NumeroA7Segmentos(uint8_t Numero)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	switch(Numero)
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b09      	cmp	r3, #9
 800057e:	f200 819d 	bhi.w	80008bc <app_NumeroA7Segmentos+0x34c>
 8000582:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <app_NumeroA7Segmentos+0x18>)
 8000584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000588:	080005b1 	.word	0x080005b1
 800058c:	080005ff 	.word	0x080005ff
 8000590:	0800064d 	.word	0x0800064d
 8000594:	0800069b 	.word	0x0800069b
 8000598:	080006e9 	.word	0x080006e9
 800059c:	08000737 	.word	0x08000737
 80005a0:	08000785 	.word	0x08000785
 80005a4:	080007d3 	.word	0x080007d3
 80005a8:	08000821 	.word	0x08000821
 80005ac:	0800086f 	.word	0x0800086f
	{
		case 0:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f001 feb7 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80005be:	2201      	movs	r2, #1
 80005c0:	2102      	movs	r1, #2
 80005c2:	48c0      	ldr	r0, [pc, #768]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80005c4:	f001 feb2 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	48bd      	ldr	r0, [pc, #756]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80005ce:	f001 fead 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2101      	movs	r1, #1
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f001 fea7 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80005de:	2201      	movs	r2, #1
 80005e0:	2110      	movs	r1, #16
 80005e2:	48b8      	ldr	r0, [pc, #736]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80005e4:	f001 fea2 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2140      	movs	r1, #64	; 0x40
 80005ec:	48b5      	ldr	r0, [pc, #724]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80005ee:	f001 fe9d 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	48b3      	ldr	r0, [pc, #716]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80005f8:	f001 fe98 	bl	800232c <HAL_GPIO_WritePin>

		}break;
 80005fc:	e15e      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 1:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f001 fe90 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	48ac      	ldr	r0, [pc, #688]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000612:	f001 fe8b 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	2104      	movs	r1, #4
 800061a:	48aa      	ldr	r0, [pc, #680]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800061c:	f001 fe86 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2101      	movs	r1, #1
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f001 fe80 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2110      	movs	r1, #16
 8000630:	48a4      	ldr	r0, [pc, #656]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000632:	f001 fe7b 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2140      	movs	r1, #64	; 0x40
 800063a:	48a2      	ldr	r0, [pc, #648]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800063c:	f001 fe76 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	489f      	ldr	r0, [pc, #636]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000646:	f001 fe71 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 800064a:	e137      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 2:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f001 fe69 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	2102      	movs	r1, #2
 800065e:	4899      	ldr	r0, [pc, #612]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000660:	f001 fe64 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2104      	movs	r1, #4
 8000668:	4896      	ldr	r0, [pc, #600]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800066a:	f001 fe5f 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	2101      	movs	r1, #1
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 fe59 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2110      	movs	r1, #16
 800067e:	4891      	ldr	r0, [pc, #580]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000680:	f001 fe54 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	488e      	ldr	r0, [pc, #568]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800068a:	f001 fe4f 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	488c      	ldr	r0, [pc, #560]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000694:	f001 fe4a 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 8000698:	e110      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 3:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f001 fe42 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2102      	movs	r1, #2
 80006ac:	4885      	ldr	r0, [pc, #532]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80006ae:	f001 fe3d 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2104      	movs	r1, #4
 80006b6:	4883      	ldr	r0, [pc, #524]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80006b8:	f001 fe38 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f001 fe32 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	487d      	ldr	r0, [pc, #500]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80006ce:	f001 fe2d 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	487b      	ldr	r0, [pc, #492]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80006d8:	f001 fe28 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	4878      	ldr	r0, [pc, #480]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80006e2:	f001 fe23 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 80006e6:	e0e9      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 4:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f001 fe1b 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2102      	movs	r1, #2
 80006fa:	4872      	ldr	r0, [pc, #456]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80006fc:	f001 fe16 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	486f      	ldr	r0, [pc, #444]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000706:	f001 fe11 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2101      	movs	r1, #1
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 fe0b 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	486a      	ldr	r0, [pc, #424]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800071c:	f001 fe06 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	2140      	movs	r1, #64	; 0x40
 8000724:	4867      	ldr	r0, [pc, #412]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000726:	f001 fe01 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	4865      	ldr	r0, [pc, #404]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000730:	f001 fdfc 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 8000734:	e0c2      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 5:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f001 fdf4 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800074a:	f001 fdef 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800074e:	2201      	movs	r2, #1
 8000750:	2104      	movs	r1, #4
 8000752:	485c      	ldr	r0, [pc, #368]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000754:	f001 fdea 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f001 fde4 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2110      	movs	r1, #16
 8000768:	4856      	ldr	r0, [pc, #344]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800076a:	f001 fddf 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	4854      	ldr	r0, [pc, #336]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000774:	f001 fdda 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	4851      	ldr	r0, [pc, #324]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800077e:	f001 fdd5 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 8000782:	e09b      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 6:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f001 fdcd 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	484b      	ldr	r0, [pc, #300]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000798:	f001 fdc8 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	2104      	movs	r1, #4
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80007a2:	f001 fdc3 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2101      	movs	r1, #1
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f001 fdbd 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2110      	movs	r1, #16
 80007b6:	4843      	ldr	r0, [pc, #268]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80007b8:	f001 fdb8 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	4840      	ldr	r0, [pc, #256]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80007c2:	f001 fdb3 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	483e      	ldr	r0, [pc, #248]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80007cc:	f001 fdae 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 80007d0:	e074      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 7:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f001 fda6 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2102      	movs	r1, #2
 80007e4:	4837      	ldr	r0, [pc, #220]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80007e6:	f001 fda1 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2104      	movs	r1, #4
 80007ee:	4835      	ldr	r0, [pc, #212]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80007f0:	f001 fd9c 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2101      	movs	r1, #1
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f001 fd96 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2110      	movs	r1, #16
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000806:	f001 fd91 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	482d      	ldr	r0, [pc, #180]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000810:	f001 fd8c 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	482a      	ldr	r0, [pc, #168]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800081a:	f001 fd87 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 800081e:	e04d      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 8:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f001 fd7f 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	2102      	movs	r1, #2
 8000832:	4824      	ldr	r0, [pc, #144]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000834:	f001 fd7a 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	2104      	movs	r1, #4
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800083e:	f001 fd75 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	2101      	movs	r1, #1
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f001 fd6f 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	2110      	movs	r1, #16
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000854:	f001 fd6a 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000858:	2201      	movs	r2, #1
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800085e:	f001 fd65 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4817      	ldr	r0, [pc, #92]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000868:	f001 fd60 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 800086c:	e026      	b.n	80008bc <app_NumeroA7Segmentos+0x34c>
		case 9:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f001 fd58 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800087c:	2201      	movs	r2, #1
 800087e:	2102      	movs	r1, #2
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 8000882:	f001 fd53 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000886:	2201      	movs	r2, #1
 8000888:	2104      	movs	r1, #4
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 800088c:	f001 fd4e 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f001 fd48 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80008a2:	f001 fd43 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80008ac:	f001 fd3e 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <app_NumeroA7Segmentos+0x354>)
 80008b6:	f001 fd39 	bl	800232c <HAL_GPIO_WritePin>
		}break;
 80008ba:	bf00      	nop
		{

			/*No hace nada */
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	48000800 	.word	0x48000800

080008c8 <app_SeleccionDisplay>:

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d86f      	bhi.n	80009b8 <app_SeleccionDisplay+0xf0>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <app_SeleccionDisplay+0x18>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	080008f1 	.word	0x080008f1
 80008e4:	08000923 	.word	0x08000923
 80008e8:	08000955 	.word	0x08000955
 80008ec:	08000987 	.word	0x08000987
	{
		case 0:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f001 fd17 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f001 fd10 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2120      	movs	r1, #32
 8000910:	4837      	ldr	r0, [pc, #220]	; (80009f0 <app_SeleccionDisplay+0x128>)
 8000912:	f001 fd0b 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2110      	movs	r1, #16
 800091a:	4835      	ldr	r0, [pc, #212]	; (80009f0 <app_SeleccionDisplay+0x128>)
 800091c:	f001 fd06 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000920:	e062      	b.n	80009e8 <app_SeleccionDisplay+0x120>
		case 1:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f001 fcfe 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f001 fcf7 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	482b      	ldr	r0, [pc, #172]	; (80009f0 <app_SeleccionDisplay+0x128>)
 8000944:	f001 fcf2 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2110      	movs	r1, #16
 800094c:	4828      	ldr	r0, [pc, #160]	; (80009f0 <app_SeleccionDisplay+0x128>)
 800094e:	f001 fced 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000952:	e049      	b.n	80009e8 <app_SeleccionDisplay+0x120>
		case 2:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f001 fce5 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f001 fcde 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	481e      	ldr	r0, [pc, #120]	; (80009f0 <app_SeleccionDisplay+0x128>)
 8000976:	f001 fcd9 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2110      	movs	r1, #16
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <app_SeleccionDisplay+0x128>)
 8000980:	f001 fcd4 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000984:	e030      	b.n	80009e8 <app_SeleccionDisplay+0x120>
		case 3:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f001 fccc 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 fcc5 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <app_SeleccionDisplay+0x128>)
 80009a8:	f001 fcc0 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2110      	movs	r1, #16
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <app_SeleccionDisplay+0x128>)
 80009b2:	f001 fcbb 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 80009b6:	e017      	b.n	80009e8 <app_SeleccionDisplay+0x120>
		default:
		{
			/* Envia todos los displays a 1 logicos */
			HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f001 fcb3 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f001 fcac 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2120      	movs	r1, #32
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <app_SeleccionDisplay+0x128>)
 80009da:	f001 fca7 	bl	800232c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80009de:	2201      	movs	r2, #1
 80009e0:	2110      	movs	r1, #16
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <app_SeleccionDisplay+0x128>)
 80009e4:	f001 fca2 	bl	800232c <HAL_GPIO_WritePin>
		}
	}
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	48000400 	.word	0x48000400

080009f4 <app_Despliegue>:

/* Separacion de numero en unidades, decenas, centenas ... */
void app_Despliegue(uint16_t Numero)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
	uint8_t Primero  =  Numero % 10;
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	4b8d      	ldr	r3, [pc, #564]	; (8000c38 <app_Despliegue+0x244>)
 8000a02:	fba3 1302 	umull	r1, r3, r3, r2
 8000a06:	08d9      	lsrs	r1, r3, #3
 8000a08:	460b      	mov	r3, r1
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	73fb      	strb	r3, [r7, #15]
	uint8_t Segundo =  ( Numero - Primero ) % 100 / 10;
 8000a16:	88fa      	ldrh	r2, [r7, #6]
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	1ad2      	subs	r2, r2, r3
 8000a1c:	4b87      	ldr	r3, [pc, #540]	; (8000c3c <app_Despliegue+0x248>)
 8000a1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a22:	1159      	asrs	r1, r3, #5
 8000a24:	17d3      	asrs	r3, r2, #31
 8000a26:	1acb      	subs	r3, r1, r3
 8000a28:	2164      	movs	r1, #100	; 0x64
 8000a2a:	fb01 f303 	mul.w	r3, r1, r3
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	4a83      	ldr	r2, [pc, #524]	; (8000c40 <app_Despliegue+0x24c>)
 8000a32:	fb82 1203 	smull	r1, r2, r2, r3
 8000a36:	1092      	asrs	r2, r2, #2
 8000a38:	17db      	asrs	r3, r3, #31
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	73bb      	strb	r3, [r7, #14]
	uint8_t Tercero  =  ( Numero - Primero - Segundo ) % 1000 / 100;
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	1ad2      	subs	r2, r2, r3
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	1ad2      	subs	r2, r2, r3
 8000a48:	4b7e      	ldr	r3, [pc, #504]	; (8000c44 <app_Despliegue+0x250>)
 8000a4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a4e:	1199      	asrs	r1, r3, #6
 8000a50:	17d3      	asrs	r3, r2, #31
 8000a52:	1acb      	subs	r3, r1, r3
 8000a54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a58:	fb01 f303 	mul.w	r3, r1, r3
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	4a77      	ldr	r2, [pc, #476]	; (8000c3c <app_Despliegue+0x248>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	1152      	asrs	r2, r2, #5
 8000a66:	17db      	asrs	r3, r3, #31
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	737b      	strb	r3, [r7, #13]
	uint8_t Cuarto =  ( Numero - Primero - Segundo - Tercero ) % 10000 / 1000;
 8000a6c:	88fa      	ldrh	r2, [r7, #6]
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	1ad2      	subs	r2, r2, r3
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	1ad2      	subs	r2, r2, r3
 8000a7a:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <app_Despliegue+0x254>)
 8000a7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a80:	1319      	asrs	r1, r3, #12
 8000a82:	17d3      	asrs	r3, r2, #31
 8000a84:	1acb      	subs	r3, r1, r3
 8000a86:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	4a6c      	ldr	r2, [pc, #432]	; (8000c44 <app_Despliegue+0x250>)
 8000a92:	fb82 1203 	smull	r1, r2, r2, r3
 8000a96:	1192      	asrs	r2, r2, #6
 8000a98:	17db      	asrs	r3, r3, #31
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	733b      	strb	r3, [r7, #12]
	uint8_t Quinto = (Numero - Primero - Segundo - Tercero - Cuarto) % 100000 / 10000;
 8000a9e:	88fa      	ldrh	r2, [r7, #6]
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	1ad2      	subs	r2, r2, r3
 8000aa8:	7b7b      	ldrb	r3, [r7, #13]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	7b3b      	ldrb	r3, [r7, #12]
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	4b66      	ldr	r3, [pc, #408]	; (8000c4c <app_Despliegue+0x258>)
 8000ab2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab6:	1359      	asrs	r1, r3, #13
 8000ab8:	17d3      	asrs	r3, r2, #31
 8000aba:	1acb      	subs	r3, r1, r3
 8000abc:	4964      	ldr	r1, [pc, #400]	; (8000c50 <app_Despliegue+0x25c>)
 8000abe:	fb01 f303 	mul.w	r3, r1, r3
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	4a60      	ldr	r2, [pc, #384]	; (8000c48 <app_Despliegue+0x254>)
 8000ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aca:	1312      	asrs	r2, r2, #12
 8000acc:	17db      	asrs	r3, r3, #31
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	72fb      	strb	r3, [r7, #11]
	if (Numero > 9999)
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d939      	bls.n	8000b50 <app_Despliegue+0x15c>
	{
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae2:	485c      	ldr	r0, [pc, #368]	; (8000c54 <app_Despliegue+0x260>)
 8000ae4:	f001 fc22 	bl	800232c <HAL_GPIO_WritePin>
		app_SeleccionDisplay(0);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff feed 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Quinto);
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fd3d 	bl	8000570 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f001 f972 	bl	8001de0 <HAL_Delay>

		app_SeleccionDisplay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fee3 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Cuarto);
 8000b02:	7b3b      	ldrb	r3, [r7, #12]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fd33 	bl	8000570 <app_NumeroA7Segmentos>

		HAL_Delay(3);
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f001 f968 	bl	8001de0 <HAL_Delay>
		app_SeleccionDisplay(2);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff fed9 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Tercero);
 8000b16:	7b7b      	ldrb	r3, [r7, #13]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd29 	bl	8000570 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f001 f95e 	bl	8001de0 <HAL_Delay>
		app_SeleccionDisplay(3);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f7ff fecf 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Segundo);
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fd1f 	bl	8000570 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b32:	2003      	movs	r0, #3
 8000b34:	f001 f954 	bl	8001de0 <HAL_Delay>
		app_SeleccionDisplay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fec5 	bl	80008c8 <app_SeleccionDisplay>
		//app_NumeroA7Segmentos(Cuarto);
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	4843      	ldr	r0, [pc, #268]	; (8000c54 <app_Despliegue+0x260>)
 8000b46:	f001 fbf1 	bl	800232c <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f001 f948 	bl	8001de0 <HAL_Delay>

	}
	if(Numero < 9999)
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	f242 720e 	movw	r2, #9998	; 0x270e
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d869      	bhi.n	8000c2e <app_Despliegue+0x23a>
	{


		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	483c      	ldr	r0, [pc, #240]	; (8000c54 <app_Despliegue+0x260>)
 8000b62:	f001 fbe3 	bl	800232c <HAL_GPIO_WritePin>
		app_SeleccionDisplay(0);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff feae 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Cuarto);
 8000b6c:	7b3b      	ldrb	r3, [r7, #12]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fcfe 	bl	8000570 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f001 f933 	bl	8001de0 <HAL_Delay>
		app_SeleccionDisplay(1);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fea4 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Tercero);
 8000b80:	7b7b      	ldrb	r3, [r7, #13]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fcf4 	bl	8000570 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f001 f929 	bl	8001de0 <HAL_Delay>
		app_SeleccionDisplay(2);
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f7ff fe9a 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Segundo);
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fcea 	bl	8000570 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f001 f91f 	bl	8001de0 <HAL_Delay>
		app_SeleccionDisplay(3);
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f7ff fe90 	bl	80008c8 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Primero);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fce0 	bl	8000570 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f001 f915 	bl	8001de0 <HAL_Delay>
		if(Bandera[0] == 1)
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <app_Despliegue+0x264>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d10f      	bne.n	8000bde <app_Despliegue+0x1ea>
		{
			app_SeleccionDisplay(0);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fe82 	bl	80008c8 <app_SeleccionDisplay>
			app_NumeroA7Segmentos(Cuarto);
 8000bc4:	7b3b      	ldrb	r3, [r7, #12]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fcd2 	bl	8000570 <app_NumeroA7Segmentos>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd2:	4820      	ldr	r0, [pc, #128]	; (8000c54 <app_Despliegue+0x260>)
 8000bd4:	f001 fbaa 	bl	800232c <HAL_GPIO_WritePin>
			HAL_Delay(3);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f001 f901 	bl	8001de0 <HAL_Delay>
		}
		if(Bandera[1] == 1)
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <app_Despliegue+0x264>)
 8000be0:	785b      	ldrb	r3, [r3, #1]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d10f      	bne.n	8000c06 <app_Despliegue+0x212>
		{
			app_SeleccionDisplay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fe6e 	bl	80008c8 <app_SeleccionDisplay>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	4818      	ldr	r0, [pc, #96]	; (8000c54 <app_Despliegue+0x260>)
 8000bf4:	f001 fb9a 	bl	800232c <HAL_GPIO_WritePin>
			app_NumeroA7Segmentos(Tercero);
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fcb8 	bl	8000570 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f001 f8ed 	bl	8001de0 <HAL_Delay>
		}
		if(Bandera[2] == 1)
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <app_Despliegue+0x264>)
 8000c08:	789b      	ldrb	r3, [r3, #2]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10f      	bne.n	8000c2e <app_Despliegue+0x23a>
		{
			app_SeleccionDisplay(2);
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff fe5a 	bl	80008c8 <app_SeleccionDisplay>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1a:	480e      	ldr	r0, [pc, #56]	; (8000c54 <app_Despliegue+0x260>)
 8000c1c:	f001 fb86 	bl	800232c <HAL_GPIO_WritePin>
			app_NumeroA7Segmentos(Segundo);
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fca4 	bl	8000570 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f001 f8d9 	bl	8001de0 <HAL_Delay>
		}
	}

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	cccccccd 	.word	0xcccccccd
 8000c3c:	51eb851f 	.word	0x51eb851f
 8000c40:	66666667 	.word	0x66666667
 8000c44:	10624dd3 	.word	0x10624dd3
 8000c48:	68db8bad 	.word	0x68db8bad
 8000c4c:	14f8b589 	.word	0x14f8b589
 8000c50:	000186a0 	.word	0x000186a0
 8000c54:	48000800 	.word	0x48000800
 8000c58:	2000008c 	.word	0x2000008c

08000c5c <app_LetrasADisplay>:

}

/* Impresion de letras en display de 7 segmentos */
void app_LetrasADisplay(char Letras)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	//volatile uint8_t i=0;
	switch(Letras)
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	3b61      	subs	r3, #97	; 0x61
 8000c6a:	2b18      	cmp	r3, #24
 8000c6c:	f200 82f7 	bhi.w	800125e <app_LetrasADisplay+0x602>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <app_LetrasADisplay+0x1c>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000cdd 	.word	0x08000cdd
 8000c7c:	08000d2b 	.word	0x08000d2b
 8000c80:	08000d79 	.word	0x08000d79
 8000c84:	08000dc7 	.word	0x08000dc7
 8000c88:	08000e15 	.word	0x08000e15
 8000c8c:	08000e63 	.word	0x08000e63
 8000c90:	08000eb1 	.word	0x08000eb1
 8000c94:	08000eff 	.word	0x08000eff
 8000c98:	08000f4d 	.word	0x08000f4d
 8000c9c:	08000f9b 	.word	0x08000f9b
 8000ca0:	0800125f 	.word	0x0800125f
 8000ca4:	08000fe9 	.word	0x08000fe9
 8000ca8:	0800125f 	.word	0x0800125f
 8000cac:	0800103d 	.word	0x0800103d
 8000cb0:	0800108b 	.word	0x0800108b
 8000cb4:	0800125f 	.word	0x0800125f
 8000cb8:	0800125f 	.word	0x0800125f
 8000cbc:	080010d9 	.word	0x080010d9
 8000cc0:	08001127 	.word	0x08001127
 8000cc4:	0800125f 	.word	0x0800125f
 8000cc8:	080011c3 	.word	0x080011c3
 8000ccc:	08001175 	.word	0x08001175
 8000cd0:	0800125f 	.word	0x0800125f
 8000cd4:	0800125f 	.word	0x0800125f
 8000cd8:	08001211 	.word	0x08001211
		{
			case 'A' | 'a':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f001 fb21 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2102      	movs	r1, #2
 8000cee:	48d2      	ldr	r0, [pc, #840]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000cf0:	f001 fb1c 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	48cf      	ldr	r0, [pc, #828]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000cfa:	f001 fb17 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2101      	movs	r1, #1
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f001 fb11 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	48ca      	ldr	r0, [pc, #808]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d10:	f001 fb0c 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	48c7      	ldr	r0, [pc, #796]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d1a:	f001 fb07 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	48c5      	ldr	r0, [pc, #788]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d24:	f001 fb02 	bl	800232c <HAL_GPIO_WritePin>

			}break;
 8000d28:	e299      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'B' | 'b':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f001 fafa 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	48be      	ldr	r0, [pc, #760]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d3e:	f001 faf5 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2104      	movs	r1, #4
 8000d46:	48bc      	ldr	r0, [pc, #752]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d48:	f001 faf0 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f001 faea 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	48b6      	ldr	r0, [pc, #728]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d5e:	f001 fae5 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	48b4      	ldr	r0, [pc, #720]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d68:	f001 fae0 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	48b1      	ldr	r0, [pc, #708]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d72:	f001 fadb 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000d76:	e272      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'C' | 'c':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 fad3 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	48ab      	ldr	r0, [pc, #684]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d8c:	f001 face 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2104      	movs	r1, #4
 8000d94:	48a8      	ldr	r0, [pc, #672]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000d96:	f001 fac9 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f001 fac3 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2110      	movs	r1, #16
 8000daa:	48a3      	ldr	r0, [pc, #652]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000dac:	f001 fabe 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	48a0      	ldr	r0, [pc, #640]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000db6:	f001 fab9 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	489e      	ldr	r0, [pc, #632]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000dc0:	f001 fab4 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000dc4:	e24b      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'D' | 'd':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f001 faac 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4897      	ldr	r0, [pc, #604]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000dda:	f001 faa7 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2104      	movs	r1, #4
 8000de2:	4895      	ldr	r0, [pc, #596]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000de4:	f001 faa2 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2101      	movs	r1, #1
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f001 fa9c 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2110      	movs	r1, #16
 8000df8:	488f      	ldr	r0, [pc, #572]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000dfa:	f001 fa97 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	488d      	ldr	r0, [pc, #564]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e04:	f001 fa92 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	488a      	ldr	r0, [pc, #552]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e0e:	f001 fa8d 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000e12:	e224      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'E' | 'e':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f001 fa85 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2102      	movs	r1, #2
 8000e26:	4884      	ldr	r0, [pc, #528]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e28:	f001 fa80 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4881      	ldr	r0, [pc, #516]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e32:	f001 fa7b 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2101      	movs	r1, #1
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f001 fa75 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2110      	movs	r1, #16
 8000e46:	487c      	ldr	r0, [pc, #496]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e48:	f001 fa70 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	4879      	ldr	r0, [pc, #484]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e52:	f001 fa6b 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	4877      	ldr	r0, [pc, #476]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e5c:	f001 fa66 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000e60:	e1fd      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'F' | 'f':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f001 fa5e 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2102      	movs	r1, #2
 8000e74:	4870      	ldr	r0, [pc, #448]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e76:	f001 fa59 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	486e      	ldr	r0, [pc, #440]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e80:	f001 fa54 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f001 fa4e 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4868      	ldr	r0, [pc, #416]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000e96:	f001 fa49 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2140      	movs	r1, #64	; 0x40
 8000e9e:	4866      	ldr	r0, [pc, #408]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000ea0:	f001 fa44 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	4863      	ldr	r0, [pc, #396]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000eaa:	f001 fa3f 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000eae:	e1d6      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'G' | 'g':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f001 fa37 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	485d      	ldr	r0, [pc, #372]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000ec4:	f001 fa32 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2104      	movs	r1, #4
 8000ecc:	485a      	ldr	r0, [pc, #360]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000ece:	f001 fa2d 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f001 fa27 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	4855      	ldr	r0, [pc, #340]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000ee4:	f001 fa22 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	4852      	ldr	r0, [pc, #328]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000eee:	f001 fa1d 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	4850      	ldr	r0, [pc, #320]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000ef8:	f001 fa18 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000efc:	e1af      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'H' | 'h':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f001 fa10 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4849      	ldr	r0, [pc, #292]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f12:	f001 fa0b 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4847      	ldr	r0, [pc, #284]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f1c:	f001 fa06 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2101      	movs	r1, #1
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f001 fa00 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2110      	movs	r1, #16
 8000f30:	4841      	ldr	r0, [pc, #260]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f32:	f001 f9fb 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2140      	movs	r1, #64	; 0x40
 8000f3a:	483f      	ldr	r0, [pc, #252]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f3c:	f001 f9f6 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	483c      	ldr	r0, [pc, #240]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f46:	f001 f9f1 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000f4a:	e188      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'I' | 'i':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f001 f9e9 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4836      	ldr	r0, [pc, #216]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f60:	f001 f9e4 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2104      	movs	r1, #4
 8000f68:	4833      	ldr	r0, [pc, #204]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f6a:	f001 f9df 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2101      	movs	r1, #1
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f001 f9d9 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	482e      	ldr	r0, [pc, #184]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f80:	f001 f9d4 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2140      	movs	r1, #64	; 0x40
 8000f88:	482b      	ldr	r0, [pc, #172]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f8a:	f001 f9cf 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	4829      	ldr	r0, [pc, #164]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000f94:	f001 f9ca 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000f98:	e161      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'J' | 'j':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f001 f9c2 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2102      	movs	r1, #2
 8000fac:	4822      	ldr	r0, [pc, #136]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000fae:	f001 f9bd 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4820      	ldr	r0, [pc, #128]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000fb8:	f001 f9b8 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f001 f9b2 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	481a      	ldr	r0, [pc, #104]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000fce:	f001 f9ad 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000fd8:	f001 f9a8 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	4815      	ldr	r0, [pc, #84]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000fe2:	f001 f9a3 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8000fe6:	e13a      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'L' | 'l':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f001 f99b 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8000ffc:	f001 f996 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2104      	movs	r1, #4
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8001006:	f001 f991 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800100a:	2201      	movs	r2, #1
 800100c:	2101      	movs	r1, #1
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f001 f98b 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001016:	2201      	movs	r2, #1
 8001018:	2110      	movs	r1, #16
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <app_LetrasADisplay+0x3dc>)
 800101c:	f001 f986 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8001026:	f001 f981 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4802      	ldr	r0, [pc, #8]	; (8001038 <app_LetrasADisplay+0x3dc>)
 8001030:	f001 f97c 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8001034:	e113      	b.n	800125e <app_LetrasADisplay+0x602>
 8001036:	bf00      	nop
 8001038:	48000800 	.word	0x48000800
			case 'N' | 'n':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f001 f971 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2102      	movs	r1, #2
 800104e:	4886      	ldr	r0, [pc, #536]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001050:	f001 f96c 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001054:	2201      	movs	r2, #1
 8001056:	2104      	movs	r1, #4
 8001058:	4883      	ldr	r0, [pc, #524]	; (8001268 <app_LetrasADisplay+0x60c>)
 800105a:	f001 f967 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f001 f961 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800106a:	2201      	movs	r2, #1
 800106c:	2110      	movs	r1, #16
 800106e:	487e      	ldr	r0, [pc, #504]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001070:	f001 f95c 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2140      	movs	r1, #64	; 0x40
 8001078:	487b      	ldr	r0, [pc, #492]	; (8001268 <app_LetrasADisplay+0x60c>)
 800107a:	f001 f957 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	4879      	ldr	r0, [pc, #484]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001084:	f001 f952 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8001088:	e0e9      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'O' | 'o':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f001 f94a 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	4872      	ldr	r0, [pc, #456]	; (8001268 <app_LetrasADisplay+0x60c>)
 800109e:	f001 f945 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2104      	movs	r1, #4
 80010a6:	4870      	ldr	r0, [pc, #448]	; (8001268 <app_LetrasADisplay+0x60c>)
 80010a8:	f001 f940 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2101      	movs	r1, #1
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f001 f93a 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	486a      	ldr	r0, [pc, #424]	; (8001268 <app_LetrasADisplay+0x60c>)
 80010be:	f001 f935 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2140      	movs	r1, #64	; 0x40
 80010c6:	4868      	ldr	r0, [pc, #416]	; (8001268 <app_LetrasADisplay+0x60c>)
 80010c8:	f001 f930 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	4865      	ldr	r0, [pc, #404]	; (8001268 <app_LetrasADisplay+0x60c>)
 80010d2:	f001 f92b 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 80010d6:	e0c2      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'R' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f001 f923 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2102      	movs	r1, #2
 80010ea:	485f      	ldr	r0, [pc, #380]	; (8001268 <app_LetrasADisplay+0x60c>)
 80010ec:	f001 f91e 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2104      	movs	r1, #4
 80010f4:	485c      	ldr	r0, [pc, #368]	; (8001268 <app_LetrasADisplay+0x60c>)
 80010f6:	f001 f919 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2101      	movs	r1, #1
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f001 f913 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	2110      	movs	r1, #16
 800110a:	4857      	ldr	r0, [pc, #348]	; (8001268 <app_LetrasADisplay+0x60c>)
 800110c:	f001 f90e 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4854      	ldr	r0, [pc, #336]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001116:	f001 f909 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4852      	ldr	r0, [pc, #328]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001120:	f001 f904 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8001124:	e09b      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'S' | 's':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f001 f8fc 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	484b      	ldr	r0, [pc, #300]	; (8001268 <app_LetrasADisplay+0x60c>)
 800113a:	f001 f8f7 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 800113e:	2201      	movs	r2, #1
 8001140:	2104      	movs	r1, #4
 8001142:	4849      	ldr	r0, [pc, #292]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001144:	f001 f8f2 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2101      	movs	r1, #1
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f001 f8ec 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2110      	movs	r1, #16
 8001158:	4843      	ldr	r0, [pc, #268]	; (8001268 <app_LetrasADisplay+0x60c>)
 800115a:	f001 f8e7 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4841      	ldr	r0, [pc, #260]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001164:	f001 f8e2 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	483e      	ldr	r0, [pc, #248]	; (8001268 <app_LetrasADisplay+0x60c>)
 800116e:	f001 f8dd 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 8001172:	e074      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'T' | 'r':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f001 f8d5 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2102      	movs	r1, #2
 8001186:	4838      	ldr	r0, [pc, #224]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001188:	f001 f8d0 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2104      	movs	r1, #4
 8001190:	4835      	ldr	r0, [pc, #212]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001192:	f001 f8cb 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	2101      	movs	r1, #1
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f001 f8c5 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2110      	movs	r1, #16
 80011a6:	4830      	ldr	r0, [pc, #192]	; (8001268 <app_LetrasADisplay+0x60c>)
 80011a8:	f001 f8c0 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	482d      	ldr	r0, [pc, #180]	; (8001268 <app_LetrasADisplay+0x60c>)
 80011b2:	f001 f8bb 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	482b      	ldr	r0, [pc, #172]	; (8001268 <app_LetrasADisplay+0x60c>)
 80011bc:	f001 f8b6 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 80011c0:	e04d      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'U' | 'u':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f001 f8ae 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2102      	movs	r1, #2
 80011d4:	4824      	ldr	r0, [pc, #144]	; (8001268 <app_LetrasADisplay+0x60c>)
 80011d6:	f001 f8a9 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2104      	movs	r1, #4
 80011de:	4822      	ldr	r0, [pc, #136]	; (8001268 <app_LetrasADisplay+0x60c>)
 80011e0:	f001 f8a4 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2101      	movs	r1, #1
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f001 f89e 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2110      	movs	r1, #16
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <app_LetrasADisplay+0x60c>)
 80011f6:	f001 f899 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	481a      	ldr	r0, [pc, #104]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001200:	f001 f894 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4817      	ldr	r0, [pc, #92]	; (8001268 <app_LetrasADisplay+0x60c>)
 800120a:	f001 f88f 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 800120e:	e026      	b.n	800125e <app_LetrasADisplay+0x602>
			case 'Y' | 'y':
			{
				HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f001 f887 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	2102      	movs	r1, #2
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001224:	f001 f882 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	2104      	movs	r1, #4
 800122c:	480e      	ldr	r0, [pc, #56]	; (8001268 <app_LetrasADisplay+0x60c>)
 800122e:	f001 f87d 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8001232:	2201      	movs	r2, #1
 8001234:	2101      	movs	r1, #1
 8001236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123a:	f001 f877 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4809      	ldr	r0, [pc, #36]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001244:	f001 f872 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	2140      	movs	r1, #64	; 0x40
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <app_LetrasADisplay+0x60c>)
 800124e:	f001 f86d 	bl	800232c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8001252:	2201      	movs	r2, #1
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <app_LetrasADisplay+0x60c>)
 8001258:	f001 f868 	bl	800232c <HAL_GPIO_WritePin>
			}break;
 800125c:	bf00      	nop
			default:
			{
				/*No hace nada */
			}
		}
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	48000800 	.word	0x48000800

0800126c <app_LecturaEncoder>:

/* Variables gloables */
uint16_t Primero = 0,Segundo = 0,Tercero = 0,Cuarto = 0, Total = 0;

uint8_t app_LecturaEncoder(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	/* Inicia el Timer de bajo consumo */
	HAL_LPTIM_Encoder_Start(&hlptim1, 36);
 8001272:	2124      	movs	r1, #36	; 0x24
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <app_LecturaEncoder+0x2c>)
 8001276:	f001 f95d 	bl	8002534 <HAL_LPTIM_Encoder_Start>

	/* Definicion de las variables */
	volatile uint8_t ValorEncoder = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]

	/* Lectura del valor del encoder */
	ValorEncoder = HAL_LPTIM_ReadCounter(&hlptim1)/4;
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <app_LecturaEncoder+0x2c>)
 8001280:	f001 f9a4 	bl	80025cc <HAL_LPTIM_ReadCounter>
 8001284:	4603      	mov	r3, r0
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	b2db      	uxtb	r3, r3
 800128a:	71fb      	strb	r3, [r7, #7]


	/*Devuelve valor del encoder*/
	return ValorEncoder;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	b2db      	uxtb	r3, r3

	/* Desabilita el Encoder */
		HAL_LPTIM_Encoder_Stop(&hlptim1);
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000a8 	.word	0x200000a8

0800129c <app_SeleccionEncoder>:

void app_SeleccionEncoder(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	if(Aumento > 3)
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <app_SeleccionEncoder+0xec>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d903      	bls.n	80012b0 <app_SeleccionEncoder+0x14>
		  {
			  Aumento = 0;
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <app_SeleccionEncoder+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
				  {

				  }
			  }
		  }
}
 80012ae:	e069      	b.n	8001384 <app_SeleccionEncoder+0xe8>
			  switch(Aumento)
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <app_SeleccionEncoder+0xec>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d865      	bhi.n	8001384 <app_SeleccionEncoder+0xe8>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <app_SeleccionEncoder+0x24>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	080012f5 	.word	0x080012f5
 80012c8:	08001327 	.word	0x08001327
 80012cc:	08001357 	.word	0x08001357
					  Primero = app_LecturaEncoder()*1000;
 80012d0:	f7ff ffcc 	bl	800126c <app_LecturaEncoder>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	0152      	lsls	r2, r2, #5
 80012dc:	1ad2      	subs	r2, r2, r3
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <app_SeleccionEncoder+0xf0>)
 80012e8:	801a      	strh	r2, [r3, #0]
					  Total = Primero;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <app_SeleccionEncoder+0xf0>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <app_SeleccionEncoder+0xf4>)
 80012f0:	801a      	strh	r2, [r3, #0]
				  }break;
 80012f2:	e047      	b.n	8001384 <app_SeleccionEncoder+0xe8>
					  Segundo = app_LecturaEncoder()*100;
 80012f4:	f7ff ffba 	bl	800126c <app_LecturaEncoder>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	0091      	lsls	r1, r2, #2
 8001306:	461a      	mov	r2, r3
 8001308:	460b      	mov	r3, r1
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <app_SeleccionEncoder+0xf8>)
 8001312:	801a      	strh	r2, [r3, #0]
					  Total = Primero +Segundo;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <app_SeleccionEncoder+0xf0>)
 8001316:	881a      	ldrh	r2, [r3, #0]
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <app_SeleccionEncoder+0xf8>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <app_SeleccionEncoder+0xf4>)
 8001322:	801a      	strh	r2, [r3, #0]
				  }break;
 8001324:	e02e      	b.n	8001384 <app_SeleccionEncoder+0xe8>
					  Tercero = app_LecturaEncoder()*10;
 8001326:	f7ff ffa1 	bl	800126c <app_LecturaEncoder>
 800132a:	4603      	mov	r3, r0
 800132c:	b29b      	uxth	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <app_SeleccionEncoder+0xfc>)
 800133a:	801a      	strh	r2, [r3, #0]
					  Total = Primero +Segundo+Tercero;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <app_SeleccionEncoder+0xf0>)
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <app_SeleccionEncoder+0xf8>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4413      	add	r3, r2
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <app_SeleccionEncoder+0xfc>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	4413      	add	r3, r2
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <app_SeleccionEncoder+0xf4>)
 8001352:	801a      	strh	r2, [r3, #0]
				  }break;
 8001354:	e016      	b.n	8001384 <app_SeleccionEncoder+0xe8>
					  Cuarto = app_LecturaEncoder()*1;
 8001356:	f7ff ff89 	bl	800126c <app_LecturaEncoder>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <app_SeleccionEncoder+0x100>)
 8001360:	801a      	strh	r2, [r3, #0]
					  Total = Primero +Segundo+Tercero+Cuarto;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <app_SeleccionEncoder+0xf0>)
 8001364:	881a      	ldrh	r2, [r3, #0]
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <app_SeleccionEncoder+0xf8>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <app_SeleccionEncoder+0xfc>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <app_SeleccionEncoder+0x100>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <app_SeleccionEncoder+0xf4>)
 8001380:	801a      	strh	r2, [r3, #0]
				  }break;
 8001382:	bf00      	nop
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000009a 	.word	0x2000009a
 800138c:	20000090 	.word	0x20000090
 8001390:	20000098 	.word	0x20000098
 8001394:	20000092 	.word	0x20000092
 8001398:	20000094 	.word	0x20000094
 800139c:	20000096 	.word	0x20000096

080013a0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
/* Variables globales */

uint8_t Aumento = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == Boton_encoder_Pin)
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b0:	d10a      	bne.n	80013c8 <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x30>)
 80013b8:	f000 ffd0 	bl	800235c <HAL_GPIO_TogglePin>
		Aumento++;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80013c6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* No realiza ninguna funcion */
	}
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	48000400 	.word	0x48000400
 80013d4:	2000009a 	.word	0x2000009a

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fc8f 	bl	8001cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f81a 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f000 f94a 	bl	800167c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013e8:	f000 f918 	bl	800161c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013ec:	f000 f8c8 	bl	8001580 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 80013f0:	f000 f890 	bl	8001514 <MX_LPTIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//  app_Tacometro();
	  app_SeleccionEncoder();
 80013f4:	f7ff ff52 	bl	800129c <app_SeleccionEncoder>
	  app_Despliegue(Total);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <main+0x38>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff faf9 	bl	80009f4 <app_Despliegue>
	  printf("Total: %d \r \n",Total);
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <main+0x38>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <main+0x3c>)
 800140a:	f003 fbfb 	bl	8004c04 <iprintf>
	  app_SeleccionEncoder();
 800140e:	e7f1      	b.n	80013f4 <main+0x1c>
 8001410:	20000098 	.word	0x20000098
 8001414:	080059e4 	.word	0x080059e4

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a4      	sub	sp, #144	; 0x90
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001422:	2244      	movs	r2, #68	; 0x44
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fbe4 	bl	8004bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2234      	movs	r2, #52	; 0x34
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fbd6 	bl	8004bf4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001448:	f001 fa26 	bl	8002898 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <SystemClock_Config+0xf8>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <SystemClock_Config+0xf8>)
 8001454:	f023 0318 	bic.w	r3, r3, #24
 8001458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800145c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001460:	f001 fa38 	bl	80028d4 <HAL_PWREx_ControlVoltageScaling>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800146a:	f000 f9e7 	bl	800183c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800146e:	2314      	movs	r3, #20
 8001470:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001472:	2301      	movs	r3, #1
 8001474:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001476:	2301      	movs	r3, #1
 8001478:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001486:	2301      	movs	r3, #1
 8001488:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 45;
 8001490:	232d      	movs	r3, #45	; 0x2d
 8001492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800149c:	2304      	movs	r3, #4
 800149e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fa6a 	bl	8002980 <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014b2:	f000 f9c3 	bl	800183c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b6:	230f      	movs	r3, #15
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2303      	movs	r3, #3
 80014bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 feba 	bl	800324c <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014de:	f000 f9ad 	bl	800183c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 80014e2:	f240 2302 	movw	r3, #514	; 0x202
 80014e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 f8ae 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80014fe:	f000 f99d 	bl	800183c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001502:	f002 fa2d 	bl	8003960 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001506:	bf00      	nop
 8001508:	3790      	adds	r7, #144	; 0x90
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_LPTIM1_Init+0x64>)
 800151a:	4a18      	ldr	r2, [pc, #96]	; (800157c <MX_LPTIM1_Init+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <MX_LPTIM1_Init+0x64>)
 800152c:	2204      	movs	r2, #4
 800152e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001532:	2208      	movs	r2, #8
 8001534:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_LPTIM1_Init+0x64>)
 800154c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_LPTIM1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 200;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001560:	22c8      	movs	r2, #200	; 0xc8
 8001562:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_LPTIM1_Init+0x64>)
 8001566:	f000 ff2b 	bl	80023c0 <HAL_LPTIM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_LPTIM1_Init+0x60>
  {
    Error_Handler();
 8001570:	f000 f964 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200000a8 	.word	0x200000a8
 800157c:	40007c00 	.word	0x40007c00

08001580 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_TIM2_Init+0x98>)
 80015a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_TIM2_Init+0x98>)
 80015a8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80015ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_TIM2_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_TIM2_Init+0x98>)
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_TIM2_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_TIM2_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c8:	4813      	ldr	r0, [pc, #76]	; (8001618 <MX_TIM2_Init+0x98>)
 80015ca:	f002 f9d9 	bl	8003980 <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80015d4:	f000 f932 	bl	800183c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM2_Init+0x98>)
 80015e6:	f002 fb15 	bl	8003c14 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80015f0:	f000 f924 	bl	800183c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_TIM2_Init+0x98>)
 8001602:	f002 fcf1 	bl	8003fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800160c:	f000 f916 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200000e4 	.word	0x200000e4

0800161c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <MX_USART2_UART_Init+0x5c>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_USART2_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_USART2_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_USART2_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001660:	f002 fd46 	bl	80040f0 <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800166a:	f000 f8e7 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000138 	.word	0x20000138
 8001678:	40004400 	.word	0x40004400

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <MX_GPIO_Init+0x188>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a5b      	ldr	r2, [pc, #364]	; (8001804 <MX_GPIO_Init+0x188>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <MX_GPIO_Init+0x188>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	4b56      	ldr	r3, [pc, #344]	; (8001804 <MX_GPIO_Init+0x188>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a55      	ldr	r2, [pc, #340]	; (8001804 <MX_GPIO_Init+0x188>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <MX_GPIO_Init+0x188>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <MX_GPIO_Init+0x188>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <MX_GPIO_Init+0x188>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <MX_GPIO_Init+0x188>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <MX_GPIO_Init+0x188>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a49      	ldr	r2, [pc, #292]	; (8001804 <MX_GPIO_Init+0x188>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <MX_GPIO_Init+0x188>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80016f8:	4843      	ldr	r0, [pc, #268]	; (8001808 <MX_GPIO_Init+0x18c>)
 80016fa:	f000 fe17 	bl	800232c <HAL_GPIO_WritePin>
                          |Segmento_G_Pin|Segmento_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 80016fe:	2200      	movs	r2, #0
 8001700:	f241 5131 	movw	r1, #5425	; 0x1531
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f000 fe10 	bl	800232c <HAL_GPIO_WritePin>
                          |Display_0_Pin|Display_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Display_3_Pin|Display_2_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f242 0130 	movw	r1, #8240	; 0x2030
 8001712:	483e      	ldr	r0, [pc, #248]	; (800180c <MX_GPIO_Init+0x190>)
 8001714:	f000 fe0a 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boton_azul_Pin */
  GPIO_InitStruct.Pin = Boton_azul_Pin;
 8001718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <MX_GPIO_Init+0x194>)
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_azul_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4836      	ldr	r0, [pc, #216]	; (8001808 <MX_GPIO_Init+0x18c>)
 800172e:	f000 fc8b 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_B_Pin Segmento_C_Pin Segmento_E_Pin Segmento_F_Pin 
                           Segmento_G_Pin Segmento_H_Pin */
  GPIO_InitStruct.Pin = Segmento_B_Pin|Segmento_C_Pin|Segmento_E_Pin|Segmento_F_Pin 
 8001732:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001736:	617b      	str	r3, [r7, #20]
                          |Segmento_G_Pin|Segmento_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	482f      	ldr	r0, [pc, #188]	; (8001808 <MX_GPIO_Init+0x18c>)
 800174c:	f000 fc7c 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segmento_D_Pin SMPS_EN_Pin SMPS_V1_Pin Segmento_A_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_D_Pin|SMPS_EN_Pin|SMPS_V1_Pin|Segmento_A_Pin 
 8001750:	f241 5331 	movw	r3, #5425	; 0x1531
 8001754:	617b      	str	r3, [r7, #20]
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f000 fc6c 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Display_3_Pin Display_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Display_3_Pin|Display_2_Pin;
 8001770:	f242 0330 	movw	r3, #8240	; 0x2030
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4820      	ldr	r0, [pc, #128]	; (800180c <MX_GPIO_Init+0x190>)
 800178a:	f000 fc5d 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detener_Pin */
  GPIO_InitStruct.Pin = Detener_Pin;
 800178e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detener_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4819      	ldr	r0, [pc, #100]	; (8001808 <MX_GPIO_Init+0x18c>)
 80017a4:	f000 fc50 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_Pin */
  GPIO_InitStruct.Pin = Entrada_Pin;
 80017a8:	2340      	movs	r3, #64	; 0x40
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_GPIO_Init+0x190>)
 80017bc:	f000 fc44 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_encoder_Pin */
  GPIO_InitStruct.Pin = Boton_encoder_Pin;
 80017c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_GPIO_Init+0x198>)
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_encoder_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_GPIO_Init+0x190>)
 80017d6:	f000 fc37 	bl	8002048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2017      	movs	r0, #23
 80017e0:	f000 fbfb 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017e4:	2017      	movs	r0, #23
 80017e6:	f000 fc14 	bl	8002012 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2028      	movs	r0, #40	; 0x28
 80017f0:	f000 fbf3 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017f4:	2028      	movs	r0, #40	; 0x28
 80017f6:	f000 fc0c 	bl	8002012 <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	48000800 	.word	0x48000800
 800180c:	48000400 	.word	0x48000400
 8001810:	10210000 	.word	0x10210000
 8001814:	10110000 	.word	0x10110000

08001818 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001820:	1d39      	adds	r1, r7, #4
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001826:	2201      	movs	r2, #1
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <__io_putchar+0x20>)
 800182a:	f002 fcaf 	bl	800418c <HAL_UART_Transmit>

return ch;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000138 	.word	0x20000138

0800183c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x44>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_MspInit+0x44>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6613      	str	r3, [r2, #96]	; 0x60
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x44>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x44>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x44>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x44>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <HAL_LPTIM_MspInit+0xb4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d143      	bne.n	800193e <HAL_LPTIM_MspInit+0xaa>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c0:	6593      	str	r3, [r2, #88]	; 0x58
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_LPTIM_MspInit+0xb8>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration    
    PC0     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001906:	2301      	movs	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <HAL_LPTIM_MspInit+0xbc>)
 800191a:	f000 fb95 	bl	8002048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	2301      	movs	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800192e:	2301      	movs	r3, #1
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4806      	ldr	r0, [pc, #24]	; (8001954 <HAL_LPTIM_MspInit+0xc0>)
 800193a:	f000 fb85 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40007c00 	.word	0x40007c00
 800194c:	40021000 	.word	0x40021000
 8001950:	48000800 	.word	0x48000800
 8001954:	48000400 	.word	0x48000400

08001958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d113      	bne.n	8001992 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_TIM_Base_MspInit+0x44>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <HAL_TIM_Base_MspInit+0x44>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_TIM_Base_MspInit+0x44>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	201c      	movs	r0, #28
 8001988:	f000 fb27 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800198c:	201c      	movs	r0, #28
 800198e:	f000 fb40 	bl	8002012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_UART_MspInit+0x7c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d128      	bne.n	8001a14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_UART_MspInit+0x80>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	4a16      	ldr	r2, [pc, #88]	; (8001a20 <HAL_UART_MspInit+0x80>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	6593      	str	r3, [r2, #88]	; 0x58
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_UART_MspInit+0x80>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_UART_MspInit+0x80>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_UART_MspInit+0x80>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_UART_MspInit+0x80>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a02:	2307      	movs	r3, #7
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fb1a 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	40021000 	.word	0x40021000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  char mensaje[]= {'e','r','r','o'};
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HardFault_Handler+0x58>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	607b      	str	r3, [r7, #4]
	  app_SeleccionDisplay(0);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7fe ff41 	bl	80008c8 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[0]);
 8001a46:	793b      	ldrb	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f907 	bl	8000c5c <app_LetrasADisplay>
	  HAL_Delay(3);
 8001a4e:	2003      	movs	r0, #3
 8001a50:	f000 f9c6 	bl	8001de0 <HAL_Delay>
	  app_SeleccionDisplay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7fe ff37 	bl	80008c8 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[1]);
 8001a5a:	797b      	ldrb	r3, [r7, #5]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f8fd 	bl	8000c5c <app_LetrasADisplay>
	  HAL_Delay(3);
 8001a62:	2003      	movs	r0, #3
 8001a64:	f000 f9bc 	bl	8001de0 <HAL_Delay>
	  app_SeleccionDisplay(2);
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f7fe ff2d 	bl	80008c8 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[2]);
 8001a6e:	79bb      	ldrb	r3, [r7, #6]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f8f3 	bl	8000c5c <app_LetrasADisplay>
	  HAL_Delay(3);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f9b2 	bl	8001de0 <HAL_Delay>
	  app_SeleccionDisplay(3);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f7fe ff23 	bl	80008c8 <app_SeleccionDisplay>
	  app_LetrasADisplay(mensaje[3]);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f8e9 	bl	8000c5c <app_LetrasADisplay>
  {
 8001a8a:	e7d6      	b.n	8001a3a <HardFault_Handler+0x6>
 8001a8c:	080059f4 	.word	0x080059f4

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f968 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001adc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ae0:	f000 fc56 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TIM2_IRQHandler+0x10>)
 8001aee:	f001 ff72 	bl	80039d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000e4 	.word	0x200000e4

08001afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b04:	f000 fc44 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e00a      	b.n	8001b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1e:	f3af 8000 	nop.w
 8001b22:	4601      	mov	r1, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf0      	blt.n	8001b1e <_read+0x12>
	}

return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e009      	b.n	8001b6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe59 	bl	8001818 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf1      	blt.n	8001b58 <_write+0x12>
	}
	return len;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_close>:

int _close(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	return -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_isatty>:

int _isatty(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x50>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x16>
		heap_end = &end;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <_sbrk+0x50>)
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <_sbrk+0x54>)
 8001bfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <_sbrk+0x50>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <_sbrk+0x50>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	466a      	mov	r2, sp
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d907      	bls.n	8001c22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c12:	f002 ffc5 	bl	8004ba0 <__errno>
 8001c16:	4602      	mov	r2, r0
 8001c18:	230c      	movs	r3, #12
 8001c1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c20:	e006      	b.n	8001c30 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <_sbrk+0x50>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <_sbrk+0x50>)
 8001c2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000009c 	.word	0x2000009c
 8001c3c:	200001c0 	.word	0x200001c0

08001c40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <SystemInit+0x64>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <SystemInit+0x64>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <SystemInit+0x68>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <SystemInit+0x68>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <SystemInit+0x68>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <SystemInit+0x68>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <SystemInit+0x68>)
 8001c6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <SystemInit+0x68>)
 8001c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <SystemInit+0x68>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <SystemInit+0x68>)
 8001c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <SystemInit+0x68>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SystemInit+0x64>)
 8001c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c96:	609a      	str	r2, [r3, #8]
#endif
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00
 8001ca8:	40021000 	.word	0x40021000

08001cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cb0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cb2:	e003      	b.n	8001cbc <LoopCopyDataInit>

08001cb4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cb6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cb8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cba:	3104      	adds	r1, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cc0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cc2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cc4:	d3f6      	bcc.n	8001cb4 <CopyDataInit>
	ldr	r2, =_sbss
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cc8:	e002      	b.n	8001cd0 <LoopFillZerobss>

08001cca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ccc:	f842 3b04 	str.w	r3, [r2], #4

08001cd0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <LoopForever+0x16>)
	cmp	r2, r3
 8001cd2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cd4:	d3f9      	bcc.n	8001cca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cd6:	f7ff ffb3 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f002 ff67 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cde:	f7ff fb7b 	bl	80013d8 <main>

08001ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001ce8:	08005ae8 	.word	0x08005ae8
	ldr	r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cf0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001cf4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001cf8:	200001c0 	.word	0x200001c0

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>

08001cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f95b 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f80e 	bl	8001d30 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	e001      	b.n	8001d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d20:	f7ff fd94 	bl	800184c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d24:	79fb      	ldrb	r3, [r7, #7]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_InitTick+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d022      	beq.n	8001d8a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_InitTick+0x6c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_InitTick+0x68>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f968 	bl	800202e <HAL_SYSTICK_Config>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	d809      	bhi.n	8001d7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d72:	f000 f932 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_InitTick+0x70>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e004      	b.n	8001d8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_IncTick+0x1c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x20>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_IncTick+0x1c>)
 8001db4:	6013      	str	r3, [r2, #0]
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	200001b8 	.word	0x200001b8
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200001b8 	.word	0x200001b8

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df8:	d004      	beq.n	8001e04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_Delay+0x40>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e04:	bf00      	nop
 8001e06:	f7ff ffdf 	bl	8001dc8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d8f7      	bhi.n	8001e06 <HAL_Delay+0x26>
  {
  }
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000008 	.word	0x20000008

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <__NVIC_EnableIRQ+0x38>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff29 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff3e 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff31 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa2 	bl	8001f80 <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e14e      	b.n	80022f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8140 	beq.w	80022f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d00b      	beq.n	8002090 <HAL_GPIO_Init+0x48>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002084:	2b11      	cmp	r3, #17
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b12      	cmp	r3, #18
 800208e:	d130      	bne.n	80020f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020c6:	2201      	movs	r2, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 0201 	and.w	r2, r3, #1
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0xea>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b12      	cmp	r3, #18
 8002130:	d123      	bne.n	800217a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	6939      	ldr	r1, [r7, #16]
 8002176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0203 	and.w	r2, r3, #3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 809a 	beq.w	80022f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021bc:	4b55      	ldr	r3, [pc, #340]	; (8002314 <HAL_GPIO_Init+0x2cc>)
 80021be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c0:	4a54      	ldr	r2, [pc, #336]	; (8002314 <HAL_GPIO_Init+0x2cc>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6613      	str	r3, [r2, #96]	; 0x60
 80021c8:	4b52      	ldr	r3, [pc, #328]	; (8002314 <HAL_GPIO_Init+0x2cc>)
 80021ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021d4:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_Init+0x1e0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a46      	ldr	r2, [pc, #280]	; (800231c <HAL_GPIO_Init+0x2d4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a45      	ldr	r2, [pc, #276]	; (8002320 <HAL_GPIO_Init+0x2d8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x1d8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a44      	ldr	r2, [pc, #272]	; (8002324 <HAL_GPIO_Init+0x2dc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x1d4>
 8002218:	2303      	movs	r3, #3
 800221a:	e006      	b.n	800222a <HAL_GPIO_Init+0x1e2>
 800221c:	2307      	movs	r3, #7
 800221e:	e004      	b.n	800222a <HAL_GPIO_Init+0x1e2>
 8002220:	2302      	movs	r3, #2
 8002222:	e002      	b.n	800222a <HAL_GPIO_Init+0x1e2>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_GPIO_Init+0x1e2>
 8002228:	2300      	movs	r3, #0
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	f002 0203 	and.w	r2, r2, #3
 8002230:	0092      	lsls	r2, r2, #2
 8002232:	4093      	lsls	r3, r2
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800223a:	4937      	ldr	r1, [pc, #220]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002248:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800226c:	4a2e      	ldr	r2, [pc, #184]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002296:	4a24      	ldr	r2, [pc, #144]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ea:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f aea9 	bne.w	8002058 <HAL_GPIO_Init+0x10>
  }
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	48000400 	.word	0x48000400
 8002320:	48000800 	.word	0x48000800
 8002324:	48000c00 	.word	0x48000c00
 8002328:	40010400 	.word	0x40010400

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002348:	e002      	b.n	8002350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002374:	887a      	ldrh	r2, [r7, #2]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800237a:	e002      	b.n	8002382 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237c:	887a      	ldrh	r2, [r7, #2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fff6 	bl	80013a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0a7      	b.n	8002522 <HAL_LPTIM_Init+0x162>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fa54 	bl	8001894 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8002418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8f1 	bl	8002604 <LPTIM_WaitForFlag>
 8002422:	4603      	mov	r3, r0
 8002424:	2b03      	cmp	r3, #3
 8002426:	d101      	bne.n	800242c <HAL_LPTIM_Init+0x6c>
  {
    return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e07a      	b.n	8002522 <HAL_LPTIM_Init+0x162>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f919 	bl	8002664 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8d7 	bl	80025e6 <HAL_LPTIM_GetState>
 8002438:	4603      	mov	r3, r0
 800243a:	2b03      	cmp	r3, #3
 800243c:	d101      	bne.n	8002442 <HAL_LPTIM_Init+0x82>
  {
    return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e06f      	b.n	8002522 <HAL_LPTIM_Init+0x162>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d004      	beq.n	800245c <HAL_LPTIM_Init+0x9c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800245a:	d103      	bne.n	8002464 <HAL_LPTIM_Init+0xa4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 031e 	bic.w	r3, r3, #30
 8002462:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246c:	4293      	cmp	r3, r2
 800246e:	d005      	beq.n	800247c <HAL_LPTIM_Init+0xbc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800247a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_LPTIM_Init+0x16c>)
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800248c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002492:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002498:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800249e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d004      	beq.n	80024b8 <HAL_LPTIM_Init+0xf8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024b6:	d107      	bne.n	80024c8 <HAL_LPTIM_Init+0x108>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00a      	beq.n	80024ea <HAL_LPTIM_Init+0x12a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80024dc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80024e2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_LPTIM_Init+0x170>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d108      	bne.n	800250e <HAL_LPTIM_Init+0x14e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	621a      	str	r2, [r3, #32]
 800250c:	e004      	b.n	8002518 <HAL_LPTIM_Init+0x158>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002516:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	ff19f1f8 	.word	0xff19f1f8
 8002530:	40007c00 	.word	0x40007c00

08002534 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f023 0306 	bic.w	r3, r3, #6
 8002554:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002598:	2110      	movs	r1, #16
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f832 	bl	8002604 <LPTIM_WaitForFlag>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d101      	bne.n	80025aa <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e00c      	b.n	80025c4 <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0204 	orr.w	r2, r2, #4
 80025b8:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025f4:	b2db      	uxtb	r3, r3
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <LPTIM_WaitForFlag+0x58>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <LPTIM_WaitForFlag+0x5c>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0b9b      	lsrs	r3, r3, #14
 800261e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	60bb      	str	r3, [r7, #8]
    do
    {
      count--;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3b01      	subs	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <LPTIM_WaitForFlag+0x34>
      {
        result = HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	73fb      	strb	r3, [r7, #15]
      }
    }
    while((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	4013      	ands	r3, r2
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d002      	beq.n	800264e <LPTIM_WaitForFlag+0x4a>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ec      	bne.n	8002628 <LPTIM_WaitForFlag+0x24>

    return result;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	20000000 	.word	0x20000000
 8002660:	d1b71759 	.word	0xd1b71759

08002664 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a85      	ldr	r2, [pc, #532]	; (800288c <LPTIM_Disable+0x228>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <LPTIM_Disable+0x20>
 800267c:	4a84      	ldr	r2, [pc, #528]	; (8002890 <LPTIM_Disable+0x22c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <LPTIM_Disable+0x2e>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8002682:	e00d      	b.n	80026a0 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002684:	4b83      	ldr	r3, [pc, #524]	; (8002894 <LPTIM_Disable+0x230>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8002690:	e006      	b.n	80026a0 <LPTIM_Disable+0x3c>
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002692:	4b80      	ldr	r3, [pc, #512]	; (8002894 <LPTIM_Disable+0x230>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 800269e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	613b      	str	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	60fb      	str	r3, [r7, #12]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6d      	ldr	r2, [pc, #436]	; (800288c <LPTIM_Disable+0x228>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <LPTIM_Disable+0x7e>
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <LPTIM_Disable+0x22c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00d      	beq.n	80026fc <LPTIM_Disable+0x98>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 80026e0:	e019      	b.n	8002716 <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 80026e2:	4b6c      	ldr	r3, [pc, #432]	; (8002894 <LPTIM_Disable+0x230>)
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	4a6b      	ldr	r2, [pc, #428]	; (8002894 <LPTIM_Disable+0x230>)
 80026e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ec:	6393      	str	r3, [r2, #56]	; 0x38
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 80026ee:	4b69      	ldr	r3, [pc, #420]	; (8002894 <LPTIM_Disable+0x230>)
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	4a68      	ldr	r2, [pc, #416]	; (8002894 <LPTIM_Disable+0x230>)
 80026f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f8:	6393      	str	r3, [r2, #56]	; 0x38
       break;
 80026fa:	e00c      	b.n	8002716 <LPTIM_Disable+0xb2>
       __HAL_RCC_LPTIM2_FORCE_RESET();
 80026fc:	4b65      	ldr	r3, [pc, #404]	; (8002894 <LPTIM_Disable+0x230>)
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	4a64      	ldr	r2, [pc, #400]	; (8002894 <LPTIM_Disable+0x230>)
 8002702:	f043 0320 	orr.w	r3, r3, #32
 8002706:	63d3      	str	r3, [r2, #60]	; 0x3c
       __HAL_RCC_LPTIM2_RELEASE_RESET();
 8002708:	4b62      	ldr	r3, [pc, #392]	; (8002894 <LPTIM_Disable+0x230>)
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	4a61      	ldr	r2, [pc, #388]	; (8002894 <LPTIM_Disable+0x230>)
 800270e:	f023 0320 	bic.w	r3, r3, #32
 8002712:	63d3      	str	r3, [r2, #60]	; 0x3c
       break;
 8002714:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <LPTIM_Disable+0xc6>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <LPTIM_Disable+0xc6>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8096 	beq.w	8002856 <LPTIM_Disable+0x1f2>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a57      	ldr	r2, [pc, #348]	; (800288c <LPTIM_Disable+0x228>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <LPTIM_Disable+0xd8>
 8002734:	4a56      	ldr	r2, [pc, #344]	; (8002890 <LPTIM_Disable+0x22c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d009      	beq.n	800274e <LPTIM_Disable+0xea>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
         break;
#endif /* LPTIM2 */
       default:
         break;
 800273a:	e011      	b.n	8002760 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <LPTIM_Disable+0x230>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a54      	ldr	r2, [pc, #336]	; (8002894 <LPTIM_Disable+0x230>)
 8002744:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 800274c:	e008      	b.n	8002760 <LPTIM_Disable+0xfc>
         __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800274e:	4b51      	ldr	r3, [pc, #324]	; (8002894 <LPTIM_Disable+0x230>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <LPTIM_Disable+0x230>)
 8002756:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800275a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
         break;
 800275e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01a      	beq.n	800279c <LPTIM_Disable+0x138>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800277e:	2108      	movs	r1, #8
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff3f 	bl	8002604 <LPTIM_WaitForFlag>
 8002786:	4603      	mov	r3, r0
 8002788:	2b03      	cmp	r3, #3
 800278a:	d103      	bne.n	8002794 <LPTIM_Disable+0x130>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2208      	movs	r2, #8
 800279a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01a      	beq.n	80027d8 <LPTIM_Disable+0x174>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80027ba:	2110      	movs	r1, #16
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff21 	bl	8002604 <LPTIM_WaitForFlag>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d103      	bne.n	80027d0 <LPTIM_Disable+0x16c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2203      	movs	r2, #3
 80027cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2210      	movs	r2, #16
 80027d6:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01c      	beq.n	8002818 <LPTIM_Disable+0x1b4>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80027f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ff02 	bl	8002604 <LPTIM_WaitForFlag>
 8002800:	4603      	mov	r3, r0
 8002802:	2b03      	cmp	r3, #3
 8002804:	d103      	bne.n	800280e <LPTIM_Disable+0x1aa>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2203      	movs	r2, #3
 800280a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002816:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <LPTIM_Disable+0x228>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <LPTIM_Disable+0x1c6>
 8002822:	4a1b      	ldr	r2, [pc, #108]	; (8002890 <LPTIM_Disable+0x22c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <LPTIM_Disable+0x1dc>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8002828:	e016      	b.n	8002858 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <LPTIM_Disable+0x230>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002834:	4917      	ldr	r1, [pc, #92]	; (8002894 <LPTIM_Disable+0x230>)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 800283e:	e00b      	b.n	8002858 <LPTIM_Disable+0x1f4>
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <LPTIM_Disable+0x230>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800284a:	4912      	ldr	r1, [pc, #72]	; (8002894 <LPTIM_Disable+0x230>)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
         break;
 8002854:	e000      	b.n	8002858 <LPTIM_Disable+0x1f4>
    }
  }
 8002856:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a3a      	ldr	r2, [r7, #32]
 800286e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8002880:	b662      	cpsie	i

  __enable_irq();
}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	; 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40007c00 	.word	0x40007c00
 8002890:	40009400 	.word	0x40009400
 8002894:	40021000 	.word	0x40021000

08002898 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40007000 	.word	0x40007000

080028b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e2:	d130      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d038      	beq.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028fa:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002900:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2232      	movs	r2, #50	; 0x32
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0c9b      	lsrs	r3, r3, #18
 8002914:	3301      	adds	r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002918:	e002      	b.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3b01      	subs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292c:	d102      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x60>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f2      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002940:	d110      	bne.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00f      	b.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d007      	beq.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002962:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40007000 	.word	0x40007000
 8002978:	20000000 	.word	0x20000000
 800297c:	431bde83 	.word	0x431bde83

08002980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f000 bc56 	b.w	8003240 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002994:	4ba1      	ldr	r3, [pc, #644]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299e:	4b9f      	ldr	r3, [pc, #636]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80e6 	beq.w	8002b82 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_RCC_OscConfig+0x4c>
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	f040 808d 	bne.w	8002ade <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 8089 	bne.w	8002ade <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029cc:	4b93      	ldr	r3, [pc, #588]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_RCC_OscConfig+0x66>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f000 bc2d 	b.w	8003240 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ea:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_RCC_OscConfig+0x80>
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_OscConfig+0x8c>
 8002a00:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d224      	bcs.n	8002a5a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fdbd 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f000 bc0d 	b.w	8003240 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a26:	4b7d      	ldr	r3, [pc, #500]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7c      	ldr	r2, [pc, #496]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b7a      	ldr	r3, [pc, #488]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	4977      	ldr	r1, [pc, #476]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a44:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	4972      	ldr	r1, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
 8002a58:	e025      	b.n	8002aa6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6f      	ldr	r2, [pc, #444]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a60:	f043 0308 	orr.w	r3, r3, #8
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	496a      	ldr	r1, [pc, #424]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a78:	4b68      	ldr	r3, [pc, #416]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	4965      	ldr	r1, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd7c 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e3cc      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa6:	f000 fcb3 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8002aaa:	4601      	mov	r1, r0
 8002aac:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a5a      	ldr	r2, [pc, #360]	; (8002c20 <HAL_RCC_OscConfig+0x2a0>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac2:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x2a4>)
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ac6:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <HAL_RCC_OscConfig+0x2a8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f930 	bl	8001d30 <HAL_InitTick>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d052      	beq.n	8002b80 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	e3b0      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d032      	beq.n	8002b4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ae6:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a4c      	ldr	r2, [pc, #304]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002af2:	f7ff f969 	bl	8001dc8 <HAL_GetTick>
 8002af6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002afa:	f7ff f965 	bl	8001dc8 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e399      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b18:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a3f      	ldr	r2, [pc, #252]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	493a      	ldr	r1, [pc, #232]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	4935      	ldr	r1, [pc, #212]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
 8002b4a:	e01a      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b4c:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a32      	ldr	r2, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b58:	f7ff f936 	bl	8001dc8 <HAL_GetTick>
 8002b5c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b60:	f7ff f932 	bl	8001dc8 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e366      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1e0>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d073      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x220>
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d10e      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d063      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2f4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d15f      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e343      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x250>
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0x28c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x274>
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x28c>
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7ff f8d8 	bl	8001dc8 <HAL_GetTick>
 8002c18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	e010      	b.n	8002c3e <HAL_RCC_OscConfig+0x2be>
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	080059f8 	.word	0x080059f8
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7ff f8cc 	bl	8001dc8 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e300      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3e:	4ba0      	ldr	r3, [pc, #640]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2ac>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f8bc 	bl	8001dc8 <HAL_GetTick>
 8002c50:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7ff f8b8 	bl	8001dc8 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e2ec      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c66:	4b96      	ldr	r3, [pc, #600]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2d4>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d060      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_OscConfig+0x314>
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d119      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d116      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c94:	4b8a      	ldr	r3, [pc, #552]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_OscConfig+0x32c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e2c9      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b84      	ldr	r3, [pc, #528]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	4981      	ldr	r1, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc0:	e040      	b.n	8002d44 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d023      	beq.n	8002d12 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7ff f877 	bl	8001dc8 <HAL_GetTick>
 8002cda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cde:	f7ff f873 	bl	8001dc8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e2a7      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf0:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	496d      	ldr	r1, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
 8002d10:	e018      	b.n	8002d44 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d12:	4b6b      	ldr	r3, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7ff f853 	bl	8001dc8 <HAL_GetTick>
 8002d22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7ff f84f 	bl	8001dc8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e283      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d38:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d07f      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05f      	beq.n	8002e18 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d037      	beq.n	8002dde <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e25c      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d90:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	4a4a      	ldr	r2, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da0:	f7ff f812 	bl	8001dc8 <HAL_GetTick>
 8002da4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7ff f80e 	bl	8001dc8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b11      	cmp	r3, #17
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e242      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ef      	bne.n	8002da8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dce:	f023 0210 	bic.w	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	493a      	ldr	r1, [pc, #232]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	4a36      	ldr	r2, [pc, #216]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe ffeb 	bl	8001dc8 <HAL_GetTick>
 8002df2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fe ffe7 	bl	8001dc8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b11      	cmp	r3, #17
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e21b      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ef      	beq.n	8002df6 <HAL_RCC_OscConfig+0x476>
 8002e16:	e01b      	b.n	8002e50 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e18:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fe ffce 	bl	8001dc8 <HAL_GetTick>
 8002e2c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fe ffca 	bl	8001dc8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b11      	cmp	r3, #17
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1fe      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ef      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80c1 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10e      	bne.n	8002e8e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_OscConfig+0x540>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_OscConfig+0x544>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_OscConfig+0x544>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_RCC_OscConfig+0x544>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe ff8f 	bl	8001dc8 <HAL_GetTick>
 8002eaa:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eac:	e00c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7fe ff8b 	bl	8001dc8 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d905      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1bf      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	4bb1      	ldr	r3, [pc, #708]	; (8003190 <HAL_RCC_OscConfig+0x810>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ec      	beq.n	8002eae <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d02c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002ee0:	4bac      	ldr	r3, [pc, #688]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	49a8      	ldr	r1, [pc, #672]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f06:	4ba3      	ldr	r3, [pc, #652]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	4aa1      	ldr	r2, [pc, #644]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f16:	4b9f      	ldr	r3, [pc, #636]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	4a9d      	ldr	r2, [pc, #628]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f26:	e018      	b.n	8002f5a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f28:	4b9a      	ldr	r3, [pc, #616]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	4a99      	ldr	r2, [pc, #612]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f38:	e00f      	b.n	8002f5a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f3a:	4b96      	ldr	r3, [pc, #600]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	4a94      	ldr	r2, [pc, #592]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f4a:	4b92      	ldr	r3, [pc, #584]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	4a90      	ldr	r2, [pc, #576]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe ff31 	bl	8001dc8 <HAL_GetTick>
 8002f66:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe ff2d 	bl	8001dc8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e15f      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f80:	4b84      	ldr	r3, [pc, #528]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ed      	beq.n	8002f6a <HAL_RCC_OscConfig+0x5ea>
 8002f8e:	e01d      	b.n	8002fcc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe ff1a 	bl	8001dc8 <HAL_GetTick>
 8002f94:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe ff16 	bl	8001dc8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e148      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fae:	4b79      	ldr	r3, [pc, #484]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ed      	bne.n	8002f98 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002fbc:	4b75      	ldr	r3, [pc, #468]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	4a74      	ldr	r2, [pc, #464]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	4b6f      	ldr	r3, [pc, #444]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	4a6e      	ldr	r2, [pc, #440]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03c      	beq.n	8003066 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01c      	beq.n	800302e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ff4:	4b67      	ldr	r3, [pc, #412]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffa:	4a66      	ldr	r2, [pc, #408]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe fee0 	bl	8001dc8 <HAL_GetTick>
 8003008:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800300c:	f7fe fedc 	bl	8001dc8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e110      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <HAL_RCC_OscConfig+0x68c>
 800302c:	e01b      	b.n	8003066 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800302e:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003034:	4a57      	ldr	r2, [pc, #348]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe fec3 	bl	8001dc8 <HAL_GetTick>
 8003042:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003046:	f7fe febf 	bl	8001dc8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0f3      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003058:	4b4e      	ldr	r3, [pc, #312]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 800305a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ef      	bne.n	8003046 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80e7 	beq.w	800323e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	2b02      	cmp	r3, #2
 8003076:	f040 80b7 	bne.w	80031e8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800307a:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0203 	and.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	429a      	cmp	r2, r3
 800308c:	d124      	bne.n	80030d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	3b01      	subs	r3, #1
 800309a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d11b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d113      	bne.n	80030d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d109      	bne.n	80030d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	3b01      	subs	r3, #1
 80030d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d061      	beq.n	800319c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d056      	beq.n	800318c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ea:	f7fe fe6d 	bl	8001dc8 <HAL_GetTick>
 80030ee:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fe69 	bl	8001dc8 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e09d      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003104:	4b23      	ldr	r3, [pc, #140]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_OscConfig+0x818>)
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003120:	3a01      	subs	r2, #1
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800312a:	0212      	lsls	r2, r2, #8
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003132:	0852      	lsrs	r2, r2, #1
 8003134:	3a01      	subs	r2, #1
 8003136:	0552      	lsls	r2, r2, #21
 8003138:	4311      	orrs	r1, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800313e:	0852      	lsrs	r2, r2, #1
 8003140:	3a01      	subs	r2, #1
 8003142:	0652      	lsls	r2, r2, #25
 8003144:	430a      	orrs	r2, r1
 8003146:	4913      	ldr	r1, [pc, #76]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003148:	4313      	orrs	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003164:	f7fe fe30 	bl	8001dc8 <HAL_GetTick>
 8003168:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fe2c 	bl	8001dc8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e060      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_OscConfig+0x814>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318a:	e058      	b.n	800323e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e057      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
 8003190:	40007000 	.word	0x40007000
 8003194:	40021000 	.word	0x40021000
 8003198:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d14a      	bne.n	800323e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c0:	f7fe fe02 	bl	8001dc8 <HAL_GetTick>
 80031c4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe fdfe 	bl	8001dc8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e032      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x848>
 80031e6:	e02a      	b.n	800323e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d025      	beq.n	800323a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 800320c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003210:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe fdd9 	bl	8001dc8 <HAL_GetTick>
 8003216:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe fdd5 	bl	8001dc8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e009      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_RCC_OscConfig+0x8c8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x89a>
 8003238:	e001      	b.n	800323e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0c8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b66      	ldr	r3, [pc, #408]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	4961      	ldr	r1, [pc, #388]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b0      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04c      	beq.n	8003336 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a4:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d121      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e09e      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d115      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e092      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e086      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e07e      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f4:	4b42      	ldr	r3, [pc, #264]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 0203 	bic.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	493f      	ldr	r1, [pc, #252]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003306:	f7fe fd5f 	bl	8001dc8 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330c:	e00a      	b.n	8003324 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330e:	f7fe fd5b 	bl	8001dc8 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e066      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 020c 	and.w	r2, r3, #12
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	429a      	cmp	r2, r3
 8003334:	d1eb      	bne.n	800330e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003342:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	492c      	ldr	r1, [pc, #176]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d210      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 0207 	bic.w	r2, r3, #7
 800336a:	4924      	ldr	r1, [pc, #144]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e036      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4918      	ldr	r1, [pc, #96]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4910      	ldr	r1, [pc, #64]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c2:	f000 f825 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	fa21 f303 	lsr.w	r3, r1, r3
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fca2 	bl	8001d30 <HAL_InitTick>
 80033ec:	4603      	mov	r3, r0
 80033ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f0:	7afb      	ldrb	r3, [r7, #11]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40022000 	.word	0x40022000
 8003400:	40021000 	.word	0x40021000
 8003404:	080059f8 	.word	0x080059f8
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b3a      	ldr	r3, [pc, #232]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d121      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d11e      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003444:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003450:	4b30      	ldr	r3, [pc, #192]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e005      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_GetSysClockFreq+0x10c>)
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e004      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d101      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003494:	4b22      	ldr	r3, [pc, #136]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 8003496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d133      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0xaa>
 80034b2:	e005      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b6:	617b      	str	r3, [r7, #20]
      break;
 80034b8:	e005      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034ba:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 80034bc:	617b      	str	r3, [r7, #20]
      break;
 80034be:	e002      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	617b      	str	r3, [r7, #20]
      break;
 80034c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	3301      	adds	r3, #1
 80034d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	fb02 f203 	mul.w	r2, r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_GetSysClockFreq+0x104>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0e5b      	lsrs	r3, r3, #25
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	3301      	adds	r3, #1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003506:	69bb      	ldr	r3, [r7, #24]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3724      	adds	r7, #36	; 0x24
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40021000 	.word	0x40021000
 8003518:	08005a10 	.word	0x08005a10
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000000 	.word	0x20000000

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4601      	mov	r1, r0
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	08005a08 	.word	0x08005a08

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800356c:	f7ff ffda 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003570:	4601      	mov	r1, r0
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0adb      	lsrs	r3, r3, #11
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	08005a08 	.word	0x08005a08

08003594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035ac:	f7ff f984 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80035b0:	6178      	str	r0, [r7, #20]
 80035b2:	e014      	b.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	4a24      	ldr	r2, [pc, #144]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6593      	str	r3, [r2, #88]	; 0x58
 80035c0:	4b22      	ldr	r3, [pc, #136]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035cc:	f7ff f974 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80035d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e4:	d10b      	bne.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d919      	bls.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2ba0      	cmp	r3, #160	; 0xa0
 80035f0:	d902      	bls.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f2:	2302      	movs	r3, #2
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e013      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f8:	2301      	movs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e010      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d902      	bls.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003604:	2303      	movs	r3, #3
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e00a      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d102      	bne.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003610:	2302      	movs	r3, #2
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e004      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b70      	cmp	r3, #112	; 0x70
 800361a:	d101      	bne.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800361c:	2301      	movs	r3, #1
 800361e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 0207 	bic.w	r2, r3, #7
 8003628:	4909      	ldr	r1, [pc, #36]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	40022000 	.word	0x40022000

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800365c:	2300      	movs	r3, #0
 800365e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003660:	2300      	movs	r3, #0
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 809e 	beq.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003676:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a39      	ldr	r2, [pc, #228]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b4:	f7fe fb88 	bl	8001dc8 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fe fb84 	bl	8001dc8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	74fb      	strb	r3, [r7, #19]
        break;
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d15a      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01e      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d019      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372a:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d016      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fb44 	bl	8001dc8 <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003742:	e00b      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fe fb40 	bl	8001dc8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d902      	bls.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	74fb      	strb	r3, [r7, #19]
            break;
 800375a:	e006      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0ec      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4904      	ldr	r1, [pc, #16]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003786:	e009      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
 800378c:	e006      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800379c:	7c7b      	ldrb	r3, [r7, #17]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4b6e      	ldr	r3, [pc, #440]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a6d      	ldr	r2, [pc, #436]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ba:	4b68      	ldr	r3, [pc, #416]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f023 0203 	bic.w	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4964      	ldr	r1, [pc, #400]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037dc:	4b5f      	ldr	r3, [pc, #380]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 020c 	bic.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	495c      	ldr	r1, [pc, #368]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037fe:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4953      	ldr	r1, [pc, #332]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003820:	4b4e      	ldr	r3, [pc, #312]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	494b      	ldr	r1, [pc, #300]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b46      	ldr	r3, [pc, #280]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4942      	ldr	r1, [pc, #264]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003864:	4b3d      	ldr	r3, [pc, #244]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	493a      	ldr	r1, [pc, #232]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003886:	4b35      	ldr	r3, [pc, #212]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4931      	ldr	r1, [pc, #196]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	4929      	ldr	r1, [pc, #164]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	4920      	ldr	r1, [pc, #128]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	4918      	ldr	r1, [pc, #96]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a12      	ldr	r2, [pc, #72]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003916:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003924:	4b0d      	ldr	r3, [pc, #52]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	490a      	ldr	r1, [pc, #40]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003942:	d105      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a04      	ldr	r2, [pc, #16]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800394a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800394e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003950:	7cbb      	ldrb	r3, [r7, #18]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a04      	ldr	r2, [pc, #16]	; (800397c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e01d      	b.n	80039ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd ffd6 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fa14 	bl	8003dec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d122      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d11b      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0202 	mvn.w	r2, #2
 8003a02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f9c8 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003a1e:	e005      	b.n	8003a2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f9ba 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9cb 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d122      	bne.n	8003a86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d11b      	bne.n	8003a86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0204 	mvn.w	r2, #4
 8003a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f99e 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003a72:	e005      	b.n	8003a80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f990 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9a1 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d122      	bne.n	8003ada <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11b      	bne.n	8003ada <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0208 	mvn.w	r2, #8
 8003aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f974 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003ac6:	e005      	b.n	8003ad4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f966 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f977 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d122      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d11b      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f06f 0210 	mvn.w	r2, #16
 8003afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2208      	movs	r2, #8
 8003b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f94a 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003b1a:	e005      	b.n	8003b28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f93c 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f94d 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10e      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0201 	mvn.w	r2, #1
 8003b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f916 	bl	8003d86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d10e      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d107      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 faa1 	bl	80040c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d10e      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d107      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa94 	bl	80040dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d10e      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d107      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8fb 	bl	8003dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0220 	mvn.w	r2, #32
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa54 	bl	80040b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIM_ConfigClockSource+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0a8      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d067      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x124>
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d80b      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x70>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d073      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x144>
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d802      	bhi.n	8003c7a <HAL_TIM_ConfigClockSource+0x66>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d06f      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c78:	e078      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d06c      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x144>
 8003c7e:	2b30      	cmp	r3, #48	; 0x30
 8003c80:	d06a      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003c82:	e073      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c84:	2b70      	cmp	r3, #112	; 0x70
 8003c86:	d00d      	beq.n	8003ca4 <HAL_TIM_ConfigClockSource+0x90>
 8003c88:	2b70      	cmp	r3, #112	; 0x70
 8003c8a:	d804      	bhi.n	8003c96 <HAL_TIM_ConfigClockSource+0x82>
 8003c8c:	2b50      	cmp	r3, #80	; 0x50
 8003c8e:	d033      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0xe4>
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d041      	beq.n	8003d18 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003c94:	e06a      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	d066      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x156>
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca0:	d017      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003ca2:	e063      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f000 f978 	bl	8003fa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	609a      	str	r2, [r3, #8]
      break;
 8003cd0:	e04c      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6899      	ldr	r1, [r3, #8]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f000 f961 	bl	8003fa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf4:	609a      	str	r2, [r3, #8]
      break;
 8003cf6:	e039      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f000 f8d5 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2150      	movs	r1, #80	; 0x50
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f92e 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003d16:	e029      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	461a      	mov	r2, r3
 8003d26:	f000 f8f4 	bl	8003f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2160      	movs	r1, #96	; 0x60
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f91e 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003d36:	e019      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 f8b5 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f90e 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e009      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 f905 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003d68:	e000      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <TIM_Base_SetConfig+0xbc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_Base_SetConfig+0x20>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d108      	bne.n	8003e1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <TIM_Base_SetConfig+0xbc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <TIM_Base_SetConfig+0x52>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d007      	beq.n	8003e3e <TIM_Base_SetConfig+0x52>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <TIM_Base_SetConfig+0xc0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_Base_SetConfig+0x52>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <TIM_Base_SetConfig+0xc4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d108      	bne.n	8003e50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <TIM_Base_SetConfig+0xbc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_Base_SetConfig+0xa0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0b      	ldr	r2, [pc, #44]	; (8003eac <TIM_Base_SetConfig+0xc0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_Base_SetConfig+0xa0>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <TIM_Base_SetConfig+0xc4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d103      	bne.n	8003e94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	615a      	str	r2, [r3, #20]
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400

08003eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 030a 	bic.w	r3, r3, #10
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f043 0307 	orr.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e04f      	b.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a21      	ldr	r2, [pc, #132]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d108      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004030:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a14      	ldr	r2, [pc, #80]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d004      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40014000 	.word	0x40014000

080040b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e040      	b.n	8004184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd fc44 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8c0 	bl	80042b4 <UART_SetConfig>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e022      	b.n	8004184 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fbc8 	bl	80048dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fc4f 	bl	8004a20 <UART_CheckIdleState>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	f040 8081 	bne.w	80042a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_UART_Transmit+0x26>
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e079      	b.n	80042aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Transmit+0x38>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e072      	b.n	80042aa <HAL_UART_Transmit+0x11e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2221      	movs	r2, #33	; 0x21
 80041d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041d8:	f7fd fdf6 	bl	8001dc8 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	d108      	bne.n	800420a <HAL_UART_Transmit+0x7e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	e003      	b.n	8004212 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800421a:	e02d      	b.n	8004278 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2200      	movs	r2, #0
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fc3f 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e039      	b.n	80042aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004248:	b292      	uxth	r2, r2
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	3302      	adds	r3, #2
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e008      	b.n	8004266 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	b292      	uxth	r2, r2
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1cb      	bne.n	800421c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fc0b 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e005      	b.n	80042aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042b8:	b08a      	sub	sp, #40	; 0x28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4313      	orrs	r3, r2
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4bbc      	ldr	r3, [pc, #752]	; (80045dc <UART_SetConfig+0x328>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042f2:	430b      	orrs	r3, r1
 80042f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4ab2      	ldr	r2, [pc, #712]	; (80045e0 <UART_SetConfig+0x32c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	4313      	orrs	r3, r2
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4aa9      	ldr	r2, [pc, #676]	; (80045e4 <UART_SetConfig+0x330>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d126      	bne.n	8004392 <UART_SetConfig+0xde>
 8004344:	4ba8      	ldr	r3, [pc, #672]	; (80045e8 <UART_SetConfig+0x334>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b03      	cmp	r3, #3
 8004350:	d81a      	bhi.n	8004388 <UART_SetConfig+0xd4>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <UART_SetConfig+0xa4>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	08004379 	.word	0x08004379
 8004360:	08004371 	.word	0x08004371
 8004364:	08004381 	.word	0x08004381
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e0ab      	b.n	80044c8 <UART_SetConfig+0x214>
 8004370:	2302      	movs	r3, #2
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e0a7      	b.n	80044c8 <UART_SetConfig+0x214>
 8004378:	2304      	movs	r3, #4
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e0a3      	b.n	80044c8 <UART_SetConfig+0x214>
 8004380:	2308      	movs	r3, #8
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e09f      	b.n	80044c8 <UART_SetConfig+0x214>
 8004388:	2310      	movs	r3, #16
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	bf00      	nop
 8004390:	e09a      	b.n	80044c8 <UART_SetConfig+0x214>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a95      	ldr	r2, [pc, #596]	; (80045ec <UART_SetConfig+0x338>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d138      	bne.n	800440e <UART_SetConfig+0x15a>
 800439c:	4b92      	ldr	r3, [pc, #584]	; (80045e8 <UART_SetConfig+0x334>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d82c      	bhi.n	8004404 <UART_SetConfig+0x150>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0xfc>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	08004405 	.word	0x08004405
 80043b8:	08004405 	.word	0x08004405
 80043bc:	08004405 	.word	0x08004405
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	08004405 	.word	0x08004405
 80043c8:	08004405 	.word	0x08004405
 80043cc:	08004405 	.word	0x08004405
 80043d0:	080043ed 	.word	0x080043ed
 80043d4:	08004405 	.word	0x08004405
 80043d8:	08004405 	.word	0x08004405
 80043dc:	08004405 	.word	0x08004405
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ea:	e06d      	b.n	80044c8 <UART_SetConfig+0x214>
 80043ec:	2302      	movs	r3, #2
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e069      	b.n	80044c8 <UART_SetConfig+0x214>
 80043f4:	2304      	movs	r3, #4
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e065      	b.n	80044c8 <UART_SetConfig+0x214>
 80043fc:	2308      	movs	r3, #8
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e061      	b.n	80044c8 <UART_SetConfig+0x214>
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	bf00      	nop
 800440c:	e05c      	b.n	80044c8 <UART_SetConfig+0x214>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a77      	ldr	r2, [pc, #476]	; (80045f0 <UART_SetConfig+0x33c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d125      	bne.n	8004464 <UART_SetConfig+0x1b0>
 8004418:	4b73      	ldr	r3, [pc, #460]	; (80045e8 <UART_SetConfig+0x334>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004422:	2b10      	cmp	r3, #16
 8004424:	d011      	beq.n	800444a <UART_SetConfig+0x196>
 8004426:	2b10      	cmp	r3, #16
 8004428:	d802      	bhi.n	8004430 <UART_SetConfig+0x17c>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <UART_SetConfig+0x186>
 800442e:	e014      	b.n	800445a <UART_SetConfig+0x1a6>
 8004430:	2b20      	cmp	r3, #32
 8004432:	d006      	beq.n	8004442 <UART_SetConfig+0x18e>
 8004434:	2b30      	cmp	r3, #48	; 0x30
 8004436:	d00c      	beq.n	8004452 <UART_SetConfig+0x19e>
 8004438:	e00f      	b.n	800445a <UART_SetConfig+0x1a6>
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004440:	e042      	b.n	80044c8 <UART_SetConfig+0x214>
 8004442:	2302      	movs	r3, #2
 8004444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004448:	e03e      	b.n	80044c8 <UART_SetConfig+0x214>
 800444a:	2304      	movs	r3, #4
 800444c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004450:	e03a      	b.n	80044c8 <UART_SetConfig+0x214>
 8004452:	2308      	movs	r3, #8
 8004454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004458:	e036      	b.n	80044c8 <UART_SetConfig+0x214>
 800445a:	2310      	movs	r3, #16
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004460:	bf00      	nop
 8004462:	e031      	b.n	80044c8 <UART_SetConfig+0x214>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5d      	ldr	r2, [pc, #372]	; (80045e0 <UART_SetConfig+0x32c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d129      	bne.n	80044c2 <UART_SetConfig+0x20e>
 800446e:	4b5e      	ldr	r3, [pc, #376]	; (80045e8 <UART_SetConfig+0x334>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d014      	beq.n	80044a8 <UART_SetConfig+0x1f4>
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d802      	bhi.n	800448a <UART_SetConfig+0x1d6>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <UART_SetConfig+0x1e4>
 8004488:	e016      	b.n	80044b8 <UART_SetConfig+0x204>
 800448a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448e:	d007      	beq.n	80044a0 <UART_SetConfig+0x1ec>
 8004490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004494:	d00c      	beq.n	80044b0 <UART_SetConfig+0x1fc>
 8004496:	e00f      	b.n	80044b8 <UART_SetConfig+0x204>
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e013      	b.n	80044c8 <UART_SetConfig+0x214>
 80044a0:	2302      	movs	r3, #2
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e00f      	b.n	80044c8 <UART_SetConfig+0x214>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e00b      	b.n	80044c8 <UART_SetConfig+0x214>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e007      	b.n	80044c8 <UART_SetConfig+0x214>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	bf00      	nop
 80044c0:	e002      	b.n	80044c8 <UART_SetConfig+0x214>
 80044c2:	2310      	movs	r3, #16
 80044c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a44      	ldr	r2, [pc, #272]	; (80045e0 <UART_SetConfig+0x32c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	f040 80fb 	bne.w	80046ca <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d824      	bhi.n	8004526 <UART_SetConfig+0x272>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x230>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004509 	.word	0x08004509
 80044e8:	08004527 	.word	0x08004527
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004527 	.word	0x08004527
 80044f4:	08004517 	.word	0x08004517
 80044f8:	08004527 	.word	0x08004527
 80044fc:	08004527 	.word	0x08004527
 8004500:	08004527 	.word	0x08004527
 8004504:	0800451f 	.word	0x0800451f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004508:	f7ff f818 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 800450c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800450e:	e00d      	b.n	800452c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <UART_SetConfig+0x340>)
 8004512:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004514:	e00a      	b.n	800452c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004516:	f7fe ff7b 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 800451a:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800451c:	e006      	b.n	800452c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004524:	e002      	b.n	800452c <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	76fb      	strb	r3, [r7, #27]
        break;
 800452a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 81c8 	beq.w	80048c4 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	429a      	cmp	r2, r3
 8004542:	d305      	bcc.n	8004550 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	429a      	cmp	r2, r3
 800454e:	d902      	bls.n	8004556 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	76fb      	strb	r3, [r7, #27]
 8004554:	e1b6      	b.n	80048c4 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8004556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800455a:	2b08      	cmp	r3, #8
 800455c:	f200 80a2 	bhi.w	80046a4 <UART_SetConfig+0x3f0>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x2b4>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800458d 	.word	0x0800458d
 800456c:	080046a5 	.word	0x080046a5
 8004570:	080045f9 	.word	0x080045f9
 8004574:	080046a5 	.word	0x080046a5
 8004578:	0800462d 	.word	0x0800462d
 800457c:	080046a5 	.word	0x080046a5
 8004580:	080046a5 	.word	0x080046a5
 8004584:	080046a5 	.word	0x080046a5
 8004588:	0800467b 	.word	0x0800467b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe ffd6 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004590:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	0214      	lsls	r4, r2, #8
 80045a4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045a8:	020b      	lsls	r3, r1, #8
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6852      	ldr	r2, [r2, #4]
 80045ae:	0852      	lsrs	r2, r2, #1
 80045b0:	4611      	mov	r1, r2
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	eb13 0b01 	adds.w	fp, r3, r1
 80045ba:	eb44 0c02 	adc.w	ip, r4, r2
 80045be:	4658      	mov	r0, fp
 80045c0:	4661      	mov	r1, ip
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	461a      	mov	r2, r3
 80045cc:	4623      	mov	r3, r4
 80045ce:	f7fb fe4f 	bl	8000270 <__aeabi_uldivmod>
 80045d2:	4603      	mov	r3, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045d8:	e067      	b.n	80046aa <UART_SetConfig+0x3f6>
 80045da:	bf00      	nop
 80045dc:	efff69f3 	.word	0xefff69f3
 80045e0:	40008000 	.word	0x40008000
 80045e4:	40013800 	.word	0x40013800
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40004400 	.word	0x40004400
 80045f0:	40004800 	.word	0x40004800
 80045f4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	f04f 0400 	mov.w	r4, #0
 8004602:	49ae      	ldr	r1, [pc, #696]	; (80048bc <UART_SetConfig+0x608>)
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	eb13 0b01 	adds.w	fp, r3, r1
 800460c:	eb44 0c02 	adc.w	ip, r4, r2
 8004610:	4658      	mov	r0, fp
 8004612:	4661      	mov	r1, ip
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f04f 0400 	mov.w	r4, #0
 800461c:	461a      	mov	r2, r3
 800461e:	4623      	mov	r3, r4
 8004620:	f7fb fe26 	bl	8000270 <__aeabi_uldivmod>
 8004624:	4603      	mov	r3, r0
 8004626:	460c      	mov	r4, r1
 8004628:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800462a:	e03e      	b.n	80046aa <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800462c:	f7fe fef0 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004630:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	f04f 0400 	mov.w	r4, #0
 8004642:	0214      	lsls	r4, r2, #8
 8004644:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004648:	020b      	lsls	r3, r1, #8
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6852      	ldr	r2, [r2, #4]
 800464e:	0852      	lsrs	r2, r2, #1
 8004650:	4611      	mov	r1, r2
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	eb13 0b01 	adds.w	fp, r3, r1
 800465a:	eb44 0c02 	adc.w	ip, r4, r2
 800465e:	4658      	mov	r0, fp
 8004660:	4661      	mov	r1, ip
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f04f 0400 	mov.w	r4, #0
 800466a:	461a      	mov	r2, r3
 800466c:	4623      	mov	r3, r4
 800466e:	f7fb fdff 	bl	8000270 <__aeabi_uldivmod>
 8004672:	4603      	mov	r3, r0
 8004674:	460c      	mov	r4, r1
 8004676:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004678:	e017      	b.n	80046aa <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004688:	f144 0100 	adc.w	r1, r4, #0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f04f 0400 	mov.w	r4, #0
 8004694:	461a      	mov	r2, r3
 8004696:	4623      	mov	r3, r4
 8004698:	f7fb fdea 	bl	8000270 <__aeabi_uldivmod>
 800469c:	4603      	mov	r3, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046a2:	e002      	b.n	80046aa <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	76fb      	strb	r3, [r7, #27]
            break;
 80046a8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b0:	d308      	bcc.n	80046c4 <UART_SetConfig+0x410>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b8:	d204      	bcs.n	80046c4 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	e0ff      	b.n	80048c4 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	76fb      	strb	r3, [r7, #27]
 80046c8:	e0fc      	b.n	80048c4 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	f040 8083 	bne.w	80047dc <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80046d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d85e      	bhi.n	800479c <UART_SetConfig+0x4e8>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x430>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004729 	.word	0x08004729
 80046ec:	08004749 	.word	0x08004749
 80046f0:	0800479d 	.word	0x0800479d
 80046f4:	08004765 	.word	0x08004765
 80046f8:	0800479d 	.word	0x0800479d
 80046fc:	0800479d 	.word	0x0800479d
 8004700:	0800479d 	.word	0x0800479d
 8004704:	08004785 	.word	0x08004785
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe ff18 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 800470c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	005a      	lsls	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	b29b      	uxth	r3, r3
 8004724:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004726:	e03c      	b.n	80047a2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe ff1e 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 800472c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	005a      	lsls	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	441a      	add	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	b29b      	uxth	r3, r3
 8004744:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004746:	e02c      	b.n	80047a2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004752:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6852      	ldr	r2, [r2, #4]
 800475a:	fbb3 f3f2 	udiv	r3, r3, r2
 800475e:	b29b      	uxth	r3, r3
 8004760:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004762:	e01e      	b.n	80047a2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004764:	f7fe fe54 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004768:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	005a      	lsls	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	441a      	add	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	b29b      	uxth	r3, r3
 8004780:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004782:	e00e      	b.n	80047a2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800479a:	e002      	b.n	80047a2 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	76fb      	strb	r3, [r7, #27]
        break;
 80047a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b0f      	cmp	r3, #15
 80047a6:	d916      	bls.n	80047d6 <UART_SetConfig+0x522>
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ae:	d212      	bcs.n	80047d6 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f023 030f 	bic.w	r3, r3, #15
 80047b8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	89fa      	ldrh	r2, [r7, #14]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e076      	b.n	80048c4 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	76fb      	strb	r3, [r7, #27]
 80047da:	e073      	b.n	80048c4 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80047dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d85c      	bhi.n	800489e <UART_SetConfig+0x5ea>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x538>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004811 	.word	0x08004811
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	0800489f 	.word	0x0800489f
 80047fc:	08004869 	.word	0x08004869
 8004800:	0800489f 	.word	0x0800489f
 8004804:	0800489f 	.word	0x0800489f
 8004808:	0800489f 	.word	0x0800489f
 800480c:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe fe94 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004814:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	085a      	lsrs	r2, r3, #1
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	441a      	add	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800482c:	e03a      	b.n	80048a4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800482e:	f7fe fe9b 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8004832:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	085a      	lsrs	r2, r3, #1
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	b29b      	uxth	r3, r3
 8004848:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800484a:	e02b      	b.n	80048a4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004856:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6852      	ldr	r2, [r2, #4]
 800485e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004862:	b29b      	uxth	r3, r3
 8004864:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004866:	e01d      	b.n	80048a4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004868:	f7fe fdd2 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 800486c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085a      	lsrs	r2, r3, #1
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	441a      	add	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	b29b      	uxth	r3, r3
 8004882:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004884:	e00e      	b.n	80048a4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	b29b      	uxth	r3, r3
 800489a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800489c:	e002      	b.n	80048a4 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	76fb      	strb	r3, [r7, #27]
        break;
 80048a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b0f      	cmp	r3, #15
 80048a8:	d90a      	bls.n	80048c0 <UART_SetConfig+0x60c>
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d206      	bcs.n	80048c0 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	e003      	b.n	80048c4 <UART_SetConfig+0x610>
 80048bc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80048d0:	7efb      	ldrb	r3, [r7, #27]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3728      	adds	r7, #40	; 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080048dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d10a      	bne.n	80049f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a2e:	f7fd f9cb 	bl	8001dc8 <HAL_GetTick>
 8004a32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d10e      	bne.n	8004a60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f82a 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e020      	b.n	8004aa2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d10e      	bne.n	8004a8c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f814 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e00a      	b.n	8004aa2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aba:	e05d      	b.n	8004b78 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac2:	d059      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac4:	f7fd f980 	bl	8001dc8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d302      	bcc.n	8004ada <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11b      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ae8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e042      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02b      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2e:	d123      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b38:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b48:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e00f      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d092      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <__errno>:
 8004ba0:	4b01      	ldr	r3, [pc, #4]	; (8004ba8 <__errno+0x8>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	2000000c 	.word	0x2000000c

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4e0d      	ldr	r6, [pc, #52]	; (8004be4 <__libc_init_array+0x38>)
 8004bb0:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb2:	1ba4      	subs	r4, r4, r6
 8004bb4:	10a4      	asrs	r4, r4, #2
 8004bb6:	2500      	movs	r5, #0
 8004bb8:	42a5      	cmp	r5, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4e0b      	ldr	r6, [pc, #44]	; (8004bec <__libc_init_array+0x40>)
 8004bbe:	4c0c      	ldr	r4, [pc, #48]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc0:	f000 ff04 	bl	80059cc <_init>
 8004bc4:	1ba4      	subs	r4, r4, r6
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	2500      	movs	r5, #0
 8004bca:	42a5      	cmp	r5, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bd4:	4798      	blx	r3
 8004bd6:	3501      	adds	r5, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bde:	4798      	blx	r3
 8004be0:	3501      	adds	r5, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	08005ae0 	.word	0x08005ae0
 8004be8:	08005ae0 	.word	0x08005ae0
 8004bec:	08005ae0 	.word	0x08005ae0
 8004bf0:	08005ae4 	.word	0x08005ae4

08004bf4 <memset>:
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <memset+0xa>
 8004bfc:	4770      	bx	lr
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7f9      	b.n	8004bf8 <memset+0x4>

08004c04 <iprintf>:
 8004c04:	b40f      	push	{r0, r1, r2, r3}
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <iprintf+0x2c>)
 8004c08:	b513      	push	{r0, r1, r4, lr}
 8004c0a:	681c      	ldr	r4, [r3, #0]
 8004c0c:	b124      	cbz	r4, 8004c18 <iprintf+0x14>
 8004c0e:	69a3      	ldr	r3, [r4, #24]
 8004c10:	b913      	cbnz	r3, 8004c18 <iprintf+0x14>
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 f84e 	bl	8004cb4 <__sinit>
 8004c18:	ab05      	add	r3, sp, #20
 8004c1a:	9a04      	ldr	r2, [sp, #16]
 8004c1c:	68a1      	ldr	r1, [r4, #8]
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 f955 	bl	8004ed0 <_vfiprintf_r>
 8004c26:	b002      	add	sp, #8
 8004c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c2c:	b004      	add	sp, #16
 8004c2e:	4770      	bx	lr
 8004c30:	2000000c 	.word	0x2000000c

08004c34 <std>:
 8004c34:	2300      	movs	r3, #0
 8004c36:	b510      	push	{r4, lr}
 8004c38:	4604      	mov	r4, r0
 8004c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c3e:	6083      	str	r3, [r0, #8]
 8004c40:	8181      	strh	r1, [r0, #12]
 8004c42:	6643      	str	r3, [r0, #100]	; 0x64
 8004c44:	81c2      	strh	r2, [r0, #14]
 8004c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4a:	6183      	str	r3, [r0, #24]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	2208      	movs	r2, #8
 8004c50:	305c      	adds	r0, #92	; 0x5c
 8004c52:	f7ff ffcf 	bl	8004bf4 <memset>
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <std+0x38>)
 8004c58:	6263      	str	r3, [r4, #36]	; 0x24
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <std+0x3c>)
 8004c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <std+0x40>)
 8004c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <std+0x44>)
 8004c64:	6224      	str	r4, [r4, #32]
 8004c66:	6323      	str	r3, [r4, #48]	; 0x30
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	0800542d 	.word	0x0800542d
 8004c70:	0800544f 	.word	0x0800544f
 8004c74:	08005487 	.word	0x08005487
 8004c78:	080054ab 	.word	0x080054ab

08004c7c <_cleanup_r>:
 8004c7c:	4901      	ldr	r1, [pc, #4]	; (8004c84 <_cleanup_r+0x8>)
 8004c7e:	f000 b885 	b.w	8004d8c <_fwalk_reent>
 8004c82:	bf00      	nop
 8004c84:	08005785 	.word	0x08005785

08004c88 <__sfmoreglue>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	1e4a      	subs	r2, r1, #1
 8004c8c:	2568      	movs	r5, #104	; 0x68
 8004c8e:	4355      	muls	r5, r2
 8004c90:	460e      	mov	r6, r1
 8004c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c96:	f000 f897 	bl	8004dc8 <_malloc_r>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	b140      	cbz	r0, 8004cb0 <__sfmoreglue+0x28>
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ca4:	300c      	adds	r0, #12
 8004ca6:	60a0      	str	r0, [r4, #8]
 8004ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cac:	f7ff ffa2 	bl	8004bf4 <memset>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}

08004cb4 <__sinit>:
 8004cb4:	6983      	ldr	r3, [r0, #24]
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	4604      	mov	r4, r0
 8004cba:	bb33      	cbnz	r3, 8004d0a <__sinit+0x56>
 8004cbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004cc0:	6503      	str	r3, [r0, #80]	; 0x50
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <__sinit+0x58>)
 8004cc4:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <__sinit+0x5c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6282      	str	r2, [r0, #40]	; 0x28
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	bf04      	itt	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	6183      	streq	r3, [r0, #24]
 8004cd2:	f000 f81f 	bl	8004d14 <__sfp>
 8004cd6:	6060      	str	r0, [r4, #4]
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f000 f81b 	bl	8004d14 <__sfp>
 8004cde:	60a0      	str	r0, [r4, #8]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 f817 	bl	8004d14 <__sfp>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60e0      	str	r0, [r4, #12]
 8004cea:	2104      	movs	r1, #4
 8004cec:	6860      	ldr	r0, [r4, #4]
 8004cee:	f7ff ffa1 	bl	8004c34 <std>
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2109      	movs	r1, #9
 8004cf6:	68a0      	ldr	r0, [r4, #8]
 8004cf8:	f7ff ff9c 	bl	8004c34 <std>
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	2112      	movs	r1, #18
 8004d00:	68e0      	ldr	r0, [r4, #12]
 8004d02:	f7ff ff97 	bl	8004c34 <std>
 8004d06:	2301      	movs	r3, #1
 8004d08:	61a3      	str	r3, [r4, #24]
 8004d0a:	bd10      	pop	{r4, pc}
 8004d0c:	08005a40 	.word	0x08005a40
 8004d10:	08004c7d 	.word	0x08004c7d

08004d14 <__sfp>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <__sfp+0x70>)
 8004d18:	681e      	ldr	r6, [r3, #0]
 8004d1a:	69b3      	ldr	r3, [r6, #24]
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	b913      	cbnz	r3, 8004d26 <__sfp+0x12>
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff ffc7 	bl	8004cb4 <__sinit>
 8004d26:	3648      	adds	r6, #72	; 0x48
 8004d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	d503      	bpl.n	8004d38 <__sfp+0x24>
 8004d30:	6833      	ldr	r3, [r6, #0]
 8004d32:	b133      	cbz	r3, 8004d42 <__sfp+0x2e>
 8004d34:	6836      	ldr	r6, [r6, #0]
 8004d36:	e7f7      	b.n	8004d28 <__sfp+0x14>
 8004d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d3c:	b16d      	cbz	r5, 8004d5a <__sfp+0x46>
 8004d3e:	3468      	adds	r4, #104	; 0x68
 8004d40:	e7f4      	b.n	8004d2c <__sfp+0x18>
 8004d42:	2104      	movs	r1, #4
 8004d44:	4638      	mov	r0, r7
 8004d46:	f7ff ff9f 	bl	8004c88 <__sfmoreglue>
 8004d4a:	6030      	str	r0, [r6, #0]
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d1f1      	bne.n	8004d34 <__sfp+0x20>
 8004d50:	230c      	movs	r3, #12
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4604      	mov	r4, r0
 8004d56:	4620      	mov	r0, r4
 8004d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <__sfp+0x74>)
 8004d5c:	6665      	str	r5, [r4, #100]	; 0x64
 8004d5e:	e9c4 5500 	strd	r5, r5, [r4]
 8004d62:	60a5      	str	r5, [r4, #8]
 8004d64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d74:	f7ff ff3e 	bl	8004bf4 <memset>
 8004d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d80:	e7e9      	b.n	8004d56 <__sfp+0x42>
 8004d82:	bf00      	nop
 8004d84:	08005a40 	.word	0x08005a40
 8004d88:	ffff0001 	.word	0xffff0001

08004d8c <_fwalk_reent>:
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d90:	4680      	mov	r8, r0
 8004d92:	4689      	mov	r9, r1
 8004d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d98:	2600      	movs	r6, #0
 8004d9a:	b914      	cbnz	r4, 8004da2 <_fwalk_reent+0x16>
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004da6:	3f01      	subs	r7, #1
 8004da8:	d501      	bpl.n	8004dae <_fwalk_reent+0x22>
 8004daa:	6824      	ldr	r4, [r4, #0]
 8004dac:	e7f5      	b.n	8004d9a <_fwalk_reent+0xe>
 8004dae:	89ab      	ldrh	r3, [r5, #12]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d907      	bls.n	8004dc4 <_fwalk_reent+0x38>
 8004db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db8:	3301      	adds	r3, #1
 8004dba:	d003      	beq.n	8004dc4 <_fwalk_reent+0x38>
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	47c8      	blx	r9
 8004dc2:	4306      	orrs	r6, r0
 8004dc4:	3568      	adds	r5, #104	; 0x68
 8004dc6:	e7ee      	b.n	8004da6 <_fwalk_reent+0x1a>

08004dc8 <_malloc_r>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	1ccd      	adds	r5, r1, #3
 8004dcc:	f025 0503 	bic.w	r5, r5, #3
 8004dd0:	3508      	adds	r5, #8
 8004dd2:	2d0c      	cmp	r5, #12
 8004dd4:	bf38      	it	cc
 8004dd6:	250c      	movcc	r5, #12
 8004dd8:	2d00      	cmp	r5, #0
 8004dda:	4606      	mov	r6, r0
 8004ddc:	db01      	blt.n	8004de2 <_malloc_r+0x1a>
 8004dde:	42a9      	cmp	r1, r5
 8004de0:	d903      	bls.n	8004dea <_malloc_r+0x22>
 8004de2:	230c      	movs	r3, #12
 8004de4:	6033      	str	r3, [r6, #0]
 8004de6:	2000      	movs	r0, #0
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	f000 fd6b 	bl	80058c4 <__malloc_lock>
 8004dee:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <_malloc_r+0xac>)
 8004df0:	6814      	ldr	r4, [r2, #0]
 8004df2:	4621      	mov	r1, r4
 8004df4:	b991      	cbnz	r1, 8004e1c <_malloc_r+0x54>
 8004df6:	4c20      	ldr	r4, [pc, #128]	; (8004e78 <_malloc_r+0xb0>)
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	b91b      	cbnz	r3, 8004e04 <_malloc_r+0x3c>
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 fb05 	bl	800540c <_sbrk_r>
 8004e02:	6020      	str	r0, [r4, #0]
 8004e04:	4629      	mov	r1, r5
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 fb00 	bl	800540c <_sbrk_r>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d124      	bne.n	8004e5a <_malloc_r+0x92>
 8004e10:	230c      	movs	r3, #12
 8004e12:	6033      	str	r3, [r6, #0]
 8004e14:	4630      	mov	r0, r6
 8004e16:	f000 fd56 	bl	80058c6 <__malloc_unlock>
 8004e1a:	e7e4      	b.n	8004de6 <_malloc_r+0x1e>
 8004e1c:	680b      	ldr	r3, [r1, #0]
 8004e1e:	1b5b      	subs	r3, r3, r5
 8004e20:	d418      	bmi.n	8004e54 <_malloc_r+0x8c>
 8004e22:	2b0b      	cmp	r3, #11
 8004e24:	d90f      	bls.n	8004e46 <_malloc_r+0x7e>
 8004e26:	600b      	str	r3, [r1, #0]
 8004e28:	50cd      	str	r5, [r1, r3]
 8004e2a:	18cc      	adds	r4, r1, r3
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 fd4a 	bl	80058c6 <__malloc_unlock>
 8004e32:	f104 000b 	add.w	r0, r4, #11
 8004e36:	1d23      	adds	r3, r4, #4
 8004e38:	f020 0007 	bic.w	r0, r0, #7
 8004e3c:	1ac3      	subs	r3, r0, r3
 8004e3e:	d0d3      	beq.n	8004de8 <_malloc_r+0x20>
 8004e40:	425a      	negs	r2, r3
 8004e42:	50e2      	str	r2, [r4, r3]
 8004e44:	e7d0      	b.n	8004de8 <_malloc_r+0x20>
 8004e46:	428c      	cmp	r4, r1
 8004e48:	684b      	ldr	r3, [r1, #4]
 8004e4a:	bf16      	itet	ne
 8004e4c:	6063      	strne	r3, [r4, #4]
 8004e4e:	6013      	streq	r3, [r2, #0]
 8004e50:	460c      	movne	r4, r1
 8004e52:	e7eb      	b.n	8004e2c <_malloc_r+0x64>
 8004e54:	460c      	mov	r4, r1
 8004e56:	6849      	ldr	r1, [r1, #4]
 8004e58:	e7cc      	b.n	8004df4 <_malloc_r+0x2c>
 8004e5a:	1cc4      	adds	r4, r0, #3
 8004e5c:	f024 0403 	bic.w	r4, r4, #3
 8004e60:	42a0      	cmp	r0, r4
 8004e62:	d005      	beq.n	8004e70 <_malloc_r+0xa8>
 8004e64:	1a21      	subs	r1, r4, r0
 8004e66:	4630      	mov	r0, r6
 8004e68:	f000 fad0 	bl	800540c <_sbrk_r>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d0cf      	beq.n	8004e10 <_malloc_r+0x48>
 8004e70:	6025      	str	r5, [r4, #0]
 8004e72:	e7db      	b.n	8004e2c <_malloc_r+0x64>
 8004e74:	200000a0 	.word	0x200000a0
 8004e78:	200000a4 	.word	0x200000a4

08004e7c <__sfputc_r>:
 8004e7c:	6893      	ldr	r3, [r2, #8]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	b410      	push	{r4}
 8004e84:	6093      	str	r3, [r2, #8]
 8004e86:	da08      	bge.n	8004e9a <__sfputc_r+0x1e>
 8004e88:	6994      	ldr	r4, [r2, #24]
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	db01      	blt.n	8004e92 <__sfputc_r+0x16>
 8004e8e:	290a      	cmp	r1, #10
 8004e90:	d103      	bne.n	8004e9a <__sfputc_r+0x1e>
 8004e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e96:	f000 bb0d 	b.w	80054b4 <__swbuf_r>
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	1c58      	adds	r0, r3, #1
 8004e9e:	6010      	str	r0, [r2, #0]
 8004ea0:	7019      	strb	r1, [r3, #0]
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <__sfputs_r>:
 8004eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eac:	4606      	mov	r6, r0
 8004eae:	460f      	mov	r7, r1
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	18d5      	adds	r5, r2, r3
 8004eb4:	42ac      	cmp	r4, r5
 8004eb6:	d101      	bne.n	8004ebc <__sfputs_r+0x12>
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e007      	b.n	8004ecc <__sfputs_r+0x22>
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f7ff ffda 	bl	8004e7c <__sfputc_r>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d1f3      	bne.n	8004eb4 <__sfputs_r+0xa>
 8004ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed0 <_vfiprintf_r>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	b09d      	sub	sp, #116	; 0x74
 8004ed8:	4617      	mov	r7, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4606      	mov	r6, r0
 8004ede:	b118      	cbz	r0, 8004ee8 <_vfiprintf_r+0x18>
 8004ee0:	6983      	ldr	r3, [r0, #24]
 8004ee2:	b90b      	cbnz	r3, 8004ee8 <_vfiprintf_r+0x18>
 8004ee4:	f7ff fee6 	bl	8004cb4 <__sinit>
 8004ee8:	4b7c      	ldr	r3, [pc, #496]	; (80050dc <_vfiprintf_r+0x20c>)
 8004eea:	429c      	cmp	r4, r3
 8004eec:	d158      	bne.n	8004fa0 <_vfiprintf_r+0xd0>
 8004eee:	6874      	ldr	r4, [r6, #4]
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	0718      	lsls	r0, r3, #28
 8004ef4:	d55e      	bpl.n	8004fb4 <_vfiprintf_r+0xe4>
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05b      	beq.n	8004fb4 <_vfiprintf_r+0xe4>
 8004efc:	2300      	movs	r3, #0
 8004efe:	9309      	str	r3, [sp, #36]	; 0x24
 8004f00:	2320      	movs	r3, #32
 8004f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f06:	2330      	movs	r3, #48	; 0x30
 8004f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f0c:	9503      	str	r5, [sp, #12]
 8004f0e:	f04f 0b01 	mov.w	fp, #1
 8004f12:	46b8      	mov	r8, r7
 8004f14:	4645      	mov	r5, r8
 8004f16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f1a:	b10b      	cbz	r3, 8004f20 <_vfiprintf_r+0x50>
 8004f1c:	2b25      	cmp	r3, #37	; 0x25
 8004f1e:	d154      	bne.n	8004fca <_vfiprintf_r+0xfa>
 8004f20:	ebb8 0a07 	subs.w	sl, r8, r7
 8004f24:	d00b      	beq.n	8004f3e <_vfiprintf_r+0x6e>
 8004f26:	4653      	mov	r3, sl
 8004f28:	463a      	mov	r2, r7
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f7ff ffbc 	bl	8004eaa <__sfputs_r>
 8004f32:	3001      	adds	r0, #1
 8004f34:	f000 80c2 	beq.w	80050bc <_vfiprintf_r+0x1ec>
 8004f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3a:	4453      	add	r3, sl
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	f898 3000 	ldrb.w	r3, [r8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 80ba 	beq.w	80050bc <_vfiprintf_r+0x1ec>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	9307      	str	r3, [sp, #28]
 8004f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f5c:	46a8      	mov	r8, r5
 8004f5e:	2205      	movs	r2, #5
 8004f60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004f64:	485e      	ldr	r0, [pc, #376]	; (80050e0 <_vfiprintf_r+0x210>)
 8004f66:	f7fb f933 	bl	80001d0 <memchr>
 8004f6a:	9b04      	ldr	r3, [sp, #16]
 8004f6c:	bb78      	cbnz	r0, 8004fce <_vfiprintf_r+0xfe>
 8004f6e:	06d9      	lsls	r1, r3, #27
 8004f70:	bf44      	itt	mi
 8004f72:	2220      	movmi	r2, #32
 8004f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f78:	071a      	lsls	r2, r3, #28
 8004f7a:	bf44      	itt	mi
 8004f7c:	222b      	movmi	r2, #43	; 0x2b
 8004f7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f82:	782a      	ldrb	r2, [r5, #0]
 8004f84:	2a2a      	cmp	r2, #42	; 0x2a
 8004f86:	d02a      	beq.n	8004fde <_vfiprintf_r+0x10e>
 8004f88:	9a07      	ldr	r2, [sp, #28]
 8004f8a:	46a8      	mov	r8, r5
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	250a      	movs	r5, #10
 8004f90:	4641      	mov	r1, r8
 8004f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f96:	3b30      	subs	r3, #48	; 0x30
 8004f98:	2b09      	cmp	r3, #9
 8004f9a:	d969      	bls.n	8005070 <_vfiprintf_r+0x1a0>
 8004f9c:	b360      	cbz	r0, 8004ff8 <_vfiprintf_r+0x128>
 8004f9e:	e024      	b.n	8004fea <_vfiprintf_r+0x11a>
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <_vfiprintf_r+0x214>)
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	d101      	bne.n	8004faa <_vfiprintf_r+0xda>
 8004fa6:	68b4      	ldr	r4, [r6, #8]
 8004fa8:	e7a2      	b.n	8004ef0 <_vfiprintf_r+0x20>
 8004faa:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <_vfiprintf_r+0x218>)
 8004fac:	429c      	cmp	r4, r3
 8004fae:	bf08      	it	eq
 8004fb0:	68f4      	ldreq	r4, [r6, #12]
 8004fb2:	e79d      	b.n	8004ef0 <_vfiprintf_r+0x20>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 fae0 	bl	800557c <__swsetup_r>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d09d      	beq.n	8004efc <_vfiprintf_r+0x2c>
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc4:	b01d      	add	sp, #116	; 0x74
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	46a8      	mov	r8, r5
 8004fcc:	e7a2      	b.n	8004f14 <_vfiprintf_r+0x44>
 8004fce:	4a44      	ldr	r2, [pc, #272]	; (80050e0 <_vfiprintf_r+0x210>)
 8004fd0:	1a80      	subs	r0, r0, r2
 8004fd2:	fa0b f000 	lsl.w	r0, fp, r0
 8004fd6:	4318      	orrs	r0, r3
 8004fd8:	9004      	str	r0, [sp, #16]
 8004fda:	4645      	mov	r5, r8
 8004fdc:	e7be      	b.n	8004f5c <_vfiprintf_r+0x8c>
 8004fde:	9a03      	ldr	r2, [sp, #12]
 8004fe0:	1d11      	adds	r1, r2, #4
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	9103      	str	r1, [sp, #12]
 8004fe6:	2a00      	cmp	r2, #0
 8004fe8:	db01      	blt.n	8004fee <_vfiprintf_r+0x11e>
 8004fea:	9207      	str	r2, [sp, #28]
 8004fec:	e004      	b.n	8004ff8 <_vfiprintf_r+0x128>
 8004fee:	4252      	negs	r2, r2
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	9207      	str	r2, [sp, #28]
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	f898 3000 	ldrb.w	r3, [r8]
 8004ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ffe:	d10e      	bne.n	800501e <_vfiprintf_r+0x14e>
 8005000:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005004:	2b2a      	cmp	r3, #42	; 0x2a
 8005006:	d138      	bne.n	800507a <_vfiprintf_r+0x1aa>
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	1d1a      	adds	r2, r3, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	9203      	str	r2, [sp, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	bfb8      	it	lt
 8005014:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005018:	f108 0802 	add.w	r8, r8, #2
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	4d33      	ldr	r5, [pc, #204]	; (80050ec <_vfiprintf_r+0x21c>)
 8005020:	f898 1000 	ldrb.w	r1, [r8]
 8005024:	2203      	movs	r2, #3
 8005026:	4628      	mov	r0, r5
 8005028:	f7fb f8d2 	bl	80001d0 <memchr>
 800502c:	b140      	cbz	r0, 8005040 <_vfiprintf_r+0x170>
 800502e:	2340      	movs	r3, #64	; 0x40
 8005030:	1b40      	subs	r0, r0, r5
 8005032:	fa03 f000 	lsl.w	r0, r3, r0
 8005036:	9b04      	ldr	r3, [sp, #16]
 8005038:	4303      	orrs	r3, r0
 800503a:	f108 0801 	add.w	r8, r8, #1
 800503e:	9304      	str	r3, [sp, #16]
 8005040:	f898 1000 	ldrb.w	r1, [r8]
 8005044:	482a      	ldr	r0, [pc, #168]	; (80050f0 <_vfiprintf_r+0x220>)
 8005046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800504a:	2206      	movs	r2, #6
 800504c:	f108 0701 	add.w	r7, r8, #1
 8005050:	f7fb f8be 	bl	80001d0 <memchr>
 8005054:	2800      	cmp	r0, #0
 8005056:	d037      	beq.n	80050c8 <_vfiprintf_r+0x1f8>
 8005058:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <_vfiprintf_r+0x224>)
 800505a:	bb1b      	cbnz	r3, 80050a4 <_vfiprintf_r+0x1d4>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	3307      	adds	r3, #7
 8005060:	f023 0307 	bic.w	r3, r3, #7
 8005064:	3308      	adds	r3, #8
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506a:	444b      	add	r3, r9
 800506c:	9309      	str	r3, [sp, #36]	; 0x24
 800506e:	e750      	b.n	8004f12 <_vfiprintf_r+0x42>
 8005070:	fb05 3202 	mla	r2, r5, r2, r3
 8005074:	2001      	movs	r0, #1
 8005076:	4688      	mov	r8, r1
 8005078:	e78a      	b.n	8004f90 <_vfiprintf_r+0xc0>
 800507a:	2300      	movs	r3, #0
 800507c:	f108 0801 	add.w	r8, r8, #1
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	4619      	mov	r1, r3
 8005084:	250a      	movs	r5, #10
 8005086:	4640      	mov	r0, r8
 8005088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800508c:	3a30      	subs	r2, #48	; 0x30
 800508e:	2a09      	cmp	r2, #9
 8005090:	d903      	bls.n	800509a <_vfiprintf_r+0x1ca>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0c3      	beq.n	800501e <_vfiprintf_r+0x14e>
 8005096:	9105      	str	r1, [sp, #20]
 8005098:	e7c1      	b.n	800501e <_vfiprintf_r+0x14e>
 800509a:	fb05 2101 	mla	r1, r5, r1, r2
 800509e:	2301      	movs	r3, #1
 80050a0:	4680      	mov	r8, r0
 80050a2:	e7f0      	b.n	8005086 <_vfiprintf_r+0x1b6>
 80050a4:	ab03      	add	r3, sp, #12
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4622      	mov	r2, r4
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <_vfiprintf_r+0x228>)
 80050ac:	a904      	add	r1, sp, #16
 80050ae:	4630      	mov	r0, r6
 80050b0:	f3af 8000 	nop.w
 80050b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80050b8:	4681      	mov	r9, r0
 80050ba:	d1d5      	bne.n	8005068 <_vfiprintf_r+0x198>
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	065b      	lsls	r3, r3, #25
 80050c0:	f53f af7e 	bmi.w	8004fc0 <_vfiprintf_r+0xf0>
 80050c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050c6:	e77d      	b.n	8004fc4 <_vfiprintf_r+0xf4>
 80050c8:	ab03      	add	r3, sp, #12
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	4622      	mov	r2, r4
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <_vfiprintf_r+0x228>)
 80050d0:	a904      	add	r1, sp, #16
 80050d2:	4630      	mov	r0, r6
 80050d4:	f000 f888 	bl	80051e8 <_printf_i>
 80050d8:	e7ec      	b.n	80050b4 <_vfiprintf_r+0x1e4>
 80050da:	bf00      	nop
 80050dc:	08005a64 	.word	0x08005a64
 80050e0:	08005aa4 	.word	0x08005aa4
 80050e4:	08005a84 	.word	0x08005a84
 80050e8:	08005a44 	.word	0x08005a44
 80050ec:	08005aaa 	.word	0x08005aaa
 80050f0:	08005aae 	.word	0x08005aae
 80050f4:	00000000 	.word	0x00000000
 80050f8:	08004eab 	.word	0x08004eab

080050fc <_printf_common>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	4691      	mov	r9, r2
 8005102:	461f      	mov	r7, r3
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800510c:	4293      	cmp	r3, r2
 800510e:	bfb8      	it	lt
 8005110:	4613      	movlt	r3, r2
 8005112:	f8c9 3000 	str.w	r3, [r9]
 8005116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	b112      	cbz	r2, 8005126 <_printf_common+0x2a>
 8005120:	3301      	adds	r3, #1
 8005122:	f8c9 3000 	str.w	r3, [r9]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	0699      	lsls	r1, r3, #26
 800512a:	bf42      	ittt	mi
 800512c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005130:	3302      	addmi	r3, #2
 8005132:	f8c9 3000 	strmi.w	r3, [r9]
 8005136:	6825      	ldr	r5, [r4, #0]
 8005138:	f015 0506 	ands.w	r5, r5, #6
 800513c:	d107      	bne.n	800514e <_printf_common+0x52>
 800513e:	f104 0a19 	add.w	sl, r4, #25
 8005142:	68e3      	ldr	r3, [r4, #12]
 8005144:	f8d9 2000 	ldr.w	r2, [r9]
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	42ab      	cmp	r3, r5
 800514c:	dc28      	bgt.n	80051a0 <_printf_common+0xa4>
 800514e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	3300      	adds	r3, #0
 8005156:	bf18      	it	ne
 8005158:	2301      	movne	r3, #1
 800515a:	0692      	lsls	r2, r2, #26
 800515c:	d42d      	bmi.n	80051ba <_printf_common+0xbe>
 800515e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005162:	4639      	mov	r1, r7
 8005164:	4630      	mov	r0, r6
 8005166:	47c0      	blx	r8
 8005168:	3001      	adds	r0, #1
 800516a:	d020      	beq.n	80051ae <_printf_common+0xb2>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	68e5      	ldr	r5, [r4, #12]
 8005170:	f8d9 2000 	ldr.w	r2, [r9]
 8005174:	f003 0306 	and.w	r3, r3, #6
 8005178:	2b04      	cmp	r3, #4
 800517a:	bf08      	it	eq
 800517c:	1aad      	subeq	r5, r5, r2
 800517e:	68a3      	ldr	r3, [r4, #8]
 8005180:	6922      	ldr	r2, [r4, #16]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	f04f 0900 	mov.w	r9, #0
 8005196:	341a      	adds	r4, #26
 8005198:	454d      	cmp	r5, r9
 800519a:	d11a      	bne.n	80051d2 <_printf_common+0xd6>
 800519c:	2000      	movs	r0, #0
 800519e:	e008      	b.n	80051b2 <_printf_common+0xb6>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4652      	mov	r2, sl
 80051a4:	4639      	mov	r1, r7
 80051a6:	4630      	mov	r0, r6
 80051a8:	47c0      	blx	r8
 80051aa:	3001      	adds	r0, #1
 80051ac:	d103      	bne.n	80051b6 <_printf_common+0xba>
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b6:	3501      	adds	r5, #1
 80051b8:	e7c3      	b.n	8005142 <_printf_common+0x46>
 80051ba:	18e1      	adds	r1, r4, r3
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	2030      	movs	r0, #48	; 0x30
 80051c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c4:	4422      	add	r2, r4
 80051c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ce:	3302      	adds	r3, #2
 80051d0:	e7c5      	b.n	800515e <_printf_common+0x62>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4622      	mov	r2, r4
 80051d6:	4639      	mov	r1, r7
 80051d8:	4630      	mov	r0, r6
 80051da:	47c0      	blx	r8
 80051dc:	3001      	adds	r0, #1
 80051de:	d0e6      	beq.n	80051ae <_printf_common+0xb2>
 80051e0:	f109 0901 	add.w	r9, r9, #1
 80051e4:	e7d8      	b.n	8005198 <_printf_common+0x9c>
	...

080051e8 <_printf_i>:
 80051e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051f0:	460c      	mov	r4, r1
 80051f2:	7e09      	ldrb	r1, [r1, #24]
 80051f4:	b085      	sub	sp, #20
 80051f6:	296e      	cmp	r1, #110	; 0x6e
 80051f8:	4617      	mov	r7, r2
 80051fa:	4606      	mov	r6, r0
 80051fc:	4698      	mov	r8, r3
 80051fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005200:	f000 80b3 	beq.w	800536a <_printf_i+0x182>
 8005204:	d822      	bhi.n	800524c <_printf_i+0x64>
 8005206:	2963      	cmp	r1, #99	; 0x63
 8005208:	d036      	beq.n	8005278 <_printf_i+0x90>
 800520a:	d80a      	bhi.n	8005222 <_printf_i+0x3a>
 800520c:	2900      	cmp	r1, #0
 800520e:	f000 80b9 	beq.w	8005384 <_printf_i+0x19c>
 8005212:	2958      	cmp	r1, #88	; 0x58
 8005214:	f000 8083 	beq.w	800531e <_printf_i+0x136>
 8005218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800521c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005220:	e032      	b.n	8005288 <_printf_i+0xa0>
 8005222:	2964      	cmp	r1, #100	; 0x64
 8005224:	d001      	beq.n	800522a <_printf_i+0x42>
 8005226:	2969      	cmp	r1, #105	; 0x69
 8005228:	d1f6      	bne.n	8005218 <_printf_i+0x30>
 800522a:	6820      	ldr	r0, [r4, #0]
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	0605      	lsls	r5, r0, #24
 8005230:	f103 0104 	add.w	r1, r3, #4
 8005234:	d52a      	bpl.n	800528c <_printf_i+0xa4>
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6011      	str	r1, [r2, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	da03      	bge.n	8005246 <_printf_i+0x5e>
 800523e:	222d      	movs	r2, #45	; 0x2d
 8005240:	425b      	negs	r3, r3
 8005242:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005246:	486f      	ldr	r0, [pc, #444]	; (8005404 <_printf_i+0x21c>)
 8005248:	220a      	movs	r2, #10
 800524a:	e039      	b.n	80052c0 <_printf_i+0xd8>
 800524c:	2973      	cmp	r1, #115	; 0x73
 800524e:	f000 809d 	beq.w	800538c <_printf_i+0x1a4>
 8005252:	d808      	bhi.n	8005266 <_printf_i+0x7e>
 8005254:	296f      	cmp	r1, #111	; 0x6f
 8005256:	d020      	beq.n	800529a <_printf_i+0xb2>
 8005258:	2970      	cmp	r1, #112	; 0x70
 800525a:	d1dd      	bne.n	8005218 <_printf_i+0x30>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f043 0320 	orr.w	r3, r3, #32
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	e003      	b.n	800526e <_printf_i+0x86>
 8005266:	2975      	cmp	r1, #117	; 0x75
 8005268:	d017      	beq.n	800529a <_printf_i+0xb2>
 800526a:	2978      	cmp	r1, #120	; 0x78
 800526c:	d1d4      	bne.n	8005218 <_printf_i+0x30>
 800526e:	2378      	movs	r3, #120	; 0x78
 8005270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005274:	4864      	ldr	r0, [pc, #400]	; (8005408 <_printf_i+0x220>)
 8005276:	e055      	b.n	8005324 <_printf_i+0x13c>
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	1d19      	adds	r1, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6011      	str	r1, [r2, #0]
 8005280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005288:	2301      	movs	r3, #1
 800528a:	e08c      	b.n	80053a6 <_printf_i+0x1be>
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6011      	str	r1, [r2, #0]
 8005290:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005294:	bf18      	it	ne
 8005296:	b21b      	sxthne	r3, r3
 8005298:	e7cf      	b.n	800523a <_printf_i+0x52>
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	6825      	ldr	r5, [r4, #0]
 800529e:	1d18      	adds	r0, r3, #4
 80052a0:	6010      	str	r0, [r2, #0]
 80052a2:	0628      	lsls	r0, r5, #24
 80052a4:	d501      	bpl.n	80052aa <_printf_i+0xc2>
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	e002      	b.n	80052b0 <_printf_i+0xc8>
 80052aa:	0668      	lsls	r0, r5, #25
 80052ac:	d5fb      	bpl.n	80052a6 <_printf_i+0xbe>
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	4854      	ldr	r0, [pc, #336]	; (8005404 <_printf_i+0x21c>)
 80052b2:	296f      	cmp	r1, #111	; 0x6f
 80052b4:	bf14      	ite	ne
 80052b6:	220a      	movne	r2, #10
 80052b8:	2208      	moveq	r2, #8
 80052ba:	2100      	movs	r1, #0
 80052bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052c0:	6865      	ldr	r5, [r4, #4]
 80052c2:	60a5      	str	r5, [r4, #8]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	f2c0 8095 	blt.w	80053f4 <_printf_i+0x20c>
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	f021 0104 	bic.w	r1, r1, #4
 80052d0:	6021      	str	r1, [r4, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d13d      	bne.n	8005352 <_printf_i+0x16a>
 80052d6:	2d00      	cmp	r5, #0
 80052d8:	f040 808e 	bne.w	80053f8 <_printf_i+0x210>
 80052dc:	4665      	mov	r5, ip
 80052de:	2a08      	cmp	r2, #8
 80052e0:	d10b      	bne.n	80052fa <_printf_i+0x112>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	07db      	lsls	r3, r3, #31
 80052e6:	d508      	bpl.n	80052fa <_printf_i+0x112>
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	6862      	ldr	r2, [r4, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	bfde      	ittt	le
 80052f0:	2330      	movle	r3, #48	; 0x30
 80052f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052fa:	ebac 0305 	sub.w	r3, ip, r5
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	f8cd 8000 	str.w	r8, [sp]
 8005304:	463b      	mov	r3, r7
 8005306:	aa03      	add	r2, sp, #12
 8005308:	4621      	mov	r1, r4
 800530a:	4630      	mov	r0, r6
 800530c:	f7ff fef6 	bl	80050fc <_printf_common>
 8005310:	3001      	adds	r0, #1
 8005312:	d14d      	bne.n	80053b0 <_printf_i+0x1c8>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005318:	b005      	add	sp, #20
 800531a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800531e:	4839      	ldr	r0, [pc, #228]	; (8005404 <_printf_i+0x21c>)
 8005320:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	6821      	ldr	r1, [r4, #0]
 8005328:	1d1d      	adds	r5, r3, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6015      	str	r5, [r2, #0]
 800532e:	060a      	lsls	r2, r1, #24
 8005330:	d50b      	bpl.n	800534a <_printf_i+0x162>
 8005332:	07ca      	lsls	r2, r1, #31
 8005334:	bf44      	itt	mi
 8005336:	f041 0120 	orrmi.w	r1, r1, #32
 800533a:	6021      	strmi	r1, [r4, #0]
 800533c:	b91b      	cbnz	r3, 8005346 <_printf_i+0x15e>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	f022 0220 	bic.w	r2, r2, #32
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	e7b7      	b.n	80052ba <_printf_i+0xd2>
 800534a:	064d      	lsls	r5, r1, #25
 800534c:	bf48      	it	mi
 800534e:	b29b      	uxthmi	r3, r3
 8005350:	e7ef      	b.n	8005332 <_printf_i+0x14a>
 8005352:	4665      	mov	r5, ip
 8005354:	fbb3 f1f2 	udiv	r1, r3, r2
 8005358:	fb02 3311 	mls	r3, r2, r1, r3
 800535c:	5cc3      	ldrb	r3, [r0, r3]
 800535e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005362:	460b      	mov	r3, r1
 8005364:	2900      	cmp	r1, #0
 8005366:	d1f5      	bne.n	8005354 <_printf_i+0x16c>
 8005368:	e7b9      	b.n	80052de <_printf_i+0xf6>
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	6825      	ldr	r5, [r4, #0]
 800536e:	6961      	ldr	r1, [r4, #20]
 8005370:	1d18      	adds	r0, r3, #4
 8005372:	6010      	str	r0, [r2, #0]
 8005374:	0628      	lsls	r0, r5, #24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	d501      	bpl.n	800537e <_printf_i+0x196>
 800537a:	6019      	str	r1, [r3, #0]
 800537c:	e002      	b.n	8005384 <_printf_i+0x19c>
 800537e:	066a      	lsls	r2, r5, #25
 8005380:	d5fb      	bpl.n	800537a <_printf_i+0x192>
 8005382:	8019      	strh	r1, [r3, #0]
 8005384:	2300      	movs	r3, #0
 8005386:	6123      	str	r3, [r4, #16]
 8005388:	4665      	mov	r5, ip
 800538a:	e7b9      	b.n	8005300 <_printf_i+0x118>
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	1d19      	adds	r1, r3, #4
 8005390:	6011      	str	r1, [r2, #0]
 8005392:	681d      	ldr	r5, [r3, #0]
 8005394:	6862      	ldr	r2, [r4, #4]
 8005396:	2100      	movs	r1, #0
 8005398:	4628      	mov	r0, r5
 800539a:	f7fa ff19 	bl	80001d0 <memchr>
 800539e:	b108      	cbz	r0, 80053a4 <_printf_i+0x1bc>
 80053a0:	1b40      	subs	r0, r0, r5
 80053a2:	6060      	str	r0, [r4, #4]
 80053a4:	6863      	ldr	r3, [r4, #4]
 80053a6:	6123      	str	r3, [r4, #16]
 80053a8:	2300      	movs	r3, #0
 80053aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ae:	e7a7      	b.n	8005300 <_printf_i+0x118>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	462a      	mov	r2, r5
 80053b4:	4639      	mov	r1, r7
 80053b6:	4630      	mov	r0, r6
 80053b8:	47c0      	blx	r8
 80053ba:	3001      	adds	r0, #1
 80053bc:	d0aa      	beq.n	8005314 <_printf_i+0x12c>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	079b      	lsls	r3, r3, #30
 80053c2:	d413      	bmi.n	80053ec <_printf_i+0x204>
 80053c4:	68e0      	ldr	r0, [r4, #12]
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	4298      	cmp	r0, r3
 80053ca:	bfb8      	it	lt
 80053cc:	4618      	movlt	r0, r3
 80053ce:	e7a3      	b.n	8005318 <_printf_i+0x130>
 80053d0:	2301      	movs	r3, #1
 80053d2:	464a      	mov	r2, r9
 80053d4:	4639      	mov	r1, r7
 80053d6:	4630      	mov	r0, r6
 80053d8:	47c0      	blx	r8
 80053da:	3001      	adds	r0, #1
 80053dc:	d09a      	beq.n	8005314 <_printf_i+0x12c>
 80053de:	3501      	adds	r5, #1
 80053e0:	68e3      	ldr	r3, [r4, #12]
 80053e2:	9a03      	ldr	r2, [sp, #12]
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	42ab      	cmp	r3, r5
 80053e8:	dcf2      	bgt.n	80053d0 <_printf_i+0x1e8>
 80053ea:	e7eb      	b.n	80053c4 <_printf_i+0x1dc>
 80053ec:	2500      	movs	r5, #0
 80053ee:	f104 0919 	add.w	r9, r4, #25
 80053f2:	e7f5      	b.n	80053e0 <_printf_i+0x1f8>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ac      	bne.n	8005352 <_printf_i+0x16a>
 80053f8:	7803      	ldrb	r3, [r0, #0]
 80053fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005402:	e76c      	b.n	80052de <_printf_i+0xf6>
 8005404:	08005ab5 	.word	0x08005ab5
 8005408:	08005ac6 	.word	0x08005ac6

0800540c <_sbrk_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4c06      	ldr	r4, [pc, #24]	; (8005428 <_sbrk_r+0x1c>)
 8005410:	2300      	movs	r3, #0
 8005412:	4605      	mov	r5, r0
 8005414:	4608      	mov	r0, r1
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	f7fc fbe6 	bl	8001be8 <_sbrk>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_sbrk_r+0x1a>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	b103      	cbz	r3, 8005426 <_sbrk_r+0x1a>
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	200001bc 	.word	0x200001bc

0800542c <__sread>:
 800542c:	b510      	push	{r4, lr}
 800542e:	460c      	mov	r4, r1
 8005430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005434:	f000 fa96 	bl	8005964 <_read_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	bfab      	itete	ge
 800543c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800543e:	89a3      	ldrhlt	r3, [r4, #12]
 8005440:	181b      	addge	r3, r3, r0
 8005442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005446:	bfac      	ite	ge
 8005448:	6563      	strge	r3, [r4, #84]	; 0x54
 800544a:	81a3      	strhlt	r3, [r4, #12]
 800544c:	bd10      	pop	{r4, pc}

0800544e <__swrite>:
 800544e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005452:	461f      	mov	r7, r3
 8005454:	898b      	ldrh	r3, [r1, #12]
 8005456:	05db      	lsls	r3, r3, #23
 8005458:	4605      	mov	r5, r0
 800545a:	460c      	mov	r4, r1
 800545c:	4616      	mov	r6, r2
 800545e:	d505      	bpl.n	800546c <__swrite+0x1e>
 8005460:	2302      	movs	r3, #2
 8005462:	2200      	movs	r2, #0
 8005464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005468:	f000 f9b6 	bl	80057d8 <_lseek_r>
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	4632      	mov	r2, r6
 800547a:	463b      	mov	r3, r7
 800547c:	4628      	mov	r0, r5
 800547e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005482:	f000 b869 	b.w	8005558 <_write_r>

08005486 <__sseek>:
 8005486:	b510      	push	{r4, lr}
 8005488:	460c      	mov	r4, r1
 800548a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548e:	f000 f9a3 	bl	80057d8 <_lseek_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	bf15      	itete	ne
 8005498:	6560      	strne	r0, [r4, #84]	; 0x54
 800549a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800549e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054a2:	81a3      	strheq	r3, [r4, #12]
 80054a4:	bf18      	it	ne
 80054a6:	81a3      	strhne	r3, [r4, #12]
 80054a8:	bd10      	pop	{r4, pc}

080054aa <__sclose>:
 80054aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ae:	f000 b8d3 	b.w	8005658 <_close_r>
	...

080054b4 <__swbuf_r>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	460e      	mov	r6, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	4605      	mov	r5, r0
 80054bc:	b118      	cbz	r0, 80054c6 <__swbuf_r+0x12>
 80054be:	6983      	ldr	r3, [r0, #24]
 80054c0:	b90b      	cbnz	r3, 80054c6 <__swbuf_r+0x12>
 80054c2:	f7ff fbf7 	bl	8004cb4 <__sinit>
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <__swbuf_r+0x98>)
 80054c8:	429c      	cmp	r4, r3
 80054ca:	d12a      	bne.n	8005522 <__swbuf_r+0x6e>
 80054cc:	686c      	ldr	r4, [r5, #4]
 80054ce:	69a3      	ldr	r3, [r4, #24]
 80054d0:	60a3      	str	r3, [r4, #8]
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	071a      	lsls	r2, r3, #28
 80054d6:	d52e      	bpl.n	8005536 <__swbuf_r+0x82>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	b363      	cbz	r3, 8005536 <__swbuf_r+0x82>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	1ac0      	subs	r0, r0, r3
 80054e2:	6963      	ldr	r3, [r4, #20]
 80054e4:	b2f6      	uxtb	r6, r6
 80054e6:	4283      	cmp	r3, r0
 80054e8:	4637      	mov	r7, r6
 80054ea:	dc04      	bgt.n	80054f6 <__swbuf_r+0x42>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 f948 	bl	8005784 <_fflush_r>
 80054f4:	bb28      	cbnz	r0, 8005542 <__swbuf_r+0x8e>
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	6022      	str	r2, [r4, #0]
 8005502:	701e      	strb	r6, [r3, #0]
 8005504:	6963      	ldr	r3, [r4, #20]
 8005506:	3001      	adds	r0, #1
 8005508:	4283      	cmp	r3, r0
 800550a:	d004      	beq.n	8005516 <__swbuf_r+0x62>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	07db      	lsls	r3, r3, #31
 8005510:	d519      	bpl.n	8005546 <__swbuf_r+0x92>
 8005512:	2e0a      	cmp	r6, #10
 8005514:	d117      	bne.n	8005546 <__swbuf_r+0x92>
 8005516:	4621      	mov	r1, r4
 8005518:	4628      	mov	r0, r5
 800551a:	f000 f933 	bl	8005784 <_fflush_r>
 800551e:	b190      	cbz	r0, 8005546 <__swbuf_r+0x92>
 8005520:	e00f      	b.n	8005542 <__swbuf_r+0x8e>
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <__swbuf_r+0x9c>)
 8005524:	429c      	cmp	r4, r3
 8005526:	d101      	bne.n	800552c <__swbuf_r+0x78>
 8005528:	68ac      	ldr	r4, [r5, #8]
 800552a:	e7d0      	b.n	80054ce <__swbuf_r+0x1a>
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <__swbuf_r+0xa0>)
 800552e:	429c      	cmp	r4, r3
 8005530:	bf08      	it	eq
 8005532:	68ec      	ldreq	r4, [r5, #12]
 8005534:	e7cb      	b.n	80054ce <__swbuf_r+0x1a>
 8005536:	4621      	mov	r1, r4
 8005538:	4628      	mov	r0, r5
 800553a:	f000 f81f 	bl	800557c <__swsetup_r>
 800553e:	2800      	cmp	r0, #0
 8005540:	d0cc      	beq.n	80054dc <__swbuf_r+0x28>
 8005542:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005546:	4638      	mov	r0, r7
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554a:	bf00      	nop
 800554c:	08005a64 	.word	0x08005a64
 8005550:	08005a84 	.word	0x08005a84
 8005554:	08005a44 	.word	0x08005a44

08005558 <_write_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4c07      	ldr	r4, [pc, #28]	; (8005578 <_write_r+0x20>)
 800555c:	4605      	mov	r5, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fc faed 	bl	8001b46 <_write>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_write_r+0x1e>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	b103      	cbz	r3, 8005576 <_write_r+0x1e>
 8005574:	602b      	str	r3, [r5, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200001bc 	.word	0x200001bc

0800557c <__swsetup_r>:
 800557c:	4b32      	ldr	r3, [pc, #200]	; (8005648 <__swsetup_r+0xcc>)
 800557e:	b570      	push	{r4, r5, r6, lr}
 8005580:	681d      	ldr	r5, [r3, #0]
 8005582:	4606      	mov	r6, r0
 8005584:	460c      	mov	r4, r1
 8005586:	b125      	cbz	r5, 8005592 <__swsetup_r+0x16>
 8005588:	69ab      	ldr	r3, [r5, #24]
 800558a:	b913      	cbnz	r3, 8005592 <__swsetup_r+0x16>
 800558c:	4628      	mov	r0, r5
 800558e:	f7ff fb91 	bl	8004cb4 <__sinit>
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <__swsetup_r+0xd0>)
 8005594:	429c      	cmp	r4, r3
 8005596:	d10f      	bne.n	80055b8 <__swsetup_r+0x3c>
 8005598:	686c      	ldr	r4, [r5, #4]
 800559a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800559e:	b29a      	uxth	r2, r3
 80055a0:	0715      	lsls	r5, r2, #28
 80055a2:	d42c      	bmi.n	80055fe <__swsetup_r+0x82>
 80055a4:	06d0      	lsls	r0, r2, #27
 80055a6:	d411      	bmi.n	80055cc <__swsetup_r+0x50>
 80055a8:	2209      	movs	r2, #9
 80055aa:	6032      	str	r2, [r6, #0]
 80055ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055b6:	e03e      	b.n	8005636 <__swsetup_r+0xba>
 80055b8:	4b25      	ldr	r3, [pc, #148]	; (8005650 <__swsetup_r+0xd4>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d101      	bne.n	80055c2 <__swsetup_r+0x46>
 80055be:	68ac      	ldr	r4, [r5, #8]
 80055c0:	e7eb      	b.n	800559a <__swsetup_r+0x1e>
 80055c2:	4b24      	ldr	r3, [pc, #144]	; (8005654 <__swsetup_r+0xd8>)
 80055c4:	429c      	cmp	r4, r3
 80055c6:	bf08      	it	eq
 80055c8:	68ec      	ldreq	r4, [r5, #12]
 80055ca:	e7e6      	b.n	800559a <__swsetup_r+0x1e>
 80055cc:	0751      	lsls	r1, r2, #29
 80055ce:	d512      	bpl.n	80055f6 <__swsetup_r+0x7a>
 80055d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055d2:	b141      	cbz	r1, 80055e6 <__swsetup_r+0x6a>
 80055d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055d8:	4299      	cmp	r1, r3
 80055da:	d002      	beq.n	80055e2 <__swsetup_r+0x66>
 80055dc:	4630      	mov	r0, r6
 80055de:	f000 f973 	bl	80058c8 <_free_r>
 80055e2:	2300      	movs	r3, #0
 80055e4:	6363      	str	r3, [r4, #52]	; 0x34
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	2300      	movs	r3, #0
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	f043 0308 	orr.w	r3, r3, #8
 80055fc:	81a3      	strh	r3, [r4, #12]
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	b94b      	cbnz	r3, 8005616 <__swsetup_r+0x9a>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d003      	beq.n	8005616 <__swsetup_r+0x9a>
 800560e:	4621      	mov	r1, r4
 8005610:	4630      	mov	r0, r6
 8005612:	f000 f917 	bl	8005844 <__smakebuf_r>
 8005616:	89a2      	ldrh	r2, [r4, #12]
 8005618:	f012 0301 	ands.w	r3, r2, #1
 800561c:	d00c      	beq.n	8005638 <__swsetup_r+0xbc>
 800561e:	2300      	movs	r3, #0
 8005620:	60a3      	str	r3, [r4, #8]
 8005622:	6963      	ldr	r3, [r4, #20]
 8005624:	425b      	negs	r3, r3
 8005626:	61a3      	str	r3, [r4, #24]
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	b953      	cbnz	r3, 8005642 <__swsetup_r+0xc6>
 800562c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005630:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005634:	d1ba      	bne.n	80055ac <__swsetup_r+0x30>
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	0792      	lsls	r2, r2, #30
 800563a:	bf58      	it	pl
 800563c:	6963      	ldrpl	r3, [r4, #20]
 800563e:	60a3      	str	r3, [r4, #8]
 8005640:	e7f2      	b.n	8005628 <__swsetup_r+0xac>
 8005642:	2000      	movs	r0, #0
 8005644:	e7f7      	b.n	8005636 <__swsetup_r+0xba>
 8005646:	bf00      	nop
 8005648:	2000000c 	.word	0x2000000c
 800564c:	08005a64 	.word	0x08005a64
 8005650:	08005a84 	.word	0x08005a84
 8005654:	08005a44 	.word	0x08005a44

08005658 <_close_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4c06      	ldr	r4, [pc, #24]	; (8005674 <_close_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4605      	mov	r5, r0
 8005660:	4608      	mov	r0, r1
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	f7fc fa8b 	bl	8001b7e <_close>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_close_r+0x1a>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	b103      	cbz	r3, 8005672 <_close_r+0x1a>
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	200001bc 	.word	0x200001bc

08005678 <__sflush_r>:
 8005678:	898a      	ldrh	r2, [r1, #12]
 800567a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567e:	4605      	mov	r5, r0
 8005680:	0710      	lsls	r0, r2, #28
 8005682:	460c      	mov	r4, r1
 8005684:	d458      	bmi.n	8005738 <__sflush_r+0xc0>
 8005686:	684b      	ldr	r3, [r1, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	dc05      	bgt.n	8005698 <__sflush_r+0x20>
 800568c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	dc02      	bgt.n	8005698 <__sflush_r+0x20>
 8005692:	2000      	movs	r0, #0
 8005694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800569a:	2e00      	cmp	r6, #0
 800569c:	d0f9      	beq.n	8005692 <__sflush_r+0x1a>
 800569e:	2300      	movs	r3, #0
 80056a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056a4:	682f      	ldr	r7, [r5, #0]
 80056a6:	6a21      	ldr	r1, [r4, #32]
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	d032      	beq.n	8005712 <__sflush_r+0x9a>
 80056ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	075a      	lsls	r2, r3, #29
 80056b2:	d505      	bpl.n	80056c0 <__sflush_r+0x48>
 80056b4:	6863      	ldr	r3, [r4, #4]
 80056b6:	1ac0      	subs	r0, r0, r3
 80056b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056ba:	b10b      	cbz	r3, 80056c0 <__sflush_r+0x48>
 80056bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056be:	1ac0      	subs	r0, r0, r3
 80056c0:	2300      	movs	r3, #0
 80056c2:	4602      	mov	r2, r0
 80056c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056c6:	6a21      	ldr	r1, [r4, #32]
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b0      	blx	r6
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	d106      	bne.n	80056e0 <__sflush_r+0x68>
 80056d2:	6829      	ldr	r1, [r5, #0]
 80056d4:	291d      	cmp	r1, #29
 80056d6:	d848      	bhi.n	800576a <__sflush_r+0xf2>
 80056d8:	4a29      	ldr	r2, [pc, #164]	; (8005780 <__sflush_r+0x108>)
 80056da:	40ca      	lsrs	r2, r1
 80056dc:	07d6      	lsls	r6, r2, #31
 80056de:	d544      	bpl.n	800576a <__sflush_r+0xf2>
 80056e0:	2200      	movs	r2, #0
 80056e2:	6062      	str	r2, [r4, #4]
 80056e4:	04d9      	lsls	r1, r3, #19
 80056e6:	6922      	ldr	r2, [r4, #16]
 80056e8:	6022      	str	r2, [r4, #0]
 80056ea:	d504      	bpl.n	80056f6 <__sflush_r+0x7e>
 80056ec:	1c42      	adds	r2, r0, #1
 80056ee:	d101      	bne.n	80056f4 <__sflush_r+0x7c>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b903      	cbnz	r3, 80056f6 <__sflush_r+0x7e>
 80056f4:	6560      	str	r0, [r4, #84]	; 0x54
 80056f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056f8:	602f      	str	r7, [r5, #0]
 80056fa:	2900      	cmp	r1, #0
 80056fc:	d0c9      	beq.n	8005692 <__sflush_r+0x1a>
 80056fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005702:	4299      	cmp	r1, r3
 8005704:	d002      	beq.n	800570c <__sflush_r+0x94>
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f8de 	bl	80058c8 <_free_r>
 800570c:	2000      	movs	r0, #0
 800570e:	6360      	str	r0, [r4, #52]	; 0x34
 8005710:	e7c0      	b.n	8005694 <__sflush_r+0x1c>
 8005712:	2301      	movs	r3, #1
 8005714:	4628      	mov	r0, r5
 8005716:	47b0      	blx	r6
 8005718:	1c41      	adds	r1, r0, #1
 800571a:	d1c8      	bne.n	80056ae <__sflush_r+0x36>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0c5      	beq.n	80056ae <__sflush_r+0x36>
 8005722:	2b1d      	cmp	r3, #29
 8005724:	d001      	beq.n	800572a <__sflush_r+0xb2>
 8005726:	2b16      	cmp	r3, #22
 8005728:	d101      	bne.n	800572e <__sflush_r+0xb6>
 800572a:	602f      	str	r7, [r5, #0]
 800572c:	e7b1      	b.n	8005692 <__sflush_r+0x1a>
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	e7ad      	b.n	8005694 <__sflush_r+0x1c>
 8005738:	690f      	ldr	r7, [r1, #16]
 800573a:	2f00      	cmp	r7, #0
 800573c:	d0a9      	beq.n	8005692 <__sflush_r+0x1a>
 800573e:	0793      	lsls	r3, r2, #30
 8005740:	680e      	ldr	r6, [r1, #0]
 8005742:	bf08      	it	eq
 8005744:	694b      	ldreq	r3, [r1, #20]
 8005746:	600f      	str	r7, [r1, #0]
 8005748:	bf18      	it	ne
 800574a:	2300      	movne	r3, #0
 800574c:	eba6 0807 	sub.w	r8, r6, r7
 8005750:	608b      	str	r3, [r1, #8]
 8005752:	f1b8 0f00 	cmp.w	r8, #0
 8005756:	dd9c      	ble.n	8005692 <__sflush_r+0x1a>
 8005758:	4643      	mov	r3, r8
 800575a:	463a      	mov	r2, r7
 800575c:	6a21      	ldr	r1, [r4, #32]
 800575e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005760:	4628      	mov	r0, r5
 8005762:	47b0      	blx	r6
 8005764:	2800      	cmp	r0, #0
 8005766:	dc06      	bgt.n	8005776 <__sflush_r+0xfe>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005774:	e78e      	b.n	8005694 <__sflush_r+0x1c>
 8005776:	4407      	add	r7, r0
 8005778:	eba8 0800 	sub.w	r8, r8, r0
 800577c:	e7e9      	b.n	8005752 <__sflush_r+0xda>
 800577e:	bf00      	nop
 8005780:	20400001 	.word	0x20400001

08005784 <_fflush_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	690b      	ldr	r3, [r1, #16]
 8005788:	4605      	mov	r5, r0
 800578a:	460c      	mov	r4, r1
 800578c:	b1db      	cbz	r3, 80057c6 <_fflush_r+0x42>
 800578e:	b118      	cbz	r0, 8005798 <_fflush_r+0x14>
 8005790:	6983      	ldr	r3, [r0, #24]
 8005792:	b90b      	cbnz	r3, 8005798 <_fflush_r+0x14>
 8005794:	f7ff fa8e 	bl	8004cb4 <__sinit>
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <_fflush_r+0x48>)
 800579a:	429c      	cmp	r4, r3
 800579c:	d109      	bne.n	80057b2 <_fflush_r+0x2e>
 800579e:	686c      	ldr	r4, [r5, #4]
 80057a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a4:	b17b      	cbz	r3, 80057c6 <_fflush_r+0x42>
 80057a6:	4621      	mov	r1, r4
 80057a8:	4628      	mov	r0, r5
 80057aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057ae:	f7ff bf63 	b.w	8005678 <__sflush_r>
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <_fflush_r+0x4c>)
 80057b4:	429c      	cmp	r4, r3
 80057b6:	d101      	bne.n	80057bc <_fflush_r+0x38>
 80057b8:	68ac      	ldr	r4, [r5, #8]
 80057ba:	e7f1      	b.n	80057a0 <_fflush_r+0x1c>
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <_fflush_r+0x50>)
 80057be:	429c      	cmp	r4, r3
 80057c0:	bf08      	it	eq
 80057c2:	68ec      	ldreq	r4, [r5, #12]
 80057c4:	e7ec      	b.n	80057a0 <_fflush_r+0x1c>
 80057c6:	2000      	movs	r0, #0
 80057c8:	bd38      	pop	{r3, r4, r5, pc}
 80057ca:	bf00      	nop
 80057cc:	08005a64 	.word	0x08005a64
 80057d0:	08005a84 	.word	0x08005a84
 80057d4:	08005a44 	.word	0x08005a44

080057d8 <_lseek_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4c07      	ldr	r4, [pc, #28]	; (80057f8 <_lseek_r+0x20>)
 80057dc:	4605      	mov	r5, r0
 80057de:	4608      	mov	r0, r1
 80057e0:	4611      	mov	r1, r2
 80057e2:	2200      	movs	r2, #0
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f7fc f9f0 	bl	8001bcc <_lseek>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_lseek_r+0x1e>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_lseek_r+0x1e>
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	200001bc 	.word	0x200001bc

080057fc <__swhatbuf_r>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	460e      	mov	r6, r1
 8005800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005804:	2900      	cmp	r1, #0
 8005806:	b096      	sub	sp, #88	; 0x58
 8005808:	4614      	mov	r4, r2
 800580a:	461d      	mov	r5, r3
 800580c:	da07      	bge.n	800581e <__swhatbuf_r+0x22>
 800580e:	2300      	movs	r3, #0
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	89b3      	ldrh	r3, [r6, #12]
 8005814:	061a      	lsls	r2, r3, #24
 8005816:	d410      	bmi.n	800583a <__swhatbuf_r+0x3e>
 8005818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800581c:	e00e      	b.n	800583c <__swhatbuf_r+0x40>
 800581e:	466a      	mov	r2, sp
 8005820:	f000 f8b2 	bl	8005988 <_fstat_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	dbf2      	blt.n	800580e <__swhatbuf_r+0x12>
 8005828:	9a01      	ldr	r2, [sp, #4]
 800582a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800582e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005832:	425a      	negs	r2, r3
 8005834:	415a      	adcs	r2, r3
 8005836:	602a      	str	r2, [r5, #0]
 8005838:	e7ee      	b.n	8005818 <__swhatbuf_r+0x1c>
 800583a:	2340      	movs	r3, #64	; 0x40
 800583c:	2000      	movs	r0, #0
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	b016      	add	sp, #88	; 0x58
 8005842:	bd70      	pop	{r4, r5, r6, pc}

08005844 <__smakebuf_r>:
 8005844:	898b      	ldrh	r3, [r1, #12]
 8005846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005848:	079d      	lsls	r5, r3, #30
 800584a:	4606      	mov	r6, r0
 800584c:	460c      	mov	r4, r1
 800584e:	d507      	bpl.n	8005860 <__smakebuf_r+0x1c>
 8005850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	2301      	movs	r3, #1
 800585a:	6163      	str	r3, [r4, #20]
 800585c:	b002      	add	sp, #8
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	ab01      	add	r3, sp, #4
 8005862:	466a      	mov	r2, sp
 8005864:	f7ff ffca 	bl	80057fc <__swhatbuf_r>
 8005868:	9900      	ldr	r1, [sp, #0]
 800586a:	4605      	mov	r5, r0
 800586c:	4630      	mov	r0, r6
 800586e:	f7ff faab 	bl	8004dc8 <_malloc_r>
 8005872:	b948      	cbnz	r0, 8005888 <__smakebuf_r+0x44>
 8005874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005878:	059a      	lsls	r2, r3, #22
 800587a:	d4ef      	bmi.n	800585c <__smakebuf_r+0x18>
 800587c:	f023 0303 	bic.w	r3, r3, #3
 8005880:	f043 0302 	orr.w	r3, r3, #2
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	e7e3      	b.n	8005850 <__smakebuf_r+0xc>
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <__smakebuf_r+0x7c>)
 800588a:	62b3      	str	r3, [r6, #40]	; 0x28
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	6020      	str	r0, [r4, #0]
 8005890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005894:	81a3      	strh	r3, [r4, #12]
 8005896:	9b00      	ldr	r3, [sp, #0]
 8005898:	6163      	str	r3, [r4, #20]
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	6120      	str	r0, [r4, #16]
 800589e:	b15b      	cbz	r3, 80058b8 <__smakebuf_r+0x74>
 80058a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a4:	4630      	mov	r0, r6
 80058a6:	f000 f881 	bl	80059ac <_isatty_r>
 80058aa:	b128      	cbz	r0, 80058b8 <__smakebuf_r+0x74>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	431d      	orrs	r5, r3
 80058bc:	81a5      	strh	r5, [r4, #12]
 80058be:	e7cd      	b.n	800585c <__smakebuf_r+0x18>
 80058c0:	08004c7d 	.word	0x08004c7d

080058c4 <__malloc_lock>:
 80058c4:	4770      	bx	lr

080058c6 <__malloc_unlock>:
 80058c6:	4770      	bx	lr

080058c8 <_free_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4605      	mov	r5, r0
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d045      	beq.n	800595c <_free_r+0x94>
 80058d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d4:	1f0c      	subs	r4, r1, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb8      	it	lt
 80058da:	18e4      	addlt	r4, r4, r3
 80058dc:	f7ff fff2 	bl	80058c4 <__malloc_lock>
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <_free_r+0x98>)
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	4610      	mov	r0, r2
 80058e6:	b933      	cbnz	r3, 80058f6 <_free_r+0x2e>
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	6014      	str	r4, [r2, #0]
 80058ec:	4628      	mov	r0, r5
 80058ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f2:	f7ff bfe8 	b.w	80058c6 <__malloc_unlock>
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	d90c      	bls.n	8005914 <_free_r+0x4c>
 80058fa:	6821      	ldr	r1, [r4, #0]
 80058fc:	1862      	adds	r2, r4, r1
 80058fe:	4293      	cmp	r3, r2
 8005900:	bf04      	itt	eq
 8005902:	681a      	ldreq	r2, [r3, #0]
 8005904:	685b      	ldreq	r3, [r3, #4]
 8005906:	6063      	str	r3, [r4, #4]
 8005908:	bf04      	itt	eq
 800590a:	1852      	addeq	r2, r2, r1
 800590c:	6022      	streq	r2, [r4, #0]
 800590e:	6004      	str	r4, [r0, #0]
 8005910:	e7ec      	b.n	80058ec <_free_r+0x24>
 8005912:	4613      	mov	r3, r2
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	b10a      	cbz	r2, 800591c <_free_r+0x54>
 8005918:	42a2      	cmp	r2, r4
 800591a:	d9fa      	bls.n	8005912 <_free_r+0x4a>
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	1858      	adds	r0, r3, r1
 8005920:	42a0      	cmp	r0, r4
 8005922:	d10b      	bne.n	800593c <_free_r+0x74>
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	4401      	add	r1, r0
 8005928:	1858      	adds	r0, r3, r1
 800592a:	4282      	cmp	r2, r0
 800592c:	6019      	str	r1, [r3, #0]
 800592e:	d1dd      	bne.n	80058ec <_free_r+0x24>
 8005930:	6810      	ldr	r0, [r2, #0]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	4401      	add	r1, r0
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	e7d7      	b.n	80058ec <_free_r+0x24>
 800593c:	d902      	bls.n	8005944 <_free_r+0x7c>
 800593e:	230c      	movs	r3, #12
 8005940:	602b      	str	r3, [r5, #0]
 8005942:	e7d3      	b.n	80058ec <_free_r+0x24>
 8005944:	6820      	ldr	r0, [r4, #0]
 8005946:	1821      	adds	r1, r4, r0
 8005948:	428a      	cmp	r2, r1
 800594a:	bf04      	itt	eq
 800594c:	6811      	ldreq	r1, [r2, #0]
 800594e:	6852      	ldreq	r2, [r2, #4]
 8005950:	6062      	str	r2, [r4, #4]
 8005952:	bf04      	itt	eq
 8005954:	1809      	addeq	r1, r1, r0
 8005956:	6021      	streq	r1, [r4, #0]
 8005958:	605c      	str	r4, [r3, #4]
 800595a:	e7c7      	b.n	80058ec <_free_r+0x24>
 800595c:	bd38      	pop	{r3, r4, r5, pc}
 800595e:	bf00      	nop
 8005960:	200000a0 	.word	0x200000a0

08005964 <_read_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4c07      	ldr	r4, [pc, #28]	; (8005984 <_read_r+0x20>)
 8005968:	4605      	mov	r5, r0
 800596a:	4608      	mov	r0, r1
 800596c:	4611      	mov	r1, r2
 800596e:	2200      	movs	r2, #0
 8005970:	6022      	str	r2, [r4, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	f7fc f8ca 	bl	8001b0c <_read>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_read_r+0x1e>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	b103      	cbz	r3, 8005982 <_read_r+0x1e>
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	200001bc 	.word	0x200001bc

08005988 <_fstat_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4c07      	ldr	r4, [pc, #28]	; (80059a8 <_fstat_r+0x20>)
 800598c:	2300      	movs	r3, #0
 800598e:	4605      	mov	r5, r0
 8005990:	4608      	mov	r0, r1
 8005992:	4611      	mov	r1, r2
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	f7fc f8fe 	bl	8001b96 <_fstat>
 800599a:	1c43      	adds	r3, r0, #1
 800599c:	d102      	bne.n	80059a4 <_fstat_r+0x1c>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	b103      	cbz	r3, 80059a4 <_fstat_r+0x1c>
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	bd38      	pop	{r3, r4, r5, pc}
 80059a6:	bf00      	nop
 80059a8:	200001bc 	.word	0x200001bc

080059ac <_isatty_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4c06      	ldr	r4, [pc, #24]	; (80059c8 <_isatty_r+0x1c>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4605      	mov	r5, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	f7fc f8fd 	bl	8001bb6 <_isatty>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_isatty_r+0x1a>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_isatty_r+0x1a>
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	200001bc 	.word	0x200001bc

080059cc <_init>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr

080059d8 <_fini>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr
