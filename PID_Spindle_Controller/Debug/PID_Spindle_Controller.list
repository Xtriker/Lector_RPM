
PID_Spindle_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002100  08002100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002124  08002124  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002124  08002124  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002124  08002124  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800212c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002138  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002138  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c44  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001956  00000000  00000000  00029c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002bf50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014aa8  00000000  00000000  0002c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b3d  00000000  00000000  000412a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006deb4  00000000  00000000  00048ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6c91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  000b6d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020e8 	.word	0x080020e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020e8 	.word	0x080020e8

0800014c <app_LecturaBoton>:

Presionado_boton estado = NO_PRESIONADO;

uint8_t boton = 0,contador = 0;
void app_LecturaBoton(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
		HAL_Delay(5);
 8000150:	2005      	movs	r0, #5
 8000152:	f000 fec9 	bl	8000ee8 <HAL_Delay>
		boton = HAL_GPIO_ReadPin(Detener_GPIO_Port, Detener_Pin);
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4810      	ldr	r0, [pc, #64]	; (800019c <app_LecturaBoton+0x50>)
 800015c:	f001 f91c 	bl	8001398 <HAL_GPIO_ReadPin>
 8000160:	4603      	mov	r3, r0
 8000162:	461a      	mov	r2, r3
 8000164:	4b0e      	ldr	r3, [pc, #56]	; (80001a0 <app_LecturaBoton+0x54>)
 8000166:	701a      	strb	r2, [r3, #0]
		if(boton == 0)
 8000168:	4b0d      	ldr	r3, [pc, #52]	; (80001a0 <app_LecturaBoton+0x54>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b00      	cmp	r3, #0
 800016e:	d105      	bne.n	800017c <app_LecturaBoton+0x30>
		{
			contador = contador + 1;
 8000170:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <app_LecturaBoton+0x58>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	3301      	adds	r3, #1
 8000176:	b2da      	uxtb	r2, r3
 8000178:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <app_LecturaBoton+0x58>)
 800017a:	701a      	strb	r2, [r3, #0]
		}
		if(contador == 20)
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <app_LecturaBoton+0x58>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	2b14      	cmp	r3, #20
 8000182:	d106      	bne.n	8000192 <app_LecturaBoton+0x46>
		{
			contador = 0;
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <app_LecturaBoton+0x58>)
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
			estado = PRESIONADO;
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <app_LecturaBoton+0x5c>)
 800018c:	2201      	movs	r2, #1
 800018e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			estado = NO_PRESIONADO;
		}
}
 8000190:	e002      	b.n	8000198 <app_LecturaBoton+0x4c>
			estado = NO_PRESIONADO;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <app_LecturaBoton+0x5c>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
}
 8000198:	bf00      	nop
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010c00 	.word	0x40010c00
 80001a0:	20000029 	.word	0x20000029
 80001a4:	2000002a 	.word	0x2000002a
 80001a8:	20000028 	.word	0x20000028

080001ac <app_Debounce>:

uint8_t app_Debounce(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	volatile uint8_t Presionado = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	71fb      	strb	r3, [r7, #7]
	app_LecturaBoton();
 80001b6:	f7ff ffc9 	bl	800014c <app_LecturaBoton>
	switch(estado)
 80001ba:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <app_Debounce+0x34>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d002      	beq.n	80001c8 <app_Debounce+0x1c>
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d003      	beq.n	80001ce <app_Debounce+0x22>
 80001c6:	e005      	b.n	80001d4 <app_Debounce+0x28>
	{
		case NO_PRESIONADO:
		{
			/* No realiza nada */
			Presionado = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	71fb      	strb	r3, [r7, #7]
		}break;
 80001cc:	e002      	b.n	80001d4 <app_Debounce+0x28>
		case PRESIONADO:
		{
			Presionado = 1;
 80001ce:	2301      	movs	r3, #1
 80001d0:	71fb      	strb	r3, [r7, #7]
		}break;
 80001d2:	bf00      	nop
		default:
		{

		}
	}
	return Presionado;
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	b2db      	uxtb	r3, r3
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20000028 	.word	0x20000028

080001e4 <app_NumeroA7Segmentos>:
/* Variables globales */
uint8_t Bandera[]={0,0,0};

/* Conversion del valor numerico para 7 segmentos */
void app_NumeroA7Segmentos(uint8_t Numero)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
	switch(Numero)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b09      	cmp	r3, #9
 80001f2:	f200 817f 	bhi.w	80004f4 <app_NumeroA7Segmentos+0x310>
 80001f6:	a201      	add	r2, pc, #4	; (adr r2, 80001fc <app_NumeroA7Segmentos+0x18>)
 80001f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fc:	08000225 	.word	0x08000225
 8000200:	0800026d 	.word	0x0800026d
 8000204:	080002b5 	.word	0x080002b5
 8000208:	080002fd 	.word	0x080002fd
 800020c:	08000345 	.word	0x08000345
 8000210:	0800038d 	.word	0x0800038d
 8000214:	080003d5 	.word	0x080003d5
 8000218:	0800041d 	.word	0x0800041d
 800021c:	08000465 	.word	0x08000465
 8000220:	080004ad 	.word	0x080004ad
	{
		case 0:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	2101      	movs	r1, #1
 8000228:	48b4      	ldr	r0, [pc, #720]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800022a:	f001 f8cc 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800022e:	2201      	movs	r2, #1
 8000230:	2102      	movs	r1, #2
 8000232:	48b2      	ldr	r0, [pc, #712]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000234:	f001 f8c7 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	2104      	movs	r1, #4
 800023c:	48af      	ldr	r0, [pc, #700]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800023e:	f001 f8c2 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000242:	2201      	movs	r2, #1
 8000244:	2108      	movs	r1, #8
 8000246:	48ad      	ldr	r0, [pc, #692]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000248:	f001 f8bd 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800024c:	2201      	movs	r2, #1
 800024e:	2110      	movs	r1, #16
 8000250:	48aa      	ldr	r0, [pc, #680]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000252:	f001 f8b8 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	2120      	movs	r1, #32
 800025a:	48a8      	ldr	r0, [pc, #672]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800025c:	f001 f8b3 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2140      	movs	r1, #64	; 0x40
 8000264:	48a5      	ldr	r0, [pc, #660]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000266:	f001 f8ae 	bl	80013c6 <HAL_GPIO_WritePin>

		}break;
 800026a:	e143      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 1:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 800026c:	2200      	movs	r2, #0
 800026e:	2101      	movs	r1, #1
 8000270:	48a2      	ldr	r0, [pc, #648]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000272:	f001 f8a8 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000276:	2201      	movs	r2, #1
 8000278:	2102      	movs	r1, #2
 800027a:	48a0      	ldr	r0, [pc, #640]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800027c:	f001 f8a3 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2104      	movs	r1, #4
 8000284:	489d      	ldr	r0, [pc, #628]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000286:	f001 f89e 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2108      	movs	r1, #8
 800028e:	489b      	ldr	r0, [pc, #620]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000290:	f001 f899 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	2110      	movs	r1, #16
 8000298:	4898      	ldr	r0, [pc, #608]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800029a:	f001 f894 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	4896      	ldr	r0, [pc, #600]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002a4:	f001 f88f 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2140      	movs	r1, #64	; 0x40
 80002ac:	4893      	ldr	r0, [pc, #588]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002ae:	f001 f88a 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 80002b2:	e11f      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 2:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	4890      	ldr	r0, [pc, #576]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002ba:	f001 f884 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80002be:	2201      	movs	r2, #1
 80002c0:	2102      	movs	r1, #2
 80002c2:	488e      	ldr	r0, [pc, #568]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002c4:	f001 f87f 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2104      	movs	r1, #4
 80002cc:	488b      	ldr	r0, [pc, #556]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002ce:	f001 f87a 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2108      	movs	r1, #8
 80002d6:	4889      	ldr	r0, [pc, #548]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002d8:	f001 f875 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	4886      	ldr	r0, [pc, #536]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002e2:	f001 f870 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2120      	movs	r1, #32
 80002ea:	4884      	ldr	r0, [pc, #528]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002ec:	f001 f86b 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	4881      	ldr	r0, [pc, #516]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80002f6:	f001 f866 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 80002fa:	e0fb      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 3:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2101      	movs	r1, #1
 8000300:	487e      	ldr	r0, [pc, #504]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000302:	f001 f860 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000306:	2201      	movs	r2, #1
 8000308:	2102      	movs	r1, #2
 800030a:	487c      	ldr	r0, [pc, #496]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800030c:	f001 f85b 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	2104      	movs	r1, #4
 8000314:	4879      	ldr	r0, [pc, #484]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000316:	f001 f856 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 800031a:	2201      	movs	r2, #1
 800031c:	2108      	movs	r1, #8
 800031e:	4877      	ldr	r0, [pc, #476]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000320:	f001 f851 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000324:	2200      	movs	r2, #0
 8000326:	2110      	movs	r1, #16
 8000328:	4874      	ldr	r0, [pc, #464]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800032a:	f001 f84c 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	2120      	movs	r1, #32
 8000332:	4872      	ldr	r0, [pc, #456]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000334:	f001 f847 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	486f      	ldr	r0, [pc, #444]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800033e:	f001 f842 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 8000342:	e0d7      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 4:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	2101      	movs	r1, #1
 8000348:	486c      	ldr	r0, [pc, #432]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800034a:	f001 f83c 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800034e:	2201      	movs	r2, #1
 8000350:	2102      	movs	r1, #2
 8000352:	486a      	ldr	r0, [pc, #424]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000354:	f001 f837 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000358:	2201      	movs	r2, #1
 800035a:	2104      	movs	r1, #4
 800035c:	4867      	ldr	r0, [pc, #412]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800035e:	f001 f832 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2108      	movs	r1, #8
 8000366:	4865      	ldr	r0, [pc, #404]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000368:	f001 f82d 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2110      	movs	r1, #16
 8000370:	4862      	ldr	r0, [pc, #392]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000372:	f001 f828 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000376:	2201      	movs	r2, #1
 8000378:	2120      	movs	r1, #32
 800037a:	4860      	ldr	r0, [pc, #384]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800037c:	f001 f823 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000380:	2201      	movs	r2, #1
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	485d      	ldr	r0, [pc, #372]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000386:	f001 f81e 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 800038a:	e0b3      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 5:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2101      	movs	r1, #1
 8000390:	485a      	ldr	r0, [pc, #360]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000392:	f001 f818 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2102      	movs	r1, #2
 800039a:	4858      	ldr	r0, [pc, #352]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800039c:	f001 f813 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2104      	movs	r1, #4
 80003a4:	4855      	ldr	r0, [pc, #340]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003a6:	f001 f80e 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2108      	movs	r1, #8
 80003ae:	4853      	ldr	r0, [pc, #332]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003b0:	f001 f809 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2110      	movs	r1, #16
 80003b8:	4850      	ldr	r0, [pc, #320]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003ba:	f001 f804 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80003be:	2201      	movs	r2, #1
 80003c0:	2120      	movs	r1, #32
 80003c2:	484e      	ldr	r0, [pc, #312]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003c4:	f000 ffff 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2140      	movs	r1, #64	; 0x40
 80003cc:	484b      	ldr	r0, [pc, #300]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003ce:	f000 fffa 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 80003d2:	e08f      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 6:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2101      	movs	r1, #1
 80003d8:	4848      	ldr	r0, [pc, #288]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003da:	f000 fff4 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2102      	movs	r1, #2
 80003e2:	4846      	ldr	r0, [pc, #280]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003e4:	f000 ffef 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2104      	movs	r1, #4
 80003ec:	4843      	ldr	r0, [pc, #268]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003ee:	f000 ffea 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2108      	movs	r1, #8
 80003f6:	4841      	ldr	r0, [pc, #260]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80003f8:	f000 ffe5 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	483e      	ldr	r0, [pc, #248]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000402:	f000 ffe0 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000406:	2201      	movs	r2, #1
 8000408:	2120      	movs	r1, #32
 800040a:	483c      	ldr	r0, [pc, #240]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800040c:	f000 ffdb 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000410:	2201      	movs	r2, #1
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	4839      	ldr	r0, [pc, #228]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000416:	f000 ffd6 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 800041a:	e06b      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 7:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 800041c:	2201      	movs	r2, #1
 800041e:	2101      	movs	r1, #1
 8000420:	4836      	ldr	r0, [pc, #216]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000422:	f000 ffd0 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	2102      	movs	r1, #2
 800042a:	4834      	ldr	r0, [pc, #208]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800042c:	f000 ffcb 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	2104      	movs	r1, #4
 8000434:	4831      	ldr	r0, [pc, #196]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000436:	f000 ffc6 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2108      	movs	r1, #8
 800043e:	482f      	ldr	r0, [pc, #188]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000440:	f000 ffc1 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2110      	movs	r1, #16
 8000448:	482c      	ldr	r0, [pc, #176]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800044a:	f000 ffbc 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	482a      	ldr	r0, [pc, #168]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000454:	f000 ffb7 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 8000458:	2201      	movs	r2, #1
 800045a:	2140      	movs	r1, #64	; 0x40
 800045c:	4827      	ldr	r0, [pc, #156]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800045e:	f000 ffb2 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 8000462:	e047      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 8:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	2101      	movs	r1, #1
 8000468:	4824      	ldr	r0, [pc, #144]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800046a:	f000 ffac 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	2102      	movs	r1, #2
 8000472:	4822      	ldr	r0, [pc, #136]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000474:	f000 ffa7 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	2104      	movs	r1, #4
 800047c:	481f      	ldr	r0, [pc, #124]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800047e:	f000 ffa2 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 8000482:	2201      	movs	r2, #1
 8000484:	2108      	movs	r1, #8
 8000486:	481d      	ldr	r0, [pc, #116]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000488:	f000 ff9d 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 1);
 800048c:	2201      	movs	r2, #1
 800048e:	2110      	movs	r1, #16
 8000490:	481a      	ldr	r0, [pc, #104]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 8000492:	f000 ff98 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	2120      	movs	r1, #32
 800049a:	4818      	ldr	r0, [pc, #96]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 800049c:	f000 ff93 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2140      	movs	r1, #64	; 0x40
 80004a4:	4815      	ldr	r0, [pc, #84]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004a6:	f000 ff8e 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 80004aa:	e023      	b.n	80004f4 <app_NumeroA7Segmentos+0x310>
		case 9:
		{
			HAL_GPIO_WritePin(Segmento_A_GPIO_Port, Segmento_A_Pin, 1);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2101      	movs	r1, #1
 80004b0:	4812      	ldr	r0, [pc, #72]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004b2:	f000 ff88 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_B_GPIO_Port, Segmento_B_Pin, 1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	2102      	movs	r1, #2
 80004ba:	4810      	ldr	r0, [pc, #64]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004bc:	f000 ff83 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_C_GPIO_Port, Segmento_C_Pin, 1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2104      	movs	r1, #4
 80004c4:	480d      	ldr	r0, [pc, #52]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004c6:	f000 ff7e 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_D_GPIO_Port, Segmento_D_Pin, 1);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2108      	movs	r1, #8
 80004ce:	480b      	ldr	r0, [pc, #44]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004d0:	f000 ff79 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_E_GPIO_Port, Segmento_E_Pin, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2110      	movs	r1, #16
 80004d8:	4808      	ldr	r0, [pc, #32]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004da:	f000 ff74 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_F_GPIO_Port, Segmento_F_Pin, 1);
 80004de:	2201      	movs	r2, #1
 80004e0:	2120      	movs	r1, #32
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004e4:	f000 ff6f 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Segmento_G_GPIO_Port, Segmento_G_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2140      	movs	r1, #64	; 0x40
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <app_NumeroA7Segmentos+0x318>)
 80004ee:	f000 ff6a 	bl	80013c6 <HAL_GPIO_WritePin>
		}break;
 80004f2:	bf00      	nop
		{

			/*No hace nada */
		}
	}
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40010c00 	.word	0x40010c00

08000500 <app_SeleccionDisplay>:

/* Seleccion del display, su uso es para 4 displays de 7 segmentos */
/* Es necesario el usado de transistores */
void app_SeleccionDisplay(uint8_t Display)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d86f      	bhi.n	80005f0 <app_SeleccionDisplay+0xf0>
 8000510:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <app_SeleccionDisplay+0x18>)
 8000512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000516:	bf00      	nop
 8000518:	08000529 	.word	0x08000529
 800051c:	0800055b 	.word	0x0800055b
 8000520:	0800058d 	.word	0x0800058d
 8000524:	080005bf 	.word	0x080005bf
	{
		case 0:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052e:	483e      	ldr	r0, [pc, #248]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000530:	f000 ff49 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053a:	483b      	ldr	r0, [pc, #236]	; (8000628 <app_SeleccionDisplay+0x128>)
 800053c:	f000 ff43 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000546:	4838      	ldr	r0, [pc, #224]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000548:	f000 ff3d 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000552:	4835      	ldr	r0, [pc, #212]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000554:	f000 ff37 	bl	80013c6 <HAL_GPIO_WritePin>
			}break;
 8000558:	e062      	b.n	8000620 <app_SeleccionDisplay+0x120>
		case 1:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	4831      	ldr	r0, [pc, #196]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000562:	f000 ff30 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	482e      	ldr	r0, [pc, #184]	; (8000628 <app_SeleccionDisplay+0x128>)
 800056e:	f000 ff2a 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000578:	482b      	ldr	r0, [pc, #172]	; (8000628 <app_SeleccionDisplay+0x128>)
 800057a:	f000 ff24 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	4828      	ldr	r0, [pc, #160]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000586:	f000 ff1e 	bl	80013c6 <HAL_GPIO_WritePin>
			}break;
 800058a:	e049      	b.n	8000620 <app_SeleccionDisplay+0x120>
		case 2:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000592:	4825      	ldr	r0, [pc, #148]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000594:	f000 ff17 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059e:	4822      	ldr	r0, [pc, #136]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005a0:	f000 ff11 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005aa:	481f      	ldr	r0, [pc, #124]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005ac:	f000 ff0b 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b6:	481c      	ldr	r0, [pc, #112]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005b8:	f000 ff05 	bl	80013c6 <HAL_GPIO_WritePin>
			}break;
 80005bc:	e030      	b.n	8000620 <app_SeleccionDisplay+0x120>
		case 3:
			{
				HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005c6:	f000 fefe 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	4815      	ldr	r0, [pc, #84]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005d2:	f000 fef8 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005de:	f000 fef2 	bl	80013c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005ea:	f000 feec 	bl	80013c6 <HAL_GPIO_WritePin>
			}break;
 80005ee:	e017      	b.n	8000620 <app_SeleccionDisplay+0x120>
		default:
		{
			/* Envia todos los displays a 1 logicos */
			HAL_GPIO_WritePin(Display_0_GPIO_Port, Display_0_Pin, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <app_SeleccionDisplay+0x128>)
 80005f8:	f000 fee5 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_1_GPIO_Port, Display_1_Pin, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000604:	f000 fedf 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_2_GPIO_Port, Display_2_Pin, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <app_SeleccionDisplay+0x128>)
 8000610:	f000 fed9 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display_3_GPIO_Port, Display_3_Pin, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <app_SeleccionDisplay+0x128>)
 800061c:	f000 fed3 	bl	80013c6 <HAL_GPIO_WritePin>
		}
	}
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40010c00 	.word	0x40010c00

0800062c <app_Despliegue>:

/* Separacion de numero en unidades, decenas, centenas ... */
void app_Despliegue(uint16_t Numero)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	uint8_t Primero  =  Numero % 10;
 8000636:	88fa      	ldrh	r2, [r7, #6]
 8000638:	4b8a      	ldr	r3, [pc, #552]	; (8000864 <app_Despliegue+0x238>)
 800063a:	fba3 1302 	umull	r1, r3, r3, r2
 800063e:	08d9      	lsrs	r1, r3, #3
 8000640:	460b      	mov	r3, r1
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	73fb      	strb	r3, [r7, #15]
	uint8_t Segundo =  ( Numero - Primero ) % 100 / 10;
 800064e:	88fa      	ldrh	r2, [r7, #6]
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	1ad2      	subs	r2, r2, r3
 8000654:	4b84      	ldr	r3, [pc, #528]	; (8000868 <app_Despliegue+0x23c>)
 8000656:	fb83 1302 	smull	r1, r3, r3, r2
 800065a:	1159      	asrs	r1, r3, #5
 800065c:	17d3      	asrs	r3, r2, #31
 800065e:	1acb      	subs	r3, r1, r3
 8000660:	2164      	movs	r1, #100	; 0x64
 8000662:	fb01 f303 	mul.w	r3, r1, r3
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	4a80      	ldr	r2, [pc, #512]	; (800086c <app_Despliegue+0x240>)
 800066a:	fb82 1203 	smull	r1, r2, r2, r3
 800066e:	1092      	asrs	r2, r2, #2
 8000670:	17db      	asrs	r3, r3, #31
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	73bb      	strb	r3, [r7, #14]
	uint8_t Tercero  =  ( Numero - Primero - Segundo ) % 1000 / 100;
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	1ad2      	subs	r2, r2, r3
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <app_Despliegue+0x244>)
 8000682:	fb83 1302 	smull	r1, r3, r3, r2
 8000686:	1199      	asrs	r1, r3, #6
 8000688:	17d3      	asrs	r3, r2, #31
 800068a:	1acb      	subs	r3, r1, r3
 800068c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000690:	fb01 f303 	mul.w	r3, r1, r3
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	4a74      	ldr	r2, [pc, #464]	; (8000868 <app_Despliegue+0x23c>)
 8000698:	fb82 1203 	smull	r1, r2, r2, r3
 800069c:	1152      	asrs	r2, r2, #5
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	737b      	strb	r3, [r7, #13]
	uint8_t Cuarto =  ( Numero - Primero - Segundo - Tercero ) % 10000 / 1000;
 80006a4:	88fa      	ldrh	r2, [r7, #6]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	1ad2      	subs	r2, r2, r3
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	1ad2      	subs	r2, r2, r3
 80006ae:	7b7b      	ldrb	r3, [r7, #13]
 80006b0:	1ad2      	subs	r2, r2, r3
 80006b2:	4b70      	ldr	r3, [pc, #448]	; (8000874 <app_Despliegue+0x248>)
 80006b4:	fb83 1302 	smull	r1, r3, r3, r2
 80006b8:	1319      	asrs	r1, r3, #12
 80006ba:	17d3      	asrs	r3, r2, #31
 80006bc:	1acb      	subs	r3, r1, r3
 80006be:	f242 7110 	movw	r1, #10000	; 0x2710
 80006c2:	fb01 f303 	mul.w	r3, r1, r3
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	4a69      	ldr	r2, [pc, #420]	; (8000870 <app_Despliegue+0x244>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	1192      	asrs	r2, r2, #6
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	733b      	strb	r3, [r7, #12]
	uint8_t Quinto = (Numero - Primero - Segundo - Tercero - Cuarto) % 100000 / 10000;
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	1ad2      	subs	r2, r2, r3
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	1ad2      	subs	r2, r2, r3
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	7b3b      	ldrb	r3, [r7, #12]
 80006e6:	1ad2      	subs	r2, r2, r3
 80006e8:	4b63      	ldr	r3, [pc, #396]	; (8000878 <app_Despliegue+0x24c>)
 80006ea:	fb83 1302 	smull	r1, r3, r3, r2
 80006ee:	1359      	asrs	r1, r3, #13
 80006f0:	17d3      	asrs	r3, r2, #31
 80006f2:	1acb      	subs	r3, r1, r3
 80006f4:	4961      	ldr	r1, [pc, #388]	; (800087c <app_Despliegue+0x250>)
 80006f6:	fb01 f303 	mul.w	r3, r1, r3
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	4a5d      	ldr	r2, [pc, #372]	; (8000874 <app_Despliegue+0x248>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1312      	asrs	r2, r2, #12
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	72fb      	strb	r3, [r7, #11]
	if (Numero > 9999)
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000710:	4293      	cmp	r3, r2
 8000712:	d937      	bls.n	8000784 <app_Despliegue+0x158>
	{
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	4859      	ldr	r0, [pc, #356]	; (8000880 <app_Despliegue+0x254>)
 800071a:	f000 fe54 	bl	80013c6 <HAL_GPIO_WritePin>
		app_SeleccionDisplay(0);
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff feee 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Quinto);
 8000724:	7afb      	ldrb	r3, [r7, #11]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd5c 	bl	80001e4 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 fbdb 	bl	8000ee8 <HAL_Delay>

		app_SeleccionDisplay(1);
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fee4 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Cuarto);
 8000738:	7b3b      	ldrb	r3, [r7, #12]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd52 	bl	80001e4 <app_NumeroA7Segmentos>

		HAL_Delay(3);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 fbd1 	bl	8000ee8 <HAL_Delay>
		app_SeleccionDisplay(2);
 8000746:	2002      	movs	r0, #2
 8000748:	f7ff feda 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Tercero);
 800074c:	7b7b      	ldrb	r3, [r7, #13]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd48 	bl	80001e4 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 fbc7 	bl	8000ee8 <HAL_Delay>
		app_SeleccionDisplay(3);
 800075a:	2003      	movs	r0, #3
 800075c:	f7ff fed0 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Segundo);
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd3e 	bl	80001e4 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 8000768:	2003      	movs	r0, #3
 800076a:	f000 fbbd 	bl	8000ee8 <HAL_Delay>
		app_SeleccionDisplay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fec6 	bl	8000500 <app_SeleccionDisplay>
		//app_NumeroA7Segmentos(Cuarto);
		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	4841      	ldr	r0, [pc, #260]	; (8000880 <app_Despliegue+0x254>)
 800077a:	f000 fe24 	bl	80013c6 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 800077e:	2003      	movs	r0, #3
 8000780:	f000 fbb2 	bl	8000ee8 <HAL_Delay>

	}
	if(Numero < 9999)
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	f242 720e 	movw	r2, #9998	; 0x270e
 800078a:	4293      	cmp	r3, r2
 800078c:	d865      	bhi.n	800085a <app_Despliegue+0x22e>
	{


		HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	483b      	ldr	r0, [pc, #236]	; (8000880 <app_Despliegue+0x254>)
 8000794:	f000 fe17 	bl	80013c6 <HAL_GPIO_WritePin>
		app_SeleccionDisplay(0);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff feb1 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Cuarto);
 800079e:	7b3b      	ldrb	r3, [r7, #12]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd1f 	bl	80001e4 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f000 fb9e 	bl	8000ee8 <HAL_Delay>
		app_SeleccionDisplay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fea7 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Tercero);
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd15 	bl	80001e4 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 80007ba:	2003      	movs	r0, #3
 80007bc:	f000 fb94 	bl	8000ee8 <HAL_Delay>
		app_SeleccionDisplay(2);
 80007c0:	2002      	movs	r0, #2
 80007c2:	f7ff fe9d 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Segundo);
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd0b 	bl	80001e4 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 80007ce:	2003      	movs	r0, #3
 80007d0:	f000 fb8a 	bl	8000ee8 <HAL_Delay>
		app_SeleccionDisplay(3);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f7ff fe93 	bl	8000500 <app_SeleccionDisplay>
		app_NumeroA7Segmentos(Primero);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd01 	bl	80001e4 <app_NumeroA7Segmentos>
		HAL_Delay(3);
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 fb80 	bl	8000ee8 <HAL_Delay>
		if(Bandera[0] == 1)
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <app_Despliegue+0x258>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10e      	bne.n	800080e <app_Despliegue+0x1e2>
		{
			app_SeleccionDisplay(0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff fe85 	bl	8000500 <app_SeleccionDisplay>
			app_NumeroA7Segmentos(Cuarto);
 80007f6:	7b3b      	ldrb	r3, [r7, #12]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fcf3 	bl	80001e4 <app_NumeroA7Segmentos>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	481f      	ldr	r0, [pc, #124]	; (8000880 <app_Despliegue+0x254>)
 8000804:	f000 fddf 	bl	80013c6 <HAL_GPIO_WritePin>
			HAL_Delay(3);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 fb6d 	bl	8000ee8 <HAL_Delay>
		}
		if(Bandera[1] == 1)
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <app_Despliegue+0x258>)
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10e      	bne.n	8000834 <app_Despliegue+0x208>
		{
			app_SeleccionDisplay(1);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff fe72 	bl	8000500 <app_SeleccionDisplay>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <app_Despliegue+0x254>)
 8000822:	f000 fdd0 	bl	80013c6 <HAL_GPIO_WritePin>
			app_NumeroA7Segmentos(Tercero);
 8000826:	7b7b      	ldrb	r3, [r7, #13]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fcdb 	bl	80001e4 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 800082e:	2003      	movs	r0, #3
 8000830:	f000 fb5a 	bl	8000ee8 <HAL_Delay>
		}
		if(Bandera[2] == 1)
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <app_Despliegue+0x258>)
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d10e      	bne.n	800085a <app_Despliegue+0x22e>
		{
			app_SeleccionDisplay(2);
 800083c:	2002      	movs	r0, #2
 800083e:	f7ff fe5f 	bl	8000500 <app_SeleccionDisplay>
			HAL_GPIO_WritePin(Segmento_H_GPIO_Port, Segmento_H_Pin, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	480e      	ldr	r0, [pc, #56]	; (8000880 <app_Despliegue+0x254>)
 8000848:	f000 fdbd 	bl	80013c6 <HAL_GPIO_WritePin>
			app_NumeroA7Segmentos(Segundo);
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fcc8 	bl	80001e4 <app_NumeroA7Segmentos>
			HAL_Delay(3);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 fb47 	bl	8000ee8 <HAL_Delay>
		}
	}

}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	cccccccd 	.word	0xcccccccd
 8000868:	51eb851f 	.word	0x51eb851f
 800086c:	66666667 	.word	0x66666667
 8000870:	10624dd3 	.word	0x10624dd3
 8000874:	68db8bad 	.word	0x68db8bad
 8000878:	14f8b589 	.word	0x14f8b589
 800087c:	000186a0 	.word	0x000186a0
 8000880:	40010c00 	.word	0x40010c00
 8000884:	2000002c 	.word	0x2000002c

08000888 <app_ConteoFrecuencia>:

Estados seleccion = Inicio;

uint16_t incremento = 0,frecuencia = 0;
uint16_t app_ConteoFrecuencia(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

	htim2.Instance->CNT = 0;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <app_ConteoFrecuencia+0x5c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim2.Instance->CNT < 1000)
 8000894:	e017      	b.n	80008c6 <app_ConteoFrecuencia+0x3e>
	{
		/* Espera el estado de flanco de subida */
		while(!(HAL_GPIO_ReadPin(Entrada_GPIO_Port, Entrada_Pin)));
 8000896:	bf00      	nop
 8000898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <app_ConteoFrecuencia+0x60>)
 800089e:	f000 fd7b 	bl	8001398 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f7      	beq.n	8000898 <app_ConteoFrecuencia+0x10>
		/* Espera el estado de flanco de bajada */
		while((HAL_GPIO_ReadPin(Entrada_GPIO_Port, Entrada_Pin)));
 80008a8:	bf00      	nop
 80008aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <app_ConteoFrecuencia+0x60>)
 80008b0:	f000 fd72 	bl	8001398 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f7      	bne.n	80008aa <app_ConteoFrecuencia+0x22>
		incremento = incremento + 1;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <app_ConteoFrecuencia+0x64>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <app_ConteoFrecuencia+0x64>)
 80008c4:	801a      	strh	r2, [r3, #0]
	while(htim2.Instance->CNT < 1000)
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <app_ConteoFrecuencia+0x5c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008d0:	d3e1      	bcc.n	8000896 <app_ConteoFrecuencia+0xe>
	}
	return frecuencia = incremento;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <app_ConteoFrecuencia+0x64>)
 80008d4:	881a      	ldrh	r2, [r3, #0]
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <app_ConteoFrecuencia+0x68>)
 80008d8:	801a      	strh	r2, [r3, #0]
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <app_ConteoFrecuencia+0x68>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
	incremento = 0;

}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000003c 	.word	0x2000003c
 80008e8:	40010c00 	.word	0x40010c00
 80008ec:	20000036 	.word	0x20000036
 80008f0:	20000038 	.word	0x20000038

080008f4 <app_PromedioFrecuencia>:

uint16_t app_PromedioFrecuencia(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
	volatile uint16_t promedio = 0, suma = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	80fb      	strh	r3, [r7, #6]
 80008fe:	2300      	movs	r3, #0
 8000900:	80bb      	strh	r3, [r7, #4]
	volatile uint8_t contador =0;
 8000902:	2300      	movs	r3, #0
 8000904:	70fb      	strb	r3, [r7, #3]
	while(contador < N_muestras)
 8000906:	e00f      	b.n	8000928 <app_PromedioFrecuencia+0x34>
	{
		suma = suma + Frecuencia[contador];
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461a      	mov	r2, r3
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <app_PromedioFrecuencia+0x5c>)
 8000910:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	b29b      	uxth	r3, r3
 8000918:	4413      	add	r3, r2
 800091a:	b29b      	uxth	r3, r3
 800091c:	80bb      	strh	r3, [r7, #4]
		contador = contador + 1;
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	70fb      	strb	r3, [r7, #3]
	while(contador < N_muestras)
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b09      	cmp	r3, #9
 800092e:	d9eb      	bls.n	8000908 <app_PromedioFrecuencia+0x14>
	}
	promedio = suma/N_muestras;
 8000930:	88bb      	ldrh	r3, [r7, #4]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <app_PromedioFrecuencia+0x60>)
 8000936:	fba2 2303 	umull	r2, r3, r2, r3
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	b29b      	uxth	r3, r3
 800093e:	80fb      	strh	r3, [r7, #6]
	return promedio;
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	b29b      	uxth	r3, r3
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000007c 	.word	0x2000007c
 8000954:	cccccccd 	.word	0xcccccccd

08000958 <app_CalculoRPM>:

uint16_t app_CalculoRPM(uint16_t promedio)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t RPM = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	81fb      	strh	r3, [r7, #14]
	RPM = promedio*60;
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	461a      	mov	r2, r3
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	b29b      	uxth	r3, r3
 8000972:	81fb      	strh	r3, [r7, #14]
	return RPM;
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	b29b      	uxth	r3, r3
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
	...

08000984 <app_Tacometro>:

void app_Tacometro(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	volatile uint8_t boton_evento,division = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	71bb      	strb	r3, [r7, #6]
	boton_evento = app_Debounce();
 800098e:	f7ff fc0d 	bl	80001ac <app_Debounce>
 8000992:	4603      	mov	r3, r0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	71fb      	strb	r3, [r7, #7]
	switch(seleccion)
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <app_Tacometro+0x134>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b03      	cmp	r3, #3
 800099e:	f200 8086 	bhi.w	8000aae <app_Tacometro+0x12a>
 80009a2:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <app_Tacometro+0x24>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	080009b9 	.word	0x080009b9
 80009ac:	08000a01 	.word	0x08000a01
 80009b0:	08000a5d 	.word	0x08000a5d
 80009b4:	08000a93 	.word	0x08000a93
	{
		case Inicio:
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 80009b8:	4840      	ldr	r0, [pc, #256]	; (8000abc <app_Tacometro+0x138>)
 80009ba:	f001 f955 	bl	8001c68 <HAL_TIM_Base_Stop_IT>
			while(n < N_muestras)
 80009be:	e00c      	b.n	80009da <app_Tacometro+0x56>
			{
				Frecuencia[n]= 0;
 80009c0:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <app_Tacometro+0x13c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <app_Tacometro+0x140>)
 80009c8:	2100      	movs	r1, #0
 80009ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				n = n + 1;
 80009ce:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <app_Tacometro+0x13c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <app_Tacometro+0x13c>)
 80009d8:	701a      	strb	r2, [r3, #0]
			while(n < N_muestras)
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <app_Tacometro+0x13c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	d9ee      	bls.n	80009c0 <app_Tacometro+0x3c>
			}
			n = 0;
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <app_Tacometro+0x13c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
			division = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	71bb      	strb	r3, [r7, #6]
			Frec_prom = 0;
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <app_Tacometro+0x144>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	801a      	strh	r2, [r3, #0]
			RPM = 0;
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <app_Tacometro+0x148>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	801a      	strh	r2, [r3, #0]
			seleccion = Cuenta;
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <app_Tacometro+0x134>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
		}break;
 80009fe:	e056      	b.n	8000aae <app_Tacometro+0x12a>
		case Cuenta:
		{
			if(boton_evento == 1)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d103      	bne.n	8000a10 <app_Tacometro+0x8c>
			{
				seleccion = Inicio;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <app_Tacometro+0x134>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
				n = n + 1;
				division = division + 1;
				}
				seleccion = Calculo;
			}
		}break;
 8000a0e:	e04e      	b.n	8000aae <app_Tacometro+0x12a>
				HAL_TIM_Base_Start_IT(&htim2);
 8000a10:	482a      	ldr	r0, [pc, #168]	; (8000abc <app_Tacometro+0x138>)
 8000a12:	f001 f906 	bl	8001c22 <HAL_TIM_Base_Start_IT>
				while(n < N_muestras)
 8000a16:	e019      	b.n	8000a4c <app_Tacometro+0xc8>
				Frecuencia[n] = app_ConteoFrecuencia()/division;
 8000a18:	f7ff ff36 	bl	8000888 <app_ConteoFrecuencia>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	fb92 f1f3 	sdiv	r1, r2, r3
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <app_Tacometro+0x13c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	b289      	uxth	r1, r1
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <app_Tacometro+0x140>)
 8000a32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				n = n + 1;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <app_Tacometro+0x13c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <app_Tacometro+0x13c>)
 8000a40:	701a      	strb	r2, [r3, #0]
				division = division + 1;
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	71bb      	strb	r3, [r7, #6]
				while(n < N_muestras)
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <app_Tacometro+0x13c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b09      	cmp	r3, #9
 8000a52:	d9e1      	bls.n	8000a18 <app_Tacometro+0x94>
				seleccion = Calculo;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <app_Tacometro+0x134>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	701a      	strb	r2, [r3, #0]
		}break;
 8000a5a:	e028      	b.n	8000aae <app_Tacometro+0x12a>
		case Calculo:
		{
			if(boton_evento == 1)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d103      	bne.n	8000a6c <app_Tacometro+0xe8>
			{
				seleccion = Inicio;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <app_Tacometro+0x134>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
				Frec_prom = app_PromedioFrecuencia();
				RPM = app_CalculoRPM(Frec_prom);
				seleccion = Despliegue;
			}

		}break;
 8000a6a:	e020      	b.n	8000aae <app_Tacometro+0x12a>
				Frec_prom = app_PromedioFrecuencia();
 8000a6c:	f7ff ff42 	bl	80008f4 <app_PromedioFrecuencia>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <app_Tacometro+0x144>)
 8000a76:	801a      	strh	r2, [r3, #0]
				RPM = app_CalculoRPM(Frec_prom);
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <app_Tacometro+0x144>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff6b 	bl	8000958 <app_CalculoRPM>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <app_Tacometro+0x148>)
 8000a88:	801a      	strh	r2, [r3, #0]
				seleccion = Despliegue;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <app_Tacometro+0x134>)
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	701a      	strb	r2, [r3, #0]
		}break;
 8000a90:	e00d      	b.n	8000aae <app_Tacometro+0x12a>
		case Despliegue:
		{
			if(boton_evento == 1)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d103      	bne.n	8000aa2 <app_Tacometro+0x11e>
			{
				seleccion = Inicio;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <app_Tacometro+0x134>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				app_Despliegue(RPM);
			}
		}break;
 8000aa0:	e004      	b.n	8000aac <app_Tacometro+0x128>
				app_Despliegue(RPM);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <app_Tacometro+0x148>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fdc0 	bl	800062c <app_Despliegue>
		}break;
 8000aac:	bf00      	nop
		default:
			{

			}
	}
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000034 	.word	0x20000034
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	2000002f 	.word	0x2000002f
 8000ac4:	2000007c 	.word	0x2000007c
 8000ac8:	20000030 	.word	0x20000030
 8000acc:	20000032 	.word	0x20000032

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad4:	f000 f9a6 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad8:	f000 f807 	bl	8000aea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000adc:	f000 f896 	bl	8000c0c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ae0:	f000 f846 	bl	8000b70 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_Tacometro();
 8000ae4:	f7ff ff4e 	bl	8000984 <app_Tacometro>
 8000ae8:	e7fc      	b.n	8000ae4 <main+0x14>

08000aea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b090      	sub	sp, #64	; 0x40
 8000aee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	2228      	movs	r2, #40	; 0x28
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 faed 	bl	80020d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b20:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fc64 	bl	80013f8 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b36:	f000 f89d 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2101      	movs	r1, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fece 	bl	80018f8 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b62:	f000 f887 	bl	8000c74 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3740      	adds	r7, #64	; 0x40
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000b96:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000b9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb6:	4814      	ldr	r0, [pc, #80]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bb8:	f001 f808 	bl	8001bcc <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bc2:	f000 f857 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bd4:	f001 f872 	bl	8001cbc <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bde:	f000 f849 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_TIM2_Init+0x98>)
 8000bf0:	f001 fa0a 	bl	8002008 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f000 f83b 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000003c 	.word	0x2000003c

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_GPIO_Init+0x60>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <MX_GPIO_Init+0x60>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_GPIO_Init+0x60>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Segmento_A_Pin|Segmento_B_Pin|Segmento_C_Pin|Display_2_Pin 
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0x64>)
 8000c40:	f000 fbc1 	bl	80013c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Segmento_A_Pin Segmento_B_Pin Segmento_C_Pin Display_2_Pin 
                           Display_3_Pin Entrada_Pin Detener_Pin Segmento_D_Pin 
                           Segmento_E_Pin Segmento_F_Pin Segmento_G_Pin Segmento_H_Pin 
                           Display_0_Pin Display_1_Pin */
  GPIO_InitStruct.Pin = Segmento_A_Pin|Segmento_B_Pin|Segmento_C_Pin|Display_2_Pin 
 8000c44:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000c48:	60bb      	str	r3, [r7, #8]
                          |Display_3_Pin|Entrada_Pin|Detener_Pin|Segmento_D_Pin 
                          |Segmento_E_Pin|Segmento_F_Pin|Segmento_G_Pin|Segmento_H_Pin 
                          |Display_0_Pin|Display_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0x64>)
 8000c5e:	f000 fa49 	bl	80010f4 <HAL_GPIO_Init>

}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x5c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_MspInit+0x60>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_MspInit+0x60>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf4:	d10b      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_TIM_Base_MspInit+0x34>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_TIM_Base_MspInit+0x34>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_TIM_Base_MspInit+0x34>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <HardFault_Handler+0x4>

08000d2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <MemManage_Handler+0x4>

08000d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <BusFault_Handler+0x4>

08000d3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <UsageFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f8a2 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <SystemInit+0x5c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <SystemInit+0x5c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <SystemInit+0x5c>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4911      	ldr	r1, [pc, #68]	; (8000dcc <SystemInit+0x5c>)
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <SystemInit+0x60>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <SystemInit+0x5c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <SystemInit+0x5c>)
 8000d92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <SystemInit+0x5c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SystemInit+0x5c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <SystemInit+0x5c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <SystemInit+0x5c>)
 8000dae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000db2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SystemInit+0x5c>)
 8000db6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SystemInit+0x64>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	f8ff0000 	.word	0xf8ff0000
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dda:	e003      	b.n	8000de4 <LoopCopyDataInit>

08000ddc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000de0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000de2:	3104      	adds	r1, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000de8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dec:	d3f6      	bcc.n	8000ddc <CopyDataInit>
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000df0:	e002      	b.n	8000df8 <LoopFillZerobss>

08000df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000df4:	f842 3b04 	str.w	r3, [r2], #4

08000df8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dfc:	d3f9      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dfe:	f7ff ffb7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f001 f945 	bl	8002090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e06:	f7ff fe63 	bl	8000ad0 <main>
  bx lr
 8000e0a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e0c:	0800212c 	.word	0x0800212c
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e14:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e18:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000e1c:	20000094 	.word	0x20000094

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x28>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f929 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff ff1e 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f933 	bl	80010da <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f909 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000090 	.word	0x20000090

08000ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000090 	.word	0x20000090

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_Delay+0x40>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff90 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff49 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff5e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff90 	bl	8000fe4 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5f 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffb0 	bl	8001048 <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b08b      	sub	sp, #44	; 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e121      	b.n	800134c <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001108:	2201      	movs	r2, #1
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8110 	bne.w	8001346 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b12      	cmp	r3, #18
 800112c:	d034      	beq.n	8001198 <HAL_GPIO_Init+0xa4>
 800112e:	2b12      	cmp	r3, #18
 8001130:	d80d      	bhi.n	800114e <HAL_GPIO_Init+0x5a>
 8001132:	2b02      	cmp	r3, #2
 8001134:	d02b      	beq.n	800118e <HAL_GPIO_Init+0x9a>
 8001136:	2b02      	cmp	r3, #2
 8001138:	d804      	bhi.n	8001144 <HAL_GPIO_Init+0x50>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d031      	beq.n	80011a2 <HAL_GPIO_Init+0xae>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d01c      	beq.n	800117c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e048      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001144:	2b03      	cmp	r3, #3
 8001146:	d043      	beq.n	80011d0 <HAL_GPIO_Init+0xdc>
 8001148:	2b11      	cmp	r3, #17
 800114a:	d01b      	beq.n	8001184 <HAL_GPIO_Init+0x90>
          break;
 800114c:	e043      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800114e:	4a86      	ldr	r2, [pc, #536]	; (8001368 <HAL_GPIO_Init+0x274>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d026      	beq.n	80011a2 <HAL_GPIO_Init+0xae>
 8001154:	4a84      	ldr	r2, [pc, #528]	; (8001368 <HAL_GPIO_Init+0x274>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d806      	bhi.n	8001168 <HAL_GPIO_Init+0x74>
 800115a:	4a84      	ldr	r2, [pc, #528]	; (800136c <HAL_GPIO_Init+0x278>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d020      	beq.n	80011a2 <HAL_GPIO_Init+0xae>
 8001160:	4a83      	ldr	r2, [pc, #524]	; (8001370 <HAL_GPIO_Init+0x27c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01d      	beq.n	80011a2 <HAL_GPIO_Init+0xae>
          break;
 8001166:	e036      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001168:	4a82      	ldr	r2, [pc, #520]	; (8001374 <HAL_GPIO_Init+0x280>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0xae>
 800116e:	4a82      	ldr	r2, [pc, #520]	; (8001378 <HAL_GPIO_Init+0x284>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d016      	beq.n	80011a2 <HAL_GPIO_Init+0xae>
 8001174:	4a81      	ldr	r2, [pc, #516]	; (800137c <HAL_GPIO_Init+0x288>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0xae>
          break;
 800117a:	e02c      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e028      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	3304      	adds	r3, #4
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e023      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	3308      	adds	r3, #8
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e01e      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	330c      	adds	r3, #12
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e019      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011aa:	2304      	movs	r3, #4
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e012      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	611a      	str	r2, [r3, #16]
          break;
 80011c2:	e008      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c4:	2308      	movs	r3, #8
 80011c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	615a      	str	r2, [r3, #20]
          break;
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
          break;
 80011d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d801      	bhi.n	80011e0 <HAL_GPIO_Init+0xec>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	e001      	b.n	80011e4 <HAL_GPIO_Init+0xf0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3304      	adds	r3, #4
 80011e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2bff      	cmp	r3, #255	; 0xff
 80011ea:	d802      	bhi.n	80011f2 <HAL_GPIO_Init+0xfe>
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x104>
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3b08      	subs	r3, #8
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	210f      	movs	r1, #15
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	401a      	ands	r2, r3
 800120a:	6a39      	ldr	r1, [r7, #32]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	431a      	orrs	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8090 	beq.w	8001346 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <HAL_GPIO_Init+0x28c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a55      	ldr	r2, [pc, #340]	; (8001380 <HAL_GPIO_Init+0x28c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_GPIO_Init+0x28c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800123e:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x290>)
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x294>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x192>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a47      	ldr	r2, [pc, #284]	; (800138c <HAL_GPIO_Init+0x298>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x18e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a46      	ldr	r2, [pc, #280]	; (8001390 <HAL_GPIO_Init+0x29c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x18a>
 800127a:	2302      	movs	r3, #2
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x194>
 800127e:	2303      	movs	r3, #3
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x194>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x194>
 8001286:	2300      	movs	r3, #0
 8001288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001298:	493a      	ldr	r1, [pc, #232]	; (8001384 <HAL_GPIO_Init+0x290>)
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4937      	ldr	r1, [pc, #220]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
 80012be:	e006      	b.n	80012ce <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	4932      	ldr	r1, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	492d      	ldr	r1, [pc, #180]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
 80012e6:	e006      	b.n	80012f6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	4928      	ldr	r1, [pc, #160]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	4923      	ldr	r1, [pc, #140]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	43db      	mvns	r3, r3
 8001318:	491e      	ldr	r1, [pc, #120]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 800131a:	4013      	ands	r3, r2
 800131c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	4919      	ldr	r1, [pc, #100]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	60cb      	str	r3, [r1, #12]
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	43db      	mvns	r3, r3
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 8001342:	4013      	ands	r3, r2
 8001344:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	3301      	adds	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	f47f aed6 	bne.w	8001108 <HAL_GPIO_Init+0x14>
  }
}
 800135c:	bf00      	nop
 800135e:	372c      	adds	r7, #44	; 0x2c
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	10210000 	.word	0x10210000
 800136c:	10110000 	.word	0x10110000
 8001370:	10120000 	.word	0x10120000
 8001374:	10310000 	.word	0x10310000
 8001378:	10320000 	.word	0x10320000
 800137c:	10220000 	.word	0x10220000
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	40010800 	.word	0x40010800
 800138c:	40010c00 	.word	0x40010c00
 8001390:	40011000 	.word	0x40011000
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d6:	787b      	ldrb	r3, [r7, #1]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e2:	e003      	b.n	80013ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	041a      	lsls	r2, r3, #16
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e26c      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8087 	beq.w	8001526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001418:	4b92      	ldr	r3, [pc, #584]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	2b04      	cmp	r3, #4
 8001422:	d00c      	beq.n	800143e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001424:	4b8f      	ldr	r3, [pc, #572]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b08      	cmp	r3, #8
 800142e:	d112      	bne.n	8001456 <HAL_RCC_OscConfig+0x5e>
 8001430:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d10b      	bne.n	8001456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143e:	4b89      	ldr	r3, [pc, #548]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d06c      	beq.n	8001524 <HAL_RCC_OscConfig+0x12c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d168      	bne.n	8001524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e246      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x76>
 8001460:	4b80      	ldr	r3, [pc, #512]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a7f      	ldr	r2, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e02e      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a7a      	ldr	r2, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b78      	ldr	r3, [pc, #480]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a77      	ldr	r2, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0xbc>
 800149a:	4b72      	ldr	r3, [pc, #456]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a71      	ldr	r2, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6e      	ldr	r2, [pc, #440]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a6a      	ldr	r2, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b68      	ldr	r3, [pc, #416]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a67      	ldr	r2, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcfe 	bl	8000ed4 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcfa 	bl	8000ed4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1fa      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xe4>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcea 	bl	8000ed4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fce6 	bl	8000ed4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1e6      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x10c>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001532:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x18c>
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x176>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1ba      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4939      	ldr	r1, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fc9f 	bl	8000ed4 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fc9b 	bl	8000ed4 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e19b      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4927      	ldr	r1, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc7e 	bl	8000ed4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc7a 	bl	8000ed4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e17a      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d03a      	beq.n	800167c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d019      	beq.n	8001642 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_RCC_OscConfig+0x274>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fc5e 	bl	8000ed4 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fc5a 	bl	8000ed4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e15a      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f000 faa8 	bl	8001b90 <RCC_Delay>
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_RCC_OscConfig+0x274>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff fc44 	bl	8000ed4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164e:	e00f      	b.n	8001670 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fc40 	bl	8000ed4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d908      	bls.n	8001670 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e140      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	42420000 	.word	0x42420000
 800166c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b9e      	ldr	r3, [pc, #632]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e9      	bne.n	8001650 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a6 	beq.w	80017d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b97      	ldr	r3, [pc, #604]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b94      	ldr	r3, [pc, #592]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a93      	ldr	r2, [pc, #588]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b91      	ldr	r3, [pc, #580]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b8e      	ldr	r3, [pc, #568]	; (80018f0 <HAL_RCC_OscConfig+0x4f8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x4f8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a8a      	ldr	r2, [pc, #552]	; (80018f0 <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fc01 	bl	8000ed4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff fbfd 	bl	8000ed4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0fd      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x4f8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x312>
 80016fc:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e02d      	b.n	8001766 <HAL_RCC_OscConfig+0x36e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x334>
 8001712:	4b76      	ldr	r3, [pc, #472]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a75      	ldr	r2, [pc, #468]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	4b73      	ldr	r3, [pc, #460]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a72      	ldr	r2, [pc, #456]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	e01c      	b.n	8001766 <HAL_RCC_OscConfig+0x36e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b05      	cmp	r3, #5
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x356>
 8001734:	4b6d      	ldr	r3, [pc, #436]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a6c      	ldr	r2, [pc, #432]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a69      	ldr	r2, [pc, #420]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0x36e>
 800174e:	4b67      	ldr	r3, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a66      	ldr	r2, [pc, #408]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	4b64      	ldr	r3, [pc, #400]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a63      	ldr	r2, [pc, #396]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d015      	beq.n	800179a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fbb1 	bl	8000ed4 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff fbad 	bl	8000ed4 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0ab      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	4b57      	ldr	r3, [pc, #348]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ee      	beq.n	8001776 <HAL_RCC_OscConfig+0x37e>
 8001798:	e014      	b.n	80017c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff fb9b 	bl	8000ed4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff fb97 	bl	8000ed4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e095      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ee      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d105      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ca:	4b48      	ldr	r3, [pc, #288]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a47      	ldr	r2, [pc, #284]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8081 	beq.w	80018e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	4b42      	ldr	r3, [pc, #264]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d061      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d146      	bne.n	8001882 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f4:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_RCC_OscConfig+0x4fc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb6b 	bl	8000ed4 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff fb67 	bl	8000ed4 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e067      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001828:	d108      	bne.n	800183c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	492d      	ldr	r1, [pc, #180]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a19      	ldr	r1, [r3, #32]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	430b      	orrs	r3, r1
 800184e:	4927      	ldr	r1, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x4fc>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fb3b 	bl	8000ed4 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001862:	f7ff fb37 	bl	8000ed4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e037      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x46a>
 8001880:	e02f      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_RCC_OscConfig+0x4fc>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fb24 	bl	8000ed4 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fb20 	bl	8000ed4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e020      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x498>
 80018ae:	e018      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e013      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_OscConfig+0x4f4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40007000 	.word	0x40007000
 80018f4:	42420060 	.word	0x42420060

080018f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0d0      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4965      	ldr	r1, [pc, #404]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0b8      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001954:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800195e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a52      	ldr	r2, [pc, #328]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001976:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	494d      	ldr	r1, [pc, #308]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d040      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e07f      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e073      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06b      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4936      	ldr	r1, [pc, #216]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff fa74 	bl	8000ed4 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff fa70 	bl	8000ed4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e053      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d210      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4922      	ldr	r1, [pc, #136]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e032      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4916      	ldr	r1, [pc, #88]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	490e      	ldr	r1, [pc, #56]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a86:	f000 f821 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f9d2 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08002114 	.word	0x08002114
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b490      	push	{r4, r7}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ad4:	1d3c      	adds	r4, r7, #4
 8001ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x40>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x46>
 8001b0a:	e02d      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b0e:	623b      	str	r3, [r7, #32]
      break;
 8001b10:	e02d      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b1e:	4413      	add	r3, r2
 8001b20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	0c5b      	lsrs	r3, r3, #17
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b3e:	4413      	add	r3, r2
 8001b40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b4a:	fb02 f203 	mul.w	r2, r2, r3
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	e004      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	623b      	str	r3, [r7, #32]
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b6a:	623b      	str	r3, [r7, #32]
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc90      	pop	{r4, r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	08002100 	.word	0x08002100
 8001b80:	08002110 	.word	0x08002110
 8001b84:	40021000 	.word	0x40021000
 8001b88:	007a1200 	.word	0x007a1200
 8001b8c:	003d0900 	.word	0x003d0900

08001b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <RCC_Delay+0x34>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <RCC_Delay+0x38>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bac:	bf00      	nop
  }
  while (Delay --);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	60fa      	str	r2, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f9      	bne.n	8001bac <RCC_Delay+0x1c>
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	10624dd3 	.word	0x10624dd3

08001bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e01d      	b.n	8001c1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff f876 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 f90e 	bl	8001e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d007      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10f      	bne.n	8001cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a1a      	ldr	r2, [r3, #32]
 8001c96:	f240 4344 	movw	r3, #1092	; 0x444
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_TIM_ConfigClockSource+0x18>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e0a6      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x166>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b40      	cmp	r3, #64	; 0x40
 8001d0a:	d067      	beq.n	8001ddc <HAL_TIM_ConfigClockSource+0x120>
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	d80b      	bhi.n	8001d28 <HAL_TIM_ConfigClockSource+0x6c>
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d073      	beq.n	8001dfc <HAL_TIM_ConfigClockSource+0x140>
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d802      	bhi.n	8001d1e <HAL_TIM_ConfigClockSource+0x62>
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d06f      	beq.n	8001dfc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d1c:	e078      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d06c      	beq.n	8001dfc <HAL_TIM_ConfigClockSource+0x140>
 8001d22:	2b30      	cmp	r3, #48	; 0x30
 8001d24:	d06a      	beq.n	8001dfc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001d26:	e073      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d28:	2b70      	cmp	r3, #112	; 0x70
 8001d2a:	d00d      	beq.n	8001d48 <HAL_TIM_ConfigClockSource+0x8c>
 8001d2c:	2b70      	cmp	r3, #112	; 0x70
 8001d2e:	d804      	bhi.n	8001d3a <HAL_TIM_ConfigClockSource+0x7e>
 8001d30:	2b50      	cmp	r3, #80	; 0x50
 8001d32:	d033      	beq.n	8001d9c <HAL_TIM_ConfigClockSource+0xe0>
 8001d34:	2b60      	cmp	r3, #96	; 0x60
 8001d36:	d041      	beq.n	8001dbc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001d38:	e06a      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3e:	d066      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x152>
 8001d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d44:	d017      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001d46:	e063      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6899      	ldr	r1, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f000 f937 	bl	8001fca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	609a      	str	r2, [r3, #8]
      break;
 8001d74:	e04c      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f000 f920 	bl	8001fca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d98:	609a      	str	r2, [r3, #8]
      break;
 8001d9a:	e039      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f000 f897 	bl	8001edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2150      	movs	r1, #80	; 0x50
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f8ee 	bl	8001f96 <TIM_ITRx_SetConfig>
      break;
 8001dba:	e029      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f000 f8b5 	bl	8001f38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2160      	movs	r1, #96	; 0x60
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f8de 	bl	8001f96 <TIM_ITRx_SetConfig>
      break;
 8001dda:	e019      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	461a      	mov	r2, r3
 8001dea:	f000 f877 	bl	8001edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8ce 	bl	8001f96 <TIM_ITRx_SetConfig>
      break;
 8001dfa:	e009      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 f8c5 	bl	8001f96 <TIM_ITRx_SetConfig>
      break;
 8001e0c:	e000      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <TIM_Base_SetConfig+0xa8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <TIM_Base_SetConfig+0x28>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d003      	beq.n	8001e54 <TIM_Base_SetConfig+0x28>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <TIM_Base_SetConfig+0xac>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d108      	bne.n	8001e66 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <TIM_Base_SetConfig+0xa8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <TIM_Base_SetConfig+0x52>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e74:	d003      	beq.n	8001e7e <TIM_Base_SetConfig+0x52>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <TIM_Base_SetConfig+0xac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d108      	bne.n	8001e90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <TIM_Base_SetConfig+0xa8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d103      	bne.n	8001ec4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	615a      	str	r2, [r3, #20]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40000400 	.word	0x40000400

08001edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	f023 0201 	bic.w	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f023 030a 	bic.w	r3, r3, #10
 8001f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	621a      	str	r2, [r3, #32]
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f023 0210 	bic.w	r2, r3, #16
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	031b      	lsls	r3, r3, #12
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	621a      	str	r2, [r3, #32]
}
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f043 0307 	orr.w	r3, r3, #7
 8001fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	021a      	lsls	r2, r3, #8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	609a      	str	r2, [r3, #8]
}
 8001ffe:	bf00      	nop
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800201c:	2302      	movs	r3, #2
 800201e:	e032      	b.n	8002086 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002058:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4313      	orrs	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <__libc_init_array>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	2500      	movs	r5, #0
 8002094:	4e0c      	ldr	r6, [pc, #48]	; (80020c8 <__libc_init_array+0x38>)
 8002096:	4c0d      	ldr	r4, [pc, #52]	; (80020cc <__libc_init_array+0x3c>)
 8002098:	1ba4      	subs	r4, r4, r6
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	42a5      	cmp	r5, r4
 800209e:	d109      	bne.n	80020b4 <__libc_init_array+0x24>
 80020a0:	f000 f822 	bl	80020e8 <_init>
 80020a4:	2500      	movs	r5, #0
 80020a6:	4e0a      	ldr	r6, [pc, #40]	; (80020d0 <__libc_init_array+0x40>)
 80020a8:	4c0a      	ldr	r4, [pc, #40]	; (80020d4 <__libc_init_array+0x44>)
 80020aa:	1ba4      	subs	r4, r4, r6
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	42a5      	cmp	r5, r4
 80020b0:	d105      	bne.n	80020be <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b8:	4798      	blx	r3
 80020ba:	3501      	adds	r5, #1
 80020bc:	e7ee      	b.n	800209c <__libc_init_array+0xc>
 80020be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020c2:	4798      	blx	r3
 80020c4:	3501      	adds	r5, #1
 80020c6:	e7f2      	b.n	80020ae <__libc_init_array+0x1e>
 80020c8:	08002124 	.word	0x08002124
 80020cc:	08002124 	.word	0x08002124
 80020d0:	08002124 	.word	0x08002124
 80020d4:	08002128 	.word	0x08002128

080020d8 <memset>:
 80020d8:	4603      	mov	r3, r0
 80020da:	4402      	add	r2, r0
 80020dc:	4293      	cmp	r3, r2
 80020de:	d100      	bne.n	80020e2 <memset+0xa>
 80020e0:	4770      	bx	lr
 80020e2:	f803 1b01 	strb.w	r1, [r3], #1
 80020e6:	e7f9      	b.n	80020dc <memset+0x4>

080020e8 <_init>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	bf00      	nop
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr

080020f4 <_fini>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr
